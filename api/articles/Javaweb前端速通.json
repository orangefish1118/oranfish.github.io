{"title":"Javaweb前端速通","uid":"186ee7c09be0c58bb704d8a02925d69c","slug":"Javaweb前端速通","date":"2024-02-05T12:56:12.000Z","updated":"2024-02-07T13:12:26.761Z","comments":true,"path":"api/articles/Javaweb前端速通.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/12.jpg","content":"<h1 id=\"Javaweb前端速通\"><a href=\"#Javaweb前端速通\" class=\"headerlink\" title=\"Javaweb前端速通\"></a>Javaweb前端速通</h1><h2 id=\"1-前端开发介绍\"><a href=\"#1-前端开发介绍\" class=\"headerlink\" title=\"1.前端开发介绍\"></a>1.前端开发介绍</h2><p>前端开发，主要的职责就是将数据以好看的样式呈现出来。说白了，就是开发网页程序。</p>\n<h2 id=\"2-web标准\"><a href=\"#2-web标准\" class=\"headerlink\" title=\"2.web标准\"></a>2.web标准</h2><p><strong>Web标准</strong>也称为<strong>网页标准</strong>，由一系列的标准组成，大部分由W3C（ World Wide Web Consortium，万维网联盟）负责制定。由三个组成部分：</p>\n<ul>\n<li><p>HTML：负责网页的结构（页面元素和内容）。</p>\n</li>\n<li><p>CSS：负责网页的表现（页面元素的外观、位置等页面样式，如：颜色、大小等）。</p>\n</li>\n<li><p>JavaScript：负责网页的行为（交互效果）。</p>\n</li>\n</ul>\n<p>随着技术的发展，我们为了更加快速的开发，现在也出现了很多前端开发的高级技术。例如：vue、elementui、Axios等等。</p>\n<h2 id=\"3-HTML-CSS\"><a href=\"#3-HTML-CSS\" class=\"headerlink\" title=\"3.HTML&amp;CSS\"></a>3.HTML&amp;CSS</h2><p><strong>HTML&amp;CSS基本学习同前端知识点总结一文</strong></p>\n<p>**HTML: **HyperText Markup Language，超文本标记语言。</p>\n<ul>\n<li><p>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</p>\n</li>\n<li><p>标记语言：由标签构成的语言</p>\n</li>\n</ul>\n<p><strong>CSS:</strong> Cascading Style Sheet，层叠样式表，用于控制页面的样式（表现）。</p>\n<p><strong>盒子模型</strong>：</p>\n<ul>\n<li>盒子：页面中所有的元素（标签），都可以看做是一个 盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</li>\n<li>盒子模型组成：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）</li>\n</ul>\n<h2 id=\"4-文档查阅\"><a href=\"#4-文档查阅\" class=\"headerlink\" title=\"4.文档查阅\"></a>4.文档查阅</h2><p>文档地址: <a href=\"https://www.w3school.com.cn/index.html\">https://www.w3school.com.cn/index.html</a></p>\n<h2 id=\"5-JavaScript\"><a href=\"#5-JavaScript\" class=\"headerlink\" title=\"5.JavaScript\"></a>5.JavaScript</h2><p>通过<strong>代码&#x2F;js效果演示</strong>提供资料进行效果演示，通过浏览器打开，我们点击主题5按钮，页面的主题发生了变化，所以js可以让我们的页面更加的智能，让页面和用户进行交互。</p>\n<h3 id=\"5-1-引入方式\"><a href=\"#5-1-引入方式\" class=\"headerlink\" title=\"5.1 引入方式\"></a>5.1 引入方式</h3><p><strong>第一种方式：</strong>内部脚本，将JS代码定义在HTML页面中</p>\n<ul>\n<li>JavaScript代码必须位于&lt;script&gt;&lt;&#x2F;script&gt;标签之间</li>\n<li>在HTML文档中，可以在任意地方，放置任意数量的&lt;script&gt;</li>\n<li>一般会把脚本置于&lt;body&gt;元素的底部，可改善显示速度</li>\n</ul>\n<p><strong>第二种方式：</strong>外部脚本将， JS代码定义在外部 JS文件中，然后引入到 HTML页面中</p>\n<ul>\n<li>外部JS文件中，只包含JS代码，不包含&amp;ltscript&gt;标签</li>\n<li>引入外部js的&lt;script&gt;标签，必须是双标签</li>\n</ul>\n<h3 id=\"5-2-语法\"><a href=\"#5-2-语法\" class=\"headerlink\" title=\"5.2 语法\"></a>5.2 语法</h3><p><strong>基础语法：</strong></p>\n<ul>\n<li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的</p>\n</li>\n<li><p>每行结尾的分号可有可无</p>\n</li>\n<li><p>大括号表示代码块</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>api</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>window.alert()</td>\n<td>警告框</td>\n</tr>\n<tr>\n<td>document.write()</td>\n<td>在HTML 输出内容</td>\n</tr>\n<tr>\n<td>console.log()</td>\n<td>写入浏览器控制台</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var</td>\n<td>早期ECMAScript5中用于变量声明的关键字</td>\n</tr>\n<tr>\n<td>let</td>\n<td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td>\n</tr>\n<tr>\n<td>const</td>\n<td>声明常量的，常量一旦声明，不能修改</td>\n</tr>\n</tbody></table>\n<ul>\n<li>JavaScript 是一门弱类型语言，变量可以存放不同类型的值 。</li>\n<li>变量名需要遵循如下规则：<ul>\n<li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li>\n<li>数字不能开头</li>\n<li>建议使用驼峰命名</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>number</td>\n<td>数字（整数、小数、NaN(Not a Number)）</td>\n</tr>\n<tr>\n<td>string</td>\n<td>字符串，单双引皆可</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>布尔。true，false</td>\n</tr>\n<tr>\n<td>null</td>\n<td>对象为空</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>当声明的变量未初始化时，该变量的默认值是 undefined</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>运算规则</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>算术运算符</td>\n<td>+ , - , * , &#x2F; , % , ++ , –</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , %&#x3D;</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>&gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; , !&#x3D; , &#x3D;&#x3D; , &#x3D;&#x3D;&#x3D;   注意     &#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>&amp;&amp; , || , !</td>\n</tr>\n<tr>\n<td>三元运算符</td>\n<td>条件表达式 ? true_value: false_value</td>\n</tr>\n</tbody></table>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">函数名</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">参数1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">参数2..</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #BABED8\">要执行的代码</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>因为JavaScript是弱数据类型的语言，所以有如下几点需要注意：</p>\n<ul>\n<li>形式参数不需要声明类型，并且JavaScript中不管什么类型都是let或者var去声明，加上也没有意义。</li>\n<li>返回值也不需要声明类型，直接return即可</li>\n</ul>\n<p>第二种可以通过let去定义函数的名字，具体格式如下：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> functionName </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">参数1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">参数2..</span><span style=\"color: #89DDFF\">)&#123;</span><span style=\"color: #F07178\">   </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//要执行的代码</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>接下来我们按照上述的格式，修改代码如下：只需要将第一种定义方式注释掉，替换成第二种定义方式即可，函数的调用不变</p>\n<h3 id=\"5-3-JS对象\"><a href=\"#5-3-JS对象\" class=\"headerlink\" title=\"5.3 JS对象\"></a>5.3 JS对象</h3><p><strong>基本对象：Array对象</strong></p>\n<p>Array对象时用来定义数组的。常用语法格式有如下2种：</p>\n<p>方式1：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> 变量名 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Array</span><span style=\"color: #BABED8\">(元素列表)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span></span></code></pre></div><p>方式2：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> 变量名 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> [ 元素列表 ]</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span></span></code></pre></div><p>与java中不一样的是，JavaScript中数组相当于java中的集合，数组的长度是可以变化的。而且JavaScript是弱数据类型的语言，所以数组中可以存储任意数据类型的值。接下来我们通过代码来演示上述特点。</p>\n<p>属性：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">length</td>\n<td align=\"left\">设置或返回数组中元素的数量。</td>\n</tr>\n</tbody></table>\n<p>方法：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">forEach()</td>\n<td align=\"left\">遍历数组中的每个有值得元素，并调用一次传入的函数</td>\n</tr>\n<tr>\n<td align=\"left\">push()</td>\n<td align=\"left\">将新元素添加到数组的末尾，并返回新的长度</td>\n</tr>\n<tr>\n<td align=\"left\">splice()</td>\n<td align=\"left\">从数组中删除元素</td>\n</tr>\n</tbody></table>\n<p><strong>forEach()函数</strong></p>\n<p>首先我们学习forEach()方法，顾名思义，这是用来遍历的，那么遍历做什么事呢？所以这个方法的参数，需要传递一个函数，而且这个函数接受一个参数，就是遍历时数组的值。修改之前的遍历代码如下：</p>\n<p><strong>push()函数</strong></p>\n<p>push()函数是用于向数组的末尾添加元素的，其中函数的参数就是需要添加的元素，编写如下代码：向数组的末尾添加3个元素</p>\n<p><strong>splice()函数</strong></p>\n<p>splice()函数用来数组中的元素，函数中填入2个参数。</p>\n<p>参数1：表示从哪个索引位置删除</p>\n<p>参数2：表示删除元素的个数</p>\n<p><strong>String对象</strong></p>\n<p>String对象的创建方式有2种：</p>\n<p>方式1：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> 变量名 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">String</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">…</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">) </span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//方式一</span></span></code></pre></div><p>方式2：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> 变量名 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">…</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//方式二</span></span></code></pre></div><p>String对象也提供了一些常用的属性和方法，如下表格所示：</p>\n<p>属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>length</td>\n<td>字符串的长度。</td>\n</tr>\n</tbody></table>\n<p>方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>charAt()</td>\n<td>返回在指定位置的字符。</td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td>检索字符串。</td>\n</tr>\n<tr>\n<td>trim()</td>\n<td>去除字符串两边的空格</td>\n</tr>\n<tr>\n<td>substring()</td>\n<td>提取字符串中两个指定的索引号之间的字符。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><strong>charAt()函数：</strong></p>\n<p>charAt()函数用于返回在指定索引位置的字符，函数的参数就是索引。</p>\n</li>\n<li><p><strong>indexOf()函数：</strong></p>\n<p>indexOf()函数用于检索指定内容在字符串中的索引位置的，返回值是索引，参数是指定的内容。</p>\n</li>\n<li><p><strong>trim()函数：</strong></p>\n<p>trim()函数用于去除字符串两边的空格的。</p>\n</li>\n<li><p><strong>substring()函数：</strong></p>\n<p>substring()函数用于截取字符串的，函数有2个参数。</p>\n<p>参数1：表示从那个索引位置开始截取。包含</p>\n<p>参数2：表示到那个索引位置结束。不包含</p>\n</li>\n</ul>\n<p><strong>JSON对象</strong></p>\n<p>在 JavaScript 中自定义对象特别简单，其语法格式如下：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> 对象名 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">属性名1</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> 属性值1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">属性名2</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> 属性值2</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">属性名3</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> 属性值3</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">函数名称</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">形参列表</span><span style=\"color: #89DDFF\">)&#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"></span></code></pre></div><p>我们可以通过如下语法调用属性：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">对象名</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">属性名</span></span></code></pre></div><p>通过如下语法调用函数：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">对象名</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">函数名</span><span style=\"color: #BABED8\">()</span></span></code></pre></div><p>JSON对象：<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript对象标记法。是通过JavaScript标记法书写的文本。其格式如下：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">key</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #F07178\">:</span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">key</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #F07178\">:</span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">key</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #F07178\">:</span><span style=\"color: #BABED8\">value</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>其中，<strong>key必须使用引号并且是双引号标记，value可以是任意数据类型。</strong></p>\n<p>那么json这种数据格式的文本到底应用在企业开发的什么地方呢？– 经常用来作为前后台交互的数据载体</p>\n<p>前后台交互时，我们需要传输数据，但是java中的对象我们该怎么去描述呢？我们可以使用如图所示的xml格式，可以清晰的描述java中需要传递给前端的java对象。</p>\n<p>但是xml格式存在如下问题：</p>\n<ul>\n<li>标签需要编写双份，占用带宽，浪费资源</li>\n<li>解析繁琐</li>\n</ul>\n<p>所以我们可以使用json来替代。</p>\n<p><strong>BOM对象</strong></p>\n<p>BOM的全称是Browser Object Model,翻译过来是浏览器对象模型。也就是JavaScript将浏览器的各个组成部分封装成了对象。我们要操作浏览器的部分功能，可以通过操作BOM对象的相关属性或者函数来完成。</p>\n<p>BOM中提供了如下5个对象：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">对象名称</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Window</td>\n<td align=\"left\">浏览器窗口对象</td>\n</tr>\n<tr>\n<td align=\"left\">Navigator</td>\n<td align=\"left\">浏览器对象</td>\n</tr>\n<tr>\n<td align=\"left\">Screen</td>\n<td align=\"left\">屏幕对象</td>\n</tr>\n<tr>\n<td align=\"left\">History</td>\n<td align=\"left\">历史记录对象</td>\n</tr>\n<tr>\n<td align=\"left\">Location</td>\n<td align=\"left\">d地址栏对象</td>\n</tr>\n</tbody></table>\n<p><strong>1.Window对象</strong> </p>\n<p>window对象指的是浏览器窗口对象，是JavaScript的全部对象，所以对于window对象，我们可以直接使用，并且对于window对象的方法和属性，我们可以省略window.</p>\n<p>window对象提供了获取其他BOM对象的属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>history</td>\n<td>用于获取history对象</td>\n</tr>\n<tr>\n<td>location</td>\n<td>用于获取location对象</td>\n</tr>\n<tr>\n<td>Navigator</td>\n<td>用于获取Navigator对象</td>\n</tr>\n<tr>\n<td>Screen</td>\n<td>用于获取Screen对象</td>\n</tr>\n</tbody></table>\n<p>window也提供了一些常用的函数，如下表格所示：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alert()</td>\n<td>显示带有一段消息和一个确认按钮的警告框。</td>\n</tr>\n<tr>\n<td>comfirm()</td>\n<td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td>\n</tr>\n<tr>\n<td>setInterval()</td>\n<td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td>\n</tr>\n<tr>\n<td>setTimeout()</td>\n<td>在指定的毫秒数后调用函数或计算表达式。</td>\n</tr>\n</tbody></table>\n<p>setInterval(fn,毫秒值)：定时器，用于周期性的执行某个功能，并且是<strong>循环执行</strong>。该函数需要传递2个参数：</p>\n<p>fn:函数，需要周期性执行的功能代码</p>\n<p>毫秒值：间隔时间</p>\n<p>setTimeout(fn,毫秒值) ：定时器，只会在一段时间后<strong>执行一次功能</strong>。参数和上述setInterval一致</p>\n<p><strong>2.Location对象</strong></p>\n<p>location是指代浏览器的地址栏对象，对于这个对象，我们常用的是href属性，用于获取或者设置浏览器的地址信息。</p>\n<p><strong>DOM对象</strong></p>\n<p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。</p>\n<p>DOM 其实我们并不陌生，之前在学习 XML 就接触过，只不过 XML 文档中的标签需要我们写代码解析，而 HTML 文档是浏览器解析。封装的对象分为</p>\n<ul>\n<li>Document：整个文档对象</li>\n<li>Element：元素对象</li>\n<li>Attribute：属性对象</li>\n<li>Text：文本对象</li>\n<li>Comment：注释对象</li>\n</ul>\n<p>那么我们学习DOM技术有什么用呢？主要作用如下：</p>\n<ul>\n<li>改变 HTML 元素的内容</li>\n<li>改变 HTML 元素的样式（CSS）</li>\n<li>对 HTML DOM 事件作出反应</li>\n<li>添加和删除 HTML 元素</li>\n</ul>\n<p>HTML中的Element对象可以通过Document对象获取，而Document对象是通过window对象获取的。document对象提供的用于获取Element元素对象的api如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>document.getElementById()</td>\n<td>根据id属性值获取，返回单个Element对象</td>\n</tr>\n<tr>\n<td>document.getElementsByTagName()</td>\n<td>根据标签名称获取，返回Element对象数组</td>\n</tr>\n<tr>\n<td>document.getElementsByName()</td>\n<td>根据name属性值获取，返回Element对象数组</td>\n</tr>\n<tr>\n<td>document.getElementsByClassName()</td>\n<td>根据class属性值获取，返回Element对象数组</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-4-JS对象\"><a href=\"#5-4-JS对象\" class=\"headerlink\" title=\"5.4 JS对象\"></a>5.4 JS对象</h3><p>什么是事件呢？HTML事件是发生在HTML元素上的 “事情”，例如：</p>\n<ul>\n<li>按钮被点击</li>\n<li>鼠标移到元素上</li>\n<li>输入框失去焦点</li>\n<li>……..</li>\n</ul>\n<p><strong>事件绑定</strong> </p>\n<p>JavaScript对于事件的绑定提供了2种方式：</p>\n<ul>\n<li><p>方式1：通过html标签中的事件属性进行绑定</p>\n<p>例如一个按钮，我们对于按钮可以绑定单机事件，可以借助标签的onclick属性，属性值指向一个函数。</p>\n</li>\n<li><p>方式2：通过DOM中Element元素的事件属性进行绑定</p>\n<p>依据我们学习过得DOM的知识点，我们知道html中的标签被加载成element对象，所以我们也可以通过element对象的属性来操作标签的属性。</p>\n</li>\n</ul>\n<p><strong>需要注意的是：事件绑定的函数，只有在事件被触发时，函数才会被调用。</strong></p>\n<p><strong>常见事件</strong></p>\n<table>\n<thead>\n<tr>\n<th>事件属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onclick</td>\n<td>鼠标单击事件</td>\n</tr>\n<tr>\n<td>onblur</td>\n<td>元素失去焦点</td>\n</tr>\n<tr>\n<td>onfocus</td>\n<td>元素获得焦点</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>某个页面或图像被完成加载</td>\n</tr>\n<tr>\n<td>onsubmit</td>\n<td>当表单提交时触发该事件</td>\n</tr>\n<tr>\n<td>onmouseover</td>\n<td>鼠标被移到某元素之上</td>\n</tr>\n<tr>\n<td>onmouseout</td>\n<td>鼠标从某元素移开</td>\n</tr>\n</tbody></table>\n<h2 id=\"6-Vue\"><a href=\"#6-Vue\" class=\"headerlink\" title=\"6. Vue\"></a>6. Vue</h2><p>一个完整的html页面包括了视图和数据，数据是通过请求 从后台获取的，那么意味着我们需要将后台获取到的数据呈现到页面上，很明显， 这就需要我们使用DOM操作。正因为这种开发流程，所以我们引入了一种叫做<strong>MVVM(Model-View-ViewModel)的前端开发思想</strong>，即让我们开发者更加关注数据，而非数据绑定到视图这种机械化的操作。</p>\n<p>MVVM:其实是Model-View-ViewModel的缩写，有3个单词，具体释义如下：</p>\n<ul>\n<li>Model: 数据模型，特指前端中通过请求从后台获取的数据</li>\n<li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据</li>\n<li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上</li>\n</ul>\n<p>Vue.js（读音 &#x2F;vjuː&#x2F;, 类似于 <strong>view</strong>） 是一套构建用户界面的 <strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。Vue.js 的目标是通过尽可能简单的 API 实现<strong>响应的数据绑定</strong>和<strong>组合的视图组件</strong>。</p>\n<p>框架即是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。基于框架进行开发，更加快捷、更加高效。</p>\n<p>在创建vue对象时，有几个常用的属性：</p>\n<ul>\n<li>el:  用来指定哪儿些标签受 Vue 管理。 该属性取值 <code>#app</code> 中的 <code>app</code> 需要是受管理的标签的id属性值</li>\n<li>data: 用来定义数据模型</li>\n<li>methods: 用来定义函数。这个我们在后面就会用到</li>\n</ul>\n<h3 id=\"6-1-常用指令\"><a href=\"#6-1-常用指令\" class=\"headerlink\" title=\"6.1 常用指令\"></a>6.1 常用指令</h3><p>在vue中，通过大量的指令来实现数据绑定到视图的，所以接下来我们需要学习vue的常用指令，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th><strong>指令</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>v-bind</td>\n<td>为HTML标签绑定属性值，如设置  href , css样式等</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>在表单元素上创建双向数据绑定</td>\n</tr>\n<tr>\n<td>v-on</td>\n<td>为HTML标签绑定事件</td>\n</tr>\n<tr>\n<td>v-if</td>\n<td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td>\n</tr>\n<tr>\n<td>v-else</td>\n<td></td>\n</tr>\n<tr>\n<td>v-else-if</td>\n<td></td>\n</tr>\n<tr>\n<td>v-show</td>\n<td>根据条件展示某元素，区别在于切换的是display属性的值</td>\n</tr>\n<tr>\n<td>v-for</td>\n<td>列表渲染，遍历容器的元素或者对象的属性</td>\n</tr>\n</tbody></table>\n<p>v-bind:  为HTML标签绑定属性值，如设置  href , css样式等。当vue对象中的数据模型发生变化时，标签的属性值会随之发生变化。</p>\n<p>v-model： 在表单元素上创建双向数据绑定。什么是双向？</p>\n<ul>\n<li>vue对象的data属性中的数据变化，视图展示会一起变化</li>\n<li>视图数据发生变化，vue对象的data属性中的数据也会随着变化。</li>\n</ul>\n<p><strong>双向绑定的作用：可以获取表单的数据的值，然后提交给服务器</strong></p>\n<p>v-on: 用来给html标签绑定事件的。<strong>需要注意的是如下2点</strong>：</p>\n<ul>\n<li>v-on语法给标签的事件绑定的函数，必须是vue对象种声明的函数</li>\n<li>v-on语法绑定事件时，事件名相比较js中的事件名，没有on</li>\n</ul>\n<h3 id=\"6-2-生命周期\"><a href=\"#6-2-生命周期\" class=\"headerlink\" title=\"6.2 生命周期\"></a>6.2 生命周期</h3><p>vue的生命周期：指的是vue对象从创建到销毁的过程。vue的生命周期包含8个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也被称为钩子方法。其完整的生命周期如下图所示：</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>阶段周期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>beforeCreate</td>\n<td>创建前</td>\n</tr>\n<tr>\n<td>created</td>\n<td>创建后</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>挂载前</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>挂载完成</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>更新前</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>更新后</td>\n</tr>\n<tr>\n<td>beforeDestroy</td>\n<td>销毁前</td>\n</tr>\n<tr>\n<td>destroyed</td>\n<td>销毁后</td>\n</tr>\n</tbody></table>\n<p>mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。<strong>以后我们一般用于页面初始化自动的ajax请求后台数据</strong></p>\n","text":"Javaweb前端知识点总结，包含HTML、CSS、JavaScript、Vue。...","permalink":"/post/Javaweb前端速通","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"Study","slug":"Study","count":18,"path":"api/categories/Study.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Javaweb%E5%89%8D%E7%AB%AF%E9%80%9F%E9%80%9A\"><span class=\"toc-text\">Javaweb前端速通</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1.前端开发介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-web%E6%A0%87%E5%87%86\"><span class=\"toc-text\">2.web标准</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-HTML-CSS\"><span class=\"toc-text\">3.HTML&amp;CSS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E6%A1%A3%E6%9F%A5%E9%98%85\"><span class=\"toc-text\">4.文档查阅</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-JavaScript\"><span class=\"toc-text\">5.JavaScript</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">5.1 引入方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">5.2 语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-JS%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">5.3 JS对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-JS%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">5.4 JS对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Vue\"><span class=\"toc-text\">6. Vue</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">6.1 常用指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">6.2 生命周期</span></a></li></ol></li></ol></li></ol>","author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Maven知识点总结","uid":"2fe7dc1ca97676d4ef7064386a344643","slug":"Maven学习","date":"2024-02-05T14:33:12.000Z","updated":"2024-02-07T13:09:38.761Z","comments":true,"path":"api/articles/Maven学习.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/13.jpg","text":"1.初始Maven1.1 什么是MavenMaven是Apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。 1.2 Maven的作用使用Ma...","permalink":"/post/Maven学习","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Study","slug":"Study","count":18,"path":"api/categories/Study.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"Maven","slug":"Maven","count":1,"path":"api/tags/Maven.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}},"next_post":{"title":"算法性能分析","uid":"edf904054aa8b48f1e963a1dfb1f4ee3","slug":"算法性能分析","date":"2024-01-28T14:25:12.000Z","updated":"2024-02-05T12:56:48.588Z","comments":true,"path":"api/articles/算法性能分析.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/11.jpg","text":"参考学习代码随想录,进行算法性能分析学习...","permalink":"/post/算法性能分析","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Study","slug":"Study","count":18,"path":"api/categories/Study.json"}],"tags":[{"name":"学习","slug":"学习","count":8,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}}}