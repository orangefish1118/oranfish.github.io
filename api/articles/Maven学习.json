{"title":"Maven知识点总结","uid":"2fe7dc1ca97676d4ef7064386a344643","slug":"Maven学习","date":"2024-02-05T14:33:12.000Z","updated":"2024-02-07T13:09:38.761Z","comments":true,"path":"api/articles/Maven学习.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/13.jpg","content":"<h2 id=\"1-初始Maven\"><a href=\"#1-初始Maven\" class=\"headerlink\" title=\"1.初始Maven\"></a>1.初始Maven</h2><h3 id=\"1-1-什么是Maven\"><a href=\"#1-1-什么是Maven\" class=\"headerlink\" title=\"1.1 什么是Maven\"></a>1.1 什么是Maven</h3><p>Maven是Apache旗下的一个开源项目，<strong>是一款用于管理和构建java项目的工具</strong>。</p>\n<h3 id=\"1-2-Maven的作用\"><a href=\"#1-2-Maven的作用\" class=\"headerlink\" title=\"1.2 Maven的作用\"></a>1.2 Maven的作用</h3><p>使用Maven能够做什么：</p>\n<ol>\n<li>依赖管理</li>\n<li>统一项目结构</li>\n<li>项目构建</li>\n</ol>\n<p><strong>依赖管理</strong>：</p>\n<ul>\n<li>方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题</li>\n</ul>\n<p><img src=\"/posts/0/image-20240205205927138.png\" alt=\"image-20240205205927138\"></p>\n<p>当使用maven进行项目依赖(jar包)管理，则很方便的可以解决这个问题。 我们只需要在maven项目的pom.xml文件中，添加一段如下图所示的配置即可实现。</p>\n<p><img src=\"/posts/0/image-20240205210109723.png\" alt=\"image-20240205210109723\"></p>\n<p>**统一项目结构 : **</p>\n<ul>\n<li>提供标准、统一的项目结构</li>\n</ul>\n<p>在项目开发中，当你使用不同的开发工具 (如：Eclipse、Idea)，创建项目工程时：</p>\n<p><img src=\"/posts/0/image-20240205210130908.png\" alt=\"image-20240205210130908\"></p>\n<p>若我们创建的是一个maven工程，是可以帮我们自动生成统一、标准的项目目录结构：</p>\n<p><img src=\"/posts/0/image-20240205210136330.png\" alt=\"image-20240205210136330\"></p>\n<p>具体的统一结构如下：</p>\n<p><img src=\"/posts/0/image-20240205210147390.png\" alt=\"image-20240205210147390\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>目录说明： </p>\n<ul>\n<li>src&#x2F;main&#x2F;java: java源代码目录</li>\n<li>src&#x2F;main&#x2F;resources:  配置文件信息</li>\n<li>src&#x2F;test&#x2F;java: 测试代码</li>\n<li>src&#x2F;test&#x2F;resources: 测试配置文件信息</li>\n</ul></blockquote>\n<p><strong>项目构建 :</strong> </p>\n<ul>\n<li>maven提供了标准的、跨平台(Linux、Windows、MacOS) 的自动化项目构建方式</li>\n</ul>\n<p>代码需要进行编译、测试、打包、发布，这些操作如果需要反复进行就显得特别麻烦，而Maven提供了一套简单的命令来完成项目构建。</p>\n<p><img src=\"/posts/0/image-20240205210213617.png\" alt=\"image-20240205210213617\"></p>\n<h2 id=\"2-Maven概述\"><a href=\"#2-Maven概述\" class=\"headerlink\" title=\"2.Maven概述\"></a>2.Maven概述</h2><h3 id=\"2-1-Maven介绍\"><a href=\"#2-1-Maven介绍\" class=\"headerlink\" title=\"2.1 Maven介绍\"></a>2.1 Maven介绍</h3><p>Apache Maven是一个项目管理和构建工具，它基于项目对象模型(Project Object Model , 简称: POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档。</p>\n<p>官网：<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<p>Maven的作用： </p>\n<ol>\n<li>方便的依赖管理</li>\n<li>统一的项目结构</li>\n<li>标准的项目构建流程</li>\n</ol>\n<h3 id=\"2-2-Maven模型\"><a href=\"#2-2-Maven模型\" class=\"headerlink\" title=\"2.2 Maven模型\"></a>2.2 Maven模型</h3><ul>\n<li>项目对象模型 (Project Object Model)</li>\n<li>依赖管理模型(Dependency)</li>\n<li>构建生命周期&#x2F;阶段(Build lifecycle &amp; phases)</li>\n</ul>\n<p><img src=\"/posts/0/image-20240205210326217.png\" alt=\"image-20240205210326217\"></p>\n<h3 id=\"2-3-Maven仓库\"><a href=\"#2-3-Maven仓库\" class=\"headerlink\" title=\"2.3 Maven仓库\"></a>2.3 Maven仓库</h3><p>仓库：用于存储资源，管理各种jar包</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>仓库的本质就是一个目录(文件夹)，这个目录被用来存储开发中所有依赖(就是jar包)和插件</p></blockquote>\n<p>Maven仓库分为：</p>\n<ul>\n<li>本地仓库：自己计算机上的一个目录(用来存储jar包)</li>\n<li>中央仓库：由Maven团队维护的全球唯一的。仓库地址：<a href=\"https://repo1.maven.org/maven2/\">https://repo1.maven.org/maven2/</a></li>\n<li>远程仓库(私服)：一般由公司团队搭建的私有仓库</li>\n</ul>\n<p>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包</p>\n<ul>\n<li><p>如果有，则在项目直接引用</p>\n</li>\n<li><p>如果没有，则去中央仓库中下载对应的jar包到本地仓库</p>\n</li>\n</ul>\n<p>如果还可以搭建远程仓库(私服)，将来jar包的查找顺序则变为： 本地仓库 –&gt; 远程仓库–&gt; 中央仓库</p>\n<h3 id=\"2-4-Maven安装\"><a href=\"#2-4-Maven安装\" class=\"headerlink\" title=\"2.4 Maven安装\"></a>2.4 Maven安装</h3><p>下载地址：<a href=\"https://maven.apache.org/download.cgi\">https://maven.apache.org/download.cgi</a></p>\n<p>Maven安装配置步骤：</p>\n<ol>\n<li>解压安装</li>\n<li>配置仓库</li>\n<li>配置Maven环境变量</li>\n</ol>\n<p><strong>1、解压 apache-maven-3.6.1-bin.zip（解压即安装）</strong></p>\n<ul>\n<li>bin目录 ： 存放的是可执行命令。（mvn 命令重点关注）</li>\n<li>conf目录 ：存放Maven的配置文件。（settings.xml配置文件后期需要修改）</li>\n<li>lib目录 ：存放Maven依赖的jar包。（Maven也是使用java开发的，所以它也依赖其他的jar包）</li>\n</ul>\n<p><strong>2、配置本地仓库</strong></p>\n<p>在自己计算机上新一个目录（本地仓库，用来存储jar包）</p>\n<p>进入到conf目录下修改settings.xml配置文件 </p>\n<p>1). 使用超级记事本软件，打开settings.xml文件，定位到53行</p>\n<p>2). 复制<localRepository>标签，粘贴到注释的外面（55行）</localRepository></p>\n<p>3). 复制之前新建的用来存储jar包的路径，替换掉<localRepository>标签体内容</localRepository></p>\n<p><strong>3、配置阿里云私服</strong></p>\n<p>由于中央仓库在国外，所以下载jar包速度可能比较慢，而阿里公司提供了一个远程仓库，里面基本也都有开源项目的jar包。</p>\n<p>进入到conf目录下修改settings.xml配置文件：</p>\n<p>1). 使用超级记事本软件，打开settings.xml文件，定位到160行左右</p>\n<p>2). 在&#x2F;<mirrors>标签下为其添加子标签&#x2F;<mirror>，内容如下：</mirror></mirrors></p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">mirror</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">id</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">alimaven</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">id</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">aliyun maven</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">url</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">http://maven.aliyun.com/nexus/content/groups/public/</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">url</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">mirrorOf</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">central</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">mirrorOf</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">          </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">mirror</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>&#x3D;&#x3D;注:  只可配置一个<mirror>(另一个要注释!) ，不然两个可能发生冲突，导致jar包无法下载!!!!!!!&#x3D;&#x3D;</mirror></p>\n<p><strong>4、配置环境变量</strong></p>\n<p>1). 在系统变量处新建一个变量MAVEN_HOME</p>\n<ul>\n<li>MAVEN_HOME环境变量的值，设置为maven的解压安装目录</li>\n</ul>\n<p>2). 在Path中进行配置</p>\n<ul>\n<li>PATH环境变量的值，设置为：%MAVEN_HOME%\\bin</li>\n</ul>\n<p>3). 打开DOS命令提示符进行验证，出现如图所示表示安装成功</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">mvn -v</span></span></code></pre></div><h2 id=\"3-IDEA集成Maven\"><a href=\"#3-IDEA集成Maven\" class=\"headerlink\" title=\"3. IDEA集成Maven\"></a>3. IDEA集成Maven</h2><h3 id=\"3-1-配置Maven环境\"><a href=\"#3-1-配置Maven环境\" class=\"headerlink\" title=\"3.1 配置Maven环境\"></a>3.1 配置Maven环境</h3><p>1、选择 IDEA中 File  &#x3D;&gt;  Settings  &#x3D;&gt;  Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p>\n<p><img src=\"/posts/0/image-20240205214819606.png\" alt=\"image-20240205214819606\"></p>\n<p>2、设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</p>\n<p><img src=\"/posts/0/image-20240205214825555.png\" alt=\"image-20240205214825555\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Maven home path ：指定当前Maven的安装目录</p>\n<p>User settings file ：指定当前Maven的settings.xml配置文件的存放路径</p>\n<p>Local repository ：指定Maven的本地仓库的路径 (如果指定了settings.xml, 这个目录会自动读取出来, 可以不用手动指定)</p></blockquote>\n<p>3、配置工程的编译版本为11</p>\n<ul>\n<li>Maven默认使用的编译版本为5（版本过低）</li>\n</ul>\n<p><img src=\"/posts/0/image-20240205214837969.png\" alt=\"image-20240205214837969\"></p>\n<h3 id=\"3-2-全局设置\"><a href=\"#3-2-全局设置\" class=\"headerlink\" title=\"3.2 全局设置\"></a>3.2 全局设置</h3><p>1、进入到IDEA欢迎页面</p>\n<ul>\n<li>选择 IDEA中 File  &#x3D;&gt;  close project</li>\n</ul>\n<p>2、打开 All settings , 选择 Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p>\n<p>3、配置工程的编译版本为11</p>\n<p>这里所设置的maven的环境信息，并未指定任何一个project，此时设置的信息就属于全局配置信息。 以后，我们再创建project，默认就是使用我们全局配置的信息。</p>\n<h3 id=\"3-3-Maven项目\"><a href=\"#3-3-Maven项目\" class=\"headerlink\" title=\"3.3 Maven项目\"></a>3.3 Maven项目</h3><p>1、创建一个空项目 </p>\n<p><img src=\"/posts/0/image-20240205214926612.png\" alt=\"image-20240205214926612\"></p>\n<p>2、创建模块，选择Maven，点击Next</p>\n<p><img src=\"/posts/0/image-20240205214936989.png\" alt=\"image-20240205214936989\"></p>\n<p><img src=\"/posts/0/image-20240205214941313.png\" alt=\"image-20240205214941313\"></p>\n<p>3、填写模块名称，坐标信息，点击finish，创建完成</p>\n<p><img src=\"/posts/0/image-20240205214952458.png\" alt=\"image-20240205214952458\"></p>\n<p>4、在Maven工程下，创建HelloWorld类</p>\n<p><img src=\"/posts/0/image-20240205215001910.png\" alt=\"image-20240205215001910\"></p>\n<p><img src=\"/posts/0/image-20240205215006868.png\" alt=\"image-20240205215006868\"></p>\n<p>5、编写 HelloWorld，并运行</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">HelloWorld</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">args</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Hello Maven ...</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><p>Maven项目的目录结构:</p>\n<p>maven-project01<br>|—  src  (源代码目录和测试代码目录)<br>        |—  main (源代码目录)<br>                   |— java (源代码java文件目录)<br>                   |— resources (源代码配置文件目录)<br>        |—  test (测试代码目录)<br>                   |— java (测试代码java目录)<br>                   |— resources (测试代码配置文件目录)<br>|— target (编译、打包生成文件存放目录)</p>\n</li>\n</ul></blockquote>\n<h3 id=\"3-4-POM配置\"><a href=\"#3-4-POM配置\" class=\"headerlink\" title=\"3.4 POM配置\"></a>3.4 POM配置</h3><p>POM (Project Object Model) ：指的是项目对象模型，用来描述当前的maven项目。</p>\n<ul>\n<li>使用pom.xml文件来实现</li>\n</ul>\n<p>pom文件详解：</p>\n<ul>\n<li><project> ：pom文件的根标签，表示当前maven项目</project></li>\n<li><modelVersion> ：声明项目描述遵循哪一个POM模型版本<ul>\n<li>虽然模型本身的版本很少改变，但它仍然是必不可少的。目前POM模型版本是4.0.0</li>\n</ul>\n</modelVersion></li>\n<li>坐标 ：<groupId>、<artifactId>、<version><ul>\n<li>定位项目在本地仓库中的位置，由以上三个标签组成一个坐标</li>\n</ul>\n</version></artifactId></groupId></li>\n<li><packaging> ：maven项目的打包方式，通常设置为jar或war（默认值：jar）</packaging></li>\n</ul>\n<h3 id=\"3-5-Maven坐标\"><a href=\"#3-5-Maven坐标\" class=\"headerlink\" title=\"3.5 Maven坐标\"></a>3.5 Maven坐标</h3><p>什么是坐标？</p>\n<ul>\n<li>Maven中的坐标是&#x3D;&#x3D;资源的唯一标识&#x3D;&#x3D; , 通过该坐标可以唯一定位资源位置</li>\n<li>使用坐标来定义项目或引入项目中需要的依赖</li>\n</ul>\n<p>Maven坐标主要组成</p>\n<ul>\n<li><p>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</p>\n</li>\n<li><p>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</p>\n</li>\n<li><p>version：定义当前项目版本号</p>\n</li>\n<li><p><strong>注意：</strong></p>\n<ul>\n<li>上面所说的资源可以是插件、依赖、当前项目。</li>\n<li>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-6-导入Mavem项目\"><a href=\"#3-6-导入Mavem项目\" class=\"headerlink\" title=\"3.6 导入Mavem项目\"></a>3.6 导入Mavem项目</h3><ul>\n<li><strong>方式1：使用Maven面板，快速导入项目</strong></li>\n</ul>\n<p>打开IDEA，选择右侧Maven面板，点击 + 号，选中对应项目的pom.xml文件，双击即可</p>\n<p>说明：如果没有Maven面板，选择 View  &#x3D;&gt;  Appearance  &#x3D;&gt;  Tool Window Bars</p>\n<ul>\n<li><strong>方式2：使用idea导入模块项目</strong></li>\n</ul>\n<p>File  &#x3D;&gt;  Project Structure  &#x3D;&gt;  Modules  &#x3D;&gt;  +  &#x3D;&gt;  Import Module</p>\n<p>找到要导入工程的pom.xml</p>\n<h2 id=\"4-依赖管理\"><a href=\"#4-依赖管理\" class=\"headerlink\" title=\"4.依赖管理\"></a>4.依赖管理</h2><h3 id=\"4-1-依赖配置\"><a href=\"#4-1-依赖配置\" class=\"headerlink\" title=\"4.1 依赖配置\"></a>4.1 依赖配置</h3><p>依赖：指当前项目运行所需要的jar包。一个项目中可以引入多个依赖：</p>\n<p>例如：在当前工程中，我们需要用到logback来记录日志，此时就可以在maven工程的pom.xml文件中，引入logback的依赖。具体步骤如下：</p>\n<ol>\n<li>在pom.xml中编写<dependencies>标签</dependencies></li>\n<li>在<dependencies>标签中使用<dependency>引入坐标</dependency></dependencies></li>\n<li>定义坐标的 groupId、artifactId、version</li>\n<li>点击刷新按钮，引入最新加入的坐标</li>\n</ol>\n<ul>\n<li>刷新依赖：保证每一次引入新的依赖，或者修改现有的依赖配置，都可以加入最新的坐标</li>\n</ul>\n<p>注意事项：</p>\n<ol>\n<li>如果引入的依赖，在本地仓库中不存在，将会连接远程仓库 &#x2F; 中央仓库，然后下载依赖（这个过程会比较耗时，耐心等待）</li>\n<li>如果不知道依赖的坐标信息，可以到mvn的中央仓库（<a href=\"https://mvnrepository.com/%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2\">https://mvnrepository.com/）中搜索</a></li>\n</ol>\n<p><strong>添加依赖的几种方式：</strong></p>\n<ol>\n<li>利用中央仓库搜索的依赖坐标</li>\n<li>利用IDEA工具搜索依赖</li>\n<li>熟练上手maven后，快速导入依赖</li>\n</ol>\n<h3 id=\"4-2-依赖传递\"><a href=\"#4-2-依赖传递\" class=\"headerlink\" title=\"4.2 依赖传递\"></a>4.2 依赖传递</h3><p>依赖传递可以分为：</p>\n<ol>\n<li><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系</p>\n</li>\n<li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</p>\n</li>\n</ol>\n<p><img src=\"/posts/0/image-20240205215444194.png\" alt=\"image-20240205215444194\"></p>\n<p>比如以上图中：</p>\n<ul>\n<li>projectA依赖了projectB。对于projectA 来说，projectB 就是直接依赖。</li>\n<li>而projectB依赖了projectC及其他jar包。 那么此时，在projectA中也会将projectC的依赖传递下来。对于projectA 来说，projectC就是间接依赖。</li>\n</ul>\n<p>在pom.xml文件中只添加了logback-classic依赖，但由于maven的依赖具有传递性，所以会自动把所依赖的其他jar包也一起导入。</p>\n<h3 id=\"4-3-排除依赖\"><a href=\"#4-3-排除依赖\" class=\"headerlink\" title=\"4.3 排除依赖\"></a>4.3 排除依赖</h3><p>问题：之前我们讲了依赖具有传递性。那么A依赖B，B依赖C，如果A不想将C依赖进来，是否可以做到？ </p>\n<p>答案：在maven项目中，我们可以通过排除依赖来实现。</p>\n<p>什么是排除依赖？</p>\n<ul>\n<li>排除依赖：指主动断开依赖的资源。（被排除的资源无需指定版本）</li>\n</ul>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">com.itheima</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">maven-projectB</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">1.0-SNAPSHOT</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">&lt;!--排除依赖, 主动断开依赖的资源--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">exclusions</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">exclusion</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">junit</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">junit</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">exclusion</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">exclusions</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><h3 id=\"4-4-依赖范围\"><a href=\"#4-4-依赖范围\" class=\"headerlink\" title=\"4.4 依赖范围\"></a>4.4 依赖范围</h3><p>在项目中导入依赖的jar包后，默认情况下，可以在任何地方使用。</p>\n<p><img src=\"/posts/0/image-20240205215620227.png\" alt=\"image-20240205215620227\"></p>\n<p>如果希望限制依赖的使用范围，可以通过<scope>标签设置其作用范围。</scope></p>\n<p><img src=\"/posts/0/image-20240205215628711.png\" alt=\"image-20240205215628711\"></p>\n<p>作用范围：</p>\n<ol>\n<li><p>主程序范围有效（main文件夹范围内）</p>\n</li>\n<li><p>测试程序范围有效（test文件夹范围内）</p>\n</li>\n<li><p>是否参与打包运行（package指令范围内）</p>\n</li>\n</ol>\n<p>scope标签的取值范围：</p>\n<table>\n<thead>\n<tr>\n<th><strong>scope</strong>值</th>\n<th><strong>主程序</strong></th>\n<th><strong>测试程序</strong></th>\n<th><strong>打包（运行）</strong></th>\n<th><strong>范例</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>compile（默认）</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>log4j</td>\n</tr>\n<tr>\n<td>test</td>\n<td>-</td>\n<td>Y</td>\n<td>-</td>\n<td>junit</td>\n</tr>\n<tr>\n<td>provided</td>\n<td>Y</td>\n<td>Y</td>\n<td>-</td>\n<td>servlet-api</td>\n</tr>\n<tr>\n<td>runtime</td>\n<td>-</td>\n<td>Y</td>\n<td>Y</td>\n<td>jdbc驱动</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-5-生命周期\"><a href=\"#4-5-生命周期\" class=\"headerlink\" title=\"4.5 生命周期\"></a>4.5 生命周期</h3><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。 描述了一次项目构建，经历哪些阶段。</p>\n<p>Maven从大量项目和构建工具中学习和反思，然后总结了一套高度完美的，易扩展的项目构建生命周期。这个生命周期包含了项目的清理，初始化，编译，测试，打包，集成测试，验证，部署和站点生成等几乎所有构建步骤。</p>\n<p>Maven对项目构建的生命周期划分为3套（相互独立）：</p>\n<ul>\n<li><p>clean：清理工作。</p>\n</li>\n<li><p>default：核心工作。如：编译、测试、打包、安装、部署等。</p>\n</li>\n<li><p>site：生成报告、发布站点等。</p>\n</li>\n</ul>\n<p><img src=\"/posts/0/image-20240205215723855.png\" alt=\"image-20240205215723855\"></p>\n<p>• clean：移除上一次构建生成的文件</p>\n<p>• compile：编译项目源代码</p>\n<p>• test：使用合适的单元测试框架运行测试(junit)</p>\n<p>• package：将编译后的文件打包，如：jar、war等</p>\n<p>• install：安装项目到本地仓库</p>\n<p>Maven的生命周期是抽象的，这意味着生命周期本身不做任何实际工作。<strong>在Maven的设计中，实际任务（如源代码编译）都交由插件来完成。</strong></p>\n<p>IDEA工具为了方便程序员使用maven生命周期，在右侧的maven工具栏中，已给出快速访问通道</p>\n<p><img src=\"/posts/0/image-20240205215746827.png\" alt=\"image-20240205215746827\"></p>\n<p>生命周期的顺序是：clean –&gt; validate –&gt; compile –&gt; test –&gt; package –&gt; verify –&gt; install –&gt; site –&gt; deploy </p>\n<p>我们需要关注的就是：clean –&gt;  compile –&gt; test –&gt; package  –&gt; install </p>\n<p>4.6 执行</p>\n<p>在日常开发中，当我们要执行指定的生命周期时，有两种执行方式：</p>\n<ol>\n<li>在idea工具右侧的maven工具栏中，选择对应的生命周期，双击执行</li>\n<li>在DOS命令行中，通过maven命令执行</li>\n</ol>\n<p><strong>方式一：在idea中执行生命周期</strong></p>\n<ul>\n<li>选择对应的生命周期，双击执行</li>\n</ul>\n<p><img src=\"/posts/0/image-20240205215815327.png\" alt=\"image-20240205215815327\"></p>\n<p>test：</p>\n<p><img src=\"/posts/0/image-20221201164627403.png\" alt=\"image-20221201164627403\"></p>\n<p>package：</p>\n<p><img src=\"/posts/0/image-20221201165801341.png\" alt=\"image-20221201165801341\"></p>\n<p>install：</p>\n<p><img src=\"/posts/0/image-20221201170830837.png\" alt=\"image-20221201170830837\"></p>\n<p>clean：</p>\n<p><img src=\"/posts/0/image-20221201171529382.png\" alt=\"image-20221201171529382\"></p>\n<p><strong>方式二：在命令行中执行生命周期</strong></p>\n<ol>\n<li>进入到DOS命令行</li>\n</ol>\n<p><img src=\"/posts/0/image-20221201172210253.png\" alt=\"image-20221201172210253\"></p>\n<p><img src=\"/posts/0/image-20221201172914648.png\" alt=\"image-20221201172914648\"> </p>\n<h2 id=\"5-其他\"><a href=\"#5-其他\" class=\"headerlink\" title=\"5.其他\"></a>5.其他</h2><h3 id=\"5-1-更新依赖索引\"><a href=\"#5-1-更新依赖索引\" class=\"headerlink\" title=\"5.1 更新依赖索引\"></a>5.1 更新依赖索引</h3><p>有时候给idea配置完maven仓库信息后，在idea中依然搜索不到仓库中的jar包。这是因为仓库中的jar包索引尚未更新到idea中。这个时候我们就需要更新idea中maven的索引了，具体做法如下：</p>\n<p> 打开设置—-搜索maven—-Repositories—-选中本地仓库—–点击Update</p>\n<p><img src=\"/posts/0/1537786634456-1582625518984.png\" alt=\"1537786634456\"></p>\n<h3 id=\"5-2-清理maven仓库\"><a href=\"#5-2-清理maven仓库\" class=\"headerlink\" title=\"5.2 清理maven仓库\"></a>5.2 清理maven仓库</h3><p>初始情况下，我们的本地仓库是没有任何jar包的，此时会从私服去下载（如果没有配置，就直接从中央仓库去下载），可能由于网络的原因，jar包下载不完全，这些不完整的jar包都是以lastUpdated结尾。此时，maven不会再重新帮你下载，需要你删除这些以lastUpdated结尾的文件，然后maven才会再次自动下载这些jar包。</p>\n<p><img src=\"/posts/0/lastUpdated-1582625518983.png\" alt=\"lastUpdate\"></p>\n<p>如果本地仓库中有很多这样的以lastUpadted结尾的文件，可以定义一个批处理文件，在其中编写如下脚本来删除： </p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">set REPOSITORY_PATH=E:\\develop\\apache-maven-3.6.1\\mvn_repo</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">rem 正在搜索...</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">del /s /q %REPOSITORY_PATH%\\*.lastUpdated</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">rem 搜索完毕</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">pause</span></span></code></pre></div><p>操作步骤如下：</p>\n<p>1). 定义批处理文件del_lastUpdated.bat  (直接创建一个文本文件，命名为del_lastUpdated，后缀名直接改为bat即可 )</p>\n<p><img src=\"/posts/0/image-20221214154949482.png\" alt=\"image-20221214154949482\"> </p>\n<p>2). 在上面的bat文件上<strong>右键—》编辑</strong> 。修改文件：</p>\n<p><img src=\"/posts/0/image-20221214154559817.png\" alt=\"image-20221214154559817\"> </p>\n<p>修改完毕后，双击运行即可删除maven仓库中的残留文件。</p>\n<h2 id=\"6-Maven高级\"><a href=\"#6-Maven高级\" class=\"headerlink\" title=\"6.Maven高级\"></a>6.Maven高级</h2><p>Maven高级内容包括:</p>\n<ul>\n<li>分模块设计与开发</li>\n<li>继承与聚合</li>\n<li>私服</li>\n</ul>\n<h3 id=\"6-1-分模块设计与开发\"><a href=\"#6-1-分模块设计与开发\" class=\"headerlink\" title=\"6.1 分模块设计与开发\"></a>6.1 分模块设计与开发</h3><p>所谓分模块设计，顾名思义指的就是我们在设计一个 Java 项目的时候，将一个 Java 项目拆分成多个模块进行开发。</p>\n<p><strong>1). 未分模块设计的问题</strong> </p>\n<p>如果项目不分模块，也就意味着所有的业务代码是不是都写在这一个 Java 项目当中。随着这个项目的业务扩张，项目当中的业务功能可能会越来越多。</p>\n<p><strong>总结起来，主要两点问题：不方便项目的维护和管理、项目中的通用组件难以复用。</strong></p>\n<p><strong>2). 分模块设计</strong></p>\n<p>分模块设计我们在进行项目设计阶段，就可以将一个大的项目拆分成若干个模块，每一个模块都是独立的。</p>\n<p><strong>分模块设计就是将项目按照功能&#x2F;结构拆分成若干个子模块，方便项目的管理维护、拓展，也方便模块键的相互调用、资源共享。</strong></p>\n<p>注意：分模块开发需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分。</p>\n<p><strong>例子：</strong></p>\n<p><strong>1.创建maven模块 tlias-pojo，存放实体类</strong></p>\n<p>A. 创建一个正常的Maven模块，模块名tlias-pojo</p>\n<p>B. 然后在tlias-pojo中创建一个包 com.itheima.pojo (和原来案例项目中的pojo包名一致)</p>\n<p>C. 将原来案例项目 tlias-web-management 中的pojo包下的实体类，复制到tlias-pojo模块中</p>\n<p>D. 在 tlias-pojo 模块的pom.xml文件中引入依赖</p>\n<p>E. 删除原有案例项目tlias-web-management的pojo包【直接删除不要犹豫，我们已经将该模块拆分出去了】，然后在pom.xml中引入 tlias-pojo的依赖</p>\n<p><strong>2. 创建Maven模块 tlias-utils，存放相关工具类</strong></p>\n<p>A. 创建一个正常的Maven模块，模块名tlias-utils</p>\n<p>B. 然后在 tlias-utils 中创建一个包 com.itheima.utils (和原来案例项目中的utils包名一致)</p>\n<p>C. 将原来案例项目 tlias-web-management 中的utils包下的实体类，复制到tlias-utils模块中</p>\n<p>D. 在 tlias-utils 模块的pom.xml文件中引入依赖</p>\n<p>E. 删除原有案例项目tlias-web-management的utils包【直接删除不要犹豫，我们已经将该模块拆分出去了】，然后在pom.xml中引入 tlias-utils的依赖</p>\n<p><strong>到此呢，就已经完成了模块的拆分，拆分出了 tlias-pojo、tlias-utils、tlias-web-management ，如果其他项目中需要用到 pojo，或者 utils工具类，就可以直接引入依赖。</strong> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1). 什么是分模块设计：将项目按照功能拆分成若干个子模块</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>2). 为什么要分模块设计：方便项目的管理维护、扩展，也方便模块间的相互调用，资源共享</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>3). 注意事项：分模块设计需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分</p></blockquote>\n<h3 id=\"6-2-继承\"><a href=\"#6-2-继承\" class=\"headerlink\" title=\"6.2 继承\"></a>6.2 继承</h3><ul>\n<li><p>概念：继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</p>\n</li>\n<li><p>作用：简化依赖配置、统一管理依赖</p>\n</li>\n<li><p>实现：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">parent</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">...</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">...</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">...</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">relativePath</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">....</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">relativePath</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">parent</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div></li>\n</ul>\n<p><img src=\"/posts/0/image-20240205222420698.png\" alt=\"image-20240205222420698\"></p>\n<p>1). 创建maven模块 tlias-parent ，该工程为父工程，设置打包方式pom(默认jar)。</p>\n<p>工程结构如下：</p>\n<p><img src=\"/posts/0/image-20230113120517216-17071432622601.png\" alt=\"image-20230113120517216\"></p>\n<p>父工程tlias-parent的pom.xml文件配置如下：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">parent</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">org.springframework.boot</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">spring-boot-starter-parent</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">2.7.5</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">relativePath</span><span style=\"color: #89DDFF\">/&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">&lt;!-- lookup parent from repository --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">parent</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">com.itheima</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">tlias-parent</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">1.0-SNAPSHOT</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">packaging</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">pom</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">packaging</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Maven打包方式：</p>\n<ul>\n<li>jar：普通模块打包，springboot项目基本都是jar包（内嵌tomcat运行）</li>\n<li>war：普通web程序打包，需要部署在外部的tomcat服务器中运行</li>\n<li>pom：父工程或聚合工程，该模块不写代码，仅进行依赖管理</li>\n</ul></blockquote>\n<p>2). 在子工程的pom.xml文件中，配置继承关系。</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">parent</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">com.itheima</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">tlias-parent</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">1.0-SNAPSHOT</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">relativePath</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">../tlias-parent/pom.xml</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">relativePath</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">parent</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">tlias-utils</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">1.0-SNAPSHOT</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>这里是以 tlias-utils 为例，指定了其父工程。其他的模块，都是相同的配置方式。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：</p>\n<ul>\n<li>在子工程中，配置了继承关系之后，坐标中的groupId是可以省略的，因为会自动继承父工程的 。</li>\n<li>relativePath指定父工程的pom文件的相对位置（如果不指定，将从本地仓库&#x2F;远程仓库查找该工程）。<ul>\n<li>..&#x2F; 代表的上一级目录</li>\n</ul>\n</li>\n</ul></blockquote>\n<p>3). 在父工程中配置各个工程共有的依赖（子工程会自动继承父工程的依赖）。</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">dependencies</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">org.projectlombok</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">lombok</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">1.18.24</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">dependencies</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>此时，我们已经将各个子工程中共有的依赖（lombok），都定义在了父工程中，子工程中的这一项依赖，就可以直接删除了。删除之后，我们会看到父工程中配置的依赖 lombok，子工程直接继承下来了。</p>\n<p><img src=\"/posts/0/image-20230113120408661.png\" alt=\"image-20230113120408661\"> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>工程结构说明：</strong></p>\n<ul>\n<li><p>我们当前的项目结构为：</p>\n<p><img src=\"/posts/0/image-20230113120636912.png\" alt=\"image-20230113120636912\"> </p>\n<p>因为我们是项目开发完毕之后，给大家基于现有项目拆分的各个模块，tlias-web-management已经存在了，然后再创建各个模块与父工程，所以父工程与模块之间是平级的。</p>\n</li>\n<li><p>而实际项目中，可能还会见到下面的工程结构：</p>\n<p><img src=\"/posts/0/image-20230113120728680.png\" alt=\"image-20230113120728680\"> </p>\n<p>而在真实的企业开发中，都是先设计好模块之后，再开始创建模块，开发项目。 那此时呢，一般都会先创建父工程 tlias-parent，然后将创建的各个子模块，都放在父工程parent下面。 这样层级结构会更加清晰一些。 </p>\n<p><strong>PS：上面两种工程结构，都是可以正常使用的，没有一点问题。 只不过，第二种结构，看起来，父子工程结构更加清晰、更加直观。</strong></p>\n</li>\n</ul></blockquote>\n<p><strong>版本锁定</strong></p>\n<p>那假如说，我们项目要升级，要使用到jwt最新版本 0.9.2 中的一个新功能，那此时需要将依赖的版本升级到0.9.2，那此时该怎么做呢 ？</p>\n<p>第一步：去找当前项目中所有的模块的pom.xml配置文件，看哪些模块用到了jwt的依赖。</p>\n<p>第二步：找到这个依赖之后，将其版本version，更换为 0.9.2。</p>\n<p><strong>问题：如果项目拆分的模块比较多，每一次更换版本，我们都得找到这个项目中的每一个模块，一个一个的更改。 很容易就会出现，遗漏掉一个模块，忘记更换版本的情况。</strong></p>\n<p>那我们又该如何来解决这个问题，如何来统一管理各个依赖的版本呢？ </p>\n<p>答案：Maven的版本锁定功能。</p>\n<p>在maven中，可以在父工程的pom文件中通过 <code>&lt;dependencyManagement&gt;</code> 来统一管理依赖版本。</p>\n<p>父工程：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">&lt;!--统一管理依赖版本--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">dependencyManagement</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">dependencies</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #676E95; font-style: italic\">&lt;!--JWT令牌--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">io.jsonwebtoken</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">jjwt</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">0.9.1</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">version</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">dependencies</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">dependencyManagement</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>子工程：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">dependencies</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">&lt;!--JWT令牌--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">io.jsonwebtoken</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">jjwt</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">dependencies</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：</p>\n<ul>\n<li><p>在父工程中所配置的 <code>&lt;dependencyManagement&gt;</code> 只能统一管理依赖版本，并不会将这个依赖直接引入进来。 这点和 <code>&lt;dependencies&gt;</code> 是不同的。</p>\n</li>\n<li><p>子工程要使用这个依赖，还是需要引入的，只是此时就无需指定 <code>&lt;version&gt;</code> 版本号了，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</p>\n</li>\n</ul></blockquote>\n<p>接下来，我们就可以将tlias-utils模块中单独配置的依赖，将其版本统一交给 tlias-parent 进行统一管理。</p>\n<p>如果依赖的版本已经在父工程进行了统一管理，所以在子工程中就无需再配置依赖的版本了。</p>\n<p>我们也可以通过自定义属性及属性引用的形式，在父工程中将依赖的版本号进行集中管理维护。 </p>\n<p>版本集中管理之后，我们要想修改依赖的版本，就只需要在父工程中自定义属性的位置，修改对应的属性值即可。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>面试题：<code>&lt;dependencyManagement&gt;</code> 与 <code>&lt;dependencies&gt;</code> 的区别是什么?</strong></p>\n<ul>\n<li><code>&lt;dependencies&gt;</code> 是直接依赖，在父工程配置了依赖，子工程会直接继承下来。 </li>\n<li><code>&lt;dependencyManagement&gt;</code> 是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖(无需指定版本)</li>\n</ul></blockquote>\n<h3 id=\"6-3-聚合\"><a href=\"#6-3-聚合\" class=\"headerlink\" title=\"6.3 聚合\"></a>6.3 聚合</h3><p>分模块设计与开发之后啊，我们的项目被拆分为多个模块，而模块之间的关系，可能错综复杂。 那就比如我们当前的案例项目，结构如下（相对还是比较简单的）：</p>\n<img src=\"/posts/0/image-20230113142520463.png\" alt=\"image-20230113142520463\" style=\"zoom:67%;\">\n\n<p>那此时，大家试想一下，如果开发一个大型项目，拆分的模块很多，模块之间的依赖关系错综复杂，那此时要进行项目的打包、安装操作，是非常繁琐的。 而我们接下来，要讲解的maven的聚合就是来解决这个问题的，通过maven的聚合就可以轻松实现项目的一键构建（清理、编译、测试、打包、安装等）。</p>\n<img src=\"/posts/0/image-20230113151533948.png\" alt=\"image-20230113151533948\" style=\"zoom:80%;\"> \n\n<ul>\n<li><strong>聚合：</strong>将多个模块组织成一个整体，同时进行项目的构建。</li>\n<li><strong>聚合工程：</strong>一个不具有业务功能的“空”工程（有且仅有一个pom文件） 【PS：一般来说，继承关系中的父工程与聚合关系中的聚合工程是同一个】</li>\n<li><strong>作用：</strong>快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）</li>\n</ul>\n<p>在maven中，我们可以在聚合工程中通过 <code>&lt;moudules&gt;</code> 设置当前聚合工程所包含的子模块的名称。我们可以在 tlias-parent中，添加如下配置，来指定当前聚合工程，需要聚合的模块：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;!--</span><span style=\"color: #BABED8\">聚合其他模块</span><span style=\"color: #89DDFF\">--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">modules</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">module</span><span style=\"color: #89DDFF\">&gt;../</span><span style=\"color: #BABED8\">tlias</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">pojo</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">module</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">module</span><span style=\"color: #89DDFF\">&gt;../</span><span style=\"color: #BABED8\">tlias</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">utils</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">module</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">module</span><span style=\"color: #89DDFF\">&gt;../</span><span style=\"color: #BABED8\">tlias</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">web</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">management</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">module</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">modules</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>那此时，我们要进行编译、打包、安装操作，就无需在每一个模块上操作了。只需要在聚合工程上，统一进行操作就可以了。</p>\n<p><strong>继承与聚合对比</strong></p>\n<ul>\n<li><p><strong>作用</strong></p>\n<ul>\n<li><p>聚合用于快速构建项目</p>\n</li>\n<li><p>继承用于简化依赖配置、统一管理依赖</p>\n</li>\n</ul>\n</li>\n<li><p><strong>相同点：</strong></p>\n<ul>\n<li><p>聚合与继承的pom.xml文件打包方式均为pom，通常将两种关系制作到同一个pom文件中</p>\n</li>\n<li><p>聚合与继承均属于设计型模块，并无实际的模块内容</p>\n</li>\n</ul>\n</li>\n<li><p><strong>不同点：</strong></p>\n<ul>\n<li><p>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些</p>\n</li>\n<li><p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-4-私服\"><a href=\"#6-4-私服\" class=\"headerlink\" title=\"6.4 私服\"></a>6.4 私服</h3><p>私服其实就是架设在公司局域网内部的一台服务器，就是一种特殊的远程仓库。</p>\n<p>有了私服之后，各个团队就可以直接来连接私服了。 A 连接上私服之后，他就可以把jar包直接上传到私服当中。我公司自己内部搭建的服务器，我是不是有权限操作呀，把jar包上传到私服之后，我让 B 团队的所有开发人员也连接同一台私服。连接上这一台私服之后，他就会根据坐标的信息，直接从私服当中将对应的jar包下载到自己的本地仓库，这样就可以使用到依赖当中所提供的一些工具类了。这样我们就可以通过私服来完成资源的共享。</p>\n<ul>\n<li><strong>私服：</strong>是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</li>\n<li><strong>依赖查找顺序：</strong><ul>\n<li>本地仓库</li>\n<li>私服仓库</li>\n<li>中央仓库</li>\n</ul>\n</li>\n<li><strong>注意事项：</strong>私服在企业项目开发中，一个项目&#x2F;公司，只需要一台即可（无需我们自己搭建，会使用即可）。</li>\n</ul>\n<p><strong>资源的上传与下载</strong></p>\n<p>资源上传与下载，我们需要做三步配置，执行一条指令。</p>\n<p>第一步配置：在maven的配置文件中配置访问私服的用户名、密码。</p>\n<p>第二步配置：在maven的配置文件中配置连接私服的地址(url地址)。</p>\n<p>第三步配置：在项目的pom.xml文件中配置上传资源的位置(url地址)。</p>\n<p>配置好了上述三步之后，要上传资源到私服仓库，就执行执行maven生命周期：deploy。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>私服仓库说明：</p>\n<ul>\n<li>RELEASE：存储自己开发的RELEASE发布版本的资源。</li>\n<li>SNAPSHOT：存储自己开发的SNAPSHOT发布版本的资源。</li>\n<li>Central：存储的是从中央仓库下载下来的依赖。</li>\n</ul></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>项目版本说明：</p>\n<ul>\n<li>RELEASE(发布版本)：功能趋于稳定、当前更新停止，可以用于发行的版本，存储在私服中的RELEASE仓库中。</li>\n<li>SNAPSHOT(快照版本)：功能不稳定、尚处于开发中的版本，即快照版本，存储在私服的SNAPSHOT仓库中。</li>\n</ul></blockquote>\n<p>1.设置私服的访问用户名&#x2F;密码（在自己maven安装目录下的conf&#x2F;settings.xml中的servers中配置）</p>\n<p>2.设置私服依赖下载的仓库组地址（在自己maven安装目录下的conf&#x2F;settings.xml中的mirrors、profiles中配置）</p>\n<p>3.IDEA的maven工程的pom文件中配置上传（发布）地址(直接在tlias-parent中配置发布地址)</p>\n<p>配置完成之后，我们就可以在tlias-parent中执行<strong>deploy</strong>生命周期，将项目发布到私服仓库中。 </p>\n","text":"1.初始Maven1.1 什么是MavenMaven是Apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。 1.2 Maven的作用使用Ma...","permalink":"/post/Maven学习","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Study","slug":"Study","count":30,"path":"api/categories/Study.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"Maven","slug":"Maven","count":1,"path":"api/tags/Maven.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%88%9D%E5%A7%8BMaven\"><span class=\"toc-text\">1.初始Maven</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%80%E4%B9%88%E6%98%AFMaven\"><span class=\"toc-text\">1.1 什么是Maven</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-Maven%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1.2 Maven的作用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Maven%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">2.Maven概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-Maven%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">2.1 Maven介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Maven%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">2.2 Maven模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-Maven%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">2.3 Maven仓库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-Maven%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.4 Maven安装</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-IDEA%E9%9B%86%E6%88%90Maven\"><span class=\"toc-text\">3. IDEA集成Maven</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">3.1 配置Maven环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">3.2 全局设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-Maven%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">3.3 Maven项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-POM%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3.4 POM配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-Maven%E5%9D%90%E6%A0%87\"><span class=\"toc-text\">3.5 Maven坐标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-%E5%AF%BC%E5%85%A5Mavem%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">3.6 导入Mavem项目</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">4.依赖管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4.1 依赖配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">4.2 依赖传递</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E6%8E%92%E9%99%A4%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">4.3 排除依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">4.4 依赖范围</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">4.5 生命周期</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">5.其他</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E6%9B%B4%E6%96%B0%E4%BE%9D%E8%B5%96%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">5.1 更新依赖索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E6%B8%85%E7%90%86maven%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">5.2 清理maven仓库</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Maven%E9%AB%98%E7%BA%A7\"><span class=\"toc-text\">6.Maven高级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E5%88%86%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">6.1 分模块设计与开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">6.2 继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E8%81%9A%E5%90%88\"><span class=\"toc-text\">6.3 聚合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E7%A7%81%E6%9C%8D\"><span class=\"toc-text\">6.4 私服</span></a></li></ol></li></ol>","author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"MySQL知识点总结","uid":"3a4ba5bc78945135efd42b16374ed036","slug":"MySQL学习","date":"2024-02-07T09:58:12.000Z","updated":"2024-02-07T13:11:56.412Z","comments":true,"path":"api/articles/MySQL学习.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/14.jpg","text":"1.前言在我们讲解SpringBootWeb基础知识(请求响应案例)的时候，我们讲到在web开发中，为了应用程序职责单一，方便维护，我们一般将web应用程序分为...","permalink":"/post/MySQL学习","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"Study","slug":"Study","count":30,"path":"api/categories/Study.json"}],"tags":[{"name":"数据库","slug":"数据库","count":1,"path":"api/tags/数据库.json"},{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}},"next_post":{"title":"Javaweb前端速通","uid":"186ee7c09be0c58bb704d8a02925d69c","slug":"Javaweb前端速通","date":"2024-02-05T12:56:12.000Z","updated":"2024-02-07T13:12:26.761Z","comments":true,"path":"api/articles/Javaweb前端速通.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/12.jpg","text":"Javaweb前端知识点总结，包含HTML、CSS、JavaScript、Vue。...","permalink":"/post/Javaweb前端速通","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"Study","slug":"Study","count":30,"path":"api/categories/Study.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}}}