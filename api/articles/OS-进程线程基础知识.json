{"title":"OS-进程线程基础知识","uid":"193fbfa2337e88e92d38c2ae6126c3d1","slug":"OS-进程线程基础知识","date":"2024-06-09T08:44:12.000Z","updated":"2024-06-19T08:03:00.479Z","comments":true,"path":"api/articles/OS-进程线程基础知识.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/31.jpg","content":"<h2 id=\"1-进程\"><a href=\"#1-进程\" class=\"headerlink\" title=\"1.进程\"></a>1.进程</h2><p>执行文件后将其装载到内存中，通过CPU执行程序中的每一条指令，那么这个<strong>运行中的程序，就被称为「进程」（Process）</strong></p>\n<p>当进程要从硬盘读取数据时，CPU 不需要阻塞等待数据的返回，而是去执行另外的进程。当硬盘数据返回时，CPU 会收到个<strong>中断</strong>，于是 CPU 再继续运行这个进程。</p>\n<p>这种<strong>多个程序、交替执行</strong>的思想，就有 CPU 管理多个进程的初步想法。</p>\n<p>在 1 秒钟期间，它可能会运行多个进程，这样就产生<strong>并行的错觉</strong>，实际上这是<strong>并发</strong>。</p>\n<h3 id=\"1-1-并发和并行的区别\"><a href=\"#1-1-并发和并行的区别\" class=\"headerlink\" title=\"1.1 并发和并行的区别\"></a>1.1 并发和并行的区别</h3><img src=\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/5-%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C.jpg\" alt=\"并发与并行\" style=\"zoom: 50%;\">\n\n\n\n<h3 id=\"1-2-进程与程序的关系\"><a href=\"#1-2-进程与程序的关系\" class=\"headerlink\" title=\"1.2 进程与程序的关系\"></a>1.2 进程与程序的关系</h3><p><img src=\"/Yoranfish.github.io/oranfish.github.io/posts/0/OS-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/6-%E5%81%9A%E8%8F%9C%E5%AF%B9%E5%BA%94%E8%BF%9B%E7%A8%8B%E5%85%B3%E7%B3%BB.jpg\" alt=\"img\"></p>\n<p><strong>CPU 可以从一个进程（做菜）切换到另外一个进程（买可乐），在切换前必须要记录当前进程中运行的状态信息，以备下次切换回来的时候可以恢复执行。</strong></p>\n<p>进程有着「<strong>运行 - 暂停 - 运行</strong>」的活动规律。</p>\n<h3 id=\"1-3-进程的状态\"><a href=\"#1-3-进程的状态\" class=\"headerlink\" title=\"1.3 进程的状态\"></a>1.3 进程的状态</h3><p><strong>在一个进程的活动期间至少具备三种基本状态，即运行状态、就绪状态、阻塞状态。</strong></p>\n<ul>\n<li>运行状态（<em>Running</em>）：该时刻进程占用 CPU；</li>\n<li>就绪状态（<em>Ready</em>）：可运行，由于其他进程处于运行状态而暂时停止运行；</li>\n<li>阻塞状态（<em>Blocked</em>）：该进程正在等待某一事件发生（如等待输入&#x2F;输出操作的完成）而暂时停止运行，这时，即使给它CPU控制权，它也无法运行；</li>\n</ul>\n<p>当然，进程还有另外两个基本状态：</p>\n<ul>\n<li>创建状态（<em>new</em>）：进程正在被创建时的状态；</li>\n<li>结束状态（<em>Exit</em>）：进程正在从系统中消失时的状态；</li>\n</ul>\n<img src=\"/Yoranfish.github.io/oranfish.github.io/posts/0/8-%E8%BF%9B%E7%A8%8B%E4%BA%94%E4%B8%AA%E7%8A%B6%E6%80%81.jpg\" alt=\"进程五种状态的变迁\" style=\"zoom:50%;\">\n\n<p>进程的状态变迁：</p>\n<ul>\n<li><em>NULL -&gt; 创建状态</em>：一个新进程被创建时的第一个状态；</li>\n<li><em>创建状态 -&gt; 就绪状态</em>：当进程被创建完成并初始化后，一切就绪准备运行时，变为就绪状态，这个过程是很快的；</li>\n<li><em>就绪态 -&gt; 运行状态</em>：处于就绪状态的进程被操作系统的进程调度器选中后，就分配给 CPU 正式运行该进程；</li>\n<li><em>运行状态 -&gt; 结束状态</em>：当进程已经运行完成或出错时，会被操作系统作结束状态处理；</li>\n<li><em>运行状态 -&gt; 就绪状态</em>：处于运行状态的进程在运行过程中，由于分配给它的运行时间片用完，操作系统会把该进程变为就绪态，接着从就绪态选中另外一个进程运行；</li>\n<li><em>运行状态 -&gt; 阻塞状态</em>：当进程请求某个事件且必须等待时，例如请求 I&#x2F;O 事件；</li>\n<li><em>阻塞状态 -&gt; 就绪状态</em>：当进程要等待的事件完成时，它从阻塞状态变到就绪状态；</li>\n</ul>\n<p>在虚拟内存管理的操作系统中，通常会把阻塞状态的进程的物理内存空间换出到硬盘，等需要再次运行的时候，再从硬盘换入到物理内存。</p>\n<p>那么，就需要一个新的状态，来<strong>描述进程没有占用实际的物理内存空间的情况，这个状态就是挂起状态</strong>。这跟阻塞状态是不一样，阻塞状态是等待某个事件的返回。</p>\n<p>另外，挂起状态可以分为两种：</p>\n<ul>\n<li>阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现；</li>\n<li>就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行；</li>\n</ul>\n<img src=\"/Yoranfish.github.io/oranfish.github.io/posts/0/10-%E8%BF%9B%E7%A8%8B%E4%B8%83%E4%B8%AD%E7%8A%B6%E6%80%81.jpg\" alt=\"七种状态变迁\" style=\"zoom:50%;\">\n\n<p>导致进程挂起的原因不只是因为进程所使用的内存空间不在物理内存，还包括如下情况：</p>\n<ul>\n<li>通过 sleep 让进程间歇性挂起，其工作原理是设置一个定时器，到期后唤醒进程。</li>\n<li>用户希望挂起一个程序的执行，比如在 Linux 中用 <code>Ctrl+Z</code> 挂起进程；</li>\n</ul>\n<h3 id=\"1-4-进程的控制结构\"><a href=\"#1-4-进程的控制结构\" class=\"headerlink\" title=\"1.4 进程的控制结构\"></a>1.4 进程的控制结构</h3><p>在操作系统中，是用<strong>进程控制块</strong>（<em>process control block，PCB</em>）数据结构来描述进程的。</p>\n<p><strong>PCB 是进程存在的唯一标识</strong>，这意味着一个进程的存在，必然会有一个 PCB，如果进程消失了，那么 PCB 也会随之消失。</p>\n<h4 id=\"1-4-1-PCB包含的信息\"><a href=\"#1-4-1-PCB包含的信息\" class=\"headerlink\" title=\"1.4.1 PCB包含的信息\"></a>1.4.1 PCB包含的信息</h4><p><strong>进程描述信息：</strong></p>\n<ul>\n<li>进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符；</li>\n<li>用户标识符：进程归属的用户，用户标识符主要为共享和保护服务；</li>\n</ul>\n<p><strong>进程控制和管理信息：</strong></p>\n<ul>\n<li>进程当前状态，如 new、ready、running、waiting 或 blocked 等；</li>\n<li>进程优先级：进程抢占 CPU 时的优先级；</li>\n</ul>\n<p><strong>资源分配清单：</strong></p>\n<ul>\n<li>有关内存地址空间或虚拟地址空间的信息，所打开文件的列表和所使用的 I&#x2F;O 设备信息。</li>\n</ul>\n<p><strong>CPU 相关信息：</strong></p>\n<ul>\n<li>CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。</li>\n</ul>\n<h4 id=\"1-4-2-PCB如何组织\"><a href=\"#1-4-2-PCB如何组织\" class=\"headerlink\" title=\"1.4.2 PCB如何组织\"></a>1.4.2 PCB如何组织</h4><p>通常是通过<strong>链表</strong>的方式进行组织，把具有<strong>相同状态的进程链在一起，组成各种队列</strong>。比如：</p>\n<ul>\n<li>将所有处于就绪状态的进程链在一起，称为<strong>就绪队列</strong>；</li>\n<li>把所有因等待某事件而处于等待状态的进程链在一起就组成各种<strong>阻塞队列</strong>；</li>\n<li>另外，对于运行队列在单核 CPU 系统中则只有一个运行指针了，因为单核 CPU 在某个时间，只能运行一个程序。</li>\n</ul>\n<p>除了链接的组织方式，还有索引方式，它的工作原理：将同一状态的进程组织在一个索引表中，索引表项指向相应的 PCB，不同状态对应不同的索引表。</p>\n<h3 id=\"1-5-进程的控制\"><a href=\"#1-5-进程的控制\" class=\"headerlink\" title=\"1.5 进程的控制\"></a>1.5 进程的控制</h3><p>进程的<strong>创建、终止、阻塞、唤醒</strong>的过程，这些过程也就是进程的控制。</p>\n<p><strong>01 创建进程</strong></p>\n<p>操作系统允许一个进程创建另一个进程，而且允许子进程继承父进程所拥有的资源。</p>\n<p>创建进程的过程如下：</p>\n<ul>\n<li>申请一个空白的 PCB，并向 PCB 中填写一些控制和管理进程的信息，比如进程的唯一标识等；</li>\n<li>为该进程分配运行时所必需的资源，比如内存资源；</li>\n<li>将 PCB 插入到就绪队列，等待被调度运行；</li>\n</ul>\n<p><strong>02 终止进程</strong></p>\n<p>进程可以有 3 种终止方式：正常结束、异常结束以及外界干预（信号 <code>kill</code> 掉）。</p>\n<p>当子进程被终止时，其在父进程处继承的资源应当还给父进程。而当父进程被终止时，该父进程的子进程就变为孤儿进程，会被 1 号进程收养，并由 1 号进程对它们完成状态收集工作。</p>\n<p>终止进程的过程如下：</p>\n<ul>\n<li>查找需要终止的进程的 PCB；</li>\n<li>如果处于执行状态，则立即终止该进程的执行，然后将 CPU 资源分配给其他进程；</li>\n<li>如果其还有子进程，则应将该进程的子进程交给 1 号进程接管；</li>\n<li>将该进程所拥有的全部资源都归还给操作系统；</li>\n<li>将其从 PCB 所在队列中删除；</li>\n</ul>\n<p><strong>03 阻塞进程</strong></p>\n<p>当进程需要等待某一事件完成时，它可以调用阻塞语句把自己阻塞等待。而一旦被阻塞等待，它只能由另一个进程唤醒。</p>\n<p>阻塞进程的过程如下：</p>\n<ul>\n<li>找到将要被阻塞进程标识号对应的 PCB；</li>\n<li>如果该进程为运行状态，则保护其现场，将其状态转为阻塞状态，停止运行；</li>\n<li>将该 PCB 插入到阻塞队列中去；</li>\n</ul>\n<p><strong>04 唤醒进程</strong></p>\n<p>进程由「运行」转变为「阻塞」状态是由于进程必须等待某一事件的完成，所以处于阻塞状态的进程是绝对不可能叫醒自己的。</p>\n<p>如果某进程正在等待 I&#x2F;O 事件，需由别的进程发消息给它，则只有当该进程所期待的事件出现时，才由发现者进程用唤醒语句叫醒它。</p>\n<p>唤醒进程的过程如下：</p>\n<ul>\n<li>在该事件的阻塞队列中找到相应进程的 PCB；</li>\n<li>将其从阻塞队列中移出，并置其状态为就绪状态；</li>\n<li>把该 PCB 插入到就绪队列中，等待调度程序调度；</li>\n</ul>\n<p>进程的阻塞和唤醒是一对功能相反的语句，如果某个进程调用了阻塞语句，则必有一个与之对应的唤醒语句。</p>\n<h3 id=\"1-6-进程的上下文切换\"><a href=\"#1-6-进程的上下文切换\" class=\"headerlink\" title=\"1.6 进程的上下文切换\"></a>1.6 进程的上下文切换</h3><p>各个进程之间是共享 CPU 资源的，在不同的时候进程之间需要切换，让不同的进程可以在 CPU 执行，那么这个<strong>一个进程切换到另一个进程运行，称为进程的上下文切换</strong>。</p>\n<h4 id=\"1-6-1-CPU上下文切换\"><a href=\"#1-6-1-CPU上下文切换\" class=\"headerlink\" title=\"1.6.1 CPU上下文切换\"></a>1.6.1 CPU上下文切换</h4><p>操作系统需要事先帮 CPU 设置好 <strong>CPU 寄存器和程序计数器</strong>。</p>\n<p>CPU 寄存器是 CPU 内部一个容量小，但是速度极快的内存（缓存）。程序计数器则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。</p>\n<p>CPU 寄存器和程序计数是 CPU 在运行任何任务前，所必须依赖的环境，这些环境就叫做 <strong>CPU 上下文</strong>。</p>\n<p>CPU 上下文切换就是先把前一个任务的 CPU 上下文（CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。</p>\n<p>系统内核会存储保持下来的上下文信息，当此任务再次被分配给 CPU 运行时，CPU 会重新加载这些上下文，这样就能保证任务原来的状态不受影响，让任务看起来还是连续运行。</p>\n<p>上面说到所谓的「任务」，主要包含进程、线程和中断。所以，可以根据任务的不同，把 CPU 上下文切换分成：<strong>进程上下文切换、线程上下文切换和中断上下文切换</strong>。</p>\n<h4 id=\"1-6-2-进程上下文切换\"><a href=\"#1-6-2-进程上下文切换\" class=\"headerlink\" title=\"1.6.2 进程上下文切换\"></a>1.6.2 进程上下文切换</h4><p>进程是由内核管理和调度的，所以进程的切换只能发生在内核态。</p>\n<p><strong>进程的上下文切换不仅包含了虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的资源。</strong></p>\n<p>会把交换的信息保存在进程的 PCB，当要运行另外一个进程的时候，我们需要从这个进程的 PCB 取出上下文，然后恢复到 CPU 中，这使得这个进程可以继续执行</p>\n<h4 id=\"1-6-3-发生场景\"><a href=\"#1-6-3-发生场景\" class=\"headerlink\" title=\"1.6.3 发生场景\"></a>1.6.3 发生场景</h4><ul>\n<li>为了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，进程就从运行状态变为就绪状态，系统从就绪队列选择另外一个进程运行；</li>\n<li>进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行；</li>\n<li>当进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度；</li>\n<li>当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行；</li>\n<li>发生硬件中断时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序；</li>\n</ul>\n<h2 id=\"2-线程\"><a href=\"#2-线程\" class=\"headerlink\" title=\"2.线程\"></a>2.线程</h2><p>在早期的操作系统中都是以进程作为独立运行的基本单位，直到后面，计算机科学家们又提出了更小的能独立运行的基本单位，也就是<strong>线程。</strong></p>\n<h3 id=\"2-1-什么是线程\"><a href=\"#2-1-什么是线程\" class=\"headerlink\" title=\"2.1 什么是线程\"></a>2.1 什么是线程</h3><p>**线程( *Thread* )**，线程之间可以并发运行且共享相同的地址空间。</p>\n<p><strong>线程是进程当中的一条执行流程。</strong></p>\n<p>同一个进程内多个线程之间可以共享代码段、数据段、打开的文件等资源，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相对独立的。</p>\n<p><strong>线程的优缺点：</strong></p>\n<ul>\n<li>线程的优点：<ul>\n<li>一个进程中可以同时存在多个线程；</li>\n<li>各个线程之间可以并发执行；</li>\n<li>各个线程之间可以共享地址空间和文件等资源；</li>\n</ul>\n</li>\n<li>线程的缺点：<ul>\n<li>当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃（这里是针对 C&#x2F;C++ 语言，Java语言中的线程奔溃不会造成进程崩溃</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-线程与进程的比较\"><a href=\"#2-2-线程与进程的比较\" class=\"headerlink\" title=\"2.2 线程与进程的比较\"></a>2.2 线程与进程的比较</h3><p>线程与进程的比较如下：</p>\n<ul>\n<li>进程是资源（包括内存、打开的文件等）分配的单位，线程是 CPU 调度的单位；</li>\n<li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li>\n<li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</li>\n<li>线程能减少并发执行的时间和空间开销；</li>\n</ul>\n<p>对于，线程相比进程能减少开销，体现在：</p>\n<ul>\n<li>线程的创建时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；</li>\n<li>线程的终止时间比进程快，因为线程释放的资源相比进程少很多；</li>\n<li>同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；</li>\n<li>由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；</li>\n</ul>\n<p>不管是时间效率，还是空间效率线程比进程都要高。</p>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><h3 id=\"2-3-线程的上下文切换\"><a href=\"#2-3-线程的上下文切换\" class=\"headerlink\" title=\"2.3 线程的上下文切换\"></a>2.3 线程的上下文切换</h3><p>线程与进程最大的区别在于：<strong>线程是调度的基本单位，而进程则是资源拥有的基本单位</strong>。</p>\n<p>操作系统的任务调度，实际上的调度对象是线程，而进程只是给线程提供了虚拟内存、全局变量等资源。</p>\n<ul>\n<li>当进程只有一个线程时，可以认为进程就等于线程；</li>\n<li>当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源，这些资源在上下文切换时是不需要修改的；</li>\n</ul>\n<p>另外，线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的。</p>\n<ul>\n<li>当两个线程不是属于同一个进程，则切换的过程就跟进程上下文切换一样；</li>\n<li><strong>当两个线程是属于同一个进程，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据</strong>；</li>\n</ul>\n<h3 id=\"2-4-线程的实现\"><a href=\"#2-4-线程的实现\" class=\"headerlink\" title=\"2.4 线程的实现\"></a>2.4 线程的实现</h3><p>主要有三种线程的实现方式：</p>\n<ul>\n<li><strong>用户线程（*User Thread*）</strong>：在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理；</li>\n<li><strong>内核线程（*Kernel Thread*）</strong>：在内核中实现的线程，是由内核管理的线程；</li>\n<li><strong>轻量级进程（*LightWeight Process*）</strong>：在内核中来支持用户线程；</li>\n</ul>\n<p>用户线程和内核线程对应关系：多对一、一对一、一对多</p>\n<h4 id=\"2-4-1-用户线程概念以及优势缺陷\"><a href=\"#2-4-1-用户线程概念以及优势缺陷\" class=\"headerlink\" title=\"2.4.1 用户线程概念以及优势缺陷\"></a>2.4.1 用户线程概念以及优势缺陷</h4><p>用户线程是基于用户态的线程管理库来实现的，那么<strong>线程控制块（*Thread Control Block, TCB*）</strong> 也是在库里面来实现的，对于操作系统而言是看不到这个 TCB 的，它只能看到整个进程的 PCB。</p>\n<p><strong>用户线程的整个线程管理和调度，操作系统是不直接参与的，而是由用户级线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等。</strong></p>\n<p>类似多对一关系：</p>\n<img src=\"/Yoranfish.github.io/oranfish.github.io/posts/0/20-%E7%BA%BF%E7%A8%8BPCB-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB.jpg\" alt=\"用户级线程模型\" style=\"zoom: 33%;\">\n\n<p>用户线程的<strong>优点</strong>：</p>\n<ul>\n<li>每个进程都需要有它私有的线程控制块（TCB）列表，用来跟踪记录它各个线程状态信息（PC、栈指针、寄存器），TCB 由用户级线程库函数来维护，可用于不支持线程技术的操作系统；</li>\n<li>用户线程的切换也是由线程库函数来完成的，无需用户态与内核态的切换，所以速度特别快；</li>\n</ul>\n<p>用户线程的<strong>缺点</strong>：</p>\n<ul>\n<li>由于操作系统不参与线程的调度，如果一个线程发起了系统调用而阻塞，那进程所包含的用户线程都不能执行了。</li>\n<li>当一个线程开始运行后，除非它主动地交出 CPU 的使用权，否则它所在的进程当中的其他线程无法运行，因为用户态的线程没法打断当前运行中的线程，它没有这个特权，只有操作系统才有，但是用户线程不是由操作系统管理的。</li>\n<li>由于时间片分配给进程，故与其他进程比，在多线程执行时，每个线程得到的时间片较少，执行会比较慢；</li>\n</ul>\n<h4 id=\"2-4-2-内核线程概念以及优势缺陷\"><a href=\"#2-4-2-内核线程概念以及优势缺陷\" class=\"headerlink\" title=\"2.4.2 内核线程概念以及优势缺陷\"></a>2.4.2 内核线程概念以及优势缺陷</h4><p><strong>内核线程是由操作系统管理的，线程对应的 TCB 自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责。</strong></p>\n<p>类似一对一关系：</p>\n<img src=\"/Yoranfish.github.io/oranfish.github.io/posts/0/21-%E7%BA%BF%E7%A8%8BPCB-%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB.jpg\" alt=\"内核线程模型\" style=\"zoom:33%;\">\n\n<p>内核线程的<strong>优点</strong>：</p>\n<ul>\n<li>在一个进程当中，如果某个内核线程发起系统调用而被阻塞，并不会影响其他内核线程的运行；</li>\n<li>分配给线程，多线程的进程获得更多的 CPU 运行时间；</li>\n</ul>\n<p>内核线程的<strong>缺点</strong>：</p>\n<ul>\n<li>在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息，如 PCB 和 TCB；</li>\n<li>线程的创建、终止和切换都是通过系统调用的方式来进行，因此对于系统来说，系统开销比较大；</li>\n</ul>\n<h4 id=\"2-4-3-轻量级进程\"><a href=\"#2-4-3-轻量级进程\" class=\"headerlink\" title=\"2.4.3 轻量级进程\"></a>2.4.3 轻量级进程</h4><p><strong>轻量级进程（*Light-weight process，LWP*）是内核支持的用户线程，一个进程可有一个或多个 LWP，每个 LWP 是跟内核线程一对一映射的，也就是 LWP 都是由一个内核线程支持，而且 LWP 是由内核管理并像普通进程一样被调度</strong>。</p>\n<p>在大多数系统中，<strong>LWP与普通进程的区别也在于它只有一个最小的执行上下文和调度程序所需的统计信息</strong>。一般来说，一个进程代表程序的一个实例，而 LWP 代表程序的执行线程，因为一个执行线程不像进程那样需要那么多状态信息，所以 LWP 也不带有这样的信息。</p>\n<p>在 LWP 之上也是可以使用用户线程的，那么 LWP 与用户线程的对应关系就有三种：</p>\n<ul>\n<li><code>1 : 1</code>，即一个 LWP 对应 一个用户线程；</li>\n<li><code>N : 1</code>，即一个 LWP 对应多个用户线程；</li>\n<li><code>M : N</code>，即多个 LWP 对应多个用户线程；</li>\n</ul>\n<img src=\"/Yoranfish.github.io/oranfish.github.io/posts/0/22-LWP.jpg\" alt=\"LWP 模型\" style=\"zoom:33%;\">\n\n<p><strong>1 : 1 模式</strong></p>\n<p>一个线程对应到一个 LWP 再对应到一个内核线程，如上图的进程 4，属于此模型。</p>\n<ul>\n<li>优点：实现并行，当一个 LWP 阻塞，不会影响其他 LWP；</li>\n<li>缺点：每一个用户线程，就产生一个内核线程，创建线程的开销较大。</li>\n</ul>\n<p><strong>N : 1 模式</strong></p>\n<p>多个用户线程对应一个 LWP 再对应一个内核线程，如上图的进程 2，线程管理是在用户空间完成的，此模式中用户的线程对操作系统不可见。</p>\n<ul>\n<li>优点：用户线程要开几个都没问题，且上下文切换发生用户空间，切换的效率较高；</li>\n<li>缺点：一个用户线程如果阻塞了，则整个进程都将会阻塞，另外在多核 CPU 中，是没办法充分利用 CPU 的。</li>\n</ul>\n<p><strong>M : N 模式</strong></p>\n<p>根据前面的两个模型混搭一起，就形成 <code>M:N</code> 模型，该模型提供了两级控制，首先多个用户线程对应到多个 LWP，LWP 再一一对应到内核线程，如上图的进程 3。</p>\n<ul>\n<li>优点：综合了前两种优点，大部分的线程上下文发生在用户空间，且多个线程又可以充分利用多核 CPU 的资源。</li>\n</ul>\n<p><strong>组合模式</strong></p>\n<p>如上图的进程 5，此进程结合 <code>1:1</code> 模型和 <code>M:N</code> 模型。开发人员可以针对不同的应用特点调节内核线程的数目来达到物理并行性和逻辑并行性的最佳方案。</p>\n<h2 id=\"3-调度\"><a href=\"#3-调度\" class=\"headerlink\" title=\"3.调度\"></a>3.调度</h2><p>选择一个进程运行这一功能是在操作系统中完成的，通常称为<strong>调度程序</strong>（<em>scheduler</em>）。</p>\n<h3 id=\"3-1-调度时机\"><a href=\"#3-1-调度时机\" class=\"headerlink\" title=\"3.1 调度时机\"></a>3.1 调度时机</h3><p>在进程的生命周期中，当进程从一个运行状态到另外一状态变化的时候，其实会触发一次调度。</p>\n<p>比如，以下状态的变化都会触发操作系统的调度：</p>\n<ul>\n<li><em>从就绪态 -&gt; 运行态</em>：当进程被创建时，会进入到就绪队列，操作系统会从就绪队列选择一个进程运行；</li>\n<li><em>从运行态 -&gt; 阻塞态</em>：当进程发生 I&#x2F;O 事件而阻塞时，操作系统必须选择另外一个进程运行；</li>\n<li><em>从运行态 -&gt; 结束态</em>：当进程退出结束后，操作系统得从就绪队列选择另外一个进程运行；</li>\n</ul>\n<p>这些状态变化的时候，操作系统需要考虑是否要让新的进程给 CPU 运行，或者是否让当前进程从 CPU 上退出来而换另一个进程运行。</p>\n<p>如果硬件时钟提供某个频率的周期性中断，那么可以根据如何处理时钟中断 ，把调度算法分为两类：</p>\n<ul>\n<li><strong>非抢占式调度算法</strong>挑选一个进程，然后让该进程运行直到被阻塞，或者直到该进程退出，才会调用另外一个进程，也就是说不会理时钟中断这个事情。</li>\n<li><strong>抢占式调度算法</strong>挑选一个进程，然后让该进程只运行某段时间，如果在该时段结束时，该进程仍然在运行时，则会把它挂起，接着调度程序从就绪队列挑选另外一个进程。这种抢占式调度处理，需要在时间间隔的末端发生<strong>时钟中断</strong>，以便把 CPU 控制返回给调度程序进行调度，也就是常说的<strong>时间片机制</strong>。</li>\n</ul>\n<h3 id=\"3-2-调度原则\"><a href=\"#3-2-调度原则\" class=\"headerlink\" title=\"3.2 调度原则\"></a>3.2 调度原则</h3><p><em>原则一</em>：如果运行的程序，发生了 I&#x2F;O 事件的请求，那 CPU 使用率必然会很低，因为此时进程在阻塞等待硬盘的数据返回。这样的过程，势必会造成 CPU 突然的空闲。所以，<strong>为了提高 CPU 利用率，在这种发送 I&#x2F;O 事件致使 CPU 空闲的情况下，调度程序需要从就绪队列中选择一个进程来运行。</strong></p>\n<p><em>原则二</em>：有的程序执行某个任务花费的时间会比较长，如果这个程序一直占用着 CPU，会造成系统吞吐量（CPU 在单位时间内完成的进程数量）的降低。所以，<strong>要提高系统的吞吐率，调度程序要权衡长任务和短任务进程的运行完成数量。</strong></p>\n<p><em>原则三</em>：从进程开始到结束的过程中，实际上是包含两个时间，分别是进程运行时间和进程等待时间，这两个时间总和就称为周转时间。进程的周转时间越小越好，<strong>如果进程的等待时间很长而运行时间很短，那周转时间就很长，这不是我们所期望的，调度程序应该避免这种情况发生。</strong></p>\n<p><em>原则四</em>：处于就绪队列的进程，也不能等太久，当然希望这个等待的时间越短越好，这样可以使得进程更快的在 CPU 中执行。所以，<strong>就绪队列中进程的等待时间也是调度程序所需要考虑的原则。</strong></p>\n<p><em>原则五</em>：对于鼠标、键盘这种交互式比较强的应用，我们当然希望它的响应时间越快越好，否则就会影响用户体验了。所以，<strong>对于交互式比较强的应用，响应时间也是调度程序需要考虑的原则。</strong></p>\n<p>针对上面的五种调度原则，总结成如下：</p>\n<ul>\n<li><strong>CPU 利用率</strong>：调度程序应确保 CPU 是始终匆忙的状态，这可提高 CPU 的利用率；</li>\n<li><strong>系统吞吐量</strong>：吞吐量表示的是单位时间内 CPU 完成进程的数量，长作业的进程会占用较长的 CPU 资源，因此会降低吞吐量，相反，短作业的进程会提升系统吞吐量；</li>\n<li><strong>周转时间</strong>：周转时间是进程运行+阻塞时间+等待时间的总和，一个进程的周转时间越小越好；</li>\n<li><strong>等待时间</strong>：这个等待时间不是阻塞状态的时间，而是进程处于就绪队列的时间，等待的时间越长，用户越不满意；</li>\n<li><strong>响应时间</strong>：用户提交请求到系统第一次产生响应所花费的时间，在交互式系统中，响应时间是衡量调度算法好坏的主要标准。</li>\n</ul>\n<h3 id=\"3-3-调度算法\"><a href=\"#3-3-调度算法\" class=\"headerlink\" title=\"3.3 调度算法\"></a>3.3 调度算法</h3><p>先来先服务FCFS、最短作业优先SJF、高响应比优先HRRN、时间片轮转RR、最高优先级调度HPF、多级反馈队列调度。具体详看另文。</p>\n<h2 id=\"4-一个进程最多可以创建多少线程\"><a href=\"#4-一个进程最多可以创建多少线程\" class=\"headerlink\" title=\"4.一个进程最多可以创建多少线程\"></a>4.一个进程最多可以创建多少线程</h2><p>这个问题跟两个东西有关系：</p>\n<ul>\n<li><strong>进程的虚拟内存空间上限</strong>，因为创建一个线程，操作系统需要为其分配一个栈空间，如果线程数量越多，所需的栈空间就要越大，那么虚拟内存就会占用的越多。</li>\n<li><strong>系统参数限制</strong>，虽然 Linux 并没有内核参数来控制单个进程创建的最大线程个数，但是有系统级别的参数来控制整个系统的最大线程个数。</li>\n</ul>\n<p>区别于不同系统：</p>\n<ul>\n<li>32 位系统，用户态的虚拟空间只有 3G，如果创建线程时分配的栈空间是 10M，那么一个进程最多只能创建 300 个左右的线程。</li>\n<li>64 位系统，用户态的虚拟空间大到有 128T，理论上不会受虚拟内存大小的限制，而会受系统的参数或性能限制。</li>\n</ul>\n<h2 id=\"5-线程崩溃了进程会崩溃吗\"><a href=\"#5-线程崩溃了进程会崩溃吗\" class=\"headerlink\" title=\"5.线程崩溃了进程会崩溃吗\"></a>5.线程崩溃了进程会崩溃吗</h2><p><strong>为什么 C&#x2F;C++ 语言里，线程崩溃后，进程也会崩溃，而 Java 语言里却不会呢？</strong></p>\n<h3 id=\"5-1-线程崩溃进程一定崩溃吗\"><a href=\"#5-1-线程崩溃进程一定崩溃吗\" class=\"headerlink\" title=\"5.1 线程崩溃进程一定崩溃吗\"></a>5.1 线程崩溃进程一定崩溃吗</h3><p>一般来说如果线程是因为非法访问内存引起的崩溃，那么进程肯定会崩溃，为什么系统要让进程崩溃呢，这主要是因为在进程中，<strong>各个线程的地址空间是共享的</strong>，既然是共享，那么某个线程对地址的非法访问就会导致内存的不确定性，进而可能会影响到其他线程，这种操作是危险的，操作系统会认为这很可能导致一系列严重的后果，于是干脆让整个进程崩溃</p>\n<p>线程共享代码段，数据段，地址空间，文件非法访问内存有以下几种情况，我们以 C 语言举例来看看。</p>\n<p>1.、针对只读内存写入数据</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #89DDFF; font-style: italic\">#include</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C3E88D\">stdio.h</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #89DDFF; font-style: italic\">#include</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C3E88D\">stdlib.h</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #C792EA\">char</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #F07178\">s </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">hello world</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">      </span><span style=\"color: #676E95; font-style: italic\">// 向只读内存写入数据，崩溃</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #BABED8\">s</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">H</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #F07178\"> </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">   </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>2、访问了进程没有权限访问的地址空间（比如内核空间）</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #89DDFF; font-style: italic\">#include</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C3E88D\">stdio.h</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #89DDFF; font-style: italic\">#include</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C3E88D\">stdlib.h</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #C792EA\">int</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #F07178\">p </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">*)</span><span style=\"color: #F78C6C\">0xC0000fff</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">      </span><span style=\"color: #676E95; font-style: italic\">// 针对进程的内核空间写入数据，崩溃</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #F07178\">p </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #F07178\"> </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">   </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>在 32 位虚拟地址空间中，p 指向的是内核空间，显然不具有写入权限，所以上述赋值操作会导致崩溃</p>\n<p>3、访问了不存在的内存，比如：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #89DDFF; font-style: italic\">#include</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C3E88D\">stdio.h</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #89DDFF; font-style: italic\">#include</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C3E88D\">stdlib.h</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #C792EA\">int</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #F07178\">a </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">NULL;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #F07178\">a </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #F07178\">     </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">   </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>以上错误都是访问内存时的错误，所以统一会报 Segment Fault 错误（即段错误），这些都会导致进程崩溃</p>\n<h3 id=\"5-2-进程是如何崩溃的\"><a href=\"#5-2-进程是如何崩溃的\" class=\"headerlink\" title=\"5.2 进程是如何崩溃的\"></a>5.2 进程是如何崩溃的</h3><p>那么线程崩溃后，进程是如何崩溃的呢，这背后的机制到底是怎样的，答案是<strong>信号</strong>。</p>\n<p>大家想想要干掉一个正在运行的进程是不是经常用 kill -9 pid 这样的命令，这里的 kill 其实就是给指定 pid 发送终止信号的意思，其中的 9 就是信号。</p>\n<p>当然了发 kill 信号必须具有一定的权限，否则任意进程都可以通过发信号来终止其他进程，那显然是不合理的，实际上 kill 执行的是系统调用，将控制权转移给了内核（操作系统），由内核来给指定的进程发送信号</p>\n<p>那么发个信号进程怎么就崩溃了呢，这背后的原理到底是怎样的？</p>\n<p>其背后的机制如下</p>\n<ol>\n<li>CPU 执行正常的进程指令</li>\n<li>调用 kill 系统调用向进程发送信号</li>\n<li>进程收到操作系统发的信号，CPU 暂停当前程序运行，并将控制权转交给操作系统</li>\n<li>调用 kill 系统调用向进程发送信号（假设为 11，即 SIGSEGV，一般非法访问内存报的都是这个错误）</li>\n<li><strong>操作系统根据情况执行相应的信号处理程序（函数），一般执行完信号处理程序逻辑后会让进程退出</strong></li>\n</ol>\n<h3 id=\"5-3-为什么线程崩溃不会导致JVM进程崩溃\"><a href=\"#5-3-为什么线程崩溃不会导致JVM进程崩溃\" class=\"headerlink\" title=\"5.3 为什么线程崩溃不会导致JVM进程崩溃\"></a>5.3 为什么线程崩溃不会导致JVM进程崩溃</h3><p>在 Java 中有哪些是常见的由于非法访问内存而产生的 Exception 或 error 呢，常见的是大家熟悉的 StackoverflowError 或者 NPE（NullPointerException）,NPE 我们都了解，属于是访问了不存在的内存。</p>\n<p>但为什么栈溢出（Stackoverflow）也属于非法访问内存呢，这得简单聊一下进程的虚拟空间，也就是前面提到的共享地址空间。</p>\n<p>现代操作系统为了保护进程之间不受影响，所以使用了虚拟地址空间来隔离进程，进程的寻址都是针对虚拟地址，每个进程的虚拟空间都是一样的，而线程会共用进程的地址空间。</p>\n<p>进程每调用一个函数，都会分配一个栈桢，然后在栈桢里会分配函数里定义的各种局部变量。</p>\n<p>假设现在调用了一个无限递归的函数，那就会持续分配栈帧，但 stack 的大小是有限的（Linux 中默认为 8 M，可以通过 ulimit -a 查看），如果无限递归很快栈就会分配完了，此时再调用函数试图分配超出栈的大小内存，就会发生段错误，也就是 stackoverflowError。</p>\n<p>JVM 为什么不会崩溃呢？其实就是<strong>因为 JVM 自定义了自己的信号处理函数，拦截了 SIGSEGV 信号，针对这两者不让它们崩溃</strong>。</p>\n<h3 id=\"5-4-总结\"><a href=\"#5-4-总结\" class=\"headerlink\" title=\"5.4 总结\"></a>5.4 总结</h3><p>为什么发生了 StackoverflowError 和 NPE 这两个非法访问内存的错误，JVM 却没有崩溃。</p>\n<p><strong>原因其实就是虚拟机内部定义了信号处理函数，而在信号处理函数中对这两者做了额外的处理以让 JVM 不崩溃，另一方面也可以看出如果 JVM 不对信号做额外的处理，最后会自己退出并产生 crash 文件 hs_err_pid_xxx.log（可以通过 -XX:ErrorFile&#x3D;&#x2F;var&#x2F;*log*&#x2F;hs_err.log 这样的方式指定），这个文件记录了虚拟机崩溃的重要原因</strong>。</p>\n<p>所以也可以说，虚拟机是否崩溃只要看它是否会产生此崩溃日志文件</p>\n<p>正常情况下，操作系统为了保证系统安全，所以针对非法内存访问会发送一个 SIGSEGV 信号，而操作系统一般会调用默认的信号处理函数（一般会让相关的进程崩溃）。</p>\n<p>但如果进程觉得”罪不致死”，那么它也可以选择自定义一个信号处理函数，这样的话它就可以做一些自定义的逻辑，比如记录 crash 信息等有意义的事。</p>\n<p>回过头来看为什么虚拟机会针对 StackoverflowError 和 NullPointerException 做额外处理让线程恢复呢，针对 stackoverflow 其实它采用了一种栈回溯的方法保证线程可以一直执行下去，而捕获空指针错误主要是这个错误实在太普遍了。</p>\n<p>为了这一个很常见的错误而让 JVM 崩溃那线上的 JVM 要宕机多少次，所以出于工程健壮性的考虑，与其直接让 JVM 崩溃倒不如让线程起死回生，并且将这两个错误&#x2F;异常抛给用户来处理。</p>\n","text":"1.进程执行文件后将其装载到内存中，通过CPU执行程序中的每一条指令，那么这个运行中的程序，就被称为「进程」（Process） 当进程要从硬盘读取数据时，CPU...","permalink":"/post/OS-进程线程基础知识","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Study","slug":"Study","count":30,"path":"api/categories/Study.json"}],"tags":[{"name":"学习","slug":"学习","count":20,"path":"api/tags/学习.json"},{"name":"操作系统","slug":"操作系统","count":9,"path":"api/tags/操作系统.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">1.进程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E5%B9%B6%E5%8F%91%E5%92%8C%E5%B9%B6%E8%A1%8C%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">1.1 并发和并行的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">1.2 进程与程序的关系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">1.3 进程的状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1.4 进程的控制结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-1-PCB%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">1.4.1 PCB包含的信息</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-2-PCB%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87\"><span class=\"toc-text\">1.4.2 PCB如何组织</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">1.5 进程的控制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-6-%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">1.6 进程的上下文切换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-6-1-CPU%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">1.6.1 CPU上下文切换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-6-2-%E8%BF%9B%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">1.6.2 进程上下文切换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-6-3-%E5%8F%91%E7%94%9F%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">1.6.3 发生场景</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">2.线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">2.1 什么是线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">2.2 线程与进程的比较</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2\"><span class=\"toc-text\">2.3 线程的上下文切换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.4 线程的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-1-%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8A%BF%E7%BC%BA%E9%99%B7\"><span class=\"toc-text\">2.4.1 用户线程概念以及优势缺陷</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-2-%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8A%BF%E7%BC%BA%E9%99%B7\"><span class=\"toc-text\">2.4.2 内核线程概念以及优势缺陷</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-3-%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">2.4.3 轻量级进程</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">3.调度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E8%B0%83%E5%BA%A6%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">3.1 调度时机</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E8%B0%83%E5%BA%A6%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">3.2 调度原则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.3 调度算法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E6%9C%80%E5%A4%9A%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B0%91%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">4.一个进程最多可以创建多少线程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E7%BA%BF%E7%A8%8B%E5%B4%A9%E6%BA%83%E4%BA%86%E8%BF%9B%E7%A8%8B%E4%BC%9A%E5%B4%A9%E6%BA%83%E5%90%97\"><span class=\"toc-text\">5.线程崩溃了进程会崩溃吗</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E7%BA%BF%E7%A8%8B%E5%B4%A9%E6%BA%83%E8%BF%9B%E7%A8%8B%E4%B8%80%E5%AE%9A%E5%B4%A9%E6%BA%83%E5%90%97\"><span class=\"toc-text\">5.1 线程崩溃进程一定崩溃吗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E8%BF%9B%E7%A8%8B%E6%98%AF%E5%A6%82%E4%BD%95%E5%B4%A9%E6%BA%83%E7%9A%84\"><span class=\"toc-text\">5.2 进程是如何崩溃的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E5%B4%A9%E6%BA%83%E4%B8%8D%E4%BC%9A%E5%AF%BC%E8%87%B4JVM%E8%BF%9B%E7%A8%8B%E5%B4%A9%E6%BA%83\"><span class=\"toc-text\">5.3 为什么线程崩溃不会导致JVM进程崩溃</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5.4 总结</span></a></li></ol></li></ol>","author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"基础-网络模型","uid":"db54f8ebd79c49c03d8c8d5623b2689d","slug":"基础-网络模型","date":"2024-06-10T07:25:12.000Z","updated":"2024-06-19T07:59:29.216Z","comments":true,"path":"api/articles/基础-网络模型.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/27.jpg","text":"对于同一台设备上的进程间通信，有很多种方式，比如有管道、消息队列、共享内存、信号等方式，而对于不同设备上的进程间通信，就需要网络通信，而设备是多样性的，所以要兼...","permalink":"/post/基础-网络模型","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Study","slug":"Study","count":30,"path":"api/categories/Study.json"}],"tags":[{"name":"学习","slug":"学习","count":20,"path":"api/tags/学习.json"},{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/tags/计算机网络.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}},"next_post":{"title":"OS-死锁","uid":"89874e71a8d4fa3b3317f544a3a17f4e","slug":"OS-死锁","date":"2024-06-09T07:25:12.000Z","updated":"2024-06-19T08:04:20.639Z","comments":true,"path":"api/articles/OS-死锁.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/33.jpg","text":"1.死锁的概念在多线程编程中，我们为了防止多线程竞争共享资源而导致数据错乱，都会在操作共享资源之前加上互斥锁，只有成功获得到锁的线程，才能操作共享资源，获取不到...","permalink":"/post/OS-死锁","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Study","slug":"Study","count":30,"path":"api/categories/Study.json"}],"tags":[{"name":"学习","slug":"学习","count":20,"path":"api/tags/学习.json"},{"name":"操作系统","slug":"操作系统","count":9,"path":"api/tags/操作系统.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}}}