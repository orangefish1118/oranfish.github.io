{"title":"算竞常用STL","uid":"af7adfb1aa53297139dec65c56a65de6","slug":"算竞常用STL","date":"2024-02-14T12:01:12.000Z","updated":"2024-03-08T08:21:08.270Z","comments":true,"path":"api/articles/算竞常用STL.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/20.png","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h1><p>**C++ 标准模板库 (STL, Standard Template Library)**：包含一些常用数据结构与算法的模板的 C++ 软件库。其包含四个组件——算法 (Algorithms)、容器 (Containers)、仿函数 (Functors)、迭代器 (Iterators).</p>\n<span id=\"more\"></span>\n\n<p>示例：</p>\n<ul>\n<li>算法：<code>sort(a.begin(), a.end())</code></li>\n<li>容器：<code>priority_queue&lt;int&gt; pque</code></li>\n<li>仿函数：<code>greater&lt;int&gt;()</code></li>\n<li>迭代器：<code>vector&lt;int&gt;::iterator it = a.begin()</code></li>\n</ul>\n<p>STL 作为一个封装良好，性能合格的 C++ 标准库，在算法竞赛中运用极其常见。灵活且正确使用 STL 可以节省非常多解题时间，这一点不仅是由于可以直接调用，还是因为它封装良好，可以让代码的可读性变高，解题思路更清晰，调试过程 <del>往往</del> 更顺利。</p>\n<p>不过 STL 毕竟使用了很多复杂的结构来实现丰富的功能，它的效率往往是比不上自己手搓针对特定题目的数据结构与算法的。因此，STL 的使用相当于使用更长的运行时间换取更高的编程效率。因此，在实际比赛中要权衡 STL 的利弊，不过这一点就得靠经验了。</p>\n<p>接下来，我会分享在算法竞赛中常用的 STL 容器和算法，对于函数和迭代器，就不着重展开讲了。</p>\n<h1 id=\"2-常用容器\"><a href=\"#2-常用容器\" class=\"headerlink\" title=\"2 常用容器\"></a>2 常用容器</h1><h2 id=\"2-1-内容总览\"><a href=\"#2-1-内容总览\" class=\"headerlink\" title=\"2.1 内容总览\"></a>2.1 内容总览</h2><p>打勾的是本次将会详细讲解的，加粗的是算法竞赛中有必要学习的。</p>\n<ul>\n<li><p>顺序容器</p>\n<ul>\n<li><p><input disabled type=\"checkbox\"> \n<strong>array</strong></p>\n</li>\n<li><p><input checked disabled type=\"checkbox\"> \n<strong>vector</strong></p>\n</li>\n<li><p><input disabled type=\"checkbox\"> \n<strong>deque</strong></p>\n</li>\n<li><p><input disabled type=\"checkbox\"> \nforward_list</p>\n</li>\n<li><p><input disabled type=\"checkbox\"> \n<strong>list</strong></p>\n</li>\n</ul>\n</li>\n<li><p>关联容器</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> <strong>set</strong></li>\n<li><input checked disabled type=\"checkbox\"> <strong>map</strong></li>\n<li><input disabled type=\"checkbox\"> <strong>multiset</strong></li>\n<li><input disabled type=\"checkbox\"> <strong>multimap</strong></li>\n</ul>\n</li>\n<li><p>无序关联容器</p>\n<ul>\n<li><input disabled type=\"checkbox\"> <strong>unordered_set</strong></li>\n<li><input disabled type=\"checkbox\"> <strong>unordered_map</strong></li>\n<li><input disabled type=\"checkbox\"> <strong>unordered_multiset</strong></li>\n<li><input disabled type=\"checkbox\"> <strong>unordered_multimap</strong></li>\n</ul>\n</li>\n<li><p>容器适配器</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> <strong>stack</strong></li>\n<li><input checked disabled type=\"checkbox\"> <strong>queue</strong></li>\n<li><input checked disabled type=\"checkbox\"> <strong>priority_queue</strong></li>\n<li><input disabled type=\"checkbox\"> flat_set</li>\n<li><input disabled type=\"checkbox\"> flat_map</li>\n<li><input disabled type=\"checkbox\"> flat_multiset</li>\n<li><input disabled type=\"checkbox\"> flat_multimap</li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> <strong>string</strong> (basic_string&lt;char&gt;)</li>\n</ul>\n</li>\n<li><p>对与元组</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> <strong>pair</strong></li>\n<li><input disabled type=\"checkbox\"> <strong>tuple</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-2-向量-vector\"><a href=\"#2-2-向量-vector\" class=\"headerlink\" title=\"2.2 向量 vector\"></a>2.2 向量 <a href=\"https://zh.cppreference.com/w/cpp/container/vector\">vector</a></h2><p><strong><code>#include &lt;vector&gt;</code></strong></p>\n<p>连续的顺序的储存结构（和数组一样的类别），但是有长度可变的特性。</p>\n<h3 id=\"2-2-1-常用方法\"><a href=\"#2-2-1-常用方法\" class=\"headerlink\" title=\"2.2.1 常用方法\"></a>2.2.1 常用方法</h3><h4 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h4><p><strong><code>vector&lt;类型&gt; arr(长度, [初值])</code></strong></p>\n<p>时间复杂度：$O(n)$</p>\n<p>常用的一维和二维数组构造示例，高维也是一样的（就是会有点长）.</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">         // 构造int数组</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">arr</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">    // 构造初始长100的int数组</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">arr</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\"> // 构造初始长100的int数组，初值为1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">mat</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">());</span><span style=\"color: #676E95; font-style: italic\">       // 构造初始100行，不指定列数的二维数组</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">mat</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">666</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #676E95; font-style: italic\"> // 构造初始100行，初始666列的二维数组，初值为-1</span></span></code></pre></div><p>构造二维数组的奇葩写法，千万别用：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">];</span><span style=\"color: #676E95; font-style: italic\">         // 正确，构造初始100行，不指定列数的二维数组，可用于链式前向星存图</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">](</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\"> // 语法错误！</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">arr</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)[</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">];</span><span style=\"color: #676E95; font-style: italic\"> // 语法错误！</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;!--</span><span style=\"color: #BABED8\">swig￼</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">--&gt;;</span><span style=\"color: #676E95; font-style: italic\"> // 正确但奇葩，使用列表初始化</span></span></code></pre></div><h4 id=\"尾接-尾删\"><a href=\"#尾接-尾删\" class=\"headerlink\" title=\"尾接 &amp; 尾删\"></a>尾接 &amp; 尾删</h4><ul>\n<li>**<code>.push_back(元素)</code>**：在 vector 尾接一个元素，数组长度 $+1$.</li>\n<li>**<code>.pop_back()</code>**：删除 vector 尾部的一个元素，数组长度 $-1$</li>\n</ul>\n<p>时间复杂度：均摊 $O(1)$</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// init: arr = []</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push_back</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// after: arr = [1]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push_back</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// after: arr = [1, 2]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop_back</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// after: arr = [1]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop_back</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// after: arr = []</span></span></code></pre></div><h4 id=\"中括号运算符\"><a href=\"#中括号运算符\" class=\"headerlink\" title=\"中括号运算符\"></a>中括号运算符</h4><p>和一般数组一样的作用</p>\n<p>时间复杂度：$O(1)$</p>\n<h4 id=\"获取长度\"><a href=\"#获取长度\" class=\"headerlink\" title=\"获取长度\"></a>获取长度</h4><p><strong><code>.size()</code></strong></p>\n<p>获取当前 vector 的长度</p>\n<p>时间复杂度：$O(1)$</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h4 id=\"清空\"><a href=\"#清空\" class=\"headerlink\" title=\"清空\"></a>清空</h4><p><strong><code>.clear()</code></strong></p>\n<p>清空 vector</p>\n<p>时间复杂度：$O(n)$</p>\n<h4 id=\"判空\"><a href=\"#判空\" class=\"headerlink\" title=\"判空\"></a>判空</h4><p><strong><code>.empty()</code></strong></p>\n<p>如果是空返回 <code>true</code> 反之返回 <code>false</code>.</p>\n<p>时间复杂度：$O(1)$</p>\n<h4 id=\"改变长度\"><a href=\"#改变长度\" class=\"headerlink\" title=\"改变长度\"></a>改变长度</h4><p><strong><code>.resize(新长度, [默认值])</code></strong></p>\n<p>修改 vector 的长度</p>\n<ul>\n<li>如果是缩短，则删除多余的值</li>\n<li>如果是扩大，且指定了默认值，则新元素均为默认值<strong>（旧元素不变）</strong></li>\n</ul>\n<p>时间复杂度：$O(n)$</p>\n<h3 id=\"2-2-2-适用情形\"><a href=\"#2-2-2-适用情形\" class=\"headerlink\" title=\"2.2.2 适用情形\"></a>2.2.2 适用情形</h3><p>一般情况 <code>vector</code> 可以替换掉普通数组，除非该题卡常。</p>\n<p>有些情况普通数组没法解决：$n\\times m$ 的矩阵，$1\\leq n,m\\leq 10^6$ 且 $n\\times m \\leq 10^6$</p>\n<ul>\n<li>如果用普通数组 <code>int mat[1000010][1000010]</code>，浪费内存，会导致 MLE。</li>\n<li>如果使用 <code>vector&lt;vector&lt;int&gt;&gt; mat(n + 10, vector&lt;int&gt; (m + 10))</code>，完美解决该问题。</li>\n</ul>\n<p>另外，<code>vector</code> 的数据储存在堆空间中，不会爆栈。</p>\n<h3 id=\"2-2-3-注意事项\"><a href=\"#2-2-3-注意事项\" class=\"headerlink\" title=\"2.2.3 注意事项\"></a>2.2.3 注意事项</h3><h4 id=\"提前指定长度\"><a href=\"#提前指定长度\" class=\"headerlink\" title=\"提前指定长度\"></a>提前指定长度</h4><p>如果长度已经确定，那么应当直接在构造函数指定长度，而不是一个一个 <code>.push_back()</code>. 因为 <code>vector</code> 额外内存耗尽后的重分配是有时间开销的，直接指定长度就不会出现重分配了。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 优化前: 522ms</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1e8</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push_back</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 优化后: 259ms</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">a</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1e8</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    a</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h4 id=\"当心-size-t-溢出\"><a href=\"#当心-size-t-溢出\" class=\"headerlink\" title=\"当心 size_t 溢出\"></a>当心 size_t 溢出</h4><p>vector 获取长度的方法 <code>.size()</code> 返回值类型为 <code>size_t</code>，通常 OJ 平台使用的是 32 位编译器（有些平台例如 cf 可选 64 位），那么该类型范围为 $[0,2^{32})$.</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">a</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">65536</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">long</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #BABED8\"> a </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #676E95; font-style: italic\"> // 直接溢出变成0了</span></span></code></pre></div><h2 id=\"2-3-栈-stack\"><a href=\"#2-3-栈-stack\" class=\"headerlink\" title=\"2.3 栈 stack\"></a>2.3 栈 <a href=\"https://zh.cppreference.com/w/cpp/container/stack\">stack</a></h2><p><strong><code>#include &lt;stack&gt;</code></strong></p>\n<p>通过二次封装双端队列 (deque) 容器，实现先进后出的栈数据结构。</p>\n<h3 id=\"2-3-1-常用方法\"><a href=\"#2-3-1-常用方法\" class=\"headerlink\" title=\"2.3.1 常用方法\"></a>2.3.1 常用方法</h3><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>构造</td>\n<td><code>stack&lt;类型&gt; stk</code></td>\n<td><code>stack&lt;int&gt; stk;</code></td>\n</tr>\n<tr>\n<td>进栈</td>\n<td><code>.push(元素)</code></td>\n<td><code>stk.push(1);</code></td>\n</tr>\n<tr>\n<td>出栈</td>\n<td><code>.pop()</code></td>\n<td><code>stk.pop();</code></td>\n</tr>\n<tr>\n<td>取栈顶</td>\n<td><code>.top()</code></td>\n<td><code>int a = stk.top();</code></td>\n</tr>\n<tr>\n<td>查看大小 &#x2F; 清空 &#x2F; 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-2-适用情形\"><a href=\"#2-3-2-适用情形\" class=\"headerlink\" title=\"2.3.2 适用情形\"></a>2.3.2 适用情形</h3><p>如果不卡常的话，就可以直接用它而不需要手写栈了。</p>\n<p>另外，vector 也可以当栈用，vector 的 <code>.back()</code> 取尾部元素，就相当于取栈顶，<code>.push_back()</code> 相当于进栈，<code>.pop_back()</code> 相当于出栈。</p>\n<h3 id=\"2-3-3-注意事项\"><a href=\"#2-3-3-注意事项\" class=\"headerlink\" title=\"2.3.3 注意事项\"></a>2.3.3 注意事项</h3><p>不可访问内部元素！<strong>下面都是错误用法</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> stk</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> stk</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> ele </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> stk</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> stk </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h2 id=\"2-4-队列-queue\"><a href=\"#2-4-队列-queue\" class=\"headerlink\" title=\"2.4 队列 queue\"></a>2.4 队列 <a href=\"https://zh.cppreference.com/w/cpp/container/queue\">queue</a></h2><p><strong><code>#include &lt;queue&gt;</code></strong></p>\n<p>通过二次封装双端队列 (deque) 容器，实现先进先出的队列数据结构。</p>\n<h3 id=\"2-4-1-常用方法\"><a href=\"#2-4-1-常用方法\" class=\"headerlink\" title=\"2.4.1 常用方法\"></a>2.4.1 常用方法</h3><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>构造</td>\n<td><code>queue&lt;类型&gt; que</code></td>\n<td><code>queue&lt;int&gt; que;</code></td>\n</tr>\n<tr>\n<td>进队</td>\n<td><code>.push(元素)</code></td>\n<td><code>que.push(1);</code></td>\n</tr>\n<tr>\n<td>出队</td>\n<td><code>.pop()</code></td>\n<td><code>que.pop();</code></td>\n</tr>\n<tr>\n<td>取队首</td>\n<td><code>.front()</code></td>\n<td><code>int a = que.front();</code></td>\n</tr>\n<tr>\n<td>取队尾</td>\n<td><code>.back()</code></td>\n<td><code>int a = que.back();</code></td>\n</tr>\n<tr>\n<td>查看大小 &#x2F; 清空 &#x2F; 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-2-适用情形\"><a href=\"#2-4-2-适用情形\" class=\"headerlink\" title=\"2.4.2 适用情形\"></a>2.4.2 适用情形</h3><p>如果不卡常的话，就可以直接用它而不需要手写队列了。</p>\n<h3 id=\"2-4-3-注意事项\"><a href=\"#2-4-3-注意事项\" class=\"headerlink\" title=\"2.4.3 注意事项\"></a>2.4.3 注意事项</h3><p>不可访问内部元素！<strong>下面都是错误用法</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> ele </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> que</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> ele </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h2 id=\"2-5-优先队列-priority-queue\"><a href=\"#2-5-优先队列-priority-queue\" class=\"headerlink\" title=\"2.5 优先队列 priority_queue\"></a>2.5 优先队列 <a href=\"https://zh.cppreference.com/w/cpp/container/priority_queue\">priority_queue</a></h2><p><strong><code>#include &lt;queue&gt;</code></strong></p>\n<p>提供常数时间的最大元素查找，对数时间的插入与提取，底层原理是二叉堆。</p>\n<h3 id=\"2-5-1-常用方法\"><a href=\"#2-5-1-常用方法\" class=\"headerlink\" title=\"2.5.1 常用方法\"></a>2.5.1 常用方法</h3><h4 id=\"构造-1\"><a href=\"#构造-1\" class=\"headerlink\" title=\"构造\"></a>构造</h4><p><strong><code>priority_queue&lt;类型, 容器, 比较器&gt; pque</code></strong></p>\n<ul>\n<li>类型：要储存的数据类型</li>\n<li>容器：储存数据的底层容器，默认为 <code>vector&lt;类型&gt;</code>，竞赛中保持默认即可</li>\n<li>比较器：比较大小使用的比较器，默认为 <code>less&lt;类型&gt;</code>，可自定义</li>\n</ul>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">priority_queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> pque1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">                            // 储存int的大顶堆</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">priority_queue</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;,</span><span style=\"color: #BABED8\"> greater</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> pque2</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> // 储存int的小顶堆</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 &#x2F; lambda 表达式），在此就不展开讲了。如果想要了解，可以查阅 cppreference 中的代码示例。</p></blockquote>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>进堆</td>\n<td><code>.push(元素)</code></td>\n<td><code>que.push(1);</code></td>\n</tr>\n<tr>\n<td>出堆</td>\n<td><code>.pop()</code></td>\n<td><code>que.pop();</code></td>\n</tr>\n<tr>\n<td>取堆顶</td>\n<td><code>.top()</code></td>\n<td><code>int a = que.top();</code></td>\n</tr>\n<tr>\n<td>查看大小 &#x2F; 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody></table>\n<p>进出队复杂度 $O(\\log n)$，取堆顶 $O(1)$.</p>\n<h3 id=\"2-5-2-适用情形\"><a href=\"#2-5-2-适用情形\" class=\"headerlink\" title=\"2.5.2 适用情形\"></a>2.5.2 适用情形</h3><p>持续维护元素的有序性：每次向队列插入大小不定的元素，或者每次从队列里取出大小最小&#x2F;最大的元素，元素数量 $n$，插入操作数量 $k$.</p>\n<ul>\n<li>每次插入后进行快速排序：$k\\cdot n\\log n$</li>\n<li>使用优先队列维护：$k\\cdot\\log n$</li>\n</ul>\n<h3 id=\"2-5-3-注意事项\"><a href=\"#2-5-3-注意事项\" class=\"headerlink\" title=\"2.5.3 注意事项\"></a>2.5.3 注意事项</h3><h4 id=\"仅堆顶可读\"><a href=\"#仅堆顶可读\" class=\"headerlink\" title=\"仅堆顶可读\"></a>仅堆顶可读</h4><p>只可访问堆顶，其他元素都无法读取到。<strong>下面是错误用法：</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> pque</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h4 id=\"所有元素不可写\"><a href=\"#所有元素不可写\" class=\"headerlink\" title=\"所有元素不可写\"></a>所有元素不可写</h4><p>堆中所有元素是不可修改的。<strong>下面是错误用法：</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">pque</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">pque</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">top</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>如果你恰好要修改的是堆顶元素，那么是可以完成的：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> tp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> pque</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">top</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">pque</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">pque</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">push</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">tp </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><h2 id=\"2-6-集合-set\"><a href=\"#2-6-集合-set\" class=\"headerlink\" title=\"2.6 集合 set\"></a>2.6 集合 <a href=\"https://zh.cppreference.com/w/cpp/container/set\">set</a></h2><p><strong><code>#include &lt;set&gt;</code></strong></p>\n<p>提供对数时间的插入、删除、查找的集合数据结构。底层原理是红黑树。</p>\n<table>\n<thead>\n<tr>\n<th>集合三要素</th>\n<th>解释</th>\n<th>set</th>\n<th>multiset</th>\n<th>unordered_set</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>确定性</td>\n<td>一个元素要么在集合中，要么不在</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>互异性</td>\n<td>一个元素仅可以在集合中出现一次</td>\n<td>✔</td>\n<td>❌（任意次）</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>无序性</td>\n<td>集合中的元素是没有顺序的</td>\n<td>❌（从小到大）</td>\n<td>❌（从小到大）</td>\n<td>✔</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-6-1-常用方法\"><a href=\"#2-6-1-常用方法\" class=\"headerlink\" title=\"2.6.1 常用方法\"></a>2.6.1 常用方法</h3><h4 id=\"构造-2\"><a href=\"#构造-2\" class=\"headerlink\" title=\"构造\"></a>构造</h4><p><strong><code>set&lt;类型, 比较器&gt; st</code></strong></p>\n<ul>\n<li>类型：要储存的数据类型</li>\n<li>比较器：比较大小使用的比较器，默认为 <code>less&lt;类型&gt;</code>，可自定义</li>\n</ul>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> st1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">               // 储存int的集合（从小到大）</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> greater</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> st2</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> // 储存int的集合（从大到小）</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 &#x2F; lambda 表达式），在此就不展开讲了。</p></blockquote>\n<h4 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h4><p>可使用迭代器进行遍历：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;::</span><span style=\"color: #BABED8\">iterator it </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">it</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">it </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>基于范围的循环（C++ 11）：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #BABED8\">ele </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> ele </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h4 id=\"其他-1\"><a href=\"#其他-1\" class=\"headerlink\" title=\"其他\"></a>其他</h4><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入元素</td>\n<td><code>.insert(元素)</code></td>\n<td><code>st.insert(1);</code></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td><code>.erase(元素)</code></td>\n<td><code>st.erase(2);</code></td>\n</tr>\n<tr>\n<td>查找元素</td>\n<td><code>.find(元素)</code></td>\n<td><code>auto it = st.find(1);</code></td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td><code>.count(元素)</code></td>\n<td><code>st.count(3);</code></td>\n</tr>\n<tr>\n<td>查看大小 &#x2F; 清空 &#x2F; 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody></table>\n<p>增删查时间复杂度均为 $O(\\log n)$</p>\n<h3 id=\"2-6-2-适用情形\"><a href=\"#2-6-2-适用情形\" class=\"headerlink\" title=\"2.6.2 适用情形\"></a>2.6.2 适用情形</h3><ul>\n<li>元素去重：$[1,1,3,2,4,4]\\to[1,2,3,4]$</li>\n<li>维护顺序：$[1,5,3,7,9]\\to[1,3,5,7,9]$</li>\n<li>元素是否出现过：元素大小 $[-10^{18},10^{18}]$，元素数量 $10^6$，vis 数组无法实现，通过 set 可以完成。</li>\n</ul>\n<h3 id=\"2-6-3-注意事项\"><a href=\"#2-6-3-注意事项\" class=\"headerlink\" title=\"2.6.3 注意事项\"></a>2.6.3 注意事项</h3><h4 id=\"不存在下标索引\"><a href=\"#不存在下标索引\" class=\"headerlink\" title=\"不存在下标索引\"></a>不存在下标索引</h4><p>set 虽说可遍历，但仅可使用迭代器进行遍历，它不存在下标这一概念，无法通过下标访问到数据。<strong>下面是错误用法：</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h4 id=\"元素只读\"><a href=\"#元素只读\" class=\"headerlink\" title=\"元素只读\"></a>元素只读</h4><p>set 的迭代器取到的元素是只读的（因为是 const 迭代器），不可修改其值。如果要改，需要先 erase 再 insert. <strong>下面是错误用法：</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> // 正确。可读。</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">             // 错误！不可写！</span></span></code></pre></div><h4 id=\"不可用迭代器计算下标\"><a href=\"#不可用迭代器计算下标\" class=\"headerlink\" title=\"不可用迭代器计算下标\"></a>不可用迭代器计算下标</h4><p>set 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">find</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">      // 正确，返回2所在位置的迭代器。</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> idx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #676E95; font-style: italic\"> // 错误！不可相减得到下标。</span></span></code></pre></div><h2 id=\"2-7-映射-map\"><a href=\"#2-7-映射-map\" class=\"headerlink\" title=\"2.7 映射 map\"></a>2.7 映射 <a href=\"https://zh.cppreference.com/w/cpp/container/map\">map</a></h2><p><strong><code>#include &lt;map&gt;</code></strong></p>\n<p>提供对数时间的有序键值对结构。底层原理是红黑树。</p>\n<p>映射：<br>$$<br>\\begin{matrix}<br>1&amp;\\to&amp;2\\<br>2&amp;\\to&amp;2\\<br>3&amp;\\to&amp;1\\<br>4&amp;\\to&amp;5\\<br>&amp;\\vdots<br>\\end{matrix}<br>$$</p>\n<table>\n<thead>\n<tr>\n<th>性质</th>\n<th>解释</th>\n<th>map</th>\n<th>multimap</th>\n<th>unordered_map</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>互异性</td>\n<td>一个键仅可以在映射中出现一次</td>\n<td>✔</td>\n<td>❌（任意次）</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>无序性</td>\n<td>键是没有顺序的</td>\n<td>❌（从小到大）</td>\n<td>❌（从小到大）</td>\n<td>✔</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-7-1-常用方法\"><a href=\"#2-7-1-常用方法\" class=\"headerlink\" title=\"2.7.1 常用方法\"></a>2.7.1 常用方法</h3><h4 id=\"构造-3\"><a href=\"#构造-3\" class=\"headerlink\" title=\"构造\"></a>构造</h4><p><strong><code>map&lt;键类型, 值类型, 比较器&gt; mp</code></strong></p>\n<ul>\n<li>键类型：要储存键的数据类型</li>\n<li>值类型：要储存值的数据类型</li>\n<li>比较器：键比较大小使用的比较器，默认为 <code>less&lt;类型&gt;</code>，可自定义</li>\n</ul>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> mp1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">               // int-&gt;int 的映射（键从小到大）</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> greater</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> st2</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> // int-&gt;int 的映射（键从大到小）</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 &#x2F; lambda 表达式），在此就不展开讲了。</p></blockquote>\n<h4 id=\"遍历-1\"><a href=\"#遍历-1\" class=\"headerlink\" title=\"遍历\"></a>遍历</h4><p>可使用迭代器进行遍历：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;::</span><span style=\"color: #BABED8\">iterator it </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">it</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> it</span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\">first </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> it</span><span style=\"color: #89DDFF\">-&gt;</span><span style=\"color: #BABED8\">second </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>基于范围的循环（C++ 11）：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #BABED8\">pr </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> pr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">first </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> pr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">second </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>结构化绑定 + 基于范围的循环（C++17）：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;[</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> val</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> key </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> val </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h4 id=\"其他-2\"><a href=\"#其他-2\" class=\"headerlink\" title=\"其他\"></a>其他</h4><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>增 &#x2F; 改 &#x2F; 查元素</td>\n<td>中括号</td>\n<td><code>mp[1] = 2;</code></td>\n</tr>\n<tr>\n<td>查元素（返回迭代器）</td>\n<td><code>.find(元素)</code></td>\n<td><code>auto it = mp.find(1);</code></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td><code>.erase(元素)</code></td>\n<td><code>mp.erase(2);</code></td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td><code>.count(元素)</code></td>\n<td><code>mp.count(3);</code></td>\n</tr>\n<tr>\n<td>查看大小 &#x2F; 清空 &#x2F; 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody></table>\n<p>增删改查时间复杂度均为 $O(\\log n)$</p>\n<h3 id=\"2-7-2-适用情形\"><a href=\"#2-7-2-适用情形\" class=\"headerlink\" title=\"2.7.2 适用情形\"></a>2.7.2 适用情形</h3><p>需要维护映射的场景可以使用：输入若干字符串，统计每种字符串的出现次数。(<code>map&lt;string, int&gt; mp</code>)</p>\n<h3 id=\"2-7-3-注意事项\"><a href=\"#2-7-3-注意事项\" class=\"headerlink\" title=\"2.7.3 注意事项\"></a>2.7.3 注意事项</h3><h4 id=\"中括号访问时默认值\"><a href=\"#中括号访问时默认值\" class=\"headerlink\" title=\"中括号访问时默认值\"></a>中括号访问时默认值</h4><p>如果使用中括号访问 map 时对应的键不存在，那么会新增这个键，并且值为默认值，因此中括号会影响键的存在性。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">char</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">count</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> // 0</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">mp</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">];</span><span style=\"color: #676E95; font-style: italic\">                       // 即使什么都没做，此时mp[&#39;a&#39;]=0已经插入了</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">count</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\"> // 1</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">       // 0</span></span></code></pre></div><h4 id=\"不可用迭代器计算下标-1\"><a href=\"#不可用迭代器计算下标-1\" class=\"headerlink\" title=\"不可用迭代器计算下标\"></a>不可用迭代器计算下标</h4><p>map 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">find</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">      // 正确，返回2所在位置的迭代器。</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> idx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> mp</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #676E95; font-style: italic\">   // 错误！不可相减得到下标。</span></span></code></pre></div><h2 id=\"2-8-字符串-string\"><a href=\"#2-8-字符串-string\" class=\"headerlink\" title=\"2.8 字符串 string\"></a>2.8 字符串 <a href=\"https://zh.cppreference.com/w/cpp/string\">string</a></h2><p><strong><code>#include &lt;string&gt;</code></strong></p>\n<p>顾名思义，就是储存字符串的。</p>\n<h3 id=\"2-8-1-常用方法\"><a href=\"#2-8-1-常用方法\" class=\"headerlink\" title=\"2.8.1 常用方法\"></a>2.8.1 常用方法</h3><h4 id=\"构造-4\"><a href=\"#构造-4\" class=\"headerlink\" title=\"构造\"></a>构造</h4><p>构造函数：<code>string(长度, 初值)</code></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">string s1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">           // 构造字符串，为空</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">string s2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">awa!</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">  // 构造字符串，并赋值awa!</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">string</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">s3</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">6</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">  // 构造字符串，通过构造函数构造为6666666666</span></span></code></pre></div><h4 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h4><p>C++</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">string s</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">cin </span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> s</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> s</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>C</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">string s</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">char</span><span style=\"color: #BABED8\"> buf</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">];</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">scanf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #F07178\">%s</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #BABED8\">buf</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">s </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> buf</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">printf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #F07178\">%s</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> s</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">c_str</span><span style=\"color: #89DDFF\">());</span></span></code></pre></div><h4 id=\"其他-3\"><a href=\"#其他-3\" class=\"headerlink\" title=\"其他\"></a>其他</h4><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>修改、查询指定下标字符</td>\n<td><code>[]</code></td>\n<td><code>s[1] = &#39;a&#39;;</code></td>\n</tr>\n<tr>\n<td>是否相同</td>\n<td><code>==</code></td>\n<td><code>if (s1 == s2) ...</code></td>\n</tr>\n<tr>\n<td>字符串连接</td>\n<td><code>+</code></td>\n<td><code>string s = s1 + s2;</code></td>\n</tr>\n<tr>\n<td>尾接字符串</td>\n<td><code>+=</code></td>\n<td><code>s += &quot;awa&quot;;</code></td>\n</tr>\n<tr>\n<td>取子串</td>\n<td><code>.substr(起始下标, 子串长度)</code></td>\n<td><code>string sub = s.substr(2, 10);</code></td>\n</tr>\n<tr>\n<td>查找字符串</td>\n<td><code>.find(字符串, 起始下标)</code></td>\n<td><code>int pos = s.find(&quot;awa&quot;);</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"数值与字符串互转（C-11）\"><a href=\"#数值与字符串互转（C-11）\" class=\"headerlink\" title=\"数值与字符串互转（C++11）\"></a>数值与字符串互转（C++11）</h4><table>\n<thead>\n<tr>\n<th>源</th>\n<th>目的</th>\n<th>函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int &#x2F; long long &#x2F; float &#x2F; double &#x2F; long double</td>\n<td>string</td>\n<td>to_string()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>int</td>\n<td>stoi()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>long long</td>\n<td>stoll()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>float</td>\n<td>stof()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>double</td>\n<td>stod()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>long double</td>\n<td>stold()</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-8-2-适用情形\"><a href=\"#2-8-2-适用情形\" class=\"headerlink\" title=\"2.8.2 适用情形\"></a>2.8.2 适用情形</h3><p>非常好用！<del>建议直接把字符数组扔了，赶快投入 string 的怀抱。</del></p>\n<h3 id=\"2-8-3-注意事项\"><a href=\"#2-8-3-注意事项\" class=\"headerlink\" title=\"2.8.3 注意事项\"></a>2.8.3 注意事项</h3><h4 id=\"尾接字符串一定要用\"><a href=\"#尾接字符串一定要用\" class=\"headerlink\" title=\"尾接字符串一定要用 +=\"></a>尾接字符串一定要用 <code>+=</code></h4><p>string 的 +&#x3D; 运算符，将会在原字符串原地尾接字符串。而 + 了再 &#x3D; 赋值，会先生成一个临时变量，在复制给 string.</p>\n<p>通常字符串长度可以很长，如果使用 + 字符串很容易就 TLE 了。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 优化前: 15139ms</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">string s</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">5e5</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    s </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> s </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 优化后: &lt; 1ms (计时器显示0)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">string s</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">5e5</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    s </span><span style=\"color: #89DDFF\">+=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h4 id=\"substr-方法的奇葩参数\"><a href=\"#substr-方法的奇葩参数\" class=\"headerlink\" title=\".substr() 方法的奇葩参数\"></a><code>.substr()</code> 方法的奇葩参数</h4><p>一定要注意，C++ string 的取子串的第一个参数是<strong>子串起点下标</strong>，第二个参数是<strong>子串长度</strong>。</p>\n<p>第二个参数不是子串终点！不是子串终点！要与 java 等其他语言区分开来。</p>\n<h4 id=\"find-方法的复杂度\"><a href=\"#find-方法的复杂度\" class=\"headerlink\" title=\".find() 方法的复杂度\"></a><code>.find()</code> 方法的复杂度</h4><p>该方法实现为暴力实现，时间复杂度为 $O(n^2)$.</p>\n<p><del>不要幻想 STL 内置了个 $O(n)$ 的 KMP 算法</del></p>\n<h2 id=\"2-9-二元组-pair\"><a href=\"#2-9-二元组-pair\" class=\"headerlink\" title=\"2.9 二元组 pair\"></a>2.9 二元组 <a href=\"https://zh.cppreference.com/w/cpp/utility/pair\">pair</a></h2><p><strong><code>#include &lt;utility&gt;</code></strong></p>\n<p>顾名思义，就是储存二元组的。</p>\n<h3 id=\"2-9-1-常用方法\"><a href=\"#2-9-1-常用方法\" class=\"headerlink\" title=\"2.9.1 常用方法\"></a>2.9.1 常用方法</h3><h4 id=\"构造-5\"><a href=\"#构造-5\" class=\"headerlink\" title=\"构造\"></a>构造</h4><p><strong><code>pair&lt;第一个值类型, 第二个值类型&gt; pr</code></strong></p>\n<ul>\n<li>第一个值类型：要储存的第一个值的数据类型</li>\n<li>第二个值类型：要储存的第二个值的数据类型</li>\n</ul>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> p1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">long</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> p2</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">char</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> p3</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// ...</span></span></code></pre></div><h4 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><p>老式</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">char</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> pr </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">make_pair</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><p>列表构造 C++11</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">char</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> pr </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">&#125;;</span></span></code></pre></div><h4 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h4><p>直接取值</p>\n<ul>\n<li>取第一个值：<code>.first</code></li>\n<li>取第二个值：<code>.second</code></li>\n</ul>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">char</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> pr </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> awa </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> pr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">first</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">char</span><span style=\"color: #BABED8\"> bwb </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> pr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">second</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>结构化绑定 C++17</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">char</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> pr </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;[</span><span style=\"color: #BABED8\">awa</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> bwb</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> pr</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h4 id=\"判同\"><a href=\"#判同\" class=\"headerlink\" title=\"判同\"></a>判同</h4><p>直接用 <code>==</code> 运算符</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> p1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> p2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">p1 </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> p2</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F07178\"> ... </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #676E95; font-style: italic\"> // false</span></span></code></pre></div><h3 id=\"2-9-2-适用场景\"><a href=\"#2-9-2-适用场景\" class=\"headerlink\" title=\"2.9.2 适用场景\"></a>2.9.2 适用场景</h3><p>所有需要二元组的场景均可使用，效率和自己定义结构体差不多。</p>\n<h3 id=\"2-9-3-注意事项\"><a href=\"#2-9-3-注意事项\" class=\"headerlink\" title=\"2.9.3 注意事项\"></a>2.9.3 注意事项</h3><p>无</p>\n<h1 id=\"3-迭代器简介\"><a href=\"#3-迭代器简介\" class=\"headerlink\" title=\"3 迭代器简介\"></a>3 迭代器简介</h1><h2 id=\"3-1-迭代器是什么？\"><a href=\"#3-1-迭代器是什么？\" class=\"headerlink\" title=\"3.1 迭代器是什么？\"></a>3.1 迭代器是什么？</h2><p>不搞抽象，直接举例。</p>\n<p>对于一个 vector，我们可以用下标遍历：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>我们同时也可以用迭代器来遍历：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;::</span><span style=\"color: #BABED8\">iterator it </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">it</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">it </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><ul>\n<li><code>a.begin()</code> 是一个迭代器，指向的是第一个元素</li>\n<li><code>a.end()</code> 是一个迭代器，指向的是最后一个元素<strong>再后面一位</strong></li>\n<li>上述迭代器具有自增运算符，自增则迭代器向下一个元素移动</li>\n<li>迭代器与指针相似，如果对它使用解引用运算符，即 <code>*it</code>，就能取到对应值了</li>\n</ul>\n<h2 id=\"3-2-为何需要迭代器？\"><a href=\"#3-2-为何需要迭代器？\" class=\"headerlink\" title=\"3.2 为何需要迭代器？\"></a>3.2 为何需要迭代器？</h2><p>很多数据结构并不是线性的（例如红黑树），对于非线性数据结构，下标是无意义的。无法使用下标来遍历整个数据结构。</p>\n<p>迭代器的作用就是定义某个数据结构的遍历方式，通过迭代器的增减，代表遍历到的位置，通过迭代器便能成功遍历非线性结构了。</p>\n<p>例如，set 的实现是红黑树，我们是没法用下标来访问元素的。但是通过迭代器，我们就能遍历 set 中的元素了：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">set</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;::</span><span style=\"color: #BABED8\">iterator it </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> st</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">it</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    cout </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">it </span><span style=\"color: #89DDFF\">&lt;&lt;</span><span style=\"color: #BABED8\"> endl</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><h2 id=\"3-3-迭代器用法\"><a href=\"#3-3-迭代器用法\" class=\"headerlink\" title=\"3.3 迭代器用法\"></a>3.3 迭代器用法</h2><p>对于 vector 容器，它的迭代器功能比较完整，以它举例：</p>\n<ul>\n<li><code>.begin()</code>：头迭代器</li>\n<li><code>.end()</code>：尾迭代器</li>\n<li><code>.rbegin()</code>：反向头迭代器</li>\n<li><code>.rend()</code>：反向尾迭代器</li>\n<li>迭代器 <code>+</code> 整型：将迭代器向后移动</li>\n<li>迭代器 <code>-</code> 整型：将迭代器向前移动</li>\n<li>迭代器 <code>++</code>：将迭代器向后移动 1 位</li>\n<li>迭代器 <code>--</code>：将迭代器向前移动 1 位</li>\n<li>迭代器 <code>-</code> 迭代器：两个迭代器的距离</li>\n<li><code>prev(it)</code>：返回 it 的前一个迭代器</li>\n<li><code>next(it)</code>：返回 it 的后一个迭代器</li>\n</ul>\n<p>对于其他容器，由于其结构特性，上面的功能不一定都有（例如 set 的迭代器是不能相减求距离的）</p>\n<h2 id=\"3-4-常见问题\"><a href=\"#3-4-常见问题\" class=\"headerlink\" title=\"3.4 常见问题\"></a>3.4 常见问题</h2><p><strong><code>.end()</code> 和 <code>.rend()</code> 指向的位置是无意义的值</strong></p>\n<p>对于一个长度为 10 的数组：<code>for (int i = 0; i &lt; 10; i++)</code>，第 10 位是不可访问的</p>\n<p>对于一个长度为 10 的容器：<code>for (auto it = a.begin(); it != a.end(); ++it)</code>，.end 是不可访问的</p>\n<p><strong>不同容器的迭代器功能可能不一样</strong></p>\n<p>迭代器细化的话有正向、反向、双向，每个容器的迭代器支持的运算符也可能不同，因此不同容器的迭代器细节很有可能是不一样的。</p>\n<p><strong>删除操作时需要警惕</strong></p>\n<p>为什么 3 没删掉？</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">it</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(*</span><span style=\"color: #BABED8\">it </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">it </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">erase</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">it</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// a = [1, 3, 4]</span></span></code></pre></div><p>为啥 RE 了？</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">auto</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">it</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(*</span><span style=\"color: #BABED8\">it </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">erase</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">it</span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><center><b>建议：如无必要，别用迭代器操作容器。（遍历与访问没关系）</b></center>\n\n\n\n<h1 id=\"4-常用算法\"><a href=\"#4-常用算法\" class=\"headerlink\" title=\"4 常用算法\"></a>4 常用算法</h1><h2 id=\"4-1-内容总览\"><a href=\"#4-1-内容总览\" class=\"headerlink\" title=\"4.1 内容总览\"></a>4.1 内容总览</h2><p>打勾的是本次将会详细讲解的，其他的是算法竞赛中建议学习的，不在下表列出的在比赛中基本用不到。</p>\n<p>（很多函数的功能很简单，自己都能快速写出来，但是使用函数可以让代码可读性变得更高，这在比赛中是至关紧要的）</p>\n<ul>\n<li><p>算法库 Algorithm</p>\n<ul>\n<li><input disabled type=\"checkbox\"> <code>count()</code></li>\n<li><input disabled type=\"checkbox\"> <code>find()</code></li>\n<li><input disabled type=\"checkbox\"> <code>fill()</code></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/swap\"><code>swap()</code></a></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/reverse\"><code>reverse()</code></a></li>\n<li><input disabled type=\"checkbox\"> <code>shuffle()</code> C++11</li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/unique\"><code>unique()</code></a></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/sort\"><code>sort()</code></a></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/lower_bound\"><code>lower_bound()</code></a> &#x2F; <a href=\"https://zh.cppreference.com/w/cpp/algorithm/upper_bound\"><code>upper_bound()</code></a></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/max\"><code>max()</code></a> &#x2F; <a href=\"https://zh.cppreference.com/w/cpp/algorithm/min\"><code>min()</code></a></li>\n<li><input disabled type=\"checkbox\"> <code>max_element()</code> &#x2F; <code>min_element()</code></li>\n<li><input disabled type=\"checkbox\"> <code>prev_permutation()</code> &#x2F; <code>next_permutation()</code></li>\n</ul>\n</li>\n<li><p>数学函数 cmath</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/fabs\"><code>abs()</code></a></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/exp\"><code>exp()</code></a></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/log\"><code>log()</code></a> &#x2F; <code>log10()</code> &#x2F; <code>log2()</code></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/pow\"><code>pow()</code></a></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/sqrt\"><code>sqrt()</code></a></li>\n<li><input disabled type=\"checkbox\"> <code>sin()</code> &#x2F; <code>cos()</code> &#x2F; <code>tan()</code></li>\n<li><input disabled type=\"checkbox\"> <code>asin()</code> &#x2F; <code>acos()</code> &#x2F; <code>atan()</code></li>\n<li><input disabled type=\"checkbox\"> <code>sinh()</code> &#x2F; <code>cosh()</code> &#x2F; <code>tanh()</code></li>\n<li><input disabled type=\"checkbox\"> <code>asinh()</code> &#x2F; <code>acosh()</code> &#x2F; <code>atanh()</code> C++11</li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/ceil\"><code>ceil()</code></a> &#x2F; <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/floor\"><code>floor()</code></a></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/round\"><code>round()</code></a> C++11</li>\n</ul>\n</li>\n<li><p>数值算法 numeric</p>\n<ul>\n<li><input disabled type=\"checkbox\"> <code>iota()</code> C++11</li>\n<li><input disabled type=\"checkbox\"> <code>accumulate()</code></li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/gcd\"><code>gcd()</code></a> C++17</li>\n<li><input checked disabled type=\"checkbox\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/lcm\"><code>lcm()</code></a> C++17</li>\n</ul>\n</li>\n<li><p>伪随机数生成 random</p>\n<ul>\n<li><input disabled type=\"checkbox\"> <code>mt19937</code></li>\n<li><input disabled type=\"checkbox\"> <code>random_device()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-2-swap\"><a href=\"#4-2-swap\" class=\"headerlink\" title=\"4.2 swap()\"></a>4.2 <code>swap()</code></h2><p>交换两个变量的值</p>\n<p><strong>用法示例</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">template</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">swap</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #C792EA\">&amp;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">a</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #C792EA\">&amp;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">b</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> a </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> b </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">swap</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">a</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> b</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// now a = 1, b = 0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">5</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">6</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">7</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">swap</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">],</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">6</span><span style=\"color: #89DDFF\">]);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// now arr = &#123;0, 1, 2, 3, 6, 5, 4, 7, 8, 9&#125;</span></span></code></pre></div><p><strong>注意事项</strong></p>\n<p>这个 swap 参数是引用的，不需要像 C 语言一样取地址。</p>\n<h2 id=\"4-3-sort\"><a href=\"#4-3-sort\" class=\"headerlink\" title=\"4.3 sort()\"></a>4.3 <code>sort()</code></h2><p>使用快速排序给一个可迭代对象排序</p>\n<p><strong>用法示例</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">template</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RandomIt</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Compare</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">sort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RandomIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">first</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RandomIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">last</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Compare</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">comp</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><p>默认排序从小到大</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">sort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// arr = [0, 1, 1, 1, 8, 9, 9]</span></span></code></pre></div><p>如果要从大到小，则需要传比较器进去。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">sort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">greater</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;());</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// arr = [9, 9, 8, 1, 1, 1, 0]</span></span></code></pre></div><p>如果需要完成特殊比较，则需要手写比较器。</p>\n<p>比较器函数返回值是 bool 类型，传参是需要比较的两个元素。记我们定义的该比较操作为 $\\star$：</p>\n<ul>\n<li>若 $a\\star b$，则比较器函数应当返回 <code>true</code></li>\n<li>若 $a\\not\\star b$，则比较器函数应当返回 <code>false</code></li>\n</ul>\n<p><strong>注意：</strong>如果 $a&#x3D;b$，比较器函数必须返回 <code>false</code></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">bool</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">cmp</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">a</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">b</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">second </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> b</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">second</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">second </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> b</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">second</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">first </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> b</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">first</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">()</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">pair</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">&lt;!--</span><span style=\"color: #BABED8\">swig￼</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">--&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">sort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> cmp</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    // arr = [(0, 0), (8, 1), (2, 9), (1, 9)]</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"4-4-lower-bound-upper-bound\"><a href=\"#4-4-lower-bound-upper-bound\" class=\"headerlink\" title=\"4.4 lower_bound() &#x2F; upper_bound()\"></a>4.4 <code>lower_bound()</code> &#x2F; <code>upper_bound()</code></h2><p>在<strong>已升序排序</strong>的元素中，应用二分查找检索指定元素，返回对应元素迭代器位置。<strong>找不到则返回尾迭代器。</strong></p>\n<ul>\n<li><code>lower_bound()</code>: 寻找 $\\geq x$ 的第一个元素的位置</li>\n<li><code>upper_bound()</code>: 寻找 $&gt;x$ 的第一个元素的位置</li>\n</ul>\n<p>怎么找 $\\leq x$ &#x2F; $&lt; x$ 的第一个元素呢？</p>\n<ul>\n<li>$&gt;x$ 的第一个元素的前一个元素（如果有）便是 $\\leq x$ 的第一个元素</li>\n<li>$\\geq x$ 的第一个元素的前一个元素（如果有）便是 $&lt;x$ 的第一个元素</li>\n</ul>\n<p>返回的是迭代器，如何转成下标索引呢？减去头迭代器即可。</p>\n<p><strong>用法示例</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">template</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ForwardIt</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">ForwardIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">lower_bound</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ForwardIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">first</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ForwardIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">last</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #C792EA\">&amp;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">value</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;::</span><span style=\"color: #BABED8\">iterator it </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">lower_bound</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">7</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> idx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> it </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// idx = 4</span></span></code></pre></div><p>我们通常写成一行：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">idx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">lower_bound</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">7</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #676E95; font-style: italic\"> // 4</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">idx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">lower_bound</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #676E95; font-style: italic\"> // 4</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">idx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">upper_bound</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">7</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #676E95; font-style: italic\"> // 4</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">idx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">upper_bound</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #676E95; font-style: italic\"> // 5</span></span></code></pre></div><h2 id=\"4-5-reverse\"><a href=\"#4-5-reverse\" class=\"headerlink\" title=\"4.5 reverse()\"></a>4.5 <code>reverse()</code></h2><p>反转一个可迭代对象的元素顺序</p>\n<p><strong>用法示例</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">template</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">BidirIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">BidirIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">first</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">BidirIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">last</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">arr</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">iota</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">reverse</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 10, 9, 8, 7, 6, 5, 4, 3, 2, 1</span></span></code></pre></div><h2 id=\"4-6-max-min\"><a href=\"#4-6-max-min\" class=\"headerlink\" title=\"4.6 max() &#x2F; min()\"></a>4.6 <code>max()</code> &#x2F; <code>min()</code></h2><p>返回最大值 &#x2F; 最小值的<strong>数值</strong></p>\n<p><strong>用法示例</strong></p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> mx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">max</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\"> // 2</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> mn </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">min</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\"> // 1</span></span></code></pre></div><p>在 C++11 之后，可以使用列表构造语法传入一个列表，这样就能一次性给多个元素找最大值而不用套娃了：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// Before C++11</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> mx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">max</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #82AAFF\">max</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">),</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">max</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">));</span><span style=\"color: #676E95; font-style: italic\"> // 4</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> mn </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">min</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #82AAFF\">min</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">),</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">min</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">));</span><span style=\"color: #676E95; font-style: italic\"> // 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// After C++11</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> mx </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">max</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\"> // 4</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> mn </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">min</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">&#125;</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\"> // 1</span></span></code></pre></div><h2 id=\"4-7-unique\"><a href=\"#4-7-unique\" class=\"headerlink\" title=\"4.7 unique()\"></a>4.7 <code>unique()</code></h2><p>消除数组的重复<strong>相邻</strong>元素，数组长度不变，但是有效数据缩短，返回的是有效数据位置的结尾迭代器。</p>\n<p>例如：$[1,1,4,5,1,4]\\to[1,4,5,1,4,\\underline?]$，下划线位置为返回的迭代器指向。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">template</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ForwardIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">ForwardIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">unique</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ForwardIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">first</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ForwardIt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">last</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">);</span></span></code></pre></div><p><strong>用法示例</strong></p>\n<p>单独使用 unique 并不能达成去重效果，因为它只消除<strong>相邻</strong>的重复元素。但是如果序列有序，那么它就能去重了。</p>\n<p>但是它去重后，序列尾部会产生一些无效数据：$[1,1,2,4,4,4,5]\\to[1,2,4,5,\\underline?,?,?]$，为了删掉这些无效数据，我们需要结合 erase.</p>\n<p>最终，给 vector 去重的写法便是：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">vector</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">int</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">5</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #89DDFF\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">sort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">erase</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #82AAFF\">unique</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">begin</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">()),</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">end</span><span style=\"color: #89DDFF\">());</span></span></code></pre></div><h2 id=\"4-8-数学函数\"><a href=\"#4-8-数学函数\" class=\"headerlink\" title=\"4.8 数学函数\"></a>4.8 数学函数</h2><p>所有函数参数均支持 <code>int</code> &#x2F; <code>long long</code> &#x2F; <code>float</code> &#x2F; <code>double</code> &#x2F; <code>long double</code></p>\n<table>\n<thead>\n<tr>\n<th>公式</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$f(x)&#x3D;\\lvert x\\rvert$</td>\n<td><code>abs(-1.0)</code></td>\n</tr>\n<tr>\n<td>$f(x)&#x3D;e^x$</td>\n<td><code>exp(2)</code></td>\n</tr>\n<tr>\n<td>$f(x)&#x3D;\\ln x$</td>\n<td><code>log(3)</code></td>\n</tr>\n<tr>\n<td>$f(x,y)&#x3D;x^y$</td>\n<td><code>pow(2, 3)</code></td>\n</tr>\n<tr>\n<td>$f(x)&#x3D;\\sqrt x$</td>\n<td><code>sqrt(2)</code></td>\n</tr>\n<tr>\n<td>$f(x)&#x3D;\\lceil x\\rceil$</td>\n<td><code>ceil(2.1)</code></td>\n</tr>\n<tr>\n<td>$f(x)&#x3D;\\lfloor x\\rfloor$</td>\n<td><code>floor(2.1)</code></td>\n</tr>\n<tr>\n<td>$f(x)&#x3D;\\left&lt;x\\right&gt;$</td>\n<td><code>rount(2.1)</code></td>\n</tr>\n</tbody></table>\n<p><strong>注意事项</strong></p>\n<p>由于浮点误差，有些的数学函数的行为可能与预期不符，导致 WA。如果你的操作数都是整型，那么用下面的写法会更稳妥。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原文地址：<a href=\"https://codeforces.com/blog/entry/107717\">https://codeforces.com/blog/entry/107717</a></p></blockquote>\n<ul>\n<li>$\\lfloor\\frac{a}{b}\\rfloor$<ul>\n<li>别用：<code>floor(1.0 * a / b)</code></li>\n<li>要用：<code>a / b</code></li>\n</ul>\n</li>\n<li>$\\lceil\\frac{a}{b}\\rceil$<ul>\n<li>别用：<code>ceil(1.0 * a / b)</code></li>\n<li>要用：<code>(a + b - 1) / b</code>  （$\\lceil\\frac{a}{b}\\rceil&#x3D;\\lfloor\\frac{a+b-1}{b}\\rfloor$）</li>\n</ul>\n</li>\n<li>$\\lfloor\\sqrt a\\rfloor$<ul>\n<li>别用：<code>(int) sqrt(a)</code></li>\n<li>要用：二分查找 <a href=\"https://io.zouht.com/7.html\">https://io.zouht.com/7.html</a></li>\n</ul>\n</li>\n<li>$a^b$<ul>\n<li>别用：<code>pow(a, b)</code></li>\n<li>要用：快速幂 <a href=\"https://io.zouht.com/18.html\">https://io.zouht.com/18.html</a></li>\n</ul>\n</li>\n<li>$\\lfloor\\log_2 a\\rfloor$<ul>\n<li>别用：<code>log2(a)</code></li>\n<li>要用：<code>__lg</code> （不规范，但是这是竞赛）&#x2F; <code>bit_width</code>（C++20 可用）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-9-gcd-lcm\"><a href=\"#4-9-gcd-lcm\" class=\"headerlink\" title=\"4.9 gcd() &#x2F; lcm()\"></a>4.9 <code>gcd()</code> &#x2F; <code>lcm()</code></h2><p>（C++17）返回最大公因数 &#x2F; 最小公倍数</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> x </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">gcd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">12</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\"> // 4</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> y </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">lcm</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">12</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\"> // 24</span></span></code></pre></div><p>如果不是 C++17，但是是 GNU 编译器（g++），那么可以用内置函数 <code>__gcd()</code>.</p>\n<p>当然，<code>gcd</code> &#x2F; <code>lcm</code> 函数也挺好写，直接写也行（欧几里得算法）：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">gcd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">a</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">b</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(!</span><span style=\"color: #BABED8\">b</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> a</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">gcd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">b</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> a </span><span style=\"color: #89DDFF\">%</span><span style=\"color: #BABED8\"> b</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">lcm</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">a</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">b</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> a </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">gcd</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">a</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> b</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\"> b</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div>","text":"1 前言**C++ 标准模板库 (STL, Standard Template Library)**：包含一些常用数据结构与算法的模板的 C++ 软件库。其包含...","permalink":"/post/算竞常用STL","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Study","slug":"Study","count":18,"path":"api/categories/Study.json"}],"tags":[{"name":"学习","slug":"学习","count":8,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":2,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">1 前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">2 常用容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%86%85%E5%AE%B9%E6%80%BB%E8%A7%88\"><span class=\"toc-text\">2.1 内容总览</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%90%91%E9%87%8F-vector\"><span class=\"toc-text\">2.2 向量 vector</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-1-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.2.1 常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0\"><span class=\"toc-text\">构造</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%BE%E6%8E%A5-%E5%B0%BE%E5%88%A0\"><span class=\"toc-text\">尾接 &amp; 尾删</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%8B%AC%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">中括号运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">获取长度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B8%85%E7%A9%BA\"><span class=\"toc-text\">清空</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A4%E7%A9%BA\"><span class=\"toc-text\">判空</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%94%B9%E5%8F%98%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">改变长度</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-2-%E9%80%82%E7%94%A8%E6%83%85%E5%BD%A2\"><span class=\"toc-text\">2.2.2 适用情形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.2.3 注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%90%E5%89%8D%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">提前指定长度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BD%93%E5%BF%83-size-t-%E6%BA%A2%E5%87%BA\"><span class=\"toc-text\">当心 size_t 溢出</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E6%A0%88-stack\"><span class=\"toc-text\">2.3 栈 stack</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-1-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.3.1 常用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-2-%E9%80%82%E7%94%A8%E6%83%85%E5%BD%A2\"><span class=\"toc-text\">2.3.2 适用情形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.3.3 注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E9%98%9F%E5%88%97-queue\"><span class=\"toc-text\">2.4 队列 queue</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-1-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.4.1 常用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-2-%E9%80%82%E7%94%A8%E6%83%85%E5%BD%A2\"><span class=\"toc-text\">2.4.2 适用情形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.4.3 注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97-priority-queue\"><span class=\"toc-text\">2.5 优先队列 priority_queue</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-1-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.5.1 常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0-1\"><span class=\"toc-text\">构造</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-2-%E9%80%82%E7%94%A8%E6%83%85%E5%BD%A2\"><span class=\"toc-text\">2.5.2 适用情形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.5.3 注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%85%E5%A0%86%E9%A1%B6%E5%8F%AF%E8%AF%BB\"><span class=\"toc-text\">仅堆顶可读</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E4%B8%8D%E5%8F%AF%E5%86%99\"><span class=\"toc-text\">所有元素不可写</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-%E9%9B%86%E5%90%88-set\"><span class=\"toc-text\">2.6 集合 set</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-1-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.6.1 常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0-2\"><span class=\"toc-text\">构造</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96-1\"><span class=\"toc-text\">其他</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-2-%E9%80%82%E7%94%A8%E6%83%85%E5%BD%A2\"><span class=\"toc-text\">2.6.2 适用情形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.6.3 注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%AD%98%E5%9C%A8%E4%B8%8B%E6%A0%87%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">不存在下标索引</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E5%8F%AA%E8%AF%BB\"><span class=\"toc-text\">元素只读</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%8F%AF%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%AE%A1%E7%AE%97%E4%B8%8B%E6%A0%87\"><span class=\"toc-text\">不可用迭代器计算下标</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-%E6%98%A0%E5%B0%84-map\"><span class=\"toc-text\">2.7 映射 map</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-1-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.7.1 常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0-3\"><span class=\"toc-text\">构造</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86-1\"><span class=\"toc-text\">遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96-2\"><span class=\"toc-text\">其他</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-2-%E9%80%82%E7%94%A8%E6%83%85%E5%BD%A2\"><span class=\"toc-text\">2.7.2 适用情形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.7.3 注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%8B%AC%E5%8F%B7%E8%AE%BF%E9%97%AE%E6%97%B6%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">中括号访问时默认值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%8F%AF%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%AE%A1%E7%AE%97%E4%B8%8B%E6%A0%87-1\"><span class=\"toc-text\">不可用迭代器计算下标</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8-%E5%AD%97%E7%AC%A6%E4%B8%B2-string\"><span class=\"toc-text\">2.8 字符串 string</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-1-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.8.1 常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0-4\"><span class=\"toc-text\">构造</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">输入输出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96-3\"><span class=\"toc-text\">其他</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BC%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%92%E8%BD%AC%EF%BC%88C-11%EF%BC%89\"><span class=\"toc-text\">数值与字符串互转（C++11）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-2-%E9%80%82%E7%94%A8%E6%83%85%E5%BD%A2\"><span class=\"toc-text\">2.8.2 适用情形</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.8.3 注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%BE%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%80%E5%AE%9A%E8%A6%81%E7%94%A8\"><span class=\"toc-text\">尾接字符串一定要用 +&#x3D;</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#substr-%E6%96%B9%E6%B3%95%E7%9A%84%E5%A5%87%E8%91%A9%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">.substr() 方法的奇葩参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#find-%E6%96%B9%E6%B3%95%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">.find() 方法的复杂度</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-9-%E4%BA%8C%E5%85%83%E7%BB%84-pair\"><span class=\"toc-text\">2.9 二元组 pair</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-9-1-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.9.1 常用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0-5\"><span class=\"toc-text\">构造</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">赋值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%96%E5%80%BC\"><span class=\"toc-text\">取值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A4%E5%90%8C\"><span class=\"toc-text\">判同</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-9-2-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">2.9.2 适用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-9-3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">2.9.3 注意事项</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">3 迭代器简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">3.1 迭代器是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%9F\"><span class=\"toc-text\">3.2 为何需要迭代器？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">3.3 迭代器用法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">3.4 常见问题</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">4 常用算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%86%85%E5%AE%B9%E6%80%BB%E8%A7%88\"><span class=\"toc-text\">4.1 内容总览</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-swap\"><span class=\"toc-text\">4.2 swap()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-sort\"><span class=\"toc-text\">4.3 sort()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-lower-bound-upper-bound\"><span class=\"toc-text\">4.4 lower_bound() &#x2F; upper_bound()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-reverse\"><span class=\"toc-text\">4.5 reverse()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-6-max-min\"><span class=\"toc-text\">4.6 max() &#x2F; min()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-7-unique\"><span class=\"toc-text\">4.7 unique()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-8-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.8 数学函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-9-gcd-lcm\"><span class=\"toc-text\">4.9 gcd() &#x2F; lcm()</span></a></li></ol></li></ol>","author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Redis入门","uid":"9d6afd20d8190b4b550aed150e5e2779","slug":"Redis入门","date":"2024-04-04T13:25:12.000Z","updated":"2024-05-06T04:31:53.866Z","comments":true,"path":"api/articles/Redis入门.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/23.jpg","text":"Redis的安装使用，常见的Redis命令用法总结...","permalink":"/post/Redis入门","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"Study","slug":"Study","count":18,"path":"api/categories/Study.json"}],"tags":[{"name":"Redis","slug":"Redis","count":2,"path":"api/tags/Redis.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}},"next_post":{"title":"SpringBoot知识点总结（三）","uid":"70c70d32e8bb29f6d69b3478fcb4a7ae","slug":"Springboot学习3","date":"2024-02-11T09:42:12.000Z","updated":"2024-02-11T10:05:34.804Z","comments":true,"path":"api/articles/Springboot学习3.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/18.png","text":"11.事务管理11.1 事务回顾在数据库阶段我们已学习过事务了，我们讲到： 事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体，一...","permalink":"/post/Springboot学习3","photos":[],"count_time":{"symbolsCount":"53k","symbolsTime":"48 mins."},"categories":[{"name":"Study","slug":"Study","count":18,"path":"api/categories/Study.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}}}