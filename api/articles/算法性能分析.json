{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"算法性能分析","date":"2024-01-28T11:03:01.644Z","updated":"2024-01-28T14:54:25.997Z","comments":true,"path":"api/articles/算法性能分析.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":null,"content":"<hr>\n<p>abbrlink: ‘0’<br>title: 算法性能分析（更新中<br>tags: </p>\n<ul>\n<li>算法</li>\n<li>学习<br>cover: &#x2F;medias&#x2F;11.jpg<br>date: 2024-1-28 22:25:12<br>categories: Blog<br>abstracts: “参考学习代码随想录,进行算法性能分析学习”<br>title: 算法性能分析（更新中…</li>\n</ul>\n<h2 id=\"1-时间复杂度\"><a href=\"#1-时间复杂度\" class=\"headerlink\" title=\"1.时间复杂度\"></a>1.时间复杂度</h2><h3 id=\"1-1-什么是时间复杂度\"><a href=\"#1-1-什么是时间复杂度\" class=\"headerlink\" title=\"1.1 什么是时间复杂度\"></a>1.1 什么是时间复杂度</h3><p><strong>时间复杂度是一个函数，它定性描述该算法的运行时间</strong>。</p>\n<p>通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认CPU的每个单元运行消耗的时间都是相同的。假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))。</p>\n<h3 id=\"1-2什么是大O\"><a href=\"#1-2什么是大O\" class=\"headerlink\" title=\"1.2什么是大O\"></a>1.2什么是大O</h3><p>算法导论给出的解释：<strong>大O用来表示上界的</strong>，当用它作为算法的最坏情况运行时间的上界，就是对任意数据输入的运行时间的上界。</p>\n<p>快速排序是O(nlogn)，但是当数据已经有序情况下，快速排序的时间复杂度是O(n^2) 的，**所以严格从大O的定义来讲，快速排序的时间复杂度应该是O(n^2)**。</p>\n<p><strong>但是我们依然说快速排序是O(nlogn)的时间复杂度，这个就是业内的一个默认规定，这里说的O代表的就是一般情况，而不是严格的上界</strong>。</p>\n<h3 id=\"1-3不同数据规模的差异\"><a href=\"#1-3不同数据规模的差异\" class=\"headerlink\" title=\"1.3不同数据规模的差异\"></a>1.3不同数据规模的差异</h3><p><strong>大O就是数据量级突破一个点且数据量级非常大的情况下所表现出的时间复杂度，这个数据量也就是常数项系数已经不起决定性作用的数据量</strong>。</p>\n<p><strong>我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示</strong>：</p>\n<p>O(1)常数阶 &lt; O(logn)对数阶 &lt; O(n)线性阶 &lt; O(nlogn)线性对数阶 &lt; O(n^2)平方阶 &lt; O(n^3)立方阶 &lt; O(2^n)指数阶</p>\n<h3 id=\"1-4例子\"><a href=\"#1-4例子\" class=\"headerlink\" title=\"1.4例子\"></a>1.4例子</h3><p>题目描述：找出n个字符串中相同的两个字符串（假设这里只有两个相同的字符串）。</p>\n<p>1）可能会忽略了字符串比较的时间消耗，这里并不像int 型数字做比较那么简单，除了n^2 次的遍历次数外，字符串比较依然要消耗m次操作（m也就是字母串的长度），所以时间复杂度是O(m × n × n)。</p>\n<p>2）先排对n个字符串按字典序来排序，排序后n个字符串就是有序的，意味着两个相同的字符串就是挨在一起，然后在遍历一遍n个字符串，这样就找到两个相同的字符串了。</p>\n<p>那看看这种算法的时间复杂度，快速排序时间复杂度为O(nlogn)，依然要考虑字符串的长度是m，那么快速排序每次的比较都要有m次的字符比较的操作，就是O(m × n × log n) 。</p>\n<p>之后还要遍历一遍这n个字符串找出两个相同的字符串，别忘了遍历的时候依然要比较字符串，所以总共的时间复杂度是 O(m × n × logn + n × m)。</p>\n<p>我们对O(m × n × log n + n × m) 进行简化操作，把m × n提取出来变成 O(m × n × (logn + 1))，再省略常数项最后的时间复杂度是 O(m × n × log n)。</p>\n<p>ps：例子仅用于讲解示范时间复杂度。</p>\n<p>参考学习自<a href=\"https://programmercarl.com/\">代码随想录</a></p>\n","feature":true,"text":" abbrlink: ‘0’title: 算法性能分析（更新中tags: 算法 学习cover: &#x2F;medias&#x2F;11.jpgdate: 2...","permalink":"/post/算法性能分析","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">1.时间复杂度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">1.1 什么是时间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%A7O\"><span class=\"toc-text\">1.2什么是大O</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E8%A7%84%E6%A8%A1%E7%9A%84%E5%B7%AE%E5%BC%82\"><span class=\"toc-text\">1.3不同数据规模的差异</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">1.4例子</span></a></li></ol></li></ol>","author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Hexo+gitee博客搭建流程","uid":"8844fd48687a754eafe1c7b3d89d9e8e","slug":"hexo博客创建流程","date":"2024-01-25T09:42:12.000Z","updated":"2024-01-28T11:20:59.025Z","comments":true,"path":"api/articles/hexo博客创建流程.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/10.jpg","text":"基于Hexo博客框架开发的个人博客流程...","permalink":"/post/hexo博客创建流程","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Blog","slug":"Blog","count":7,"path":"api/categories/Blog.json"}],"tags":[{"name":"学习","slug":"学习","count":6,"path":"api/tags/学习.json"},{"name":"博客搭建","slug":"博客搭建","count":1,"path":"api/tags/博客搭建.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}},"feature":true}}