{"title":"SpringBoot知识点总结（一）","uid":"f7169ad15bb8eef1b79f5633a9ccf533","slug":"Springboot学习","date":"2024-02-11T08:10:12.000Z","updated":"2024-05-20T12:58:29.070Z","comments":true,"path":"api/articles/Springboot学习.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/16.jpg","content":"<h2 id=\"1-SpingBoot入门\"><a href=\"#1-SpingBoot入门\" class=\"headerlink\" title=\"1.SpingBoot入门\"></a>1.SpingBoot入门</h2><h3 id=\"1-1-什么是Spring\"><a href=\"#1-1-什么是Spring\" class=\"headerlink\" title=\"1.1 什么是Spring\"></a>1.1 什么是Spring</h3><p>Spring的官网(<a href=\"https://spring.io)，去看一下Spring的简介：Spring\">https://spring.io)，去看一下Spring的简介：Spring</a> makes Java simple。</p>\n<p>Spring的官方提供很多开源的项目，我们可以点击上面的projects，看到spring家族旗下的项目，按照流行程度排序为：</p>\n<p><img src=\"/posts/0/image-20220617222925923.png\"></p>\n<p>Spring发展到今天已经形成了一种开发生态圈，Spring提供了若干个子项目，每个项目用于完成特定的功能。而我们在项目开发时，一般会偏向于选择这一套spring家族的技术，来解决对应领域的问题，那我们称这一套技术为<strong>spring全家桶</strong>。</p>\n<p><img src=\"/posts/0/image-20220617222609699.png\"></p>\n<p>而Spring家族旗下这么多的技术，最基础、最核心的是 SpringFramework。其他的spring家族的技术，都是基于SpringFramework的，SpringFramework中提供很多实用功能，如：依赖注入、事务管理、web开发支持、数据访问、消息服务等等。</p>\n<p><img src=\"/posts/0/image-20220617224427947.png\"></p>\n<p>而如果我们在项目中，直接基于SpringFramework进行开发，存在两个问题：配置繁琐、入门难度大。 </p>\n<p><img src=\"/posts/0/image-20220823185227296.png\"></p>\n<p>所以基于此呢，spring官方推荐我们从另外一个项目开始学习，那就是目前最火爆的SpringBoot。 </p>\n<p><strong>Spring Boot 可以帮助我们非常快速的构建应用程序、简化开发、提高效率 。</strong></p>\n<h3 id=\"1-2-SpringBootWeb快速入门\"><a href=\"#1-2-SpringBootWeb快速入门\" class=\"headerlink\" title=\"1.2 SpringBootWeb快速入门\"></a>1.2 SpringBootWeb快速入门</h3><h4 id=\"1-2-1-开发步骤\"><a href=\"#1-2-1-开发步骤\" class=\"headerlink\" title=\"1.2.1 开发步骤\"></a>1.2.1 开发步骤</h4><p>第1步：创建SpringBoot工程项目</p>\n<p>第2步：定义HelloController类，添加方法hello，并添加注解</p>\n<p>第3步：测试运行</p>\n<p>基于Spring官方骨架，创建SpringBoot工程。</p>\n<img src=\"/posts/0/image-20221201184702136.png\" alt=\"image-20221201184702136\" style=\"zoom:80%;\">\n\n<p>基本信息描述完毕之后，勾选web开发相关依赖。</p>\n<img src=\"/posts/0/image-20221201184850248.png\" alt=\"image-20221201184850248\" style=\"zoom:80%;\">\n\n<p>点击Finish之后，就会联网创建这个SpringBoot工程，创建好之后，结构如下：</p>\n<ul>\n<li>&#x3D;&#x3D;注意：在联网创建过程中，会下载相关资源(请耐心等待)&#x3D;&#x3D;</li>\n</ul>\n<p><img src=\"/posts/0/image-20221201185910596.png\" alt=\"image-20221201185910596\"> </p>\n<p><strong>定义请求处理类</strong></p>\n<p>在com.itheima这个包下创建一个子包controller</p>\n<img src=\"/posts/0/image-20221201190541295.png\" alt=\"image-20221201190541295\" style=\"zoom:80%;\">\n\n<p>然后在controller包下新建一个类：HelloController</p>\n<img src=\"/posts/0/image-20221201190825439.png\" alt=\"image-20221201190825439\" style=\"zoom:80%;\">\n\n<p>运行SpringBoot自动生成的引导类</p>\n<p><img src=\"/posts/0/image-20221201191028124.png\" alt=\"image-20221201191028124\"></p>\n<p>打开浏览器，输入 <code>http://localhost:8080/hello</code></p>\n<h3 id=\"1-3-Web分析\"><a href=\"#1-3-Web分析\" class=\"headerlink\" title=\"1.3 Web分析\"></a>1.3 Web分析</h3><p>浏览器：</p>\n<ul>\n<li><p>输入网址：<code>http://192.168.100.11:8080/hello</code></p>\n<ul>\n<li><p>通过IP地址192.168.100.11定位到网络上的一台计算机</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们之前在浏览器中输入的localhost，就是127.0.0.1（本机）</p></blockquote>\n</li>\n<li><p>通过端口号8080找到计算机上运行的程序</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>localhost:8080</code>  , 意思是在本地计算机中找到正在运行的8080端口的程序</p></blockquote>\n</li>\n<li><p>&#x2F;hello是请求资源位置</p>\n<ul>\n<li>资源：对计算机而言资源就是数据<ul>\n<li>web资源：通过网络可以访问到的资源（通常是指存放在服务器上的数据）</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>localhost:8080/hello</code> ，意思是向本地计算机中的8080端口程序，获取资源位置是&#x2F;hello的数据</p>\n<ul>\n<li>8080端口程序，在服务器找&#x2F;hello位置的资源数据，发给浏览器</li>\n</ul></blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p>服务器：（可以理解为ServerSocket）</p>\n<ul>\n<li>接收到浏览器发送的信息（如：&#x2F;hello）</li>\n<li>在服务器上找到&#x2F;hello的资源</li>\n<li>把资源发送给浏览器</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们在JavaSE阶段学习网络编程时，有讲过网络三要素：</p>\n<ul>\n<li>IP  ：网络中计算机的唯一标识</li>\n<li>端口 ：计算机中运行程序的唯一标识</li>\n<li>协议 ：网络中计算机之间交互的规则</li>\n</ul></blockquote>\n<h2 id=\"2-HTTP协议\"><a href=\"#2-HTTP协议\" class=\"headerlink\" title=\"2 HTTP协议\"></a>2 HTTP协议</h2><h3 id=\"2-1-HTTP概述\"><a href=\"#2-1-HTTP概述\" class=\"headerlink\" title=\"2.1 HTTP概述\"></a>2.1 HTTP概述</h3><p>HTTP：Hyper Text Transfer Protocol(超文本传输协议)，规定了浏览器与服务器之间数据传输的规则。</p>\n<ul>\n<li>http是互联网上应用最为广泛的一种网络协议 </li>\n<li>http协议要求：浏览器在向服务器发送请求数据时，或是服务器在向浏览器发送响应数据时，都必须按照固定的格式进行数据传输</li>\n</ul>\n<p>浏览器向服务器进行请求时：</p>\n<ul>\n<li>服务器按照固定的格式进行解析</li>\n</ul>\n<p><img src=\"/posts/0/image-20221202111044434.png\" alt=\"image-20221202111044434\"></p>\n<p>服务器向浏览器进行响应时：</p>\n<ul>\n<li>浏览器按照固定的格式进行解析</li>\n</ul>\n<p><img src=\"/posts/0/image-20221202111307819.png\" alt=\"image-20221202111307819\"></p>\n<p>我们刚才初步认识了HTTP协议，那么我们在看看HTTP协议有哪些特点：</p>\n<ul>\n<li><p>**基于TCP协议: **   面向连接，安全</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全</p></blockquote>\n</li>\n<li><p><strong>基于请求-响应模型:</strong>   一次请求对应一次响应（先请求后响应）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请求和响应是一一对应关系，没有请求，就没有响应</p></blockquote>\n</li>\n<li><p><strong>HTTP协议是无状态协议:</strong>  对于数据没有记忆能力。每次请求-响应都是独立的</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。</p>\n<ul>\n<li>缺点:  多次请求间不能共享数据</li>\n<li>优点:  速度快</li>\n</ul>\n<p>请求之间无法共享数据会引发的问题：</p>\n<ul>\n<li>如：京东购物。加入购物车和去购物车结算是两次请求</li>\n<li>由于HTTP协议的无状态特性，加入购物车请求响应结束后，并未记录加入购物车是何商品</li>\n<li>发起去购物车结算的请求后，因为无法获取哪些商品加入了购物车，会导致此次请求无法正确展示数据</li>\n</ul>\n<p>具体使用的时候，我们发现京东是可以正常展示数据的，原因是Java早已考虑到这个问题，并提出了使用会话技术(Cookie、Session)来解决这个问题。</p></blockquote>\n</li>\n</ul>\n<h3 id=\"2-2-HTTP-请求协议\"><a href=\"#2-2-HTTP-请求协议\" class=\"headerlink\" title=\"2.2 HTTP-请求协议\"></a>2.2 HTTP-请求协议</h3><p>HTTP协议又分为：请求协议和响应协议</p>\n<ul>\n<li>请求协议：浏览器将数据以请求格式发送到服务器<ul>\n<li>包括：<strong>请求行</strong>、<strong>请求头</strong> 、<strong>请求体</strong></li>\n</ul>\n</li>\n<li>响应协议：服务器将数据以响应格式返回给浏览器<ul>\n<li>包括：<strong>响应行</strong> 、<strong>响应头</strong> 、<strong>响应体</strong></li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">请求方式</th>\n<th align=\"left\">请求说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>GET</strong></td>\n<td align=\"left\">获取资源。<br>向特定的资源发出请求。例：<a href=\"http://www.baidu.com/s?wd=itheima\">http://www.baidu.com/s?wd=itheima</a></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>POST</strong></td>\n<td align=\"left\">传输实体主体。<br>向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。</td>\n</tr>\n<tr>\n<td align=\"center\">OPTIONS</td>\n<td align=\"left\">返回服务器针对特定资源所支持的HTTP请求方式。<br>因为并不是所有的服务器都支持规定的方法，为了安全有些服务器可能会禁止掉一些方法，例如：DELETE、PUT等。那么OPTIONS就是用来询问服务器支持的方法。</td>\n</tr>\n<tr>\n<td align=\"center\">HEAD</td>\n<td align=\"left\">获得报文首部。<br>HEAD方法类似GET方法，但是不同的是HEAD方法不要求返回数据。通常用于确认URI的有效性及资源更新时间等。</td>\n</tr>\n<tr>\n<td align=\"center\">PUT</td>\n<td align=\"left\">传输文件。<br>PUT方法用来传输文件。类似FTP协议，文件内容包含在请求报文的实体中，然后请求保存到URL指定的服务器位置。</td>\n</tr>\n<tr>\n<td align=\"center\">DELETE</td>\n<td align=\"left\">删除文件。<br>请求服务器删除Request-URI所标识的资源</td>\n</tr>\n<tr>\n<td align=\"center\">TRACE</td>\n<td align=\"left\">追踪路径。<br>回显服务器收到的请求，主要用于测试或诊断</td>\n</tr>\n<tr>\n<td align=\"center\">CONNECT</td>\n<td align=\"left\">要求用隧道协议连接代理。<br>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器</td>\n</tr>\n</tbody></table>\n<p>在我们实际应用中常用的也就是 ：<strong>GET、POST</strong></p>\n<p><strong>GET方式的请求协议：</strong></p>\n<p><img src=\"/posts/0/image-20220823200708026.png\"> </p>\n<ul>\n<li><p>请求行 ：HTTP请求中的第一行数据。由：<code>请求方式</code>、<code>资源路径</code>、<code>协议/版本</code>组成（之间使用空格分隔）</p>\n<ul>\n<li>请求方式：GET  </li>\n<li>资源路径：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1<ul>\n<li>请求路径：&#x2F;brand&#x2F;findAll</li>\n<li>请求参数：name&#x3D;OPPO&amp;status&#x3D;1<ul>\n<li>请求参数是以key&#x3D;value形式出现</li>\n<li>多个请求参数之间使用<code>&amp;</code>连接</li>\n</ul>\n</li>\n<li>请求路径和请求参数之间使用<code>?</code>连接</li>\n</ul>\n<p> \t\t\t </p>\n</li>\n<li>协议&#x2F;版本：HTTP&#x2F;1.1</li>\n</ul>\n</li>\n<li><p>请求头 ：第二行开始，上图黄色部分内容就是请求头。格式为key: value形式 </p>\n<ul>\n<li>http是个无状态的协议，所以在请求头设置浏览器的一些自身信息和想要响应的形式。这样服务器在收到信息后，就可以知道是谁，想干什么了</li>\n</ul>\n<p>常见的HTTP请求头有:</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">Host: 表示请求的主机名</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">User-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79 ，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Content-Type：请求主体的数据类型</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Content-Length：数据主体的大小（单位：字节）</span></span></code></pre></div></li>\n</ul>\n<ul>\n<li>请求体 ：存储请求参数<ul>\n<li>GET请求的请求参数在请求行中，故不需要设置请求体</li>\n</ul>\n</li>\n</ul>\n<p><strong>POST方式的请求协议：</strong>\t</p>\n<p><img src=\"/posts/0/image-20220823201303601.png\"></p>\n<ul>\n<li>请求行(以上图中红色部分)：包含请求方式、资源路径、协议&#x2F;版本<ul>\n<li>请求方式：POST</li>\n<li>资源路径：&#x2F;brand</li>\n<li>协议&#x2F;版本：HTTP&#x2F;1.1</li>\n</ul>\n</li>\n<li>请求头(以上图中黄色部分)   </li>\n<li>请求体(以上图中绿色部分) ：存储请求参数 <ul>\n<li>请求体和请求头之间是有一个空行隔开（作用：用于标记请求头结束）</li>\n</ul>\n</li>\n</ul>\n<p>GET请求和POST请求的区别：</p>\n<table>\n<thead>\n<tr>\n<th>区别方式</th>\n<th>GET请求</th>\n<th>POST请求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>请求参数</td>\n<td>请求参数在请求行中。<br>例：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1</td>\n<td>请求参数在请求体中</td>\n</tr>\n<tr>\n<td>请求参数长度</td>\n<td>请求参数长度有限制(浏览器不同限制也不同)</td>\n<td>请求参数长度没有限制</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td>\n<td>安全性相对高</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-HTTP-响应协议\"><a href=\"#2-3-HTTP-响应协议\" class=\"headerlink\" title=\"2.3 HTTP-响应协议\"></a>2.3 HTTP-响应协议</h3><p>与HTTP的请求一样，HTTP响应的数据也分为3部分：<strong>响应行</strong>、<strong>响应头</strong> 、<strong>响应体</strong> </p>\n<p><img src=\"/posts/0/image-20220823202344149.png\"> </p>\n<ul>\n<li><p>响应行(以上图中红色部分)：响应数据的第一行。响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</p>\n<ul>\n<li>协议&#x2F;版本：HTTP&#x2F;1.1</li>\n<li>响应状态码：200</li>\n<li>状态码描述：OK</li>\n</ul>\n</li>\n<li><p>响应头(以上图中黄色部分)：响应数据的第二行开始。格式为key：value形式</p>\n<ul>\n<li>http是个无状态的协议，所以可以在请求头和响应头中设置一些信息和想要执行的动作，这样，对方在收到信息后，就可以知道你是谁，你想干什么</li>\n</ul>\n<p>常见的HTTP响应头有:</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg ；</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Content-Length：表示该响应内容的长度（字节数）；</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Content-Encoding：表示该响应压缩算法，例如gzip ；</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒 ;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Set-Cookie: 告诉浏览器为当前页面所在的域设置cookie ;</span></span></code></pre></div></li>\n</ul>\n<ul>\n<li><p>响应体(以上图中绿色部分)： 响应数据的最后一部分。存储响应的数据</p>\n<ul>\n<li>响应体和响应头之间有一个空行隔开（作用：用于标记响应头结束）</li>\n</ul>\n</li>\n<li><p>ServerSocket程序，会读取服务器上<code>html/a.html</code>文件，并把文件数据发送给浏览器</p>\n</li>\n<li><p>浏览器接收到a.html文件中的数据后进行解析，显示以下内容</p>\n</li>\n</ul>\n<p>现在大家知道了服务器是可以使用java完成编写，是可以接受页面发送的请求和响应数据给前端浏览器的，而在开发中真正用到的Web服务器，我们不会自己写的，都是使用目前比较流行的web服务器。如：<strong>Tomcat</strong></p>\n<h2 id=\"3-WEB服务器-Tomcat\"><a href=\"#3-WEB服务器-Tomcat\" class=\"headerlink\" title=\"3.WEB服务器-Tomcat\"></a>3.WEB服务器-Tomcat</h2><h3 id=\"3-1-介绍\"><a href=\"#3-1-介绍\" class=\"headerlink\" title=\"3.1 介绍\"></a>3.1 介绍</h3><p><strong>服务器硬件</strong></p>\n<ul>\n<li>指的也是计算机，只不过服务器要比我们日常使用的计算机大很多。</li>\n</ul>\n<p>服务器，也称伺服器。是提供计算服务的设备。由于服务器需要响应服务请求，并进行处理，因此一般来说服务器应具备承担服务并且保障服务的能力。</p>\n<p>服务器的构成包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。</p>\n<p>在网络环境下，根据服务器提供的服务类型不同，可分为：文件服务器，数据库服务器，应用程序服务器，WEB服务器等。</p>\n<p>服务器只是一台设备，必须安装服务器软件才能提供相应的服务。</p>\n<p><strong>服务器软件</strong></p>\n<p>服务器软件：基于ServerSocket编写的程序</p>\n<ul>\n<li>服务器软件本质是一个运行在服务器设备上的应用程序</li>\n<li>能够接收客户端请求，并根据请求给客户端响应数据</li>\n</ul>\n<h3 id=\"3-2-Web服务器\"><a href=\"#3-2-Web服务器\" class=\"headerlink\" title=\"3.2 Web服务器\"></a>3.2 Web服务器</h3><p>Web服务器是一个应用程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作(不用程序员自己写代码去解析http协议规则)，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”。</p>\n<p><img src=\"/posts/0/image-20220824233614686.png\"></p>\n<p>Web服务器是安装在服务器端的一款软件，将来我们把自己写的Web项目部署到Tomcat服务器软件中，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。</p>\n<p><strong>Web服务器软件使用步骤</strong></p>\n<ul>\n<li>准备静态资源</li>\n<li>下载安装Web服务器软件</li>\n<li>将静态资源部署到Web服务器上</li>\n<li>启动Web服务器使用浏览器访问对应的资源</li>\n</ul>\n<p>第1步：准备静态资源</p>\n<ul>\n<li>在提供的资料中找到静态资源文件</li>\n</ul>\n<p><img src=\"/posts/0/image-20221202180119859.png\" alt=\"image-20221202180119859\"> </p>\n<p>第2步：下载安装Web服务器软件</p>\n<p><img src=\"/posts/0/image-20221202181110555.png\" alt=\"image-20221202181110555\"></p>\n<p>第3步：将静态资源部署到Web服务器上</p>\n<p><img src=\"/posts/0/image-20221202180805686.png\" alt=\"image-20221202180805686\"></p>\n<p>第4步：启动Web服务器使用浏览器访问对应的资源</p>\n<p><img src=\"/posts/0/image-20221202181346327.png\" alt=\"image-20221202181346327\"></p>\n<p>浏览器输入：<code>http://localhost:8080/demo/index.html</code></p>\n<p><img src=\"/posts/0/image-20221202181651469.png\" alt=\"image-20221202181651469\"></p>\n<p>上述内容在演示的时候，使用的是Apache下的Tomcat软件，至于Tomcat软件如何使用，后面会详细的讲到。而对于Web服务器来说，实现的方案有很多，Tomcat只是其中的一种，而除了Tomcat以外，还有很多优秀的Web服务器，比如:</p>\n<p><img src=\"/posts/0/image-20220824233728524.png\" alt=\"image-20220824233728524\"></p>\n<h3 id=\"3-3-Tomcat\"><a href=\"#3-3-Tomcat\" class=\"headerlink\" title=\"3.3 Tomcat\"></a>3.3 Tomcat</h3><h4 id=\"3-3-1-介绍\"><a href=\"#3-3-1-介绍\" class=\"headerlink\" title=\"3.3.1 介绍\"></a>3.3.1 介绍</h4><p>Tomcat服务器软件是一个免费的开源的web应用服务器。是Apache软件基金会的一个核心项目。由Apache，Sun和其他一些公司及个人共同开发而成。</p>\n<p>由于Tomcat只支持Servlet&#x2F;JSP少量JavaEE规范，所以是一个开源免费的轻量级Web服务器。</p>\n<p>因为Tomcat支持Servlet&#x2F;JSP规范，所以Tomcat也被称为Web容器、Servlet容器。JavaWeb程序需要依赖Tomcat才能运行。</p>\n<p>Tomcat的官网: <a href=\"https://tomcat.apache.org/\">https://tomcat.apache.org/</a> </p>\n<h4 id=\"3-3-2-基本使用\"><a href=\"#3-3-2-基本使用\" class=\"headerlink\" title=\"3.3.2 基本使用\"></a>3.3.2 基本使用</h4><p>直接从官方网站下载：<a href=\"https://tomcat.apache.org/download-90.cgi\">https://tomcat.apache.org/download-90.cgi</a></p>\n<p><strong>安装:</strong> Tomcat是绿色版，直接解压即安装</p>\n<p>&#x3D;&#x3D;注意，Tomcat在解压缩的时候，解压所在的目录可以任意，但最好解压到一个不包含中文和空格的目录，因为后期在部署项目的时候，如果路径有中文或者空格可能会导致程序部署失败。&#x3D;&#x3D;</p>\n<p>打开<code>apache-tomcat-9.0.27</code>目录就能看到如下目录结构，每个目录中包含的内容需要认识下</p>\n<p><img src=\"/posts/0/image-20220824234652173.png\">  </p>\n<p>bin：目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件。</p>\n<p>webapps：就是以后项目部署的目录</p>\n<p><strong>卸载：</strong>卸载比较简单，可以直接删除目录即可</p>\n<p><strong>启动Tomcat</strong> </p>\n<ul>\n<li>双击tomcat解压目录&#x2F;bin&#x2F;<strong>startup.bat</strong>文件即可启动tomcat</li>\n</ul>\n<p><img src=\"/posts/0/image-20221202183201663.png\" alt=\"image-20221202183201663\"></p>\n<p>&#x3D;&#x3D;注意: tomcat服务器启动后,黑窗口不会关闭,只要黑窗口不关闭,就证明tomcat服务器正在运行&#x3D;&#x3D;</p>\n<p>Tomcat的默认端口为8080，所以在浏览器的地址栏输入：<code>http://127.0.0.1:8080</code> 即可访问tomcat服务器</p>\n<p>&#x3D;&#x3D;注意事项&#x3D;&#x3D; ：Tomcat启动的过程中，遇到控制台有中文乱码时，可以通常修改conf&#x2F;logging.prooperties文件解决</p>\n<p><img src=\"/posts/0/image-20220825083848086.png\" alt=\"image-20220825083848086\"></p>\n<p><strong>关闭:</strong>  关闭有三种方式 </p>\n<p>1、强制关闭：直接x掉Tomcat窗口（不建议）</p>\n<p>2、正常关闭：bin\\shutdown.bat</p>\n<p>3、正常关闭：在Tomcat启动窗口中按下 Ctrl+C</p>\n<h4 id=\"3-3-3-常见问题\"><a href=\"#3-3-3-常见问题\" class=\"headerlink\" title=\"3.3.3 常见问题\"></a>3.3.3 常见问题</h4><p><strong>问题1：Tomcat启动时，窗口一闪而过</strong></p>\n<ul>\n<li>检查JAVA_HOME环境变量是否正确配置</li>\n</ul>\n<p><strong>问题2：端口号冲突</strong></p>\n<ul>\n<li><p>发生问题的原因：Tomcat使用的端口被占用了。</p>\n</li>\n<li><p>解决方案：换Tomcat端口号</p>\n<ul>\n<li>要想修改Tomcat启动的端口号，需要修改 conf&#x2F;server.xml文件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-入门程序\"><a href=\"#3-4-入门程序\" class=\"headerlink\" title=\"3.4 入门程序\"></a>3.4 入门程序</h3><h4 id=\"3-4-1-Spring官方骨架\"><a href=\"#3-4-1-Spring官方骨架\" class=\"headerlink\" title=\"3.4.1 Spring官方骨架\"></a>3.4.1 Spring官方骨架</h4><p>之前我们创建的SpringBoot入门案例，是基于Spring官方提供的骨架实现的。</p>\n<p>Spring官方骨架，可以理解为Spring官方为程序员提供一个搭建项目的模板。</p>\n<p>我们可以通过访问：<a href=\"https://start.spring.io/\">https://start.spring.io/</a> ，进入到官方骨架页面</p>\n<p><img src=\"/posts/0/image-20221202200356398.png\" alt=\"image-20221202200356398\"></p>\n<p><img src=\"/posts/0/image-20221202200547676.png\" alt=\"image-20221202200547676\"></p>\n<p><img src=\"/posts/0/image-20221202200708988.png\" alt=\"image-20221202200708988\"></p>\n<p>Spring官方生成的SpringBoot项目，怎么使用呢？</p>\n<ul>\n<li>解压缩后，就会得到一个SpringBoot项目工程</li>\n</ul>\n<p><img src=\"/posts/0/image-20221202201042109.png\" alt=\"image-20221202201042109\"></p>\n<p><img src=\"/posts/0/image-20221202201221136.png\" alt=\"image-20221202201221136\"></p>\n<p>打开pom.xml文件，我们可以看到springboot项目中引入了web依赖和test依赖</p>\n<p><img src=\"/posts/0/image-20221202201826364.png\" alt=\"image-20221202201826364\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>结论：不论使用IDEA创建SpringBoot项目，还是直接在官方网站利用骨架生成SpringBoot项目，项目的结构和pom.xml文件中内容是相似的。</strong></p></blockquote>\n<h4 id=\"3-4-2-起步依赖\"><a href=\"#3-4-2-起步依赖\" class=\"headerlink\" title=\"3.4.2 起步依赖\"></a>3.4.2 起步依赖</h4><p>在我们之前讲解的SpringBoot快速入门案例中，同样也引用了：web依赖和test依赖</p>\n<p><img src=\"/posts/0/image-20221202202305118.png\" alt=\"image-20221202202305118\"></p>\n<p>spring-boot-starter-web和spring-boot-starter-test，在SpringBoot中又称为：起步依赖</p>\n<p>而在SpringBoot的项目中，有很多的起步依赖，他们有一个共同的特征：就是以<code>spring-boot-starter-</code>作为开头。在以后大家遇到spring-boot-starter-xxx这类的依赖，都为起步依赖。</p>\n<p>起步依赖有什么特殊之处呢，这里我们以入门案例中引入的起步依赖做为讲解：</p>\n<ul>\n<li>spring-boot-starter-web：包含了web应用开发所需要的常见依赖</li>\n<li>spring-boot-starter-test：包含了单元测试所需要的常见依赖</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>spring-boot-starter-web</strong>内部把关于Web开发所有的依赖都已经导入并且指定了版本，只需引入 <code>spring-boot-starter-web</code> 依赖就可以实现Web开发的需要的功能</p>\n<p><img src=\"/posts/0/image-20221202204013113.png\" alt=\"image-20221202204013113\"></p></blockquote>\n<p>Spring的官方提供了很多现成的starter(起步依赖)，我们在开发相关应用时，只需要引入对应的starter即可。</p>\n<p>官方地址：<a href=\"https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters\">https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters</a></p>\n<p>每一个起步依赖，都用于开发一个特定的功能。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>举例：当我们开发中需要使用redis数据库时，只需要在SpringBoot项目中，引入：spring-boot-starter-redis ，即可导入redis开发所需要的依赖。</p></blockquote>\n<h4 id=\"3-4-3-SpringBoot父工程\"><a href=\"#3-4-3-SpringBoot父工程\" class=\"headerlink\" title=\"3.4.3 SpringBoot父工程\"></a>3.4.3 SpringBoot父工程</h4><p>在我们之前开发的SpringBoot入门案例中，我们通过maven引入的依赖，是没有指定具体的依赖版本号的。</p>\n<p><img src=\"/posts/0/image-20221202205103486.png\" alt=\"image-20221202205103486\"></p>\n<p>为什么没有指定<version>版本号，可以正常使用呢？</version></p>\n<ul>\n<li>因为每一个SpringBoot工程，都有一个父工程。依赖的版本号，在父工程中统一管理。</li>\n</ul>\n<p><img src=\"/posts/0/image-20221202205318778.png\" alt=\"image-20221202205318778\"></p>\n<h4 id=\"3-4-4-内嵌Tomcat\"><a href=\"#3-4-4-内嵌Tomcat\" class=\"headerlink\" title=\"3.4.4 内嵌Tomcat\"></a>3.4.4 内嵌Tomcat</h4><p>问题：为什么我们之前书写的SpringBoot入门程序中，并没有把程序部署到Tomcat的webapps目录下，也可以运行呢？</p>\n<p>原因呢，是因为在我们的SpringBoot中，引入了web运行环境(也就是引入spring-boot-starter-web起步依赖)，其内部已经集成了内置的Tomcat服务器。</p>\n<p>我们可以通过IDEA开发工具右侧的maven面板中，就可以看到当前工程引入的依赖。其中已经将Tomcat的相关依赖传递下来了，也就是说在SpringBoot中可以直接使用Tomcat服务器。</p>\n<p><img src=\"/posts/0/image-20220825194553137.png\"> </p>\n<p>当我们运行SpringBoot的引导类时(运行main方法)，就会看到命令行输出的日志，其中占用8080端口的就是Tomcat。</p>\n<p><img src=\"/posts/0/image-20220825195359993.png\" alt=\"image-20220825195359993\"></p>\n<h2 id=\"4-SpringBoot请求\"><a href=\"#4-SpringBoot请求\" class=\"headerlink\" title=\"4.SpringBoot请求\"></a>4.SpringBoot请求</h2><h3 id=\"4-1-BS架构\"><a href=\"#4-1-BS架构\" class=\"headerlink\" title=\"4.1 BS架构\"></a>4.1 BS架构</h3><p>我们在浏览器发起请求，请求了我们的后端web服务器(也就是内置的Tomcat)。而我们在开发web程序时呢，定义了一个控制器类Controller，请求会被部署在Tomcat中的Controller接收，然后Controller再给浏览器一个响应，响应一个字符串 “Hello World”。 而在请求响应的过程中是遵循HTTP协议的。</p>\n<p>但是呢，这里要告诉大家的时，其实在Tomcat这类Web服务器中，是不识别我们自己定义的Controller的。但是我们前面讲到过Tomcat是一个Servlet容器，是支持Serlvet规范的，所以呢，在tomcat中是可以识别 Servlet程序的。 那我们所编写的XxxController 是如何处理请求的，又与Servlet之间有什么联系呢？</p>\n<p>其实呢，在SpringBoot进行web程序开发时，它内置了一个核心的Servlet程序 DispatcherServlet，称之为 核心控制器。 DispatcherServlet 负责接收页面发送的请求，然后根据执行的规则，将请求再转发给后面的请求处理器Controller，请求处理器处理完请求之后，最终再由DispatcherServlet给浏览器响应数据。</p>\n<p>那将来浏览器发送请求，会携带请求数据，包括：请求行、请求头；请求到达tomcat之后，tomcat会负责解析这些请求数据，然后呢将解析后的请求数据会传递给Servlet程序的HttpServletRequest对象，那也就意味着 HttpServletRequest 对象就可以获取到请求数据。 而Tomcat，还给Servlet程序传递了一个参数 HttpServletResponse，通过这个对象，我们就可以给浏览器设置响应数据 。</p>\n<p><img src=\"/posts/0/image-20220826171407354.png\" alt=\"image-20220826171407354\"> </p>\n<p>那上述所描述的这种浏览器&#x2F;服务器的架构模式呢，我们称之为：BS架构。</p>\n<p><img src=\"/posts/0/image-20220826171454775.png\" alt=\"image-20220826171454775\"> </p>\n<p>• BS架构：Browser&#x2F;Server，浏览器&#x2F;服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。</p>\n<h3 id=\"4-2-Postman\"><a href=\"#4-2-Postman\" class=\"headerlink\" title=\"4.2 Postman\"></a>4.2 Postman</h3><h4 id=\"4-2-1-入门\"><a href=\"#4-2-1-入门\" class=\"headerlink\" title=\"4.2.1 入门\"></a>4.2.1 入门</h4><p>前后端分离这种模式下，前端技术人员基于”接口文档”，开发前端程序；后端技术人员也基于”接口文档”，开发后端程序。</p>\n<p>方式1：像之前SpringBoot入门案例中一样，直接使用浏览器。在浏览器中输入地址，测试后端程序。</p>\n<ul>\n<li>弊端：在浏览器地址栏中输入地址这种方式都是GET请求，如何我们要用到POST请求怎么办呢？<ul>\n<li>要解决POST请求，需要程序员自己编写前端代码（比较麻烦）</li>\n</ul>\n</li>\n</ul>\n<p>方式2：使用专业的接口测试工具（课程中我们使用Postman工具）</p>\n<ul>\n<li><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Postman原是Chrome浏览器的插件，可以模拟浏览器向后端服务器发起任何形式(如:get、post)的HTTP请求</p>\n<p>使用Postman还可以在发起请求时，携带一些请求参数、请求头等信息</p></blockquote>\n</li>\n<li><p>作用：常用于进行接口测试</p>\n</li>\n</ul>\n<p>界面介绍:</p>\n<p><img src=\"/posts/0/image-20220826175306141.png\" alt=\"image-20220826175306141\"></p>\n<h4 id=\"4-2-2-简单参数传递\"><a href=\"#4-2-2-简单参数传递\" class=\"headerlink\" title=\"4.2.2 简单参数传递\"></a>4.2.2 简单参数传递</h4><p>简单参数：在向服务器发起请求时，向服务器传递的是一些普通的请求数据。</p>\n<p><img src=\"/posts/0/image-20220826180550583.png\" alt=\"image-20220826180550583\"></p>\n<p>那么在后端程序中，如何接收传递过来的普通参数数据呢？我们在这里讲解两种方式：</p>\n<ol>\n<li><strong>原始方式</strong></li>\n</ol>\n<p>在原始的Web程序当中，需要通过Servlet中提供的API：HttpServletRequest（请求对象），获取请求的相关信息。比如获取请求参数：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Tomcat接收到http请求时：把请求的相关信息封装到HttpServletRequest对象中</p></blockquote>\n<p>在Controller中，我们要想获取Request对象，可以直接在方法的形参中声明 HttpServletRequest 对象。然后就可以通过该对象来获取请求信息。</p>\n<ol start=\"2\">\n<li><strong>SpringBoot方式</strong></li>\n</ol>\n<p>在Springboot的环境中，对原始的API进行了封装，接收参数的形式更加简单。 如果是简单参数，参数名与形参变量名相同，定义同名的形参即可接收参数。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//springboot方式</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/simpleParam</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">simpleParam</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">name</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">age</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">)&#123;</span><span style=\"color: #676E95; font-style: italic\">//形参名和请求参数名保持一致</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">name</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">  :  </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">age</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><strong>postman测试( GET 请求)：</strong></p>\n<p><img src=\"/posts/0/image-20221203122405075.png\" alt=\"image-20221203122405075\"> </p>\n<p><strong>postman测试( POST请求 )：</strong></p>\n<p><img src=\"/posts/0/image-20220826181117898.png\" alt=\"image-20220826181117898\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>结论：不论是GET请求还是POST请求，对于简单参数来讲，只要保证&#x3D;&#x3D;请求参数名和Controller方法中的形参名保持一致&#x3D;&#x3D;，就可以获取到请求参数中的数据值。</strong></p></blockquote>\n<p>对于简单参数来讲，请求参数名和controller方法中的形参名不一致时，无法接收到请求数据</p>\n<p>那么如果我们开发中，遇到了这种请求参数名和controller方法中的形参名不相同，怎么办？</p>\n<p>解决方案：可以使用Spring提供的@RequestParam注解完成映射</p>\n<p>在方法形参前面加上 @RequestParam 然后通过value属性执行请求参数名，从而完成映射。代码如下：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 请求参数名：name</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//springboot方式</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/simpleParam</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">simpleParam</span><span style=\"color: #89DDFF\">(@</span><span style=\"color: #C792EA\">RequestParam</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">username</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">age</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">username</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">  :  </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">age</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意事项：</strong></p>\n<p>@RequestParam中的required属性默认为true（默认值也是true），代表该请求参数必须传递，如果不传递将报错</p>\n<p><img src=\"/posts/0/image-20221203130726310.png\" alt=\"image-20221203130726310\"></p>\n<p>如果该参数是可选的，可以将required属性设置为false</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/simpleParam</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">simpleParam</span><span style=\"color: #89DDFF\">(@</span><span style=\"color: #C792EA\">RequestParam</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">name</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">required</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">false)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> username</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">username</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div></blockquote>\n<h4 id=\"4-2-3-实体参数\"><a href=\"#4-2-3-实体参数\" class=\"headerlink\" title=\"4.2.3 实体参数\"></a>4.2.3 实体参数</h4><p>在使用简单参数做为数据传递方式时，前端传递了多少个请求参数，后端controller方法中的形参就要书写多少个。如果请求参数比较多，通过上述的方式一个参数一个参数的接收，会比较繁琐。 </p>\n<p>此时，我们可以考虑将请求参数封装到一个实体类对象中。 要想完成数据封装，需要遵守如下规则：<strong>请求参数名与实体类的属性名相同</strong></p>\n<p><img src=\"/posts/0/image-20240206180603154.png\" alt=\"image-20240206180603154\"></p>\n<p><strong>简单实体对象</strong></p>\n<p>定义POJO实体类：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">User</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> name</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getName</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> name</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setName</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">name</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">name </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> name</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getAge</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setAge</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">age</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">age </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Override</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">User&#123;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">name=&#39;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> name </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">\\&#39;</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">, age=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> age </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">&#125;</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p>Controller方法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//实体参数：简单实体对象</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/simplePojo</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">simplePojo</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">User</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">user</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">user</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>Postman测试：</p>\n<ul>\n<li>参数名和实体类属性名一致时</li>\n</ul>\n<p><img src=\"/posts/0/image-20221203161246168.png\" alt=\"image-20221203161246168\"> </p>\n<ul>\n<li>参数名和实体类属性名不一致时</li>\n</ul>\n<p><img src=\"/posts/0/image-20221203161004349.png\" alt=\"image-20221203161004349\"></p>\n<p><strong>复杂实体对象</strong></p>\n<p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。如下：</p>\n<ul>\n<li>User类中有一个Address类型的属性（Address是一个实体类）</li>\n</ul>\n<p><img src=\"/posts/0/image-20221203160447953.png\" alt=\"image-20221203160447953\"></p>\n<p>复杂实体对象的封装，需要遵守如下规则：</p>\n<ul>\n<li><strong>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套实体类属性参数。</strong></li>\n</ul>\n<p>定义POJO实体类：</p>\n<ul>\n<li>Address实体类</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Address</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> province</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> city</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getProvince</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> province</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setProvince</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">province</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">province </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> province</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getCity</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> city</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setCity</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">city</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">city </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> city</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Override</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Address&#123;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">province=&#39;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> province </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">\\&#39;</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">, city=&#39;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> city </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">\\&#39;</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">&#125;</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><ul>\n<li>User实体类</li>\n</ul>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">User</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> name</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Address</span><span style=\"color: #BABED8\"> address</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//地址对象</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getName</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> name</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setName</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">name</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">name </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> name</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getAge</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setAge</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">age</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">age </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Address</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getAddress</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> address</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setAddress</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Address</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">address</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">address </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> address</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Override</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">User&#123;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">name=&#39;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> name </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">\\&#39;</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">, age=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> age </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">, address=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> address </span><span style=\"color: #89DDFF\">+</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">&#125;</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>Controller方法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//实体参数：复杂实体对象</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/complexPojo</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">complexPojo</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">User</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">user</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">user</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>Postman测试：</p>\n<p><img src=\"/posts/0/image-20221203162706175.png\" alt=\"image-20221203162706175\"> </p>\n<h4 id=\"4-2-4-数组集合参数\"><a href=\"#4-2-4-数组集合参数\" class=\"headerlink\" title=\"4.2.4 数组集合参数\"></a>4.2.4 数组集合参数</h4><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p>\n<p>多个值是怎么提交的呢？其实多个值也是一个一个的提交。</p>\n<p><img src=\"/posts/0/image-20221203164944144.png\" alt=\"image-20221203164944144\"> </p>\n<p>后端程序接收上述多个值的方式有两种：</p>\n<ol>\n<li>数组</li>\n<li>集合</li>\n</ol>\n<p><strong>数组</strong></p>\n<p>数组参数：<strong>请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</strong></p>\n<p><img src=\"/posts/0/image-20221203190218468.png\" alt=\"image-20221203190218468\"></p>\n<p>Controller方法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//数组集合参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/arrayParam</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">arrayParam</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">hobby</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">Arrays</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">hobby</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>在前端请求时，有两种传递形式：</p>\n<p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p>\n<p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p>\n<p><strong>集合</strong></p>\n<p>集合参数：<strong>请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</strong></p>\n<blockquote>\n<p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p></blockquote>\n<p><img src=\"/posts/0/image-20221203211640646.png\" alt=\"image-20221203211640646\"></p>\n<p>Controller方法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//数组集合参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/listParam</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">listParam</span><span style=\"color: #89DDFF\">(@</span><span style=\"color: #C792EA\">RequestParam</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">hobby</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">hobby</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p>\n<p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p>\n<h4 id=\"4-2-5-日期参数\"><a href=\"#4-2-5-日期参数\" class=\"headerlink\" title=\"4.2.5 日期参数\"></a>4.2.5 日期参数</h4><p>上述演示的都是一些普通的参数，在一些特殊的需求中，可能会涉及到日期类型数据的封装。比如，如下需求：</p>\n<p><img src=\"/posts/0/image-20220826194159343.png\" alt=\"image-20220826194159343\"> </p>\n<p>因为日期的格式多种多样（如：2022-12-12 10:05:45 、2022&#x2F;12&#x2F;12 10:05:45），那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p>\n<p><img src=\"/posts/0/image-20221203213120692.png\" alt=\"image-20221203213120692\"></p>\n<ul>\n<li>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</li>\n<li>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</li>\n</ul>\n<p>Controller方法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//日期时间参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/dateParam</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">dateParam</span><span style=\"color: #89DDFF\">(@</span><span style=\"color: #C792EA\">DateTimeFormat</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">pattern</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">yyyy-MM-dd HH:mm:ss</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">LocalDateTime</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">updateTime</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">updateTime</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>Postman测试：</p>\n<p><img src=\"/posts/0/image-20221203214600716.png\" alt=\"image-20221203214600716\"></p>\n<h4 id=\"4-2-6-JSON参数\"><a href=\"#4-2-6-JSON参数\" class=\"headerlink\" title=\"4.2.6 JSON参数\"></a>4.2.6 JSON参数</h4><p>在学习前端技术时，我们有讲到过JSON，而在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。 （JSON是开发中最常用的前后端数据交互方式）</p>\n<p>我们学习JSON格式参数，主要从以下两个方面着手：</p>\n<ol>\n<li>Postman在发送请求时，如何传递json格式的请求参数</li>\n<li>在服务端的controller方法中，如何接收json格式的请求参数</li>\n</ol>\n<p>Postman发送JSON格式数据：</p>\n<p><img src=\"/posts/0/image-20221203225623337.png\" alt=\"image-20221203225623337\"></p>\n<p>服务端Controller方法接收JSON格式数据：</p>\n<ul>\n<li>传递json格式的参数，在Controller中会使用实体类进行封装。 </li>\n<li>封装规则：<strong>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</strong></li>\n</ul>\n<p><img src=\"/posts/0/image-20221203230457901.png\" alt=\"image-20221203230457901\"></p>\n<ul>\n<li>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</li>\n</ul>\n<p>实体类：Address</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Address</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> province</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> city</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//省略GET , SET 方法</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>实体类：User</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">User</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> name</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Address</span><span style=\"color: #BABED8\"> address</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//省略GET , SET 方法</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">    </span></span></code></pre></div><p>Controller方法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//JSON参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/jsonParam</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">jsonParam</span><span style=\"color: #89DDFF\">(@</span><span style=\"color: #C792EA\">RequestBody</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">User</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">user</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">user</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>Postman测试：</p>\n<p><img src=\"/posts/0/image-20221203231803000.png\" alt=\"image-20221203231803000\"> </p>\n<h4 id=\"4-2-7-路径参数\"><a href=\"#4-2-7-路径参数\" class=\"headerlink\" title=\"4.2.7 路径参数\"></a>4.2.7 路径参数</h4><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面通过?key&#x3D;value的形式传递(GET请求)。</p>\n<p><img src=\"/posts/0/image-20221203235715804.png\" alt=\"image-20221203235715804\"></p>\n<p>在现在的开发中，经常还会直接在请求的URL中传递参数。例如：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">http://localhost:8080/user/1\t\t</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">http://localhost:880/user/1/0</span></span></code></pre></div><p>上述的这种传递请求参数的形式呢，我们称之为：路径参数。</p>\n<p>学习路径参数呢，主要掌握在后端的controller方法中，如何接收路径参数。</p>\n<p>路径参数：</p>\n<ul>\n<li>前端：通过请求URL直接传递参数</li>\n<li>后端：使用{…}来标识该路径参数，需要使用@PathVariable获取路径参数</li>\n</ul>\n<p><img src=\"/posts/0/image-20221204001520756.png\" alt=\"image-20221204001520756\"></p>\n<p>Controller方法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//路径参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/path/&#123;id&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">pathParam</span><span style=\"color: #89DDFF\">(@</span><span style=\"color: #C792EA\">PathVariable</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">id</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">id</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>Postman测试：</p>\n<p><img src=\"/posts/0/image-20221204002040184.png\" alt=\"image-20221204002040184\"></p>\n<p><strong>传递多个路径参数：</strong></p>\n<p>Postman：</p>\n<p><img src=\"/posts/0/image-20221204002306288.png\" alt=\"image-20221204002306288\"></p>\n<p>Controller方法：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">RequestController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//路径参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/path/&#123;id&#125;/&#123;name&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">pathParam2</span><span style=\"color: #89DDFF\">(@</span><span style=\"color: #C792EA\">PathVariable</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">id</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">PathVariable</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">name</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">id</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\"> : </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">name</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">OK</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"5-SpringBoot响应\"><a href=\"#5-SpringBoot响应\" class=\"headerlink\" title=\"5.SpringBoot响应\"></a>5.SpringBoot响应</h2><h3 id=\"5-1-ResponseBody注解\"><a href=\"#5-1-ResponseBody注解\" class=\"headerlink\" title=\"5.1 ResponseBody注解\"></a>5.1 ResponseBody注解</h3><p>前面我们学习过HTTL协议的交互方式：请求响应模式（有请求就有响应）</p>\n<p>那么Controller程序呢，除了接收请求外，还可以进行响应。</p>\n<p>在我们前面所编写的controller方法中，都已经设置了响应数据。</p>\n<p><img src=\"/posts/0/image-20221204100656376.png\" alt=\"image-20221204100656376\"></p>\n<p>controller方法中的return的结果，怎么就可以响应给浏览器呢？</p>\n<p>答案：使用@ResponseBody注解</p>\n<p><strong>@ResponseBody注解：</strong></p>\n<ul>\n<li>类型：方法注解、类注解</li>\n<li>位置：书写在Controller方法上或类上</li>\n<li>作用：将方法返回值直接响应给浏览器<ul>\n<li>如果返回值类型是实体对象&#x2F;集合，将会转换为JSON格式后在响应给浏览器</li>\n</ul>\n</li>\n</ul>\n<p>但是在我们所书写的Controller中，只在类上添加了@RestController注解、方法添加了@RequestMapping注解，并没有使用@ResponseBody注解，怎么给浏览器响应呢？</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">HelloController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/hello</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">hello</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Hello World ~</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Hello World ~</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>原因：在类上添加的@RestController注解，是一个组合注解。</p>\n<ul>\n<li><p>@RestController &#x3D; @Controller + @ResponseBody </p>\n</li>\n<li><p>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据</p>\n<ul>\n<li>方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-统一响应结果\"><a href=\"#5-2-统一响应结果\" class=\"headerlink\" title=\"5.2 统一响应结果\"></a>5.2 统一响应结果</h3><p>在真实的项目开发中，无论是哪种方法，我们都会定义一个统一的返回结果。方案如下：</p>\n<p><img src=\"/posts/0/image-20221204174537686.png\" alt=\"image-20221204174537686\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>前端：只需要按照统一格式的返回结果进行解析(仅一种解析方案)，就可以拿到数据。</p></blockquote>\n<p>统一的返回结果使用类来描述，在这个结果中包含：</p>\n<ul>\n<li><p>响应状态码：当前请求是成功，还是失败</p>\n</li>\n<li><p>状态码信息：给页面的提示信息</p>\n</li>\n<li><p>返回的数据：给前端响应的数据（字符串、对象、集合）</p>\n</li>\n</ul>\n<p>定义在一个实体类Result来包含以上信息。代码如下：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> code</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">//响应码，1 代表成功; 0 代表失败</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> msg</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\">  </span><span style=\"color: #676E95; font-style: italic\">//响应码 描述字符串</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> data</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//返回的数据</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Result</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Result</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">code</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">msg</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">data</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">code </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> code</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">msg </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> msg</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">data </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> data</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getCode</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> code</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setCode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">code</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">code </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> code</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getMsg</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> msg</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setMsg</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">msg</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">msg </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> msg</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getData</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> data</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">setData</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">data</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #BABED8\">data </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> data</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//增删改 成功响应(不需要给前端返回数据)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">success</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Result</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">success</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,null);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">success</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">Object</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">data</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Result</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">success</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">data</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//失败响应</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">error</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">msg</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Result</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">msg</span><span style=\"color: #89DDFF\">,null);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>改造Controller：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ResponseController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//响应统一格式的结果</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/hello</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">hello</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Hello World ~</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//return new Result(1,&quot;success&quot;,&quot;Hello World ~&quot;);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> Result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">success</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Hello World ~</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//响应统一格式的结果</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/getAddr</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">getAddr</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Address</span><span style=\"color: #BABED8\"> addr </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Address</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        addr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setProvince</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">广东</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        addr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setCity</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">深圳</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> Result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">success</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">addr</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//响应统一格式的结果</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/listAddr</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">listAddr</span><span style=\"color: #89DDFF\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">List</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">Address</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> list </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">ArrayList</span><span style=\"color: #89DDFF\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Address</span><span style=\"color: #BABED8\"> addr </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Address</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        addr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setProvince</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">广东</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        addr</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setCity</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">深圳</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Address</span><span style=\"color: #BABED8\"> addr2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Address</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        addr2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setProvince</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">陕西</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        addr2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setCity</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">西安</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">addr</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        list</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">add</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">addr2</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> Result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">success</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">list</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><h2 id=\"6-分层解耦\"><a href=\"#6-分层解耦\" class=\"headerlink\" title=\"6.分层解耦\"></a>6.分层解耦</h2><h3 id=\"6-1-三层架构\"><a href=\"#6-1-三层架构\" class=\"headerlink\" title=\"6.1 三层架构\"></a>6.1 三层架构</h3><p>在我们进行程序设计以及程序开发时，尽可能让每一个接口、类、方法的职责更单一些（单一职责原则）。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p>\n<p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护。</p></blockquote>\n<p>从组成上看可以分为三个部分：</p>\n<ul>\n<li>数据访问：负责业务数据的维护操作，包括增、删、改、查等操作。</li>\n<li>逻辑处理：负责业务逻辑处理的代码。</li>\n<li>请求处理、响应数据：负责，接收页面的请求，给页面响应数据。</li>\n</ul>\n<p>按照上述的三个组成部分，在我们项目开发中呢，可以将代码分为三层：</p>\n<ul>\n<li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li>\n<li>Service：业务逻辑层。处理具体的业务逻辑。</li>\n<li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li>\n</ul>\n<p>基于三层架构的程序执行流程：</p>\n<p><img src=\"/posts/0/image-20221204194207812.png\" alt=\"image-20221204194207812\"></p>\n<ul>\n<li>前端发起的请求，由Controller层接收（Controller响应数据给前端）</li>\n<li>Controller层调用Service层来进行逻辑处理（Service层处理完后，把处理结果返回给Controller层）</li>\n<li>Serivce层调用Dao层（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li>\n<li>Dao层操作文件中的数据（Dao拿到的数据会返回给Service层）</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>思考：按照三层架构的思想，如何要对业务逻辑(Service层)进行变更，会影响到Controller层和Dao层吗？ </p>\n<p>答案：不会影响。 （程序的扩展性、维护性变得更好了）</p></blockquote>\n<h3 id=\"6-2-解耦\"><a href=\"#6-2-解耦\" class=\"headerlink\" title=\"6.2 解耦\"></a>6.2 解耦</h3><p>首先需要了解软件开发涉及到的两个概念：内聚和耦合。</p>\n<ul>\n<li><p>内聚：软件中各个功能模块内部的功能联系。</p>\n</li>\n<li><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p>\n</li>\n</ul>\n<p><strong>软件设计原则：高内聚低耦合。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>高内聚指的是：一个模块中各个元素之间的联系的紧密程度，如果各个元素(语句、程序段)之间的联系程度越高，则内聚性越高，即 “高内聚”。</p>\n<p>低耦合指的是：软件中各个层、模块之间的依赖关联程序越低越好。</p></blockquote>\n<p>程序中高内聚的体现：</p>\n<ul>\n<li>EmpServiceA类中只编写了和员工相关的逻辑处理代码</li>\n</ul>\n<p>程序中耦合代码的体现：</p>\n<ul>\n<li>把业务类变为EmpServiceB时，需要修改controller层中的代码</li>\n</ul>\n<p>高内聚、低耦合的目的是使程序模块的可重用性、移植性大大增强。</p>\n<p><img src=\"/posts/0/image-20220828215549593.png\"></p>\n<p> 那应该怎么解耦呢？</p>\n<ul>\n<li>首先不能在EmpController中使用new对象。代码如下：</li>\n</ul>\n<p><img src=\"/posts/0/image-20221204205328069.png\" alt=\"image-20221204205328069\"></p>\n<ul>\n<li>此时，就存在另一个问题了，不能new，就意味着没有业务层对象（程序运行就报错），怎么办呢？<ul>\n<li>我们的解决思路是：<ul>\n<li>提供一个容器，容器中存储一些对象(例：EmpService对象)</li>\n<li>controller程序从容器中获取EmpService类型的对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>我们想要实现上述解耦操作，就涉及到Spring中的两个核心概念：</p>\n<ul>\n<li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p></blockquote>\n</li>\n<li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p>\n<p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p></blockquote>\n</li>\n</ul>\n<p>IOC容器中创建、管理的对象，称之为：bean对象</p>\n<h3 id=\"6-3-IOC-DI\"><a href=\"#6-3-IOC-DI\" class=\"headerlink\" title=\"6.3 IOC&amp;DI\"></a>6.3 IOC&amp;DI</h3><h4 id=\"6-3-1-解耦步骤\"><a href=\"#6-3-1-解耦步骤\" class=\"headerlink\" title=\"6.3.1 解耦步骤\"></a>6.3.1 解耦步骤</h4><p>任务：完成Controller层、Service层、Dao层的代码解耦</p>\n<ul>\n<li><p>思路：</p>\n<ol>\n<li><p>删除Controller层、Service层中new对象的代码</p>\n</li>\n<li><p>Service层及Dao层的实现类，交给IOC容器管理</p>\n<ul>\n<li>使用Spring提供的注解：@Component ，就可以实现类交给IOC容器管理</li>\n</ul>\n</li>\n<li><p>为Controller及Service注入运行时依赖的对象</p>\n<ul>\n<li><p>使用Spring提供的注解：@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</p>\n</li>\n<li><p>Controller程序中注入依赖的Service层对象</p>\n</li>\n<li><p>Service程序中注入依赖的Dao层对象</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"6-3-2-Bean的声明\"><a href=\"#6-3-2-Bean的声明\" class=\"headerlink\" title=\"6.3.2 Bean的声明\"></a>6.3.2 Bean的声明</h4><p>通过IOC和DI的入门程序呢，我们已经基本了解了IOC和DI的基础操作。接下来呢，我们学习下IOC控制反转和DI依赖注入的细节。</p>\n<p>前面我们提到IOC控制反转，就是将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象。IOC容器创建的对象称为bean对象。</p>\n<p>在之前的入门案例中，要把某个对象交给IOC容器管理，需要在类上添加一个注解：@Component </p>\n<p>而Spring框架为了更好的标识web应用程序开发当中，bean对象到底归属于哪一层，又提供了@Component的衍生注解：</p>\n<ul>\n<li>@Controller    （标注在控制层类上）</li>\n<li>@Service          （标注在业务层类上）</li>\n<li>@Repository    （标注在数据访问层类上）</li>\n</ul>\n<p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">注解</th>\n<th>说明</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">@Controller</td>\n<td>@Component的衍生注解</td>\n<td>标注在控制器类上</td>\n</tr>\n<tr>\n<td align=\"left\">@Service</td>\n<td>@Component的衍生注解</td>\n<td>标注在业务类上</td>\n</tr>\n<tr>\n<td align=\"left\">@Repository</td>\n<td>@Component的衍生注解</td>\n<td>标注在数据访问类上（由于与mybatis整合，用的少）</td>\n</tr>\n<tr>\n<td align=\"left\">@Component</td>\n<td>声明bean的基础注解</td>\n<td>不属于以上三类时，用此注解</td>\n</tr>\n</tbody></table>\n<p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字。如果没有指定，默认为类名首字母小写。</p>\n<p><img src=\"/posts/0/image-20221204222650873.png\" alt=\"image-20221204222650873\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意事项: </p>\n<ul>\n<li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li>\n<li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li>\n</ul></blockquote>\n<h4 id=\"6-3-3-组件扫描\"><a href=\"#6-3-3-组件扫描\" class=\"headerlink\" title=\"6.3.3 组件扫描\"></a>6.3.3 组件扫描</h4><p>问题：使用前面学习的四个注解声明的bean，一定会生效吗？</p>\n<p>答案：不一定。（原因：bean想要生效，还需要被组件扫描）</p>\n<ul>\n<li>使用四大注解声明的bean，要想生效，还需要被组件扫描注解@ComponentScan扫描</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了引导类声明注解 @SpringBootApplication 中，&#x3D;&#x3D;<strong>默认扫描的范围是SpringBoot启动类所在包及其子包</strong>&#x3D;&#x3D;。</p>\n<p><img src=\"/posts/0/image-20221204224643683.png\" alt=\"image-20221204224643683\"> </p></blockquote>\n<ul>\n<li>解决方案：手动添加@ComponentScan注解，指定要扫描的包   （&#x3D;&#x3D;仅做了解，不推荐&#x3D;&#x3D;）</li>\n</ul>\n<p><img src=\"/posts/0/image-20221204225437297.png\" alt=\"image-20221204225437297\"></p>\n<p>推荐做法（如下图）：</p>\n<ul>\n<li>将我们定义的controller，service，dao这些包呢，都放在引导类所在包com.itheima的子包下，这样我们定义的bean就会被自动的扫描到</li>\n</ul>\n<p><img src=\"/posts/0/image-20221204225815624.png\" alt=\"image-20221204225815624\"></p>\n<h4 id=\"6-3-4-DI详解\"><a href=\"#6-3-4-DI详解\" class=\"headerlink\" title=\"6.3.4 DI详解\"></a>6.3.4 DI详解</h4><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p>\n<p>在入门程序案例中，我们使用了@Autowired这个注解，完成了依赖注入的操作，而这个Autowired翻译过来叫：自动装配。</p>\n<p>@Autowired注解，默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>入门程序举例：在EmpController运行的时候，就要到IOC容器当中去查找EmpService这个类型的对象，而我们的IOC容器中刚好有一个EmpService这个类型的对象，所以就找到了这个类型的对象完成注入操作。</p></blockquote>\n<p>那如果在IOC容器中，存在多个相同类型的bean对象，会出现什么情况呢？程序运行会报错</p>\n<p>如何解决上述问题呢？Spring提供了以下几种解决方案：</p>\n<ul>\n<li><p>@Primary</p>\n</li>\n<li><p>@Qualifier</p>\n</li>\n<li><p>@Resource</p>\n</li>\n</ul>\n<p>使用@Primary注解：当存在多个相同类型的Bean注入时，加上@Primary注解，来确定默认的实现。</p>\n<p><img src=\"/posts/0/image-20221204232501679.png\" alt=\"image-20221204232501679\"> </p>\n<p>使用@Qualifier注解：指定当前要注入的bean对象。 在@Qualifier的value属性中，指定注入的bean的名称。</p>\n<ul>\n<li>@Qualifier注解不能单独使用，必须配合@Autowired使用</li>\n</ul>\n<p><img src=\"/posts/0/image-20221204233333606.png\" alt=\"image-20221204233333606\"></p>\n<p>使用@Resource注解：是按照bean的名称进行注入。通过name属性指定要注入的bean的名称。</p>\n<p><img src=\"/posts/0/image-20221204233637735.png\" alt=\"image-20221204233637735\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>面试题 ： @Autowird 与 @Resource的区别</p>\n<ul>\n<li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li>\n<li>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</li>\n</ul></blockquote>\n<h2 id=\"7-文件上传\"><a href=\"#7-文件上传\" class=\"headerlink\" title=\"7.文件上传\"></a>7.文件上传</h2><h3 id=\"7-1-简介\"><a href=\"#7-1-简介\" class=\"headerlink\" title=\"7.1 简介\"></a>7.1 简介</h3><p>文件上传，是指将本地图片、视频、音频等文件上传到服务器，供其他用户浏览或下载的过程。</p>\n<p>文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友圈都用到了文件上传功能。</p>\n<p><img src=\"/posts/0/image-20221216203904713.png\" alt=\"image-20221216203904713\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在我们的案例中，在新增员工的时候，要上传员工的头像，此时就会涉及到文件上传的功能。在进行文件上传时，我们点击加号或者是点击图片，就可以选择手机或者是电脑本地的图片文件了。当我们选择了某一个图片文件之后，这个文件就会上传到服务器，从而完成文件上传的操作。</p></blockquote>\n<p>想要完成文件上传这个功能需要涉及到两个部分：</p>\n<ol>\n<li>前端程序</li>\n<li>服务端程序</li>\n</ol>\n<p>我们先来看看在前端程序中要完成哪些代码：</p>\n<div class=\"language-html\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">html</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">form</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">action</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/upload</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">method</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">post</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">enctype</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">multipart/form-data</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    姓名: </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">input</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">text</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">name</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">username</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;&lt;</span><span style=\"color: #F07178\">br</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    年龄: </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">input</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">text</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">name</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">age</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;&lt;</span><span style=\"color: #F07178\">br</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    头像: </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">input</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">file</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">name</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">image</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;&lt;</span><span style=\"color: #F07178\">br</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">input</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">submit</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">value</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">提交</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">form</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>上传文件的原始form表单，要求表单必须具备以下三点（上传文件页面三要素）：</p>\n<ul>\n<li><p>表单必须有file域，用于选择要上传的文件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><div class=\"language-html\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">html</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">input</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">file</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">name</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">image</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">/&gt;</span></span></code></pre></div></blockquote>\n</li>\n<li><p>表单提交方式必须为POST</p>\n<blockquote>\n<p>通常上传的文件会比较大，所以需要使用 POST 提交方式</p></blockquote>\n</li>\n<li><p>表单的编码类型enctype必须要设置为：multipart&#x2F;form-data</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>普通默认的编码格式是不适合传输大型的二进制数据的，所以在文件上传时，表单的编码格式必须设置为multipart&#x2F;form-data</p></blockquote>\n</li>\n</ul>\n<p>前端页面的3要素我们了解后，接下来我们就来验证下所讲解的文件上传3要素。</p>\n<p>在提供的”课程资料”中有一个名叫”文件上传”的文件夹，直接将里的”upload.html”文件，复制到springboot项目工程下的static目录里面。</p>\n<p><img src=\"/posts/0/image-20221216210054136.png\" alt=\"image-20221216210054136\"></p>\n<p>下面我们来验证：删除form表单中enctype属性值，会是什么情况？</p>\n<ol>\n<li>在IDEA中直接使用浏览器打开upload.html页面</li>\n</ol>\n<p><img src=\"/posts/0/image-20221216210643628.png\" alt=\"image-20221216210643628\"></p>\n<ol start=\"2\">\n<li>选择要上传的本地文件</li>\n</ol>\n<p><img src=\"/posts/0/image-20221216210938612.png\" alt=\"image-20221216210938612\"></p>\n<ol start=\"3\">\n<li>点击”提交”按钮，进入到开发者模式观察</li>\n</ol>\n<p><img src=\"/posts/0/image-20221216211629307.png\" alt=\"image-20221216211629307\"></p>\n<p><img src=\"/posts/0/image-20221216212152607.png\" alt=\"image-20221216212152607\"></p>\n<p>我们再来验证：设置form表单中enctype属性值为multipart&#x2F;form-data，会是什么情况？</p>\n<div class=\"language-html\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">html</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">form</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">action</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/upload</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">method</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">post</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">enctype</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">multipart/form-data</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        姓名: </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">input</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">text</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">name</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">username</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;&lt;</span><span style=\"color: #F07178\">br</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        年龄: </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">input</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">text</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">name</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">age</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;&lt;</span><span style=\"color: #F07178\">br</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        头像: </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">input</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">file</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">name</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">image</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;&lt;</span><span style=\"color: #F07178\">br</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">input</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">submit</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">value</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">提交</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">form</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>知道了前端程序中需要设置上传文件页面三要素，那我们的后端程序又是如何实现的呢？</p>\n<ul>\n<li><p>首先在服务端定义这么一个controller，用来进行文件上传，然后在controller当中定义一个方法来处理<code>/upload</code> 请求</p>\n</li>\n<li><p>在定义的方法中接收提交过来的数据 （方法中的形参名和请求参数的名字保持一致）</p>\n<ul>\n<li>用户名：String  name</li>\n<li>年龄： Integer  age</li>\n<li>文件： MultipartFile  image</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring中提供了一个API：MultipartFile，使用这个API就可以来接收到上传的文件</p></blockquote>\n</li>\n</ul>\n<p><img src=\"/posts/0/image-20221216215930807.png\" alt=\"image-20221216215930807\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>问题：如果表单项的名字和方法中形参名不一致，该怎么办？</p>\n<ul>\n<li><div class=\"language-javascript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">javascript</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">public Result </span><span style=\"color: #82AAFF\">upload</span><span style=\"color: #BABED8\">(String username</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                     Integer age</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                     MultipartFile file) </span><span style=\"color: #676E95; font-style: italic\">//file形参名和请求参数名image不一致</span></span></code></pre></div></li>\n</ul>\n<p>解决：使用@RequestParam注解进行参数绑定</p>\n<ul>\n<li><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">upload</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> username</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                     </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> age</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                     </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestParam</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">image</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #BABED8\"> file</span><span style=\"color: #89DDFF\">)</span></span></code></pre></div></li>\n</ul></blockquote>\n<p><strong>UploadController代码：</strong></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Slf4j</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">UploadController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">PostMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/upload</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">upload</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">username</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">age</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">image</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        log</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">info</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">username</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">age</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">image</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> Result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">success</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>后端程序编写完成之后，打个断点，以debug方式启动SpringBoot项目</p></blockquote>\n<p><img src=\"/posts/0/image-20221216222533720.png\" alt=\"image-20221216222533720\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>打开浏览器输入：<a href=\"http://localhost:8080/upload.html\">http://localhost:8080/upload.html</a> ， 录入数据并提交</p></blockquote>\n<p><img src=\"/posts/0/image-20221216222412510.png\" alt=\"image-20221216222412510\"></p>\n<p>通过后端程序控制台可以看到，上传的文件是存放在一个临时目录</p>\n<p><img src=\"/posts/0/image-20221216222802617.png\" alt=\"image-20221216222802617\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>打开临时目录可以看到以下内容：</p></blockquote>\n<p><img src=\"/posts/0/image-20221216223328710.png\" alt=\"image-20221216223328710\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>表单提交的三项数据(姓名、年龄、文件)，分别存储在不同的临时文件中：</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当我们程序运行完毕之后，这个临时文件会自动删除。 </p>\n<p>所以，我们如果想要实现文件上传，需要将这个临时文件，要转存到我们的磁盘目录中。</p></blockquote>\n<h3 id=\"7-2-本地存储\"><a href=\"#7-2-本地存储\" class=\"headerlink\" title=\"7.2 本地存储\"></a>7.2 本地存储</h3><p>前面我们已分析了文件上传功能前端和后端的基础代码实现，文件上传时在服务端会产生一个临时文件，请求响应完成之后，这个临时文件被自动删除，并没有进行保存。下面呢，我们就需要完成将上传的文件保存在服务器的本地磁盘上。</p>\n<p>代码实现：</p>\n<ol>\n<li>在服务器本地磁盘上创建images目录，用来存储上传的文件（例：E盘创建images目录）</li>\n<li>使用MultipartFile类提供的API方法，把临时文件转存到本地磁盘目录下</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>MultipartFile 常见方法： </p>\n<ul>\n<li>String  getOriginalFilename();  &#x2F;&#x2F;获取原始文件名</li>\n<li>void  transferTo(File dest);     &#x2F;&#x2F;将接收的文件转存到磁盘文件中</li>\n<li>long  getSize();     &#x2F;&#x2F;获取文件的大小，单位：字节</li>\n<li>byte[]  getBytes();    &#x2F;&#x2F;获取文件内容的字节数组</li>\n<li>InputStream  getInputStream();    &#x2F;&#x2F;获取接收到的文件内容的输入流</li>\n</ul></blockquote>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Slf4j</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">UploadController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">PostMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/upload</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">upload</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">username</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">age</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">image</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">throws</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">IOException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        log</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">info</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">username</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">age</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">image</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//获取原始文件名</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> originalFilename </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> image</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getOriginalFilename</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//将文件存储在服务器的磁盘目录</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        image</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">transferTo</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">File</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">E:/images/</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">originalFilename</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> Result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">success</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>利用postman测试：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：请求参数名和controller方法形参名保持一致</p></blockquote>\n<p><img src=\"/posts/0/image-20221227211742547.png\" alt=\"image-20221227211742547\"></p>\n<p><img src=\"/posts/0/image-20221227214219279.png\" alt=\"image-20221227214219279\"></p>\n<p><img src=\"/posts/0/image-20221227214753358.png\" alt=\"image-20221227214753358\"></p>\n<p>通过postman测试，我们发现文件上传是没有问题的。但是由于我们是使用原始文件名作为所上传文件的存储名字，当我们再次上传一个名为1.jpg文件时，发现会把之前已经上传成功的文件覆盖掉。</p>\n<p>解决方案：保证每次上传文件时文件名都唯一的（使用UUID获取随机文件名）</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Slf4j</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">UploadController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">PostMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/upload</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">upload</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">username</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Integer</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">age</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">image</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">throws</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">IOException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        log</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">info</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">username</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">age</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">image</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//获取原始文件名</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> originalFilename </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> image</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getOriginalFilename</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//构建新的文件名</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> extname </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> originalFilename</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">substring</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">originalFilename</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">lastIndexOf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">));</span><span style=\"color: #676E95; font-style: italic\">//文件扩展名</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> newFileName </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> UUID</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">randomUUID</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">()+</span><span style=\"color: #BABED8\">extname</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">//随机名+文件扩展名</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//将文件存储在服务器的磁盘目录</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        image</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">transferTo</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">File</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">E:/images/</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">newFileName</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> Result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">success</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>在解决了文件名唯一性的问题后，我们再次上传一个较大的文件(超出1M)时发现，后端程序报错：</p>\n<p><img src=\"/posts/0/image-20221227223851924.png\" alt=\"image-20221227223851924\"></p>\n<p>报错原因呢是因为：在SpringBoot中，文件上传时默认单个文件最大大小为1M</p>\n<p>那么如果需要上传大文件，可以在application.properties进行如下配置：</p>\n<div class=\"language-properties\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">properties</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#配置单个文件最大上传大小</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.servlet.multipart.max-file-size</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">10MB</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#配置单个请求最大上传大小(一次请求可以上传多个文件)</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">spring.servlet.multipart.max-request-size</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">100MB</span></span></code></pre></div><p>到时此，我们文件上传的本地存储方式已完成了。但是这种本地存储方式还存在一问题： </p>\n<p><img src=\"/posts/0/image-20220904200320964.png\" alt=\"image-20220904200320964\"> </p>\n<p>如果直接存储在服务器的磁盘目录中，存在以下缺点：</p>\n<ul>\n<li>不安全：磁盘如果损坏，所有的文件就会丢失</li>\n<li>容量有限：如果存储大量的图片，磁盘空间有限(磁盘不可能无限制扩容)</li>\n<li>无法直接访问</li>\n</ul>\n<p>为了解决上述问题呢，通常有两种解决方案：</p>\n<ul>\n<li>自己搭建存储服务器，如：fastDFS 、MinIO</li>\n<li>使用现成的云服务，如：阿里云，腾讯云，华为云</li>\n</ul>\n<h3 id=\"7-3-阿里云OSS\"><a href=\"#7-3-阿里云OSS\" class=\"headerlink\" title=\"7.3 阿里云OSS\"></a>7.3 阿里云OSS</h3><p>阿里云是阿里巴巴集团旗下全球领先的云计算公司，也是国内最大的云服务提供商 。</p>\n<p><img src=\"/posts/0/image-20221229093412464.png\" alt=\"image-20221229093412464\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>云服务指的就是通过互联网对外提供的各种各样的服务，比如像：语音服务、短信服务、邮件服务、视频直播服务、文字识别服务、对象存储服务等等。</p>\n<p>当我们在项目开发时需要用到某个或某些服务，就不需要自己来开发了，可以直接使用阿里云提供好的这些现成服务就可以了。比如：在项目开发当中，我们要实现一个短信发送的功能，如果我们项目组自己实现，将会非常繁琐，因为你需要和各个运营商进行对接。而此时阿里云完成了和三大运营商对接，并对外提供了一个短信服务。我们项目组只需要调用阿里云提供的短信服务，就可以很方便的来发送短信了。这样就降低了我们项目的开发难度，同时也提高了项目的开发效率。（大白话：别人帮我们实现好了功能，我们只要调用即可）</p>\n<p>云服务提供商给我们提供的软件服务通常是需要收取一部分费用的。</p></blockquote>\n<p>阿里云对象存储OSS（Object Storage Service），是一款海量、安全、低成本、高可靠的云存储服务。使用OSS，您可以通过网络随时存储和调用包括文本、图片、音频和视频等在内的各种文件。</p>\n<p><img src=\"/posts/0/image-20220904200642064.png\" alt=\"image-20220904200642064\"> </p>\n<p>在我们使用了阿里云OSS对象存储服务之后，我们的项目当中如果涉及到文件上传这样的业务，在前端进行文件上传并请求到服务端时，在服务器本地磁盘当中就不需要再来存储文件了。我们直接将接收到的文件上传到oss，由 oss帮我们存储和管理，同时阿里云的oss存储服务还保障了我们所存储内容的安全可靠。</p>\n<p><img src=\"/posts/0/image-20221229095709505.png\" alt=\"image-20221229095709505\"></p>\n<p>那我们学习使用这类云服务，我们主要学习什么呢？其实我们主要学习的是如何在项目当中来使用云服务完成具体的业务功能。而无论使用什么样的云服务，阿里云也好，腾讯云、华为云也罢，在使用第三方的服务时，操作的思路都是一样的。</p>\n<p><img src=\"/posts/0/image-20221229093911113.png\" alt=\"image-20221229093911113\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SDK：Software Development Kit 的缩写，软件开发工具包，包括辅助软件开发的依赖（jar包）、代码示例等，都可以叫做SDK。</p>\n<p>简单说，sdk中包含了我们使用第三方云服务时所需要的依赖，以及一些示例代码。我们可以参照sdk所提供的示例代码就可以完成入门程序。</p></blockquote>\n<p>第三方服务使用的通用思路，我们做一个简单介绍之后，接下来我们就来介绍一下我们当前要使用的阿里云oss对象存储服务具体的使用步骤。</p>\n<p><img src=\"/posts/0/image-20221229112451120.png\" alt=\"image-20221229112451120\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Bucket：存储空间是用户用于存储对象（Object，就是文件）的容器，所有的对象都必须隶属于某个存储空间。</p></blockquote>\n<p>下面我们根据之前介绍的使用步骤，完成准备工作：</p>\n<ol>\n<li>注册阿里云账户（注册完成后需要实名认证）</li>\n<li>注册完账号之后，就可以登录阿里云</li>\n</ol>\n<p><img src=\"/posts/0/image-20220904201839857.png\" alt=\"image-20220904201839857\"> </p>\n<ol start=\"3\">\n<li>通过控制台找到对象存储OSS服务</li>\n</ol>\n<p><img src=\"/posts/0/image-20220904201932884.png\" alt=\"image-20220904201932884\"> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果是第一次访问，还需要开通对象存储服务OSS</p></blockquote>\n<p><img src=\"/posts/0/image-20220904202537579.png\" alt=\"image-20220904202537579\"> </p>\n<p><img src=\"/posts/0/image-20220904202618423.png\" alt=\"image-20220904202618423\"> </p>\n<ol start=\"4\">\n<li>开通OSS服务之后，就可以进入到阿里云对象存储的控制台</li>\n</ol>\n<p><img src=\"/posts/0/image-20220904201810832.png\" alt=\"image-20220904201810832\"> </p>\n<ol start=\"5\">\n<li>点击左侧的 “Bucket列表”，创建一个Bucket</li>\n</ol>\n<p><img src=\"/posts/0/image-20220904202235180.png\" alt=\"image-20220904202235180\"> </p>\n<p><img src=\"/posts/0/image-20220904202824901.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>大家可以参照”资料\\04. 阿里云oss&quot;中提供的文档，开通阿里云OSS服务。</p></blockquote>\n<p>阿里云oss 对象存储服务的准备工作我们已经完成了，接下来我们就来完成第二步操作：参照官方所提供的sdk示例来编写入门程序。</p>\n<p>首先我们需要来打开阿里云OSS的官方文档，在官方文档中找到 SDK 的示例代码：</p>\n<p><img src=\"/posts/0/image-20221229121848524.png\" alt=\"image-20221229121848524\"></p>\n<p><img src=\"/posts/0/image-20221229122046597.png\" alt=\"image-20221229122046597\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果是在实际开发当中，我们是需要从前往后仔细的去阅读这一份文档的，但是由于现在是教学，我们就只挑重点的去看。有兴趣的同学大家下来也可以自己去看一下这份官方文档。</p></blockquote>\n<p><img src=\"/posts/0/image-20221229144342148.png\" alt=\"image-20221229144342148\"></p>\n<p><img src=\"/posts/0/image-20221229160827124.png\" alt=\"image-20221229160827124\"></p>\n<p>参照官方提供的SDK，改造一下，即可实现文件上传功能：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">ClientException</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">OSS</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">OSSClientBuilder</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">OSSException</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">model</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">PutObjectRequest</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">model</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">PutObjectResult</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">io</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">FileInputStream</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">io</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">InputStream</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">AliOssTest</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">[]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">args</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">throws</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Exception</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> endpoint </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeyId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeySecret </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 填写Bucket名称，例如examplebucket。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> bucketName </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">web-framework01</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> objectName </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">1.jpg</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 填写本地文件的完整路径，例如D:\\\\localpath\\\\examplefile.txt。</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件流。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> filePath</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">C:</span><span style=\"color: #BABED8\">\\\\</span><span style=\"color: #C3E88D\">Users</span><span style=\"color: #BABED8\">\\\\</span><span style=\"color: #C3E88D\">Administrator</span><span style=\"color: #BABED8\">\\\\</span><span style=\"color: #C3E88D\">Pictures</span><span style=\"color: #BABED8\">\\\\</span><span style=\"color: #C3E88D\">1.jpg</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 创建OSSClient实例。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">OSS</span><span style=\"color: #BABED8\"> ossClient </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">OSSClientBuilder</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">build</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">endpoint</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> accessKeyId</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> accessKeySecret</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">try</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">InputStream</span><span style=\"color: #BABED8\"> inputStream </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">FileInputStream</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">filePath</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">// 创建PutObjectRequest对象。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">PutObjectRequest</span><span style=\"color: #BABED8\"> putObjectRequest </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">PutObjectRequest</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">bucketName</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> objectName</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> inputStream</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">// 设置该属性可以返回response。如果不设置，则返回的response为空。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            putObjectRequest</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">setProcess</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">true</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">// 创建PutObject请求。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">PutObjectResult</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> ossClient</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">putObject</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">putObjectRequest</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">            </span><span style=\"color: #676E95; font-style: italic\">// 如果上传成功，则返回200。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getResponse</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">getStatusCode</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">catch</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">OSSException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">oe</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Caught an OSSException, which means your request made it to OSS, </span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">but was rejected with an error response for some reason.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Error Message:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> oe</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getErrorMessage</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Error Code:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> oe</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getErrorCode</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Request ID:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> oe</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getRequestId</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Host ID:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> oe</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getHostId</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">catch</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">ClientException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">ce</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Caught an ClientException, which means the client encountered </span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">a serious internal problem while trying to communicate with OSS, </span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">such as not being able to access the network.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            System</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">out</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">println</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Error Message:</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> ce</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getMessage</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">finally</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">ossClient </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                ossClient</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">shutdown</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在以上代码中，需要替换的内容为：</p>\n<ul>\n<li>accessKeyId：阿里云账号AccessKey</li>\n<li>accessKeySecret：阿里云账号AccessKey对应的秘钥</li>\n<li>bucketName：Bucket名称</li>\n<li>objectName：对象名称，在Bucket中存储的对象的名称</li>\n<li>filePath：文件路径</li>\n</ul>\n<p>AccessKey ：</p>\n<p><img src=\"/posts/0/image-20221128020105943.png\" alt=\"image-20221128020105943\"> </p></blockquote>\n<p>运行以上程序后，会把本地的文件上传到阿里云OSS服务器上：</p>\n<p><img src=\"/posts/0/image-20221229161326919.png\" alt=\"image-20221229161326919\"></p>\n<p>阿里云oss对象存储服务的准备工作以及入门程序我们都已经完成了，接下来我们就需要在案例当中集成oss对象存储服务，来存储和管理案例中上传的图片。</p>\n<p><img src=\"/posts/0/image-20221229170235632.png\" alt=\"image-20221229170235632\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在新增员工的时候，上传员工的图像，而之所以需要上传员工的图像，是因为将来我们需要在系统页面当中访问并展示员工的图像。而要想完成这个操作，需要做两件事：</p>\n<ol>\n<li>需要上传员工的图像，并把图像保存起来（存储到阿里云OSS）</li>\n<li>访问员工图像（通过图像在阿里云OSS的存储地址访问图像）<ul>\n<li>OSS中的每一个文件都会分配一个访问的url，通过这个url就可以访问到存储在阿里云上的图片。所以需要把url返回给前端，这样前端就可以通过url获取到图像。</li>\n</ul>\n</li>\n</ol></blockquote>\n<p>我们参照接口文档来开发文件上传功能：</p>\n<ul>\n<li><p>基本信息</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">请求路径：/upload</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">请求方式：POST</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">接口描述：上传图片接口</span></span></code></pre></div></li>\n<li><p>请求参数</p>\n<p>参数格式：multipart&#x2F;form-data</p>\n<p>参数说明：</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数类型</th>\n<th>是否必须</th>\n<th>示例</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>image</td>\n<td>file</td>\n<td>是</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>响应数据</p>\n<p>参数格式：application&#x2F;json</p>\n<p>参数说明：</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>是否必须</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>code</td>\n<td>number</td>\n<td>必须</td>\n<td>响应码，1 代表成功，0 代表失败</td>\n</tr>\n<tr>\n<td>msg</td>\n<td>string</td>\n<td>非必须</td>\n<td>提示信息</td>\n</tr>\n<tr>\n<td>data</td>\n<td>object</td>\n<td>非必须</td>\n<td>返回的数据，上传图片的访问路径</td>\n</tr>\n</tbody></table>\n<p>响应数据样例：</p>\n<div class=\"language-json\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">json</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">code</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">msg</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">success</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C792EA\">data</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-02-00-27-0400.jpg</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div></li>\n</ul>\n<p>引入阿里云OSS上传文件工具类（由官方的示例代码改造而来）</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">OSS</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">OSSClientBuilder</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">stereotype</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Component</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">web</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">multipart</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">io</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">IOException</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">io</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">InputStream</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">util</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">UUID</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Component</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">AliOSSUtils</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> endpoint </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeyId </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeySecret </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> bucketName </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     * 实现上传图片到OSS</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     */</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">upload</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">multipartFile</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">throws</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">IOException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 获取上传的文件的输入流</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">InputStream</span><span style=\"color: #BABED8\"> inputStream </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> multipartFile</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getInputStream</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 避免文件覆盖</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> originalFilename </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> multipartFile</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getOriginalFilename</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> fileName </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> UUID</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">randomUUID</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> originalFilename</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">substring</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">originalFilename</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">lastIndexOf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//上传文件到 OSS</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">OSS</span><span style=\"color: #BABED8\"> ossClient </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">OSSClientBuilder</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">build</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">endpoint</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> accessKeyId</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> accessKeySecret</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        ossClient</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">putObject</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">bucketName</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> fileName</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> inputStream</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//文件访问路径</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> url </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> endpoint</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">split</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">//</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)[</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">//</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> bucketName </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> endpoint</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">split</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">//</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> fileName</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 关闭ossClient</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        ossClient</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">shutdown</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> url</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">// 把上传到oss的路径返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>修改UploadController代码：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">itheima</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">pojo</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Result</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">itheima</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">utils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">AliOSSUtils</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">lombok</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">extern</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">slf4j</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Slf4j</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">beans</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">factory</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">annotation</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Autowired</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">web</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">bind</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">annotation</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">PostMapping</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">web</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">bind</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">annotation</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">RestController</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">web</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">multipart</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">io</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">IOException</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Slf4j</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RestController</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">UploadController</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Autowired</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">AliOSSUtils</span><span style=\"color: #BABED8\"> aliOSSUtils</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">PostMapping</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/upload</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">upload</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">image</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">throws</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">IOException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//调用阿里云OSS工具类，将上传上来的文件存入阿里云</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> url </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> aliOSSUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">upload</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">image</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//将图片上传完成后的url返回，用于浏览器回显展示</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> Result</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">success</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">url</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>使用postman测试：</p>\n<p><img src=\"/posts/0/image-20230102175353270.png\" alt=\"image-20230102175353270\"></p>\n<h2 id=\"8-配置文件\"><a href=\"#8-配置文件\" class=\"headerlink\" title=\"8.配置文件\"></a>8.配置文件</h2><h3 id=\"8-1-参数配置化\"><a href=\"#8-1-参数配置化\" class=\"headerlink\" title=\"8.1 参数配置化\"></a>8.1 参数配置化</h3><p><img src=\"/posts/0/image-20240211160913889.png\" alt=\"image-20240211160913889\"></p>\n<p>在我们之前编写的程序中进行文件上传时，需要调用AliOSSUtils工具类，将文件上传到阿里云OSS对象存储服务当中。而在调用工具类进行文件上传时，需要一些参数：</p>\n<ul>\n<li>endpoint       &#x2F;&#x2F;阿里云OSS域名</li>\n<li>accessKeyID    &#x2F;&#x2F;用户身份ID</li>\n<li>accessKeySecret   &#x2F;&#x2F;用户密钥</li>\n<li>bucketName      &#x2F;&#x2F;存储空间的名字</li>\n</ul>\n<p>关于以上的这些阿里云相关配置信息，我们是直接写死在java代码中了(硬编码)，如果我们在做项目时每涉及到一个第三方技术服务，就将其参数硬编码，那么在Java程序中会存在两个问题：</p>\n<ol>\n<li>如果这些参数发生变化了，就必须在源程序代码中改动这些参数，然后需要重新进行代码的编译，将Java代码编译成class字节码文件再重新运行程序。（比较繁琐）</li>\n<li>如果我们开发的是一个真实的企业级项目， Java类可能会有很多，如果将这些参数分散的定义在各个Java类当中，我们要修改一个参数值，我们就需要在众多的Java代码当中来定位到对应的位置，再来修改参数，修改完毕之后再重新编译再运行。（参数配置过于分散，是不方便集中的管理和维护）</li>\n</ol>\n<p>为了解决以上分析的问题，我们可以将参数配置在配置文件中。如下：</p>\n<div class=\"language-properties\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">properties</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#自定义的阿里云OSS配置信息</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">aliyun.oss.endpoint</span><span style=\"color: #89DDFF\">=</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">aliyun.oss.accessKeyId</span><span style=\"color: #89DDFF\">=</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">aliyun.oss.accessKeySecret</span><span style=\"color: #89DDFF\">=</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">aliyun.oss.bucketName</span><span style=\"color: #89DDFF\">=</span></span></code></pre></div><p>在将阿里云OSS配置参数交给properties配置文件来管理之后，我们的AliOSSUtils工具类就变为以下形式：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Component</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">AliOSSUtils</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\">/*以下4个参数没有指定值（默认值：null）*/</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> endpoint</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeyId</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeySecret</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> bucketName</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//省略其他代码...</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>而此时如果直接调用AliOSSUtils类当中的upload方法进行文件上传时，这4项参数全部为null，原因是因为并没有给它赋值。</p>\n<p>此时我们是不是需要将配置文件当中所配置的属性值读取出来，并分别赋值给AliOSSUtils工具类当中的各个属性呢？那应该怎么做呢？</p></blockquote>\n<p>因为application.properties是springboot项目默认的配置文件，所以springboot程序在启动时会默认读取application.properties配置文件，而我们可以使用一个现成的注解：@Value，获取配置文件中的数据。</p>\n<p>@Value 注解通常用于外部配置的属性注入，具体用法为： @Value(“${配置文件中的key}”)</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Component</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">AliOSSUtils</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Value</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">$&#123;aliyun.oss.endpoint&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> endpoint</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Value</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">$&#123;aliyun.oss.accessKeyId&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeyId</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Value</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">$&#123;aliyun.oss.accessKeySecret&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeySecret</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Value</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">$&#123;aliyun.oss.bucketName&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> bucketName</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">     </span><span style=\"color: #676E95; font-style: italic\">//省略其他代码...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">   </span></span></code></pre></div><p><img src=\"/posts/0/image-20230102173905913.png\" alt=\"image-20230102173905913\"></p>\n<p>使用postman测试：</p>\n<p><img src=\"/posts/0/image-20230102175353270-17076389401491.png\" alt=\"image-20230102175353270\"></p>\n<h3 id=\"8-2-yml配置文件\"><a href=\"#8-2-yml配置文件\" class=\"headerlink\" title=\"8.2 yml配置文件\"></a>8.2 yml配置文件</h3><p>前面我们一直使用springboot项目创建完毕后自带的application.properties进行属性的配置，那其实呢，在springboot项目当中是支持多种配置方式的，除了支持properties配置文件以外，还支持另外一种类型的配置文件，就是我们接下来要讲解的yml格式的配置文件。</p>\n<ul>\n<li><p>application.properties</p>\n<div class=\"language-properties\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">properties</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F07178\">server.port</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">8080</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">server.address</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">127.0.0.1</span></span></code></pre></div></li>\n<li><p>application.yml </p>\n<div class=\"language-yml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">yml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F07178\">server</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">port</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">8080</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">address</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">127.0.0.1</span></span></code></pre></div></li>\n<li><p>application.yaml </p>\n<div class=\"language-yml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">yml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F07178\">server</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">port</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">8080</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">address</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">127.0.0.1</span></span></code></pre></div></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>yml 格式的配置文件，后缀名有两种：</p>\n<ul>\n<li>yml （推荐）</li>\n<li>yaml</li>\n</ul></blockquote>\n<p>常见配置文件格式对比：</p>\n<p><img src=\"/posts/0/image-20230102181215809.png\" alt=\"image-20230102181215809\"></p>\n<p>我们可以看到配置同样的数据信息，yml格式的数据有以下特点：</p>\n<ul>\n<li>容易阅读</li>\n<li>容易与脚本语言交互</li>\n<li>以数据为核心，重数据轻格式</li>\n</ul>\n<p>简单的了解过springboot所支持的配置文件，以及不同类型配置文件之间的优缺点之后，接下来我们就来了解下yml配置文件的基本语法：</p>\n<ul>\n<li>大小写敏感</li>\n<li>数值前边必须有空格，作为分隔符</li>\n<li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格（idea中会自动将Tab转换为空格）</li>\n<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>\n<li><code>#</code>表示注释，从这个字符一直到行尾，都会被解析器忽略</li>\n</ul>\n<p><img src=\"/posts/0/image-20230103084645450.png\" alt=\"image-20230103084645450\"></p>\n<p>了解完yml格式配置文件的基本语法之后，接下来我们再来看下yml文件中常见的数据格式。在这里我们主要介绍最为常见的两类：</p>\n<ol>\n<li>定义对象或Map集合</li>\n<li>定义数组、list或set集合</li>\n</ol>\n<p>对象&#x2F;Map集合</p>\n<div class=\"language-yml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">yml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F07178\">user</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">zhangsan</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">age</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">18</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">password</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">123456</span></span></code></pre></div><p>数组&#x2F;List&#x2F;Set集合</p>\n<div class=\"language-yml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">yml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F07178\">hobby</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">java</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">game</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">sport</span></span></code></pre></div><p>熟悉完了yml文件的基本语法后，我们修改下之前案例中使用的配置文件，变更为application.yml配置方式：</p>\n<ol>\n<li>修改application.properties名字为：<code>_application.properties</code>（名字随便更换，只要加载不到即可）</li>\n<li>创建新的配置文件： <code>application.yml</code></li>\n</ol>\n<p>原有application.properties文件：</p>\n<p><img src=\"/posts/0/image-20230103202630793.png\" alt=\"image-20230103202630793\"></p>\n<p>新建的application.yml文件：</p>\n<div class=\"language-yaml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">yaml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F07178\">spring</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">datasource</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">driver-class-name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">com.mysql.cj.jdbc.Driver</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">url</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">jdbc:mysql://localhost:3306/tlias</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">username</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">root</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">password</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1234</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">servlet</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">multipart</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #F07178\">max-file-size</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">10MB</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #F07178\">max-request-size</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">100MB</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">mybatis</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">configuration</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">log-impl</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">org.apache.ibatis.logging.stdout.StdOutImpl</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">map-underscore-to-camel-case</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FF9CAC\">true</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">aliyun</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">oss</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">endpoint</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">https://oss-cn-hangzhou.aliyuncs.com</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">accessKeyId</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">accessKeySecret</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">bucketName</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">web-397</span></span></code></pre></div><h3 id=\"8-3-ConfigurationProperties\"><a href=\"#8-3-ConfigurationProperties\" class=\"headerlink\" title=\"8.3 @ConfigurationProperties\"></a>8.3 @ConfigurationProperties</h3><p>讲解完了yml配置文件之后，最后再来介绍一个注解<code>@ConfigurationProperties</code>。在介绍注解之前，我们先来看一个场景，分析下代码当中可能存在的问题：</p>\n<p><img src=\"/posts/0/image-20230103202919756.png\" alt=\"image-20230103202919756\"></p>\n<p>我们在application.properties或者application.yml中配置了阿里云OSS的四项参数之后，如果java程序中需要这四项参数数据，我们直接通过@Value注解来进行注入。这种方式本身没有什么问题问题，但是如果说需要注入的属性较多(例：需要20多个参数数据)，我们写起来就会比较繁琐。</p>\n<p>那么有没有一种方式可以简化这些配置参数的注入呢？答案是肯定有，在Spring中给我们提供了一种简化方式，可以直接将配置文件中配置项的值自动的注入到对象的属性中。</p>\n<p>Spring提供的简化方式套路：</p>\n<ol>\n<li><p>需要创建一个实现类，且实体类中的属性名和配置文件当中key的名字必须要一致</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>比如：配置文件当中叫endpoints，实体类当中的属性也得叫endpoints，另外实体类当中的属性还需要提供 getter &#x2F; setter方法</p></blockquote>\n</li>\n<li><p>需要将实体类交给Spring的IOC容器管理，成为IOC容器当中的bean对象</p>\n</li>\n<li><p>在实体类上添加<code>@ConfigurationProperties</code>注解，并通过perfect属性来指定配置参数项的前缀</p>\n</li>\n</ol>\n<p><img src=\"/posts/0/image-20230103210827003.png\" alt=\"image-20230103210827003\"></p>\n<p>实体类：AliOSSProperties</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">lombok</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Data</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">boot</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">context</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">properties</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">ConfigurationProperties</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">stereotype</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Component</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/*阿里云OSS相关配置*/</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Data</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Component</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">ConfigurationProperties</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">prefix</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">aliyun.oss</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">AliOSSProperties</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//区域</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> endpoint</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//身份ID</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeyId </span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//身份密钥</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> accessKeySecret </span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//存储空间</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> bucketName</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>AliOSSUtils工具类：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">OSS</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">com</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">aliyun</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">oss</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">OSSClientBuilder</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">beans</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">factory</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">annotation</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Autowired</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">stereotype</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">Component</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">org</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">springframework</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">web</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">multipart</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">io</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">IOException</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">io</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">InputStream</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F78C6C\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">util</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #C792EA\">UUID</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Component</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">//当前类对象由Spring创建和管理</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">class</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">AliOSSUtils</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">//注入配置参数实体类对象</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Autowired</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">private</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">AliOSSProperties</span><span style=\"color: #BABED8\"> aliOSSProperties</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">   </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">    /**</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     * 实现上传图片到OSS</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">     */</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">upload</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">MultipartFile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">multipartFile</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">throws</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">IOException</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 获取上传的文件的输入流</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">InputStream</span><span style=\"color: #BABED8\"> inputStream </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> multipartFile</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getInputStream</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 避免文件覆盖</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> originalFilename </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> multipartFile</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getOriginalFilename</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> fileName </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> UUID</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">randomUUID</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">toString</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> originalFilename</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">substring</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">originalFilename</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">lastIndexOf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//上传文件到 OSS</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">OSS</span><span style=\"color: #BABED8\"> ossClient </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">OSSClientBuilder</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">build</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">aliOSSProperties</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getEndpoint</span><span style=\"color: #89DDFF\">(),</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                aliOSSProperties</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getAccessKeyId</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> aliOSSProperties</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getAccessKeySecret</span><span style=\"color: #89DDFF\">());</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        ossClient</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">putObject</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">aliOSSProperties</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getBucketName</span><span style=\"color: #89DDFF\">(),</span><span style=\"color: #BABED8\"> fileName</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> inputStream</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">//文件访问路径</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> url </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">aliOSSProperties</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getEndpoint</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">split</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">//</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)[</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">//</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> aliOSSProperties</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getBucketName</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> aliOSSProperties</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getEndpoint</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">split</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">//</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> fileName</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// 关闭ossClient</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        ossClient</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">shutdown</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> url</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">// 把上传到oss的路径返回</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p>在我们添加上注解后，会发现idea窗口上面出现一个红色警告：</p>\n<p><img src=\"/posts/0/image-20230103212042823.png\" alt=\"image-20230103212042823\"> </p>\n<p>这个警告提示是告知我们还需要引入一个依赖：</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">org.springframework.boot</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">groupId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">spring-boot-configuration-processor</span><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">artifactId</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #F07178\">dependency</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>当我们在pom.xml文件当中配置了这项依赖之后，我们重新启动服务，大家就会看到在properties或者是yml配置文件当中，就会提示阿里云 OSS 相关的配置项。所以这项依赖它的作用就是会自动的识别被<code>@Configuration Properties</code>注解标识的bean对象。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>刚才的红色警告，已经变成了一个灰色的提示，提示我们需要重新运行springboot服务</p></blockquote>\n<p>@ConfigurationProperties注解我们已经介绍完了，接下来我们就来区分一下@ConfigurationProperties注解以及我们前面所介绍的另外一个@Value注解：</p>\n<p>相同点：都是用来注入外部配置的属性的。</p>\n<p>不同点：</p>\n<ul>\n<li><p>@Value注解只能一个一个的进行外部属性的注入。</p>\n</li>\n<li><p>@ConfigurationProperties可以批量的将外部的属性配置注入到bean对象的属性中。</p>\n</li>\n</ul>\n<p>如果要注入的属性非常的多，并且还想做到复用，就可以定义这么一个bean对象。通过 configuration properties 批量的将外部的属性配置直接注入到 bin 对象的属性当中。在其他的类当中，我要想获取到注入进来的属性，我直接注入 bin 对象，然后调用 get 方法，就可以获取到对应的属性值了</p>\n","text":"1.SpingBoot入门1.1 什么是SpringSpring的官网(https://spring.io)，去看一下Spring的简介：Spring make...","permalink":"/post/Springboot学习","photos":[],"count_time":{"symbolsCount":"46k","symbolsTime":"42 mins."},"categories":[{"name":"Study","slug":"Study","count":30,"path":"api/categories/Study.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-SpingBoot%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">1.SpingBoot入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%80%E4%B9%88%E6%98%AFSpring\"><span class=\"toc-text\">1.1 什么是Spring</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-SpringBootWeb%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">1.2 SpringBootWeb快速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-1-%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">1.2.1 开发步骤</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-Web%E5%88%86%E6%9E%90\"><span class=\"toc-text\">1.3 Web分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-HTTP%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">2 HTTP协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-HTTP%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">2.1 HTTP概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-HTTP-%E8%AF%B7%E6%B1%82%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">2.2 HTTP-请求协议</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-HTTP-%E5%93%8D%E5%BA%94%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">2.3 HTTP-响应协议</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-WEB%E6%9C%8D%E5%8A%A1%E5%99%A8-Tomcat\"><span class=\"toc-text\">3.WEB服务器-Tomcat</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">3.1 介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Web%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">3.2 Web服务器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-Tomcat\"><span class=\"toc-text\">3.3 Tomcat</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-1-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">3.3.1 介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-2-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.3.2 基本使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-3-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">3.3.3 常见问题</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">3.4 入门程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-1-Spring%E5%AE%98%E6%96%B9%E9%AA%A8%E6%9E%B6\"><span class=\"toc-text\">3.4.1 Spring官方骨架</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-2-%E8%B5%B7%E6%AD%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">3.4.2 起步依赖</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-3-SpringBoot%E7%88%B6%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">3.4.3 SpringBoot父工程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-4-%E5%86%85%E5%B5%8CTomcat\"><span class=\"toc-text\">3.4.4 内嵌Tomcat</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-SpringBoot%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">4.SpringBoot请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-BS%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">4.1 BS架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-Postman\"><span class=\"toc-text\">4.2 Postman</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-1-%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">4.2.1 入门</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-2-%E7%AE%80%E5%8D%95%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">4.2.2 简单参数传递</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-3-%E5%AE%9E%E4%BD%93%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4.2.3 实体参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-4-%E6%95%B0%E7%BB%84%E9%9B%86%E5%90%88%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4.2.4 数组集合参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-5-%E6%97%A5%E6%9C%9F%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4.2.5 日期参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-6-JSON%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4.2.6 JSON参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-7-%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4.2.7 路径参数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-SpringBoot%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">5.SpringBoot响应</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-ResponseBody%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">5.1 ResponseBody注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E7%BB%9F%E4%B8%80%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">5.2 统一响应结果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6\"><span class=\"toc-text\">6.分层解耦</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">6.1 三层架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E8%A7%A3%E8%80%A6\"><span class=\"toc-text\">6.2 解耦</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-IOC-DI\"><span class=\"toc-text\">6.3 IOC&amp;DI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-1-%E8%A7%A3%E8%80%A6%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">6.3.1 解耦步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-2-Bean%E7%9A%84%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">6.3.2 Bean的声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-3-%E7%BB%84%E4%BB%B6%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\">6.3.3 组件扫描</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-4-DI%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">6.3.4 DI详解</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">7.文件上传</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">7.1 简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">7.2 本地存储</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-%E9%98%BF%E9%87%8C%E4%BA%91OSS\"><span class=\"toc-text\">7.3 阿里云OSS</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">8.配置文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E5%8C%96\"><span class=\"toc-text\">8.1 参数配置化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-yml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">8.2 yml配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-ConfigurationProperties\"><span class=\"toc-text\">8.3 @ConfigurationProperties</span></a></li></ol></li></ol>","author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringBoot知识点总结（二）","uid":"6fe80b8a56f4931be3320509dc26530d","slug":"Springboot学习2","date":"2024-02-11T08:42:10.000Z","updated":"2024-02-11T09:59:26.438Z","comments":true,"path":"api/articles/Springboot学习2.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/17.jpg","text":"9.登录校验9.1 问题分析我们已经完成了基础登录功能的开发与测试，在我们登录成功后就可以进入到后台管理系统中进行数据的操作。 但是当我们在浏览器中新的页面上输...","permalink":"/post/Springboot学习2","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"36 mins."},"categories":[{"name":"Study","slug":"Study","count":30,"path":"api/categories/Study.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"SpringBoot","slug":"SpringBoot","count":3,"path":"api/tags/SpringBoot.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}},"next_post":{"title":"Mybatis知识点总结","uid":"98d7dfbbb096f447064b1064021af412","slug":"Mybatis学习","date":"2024-02-11T08:04:12.000Z","updated":"2024-02-11T09:57:16.969Z","comments":true,"path":"api/articles/Mybatis学习.json","keywords":"博客、橙汁蒸鱼、Orangefish、Oranfish","cover":"/medias/15.jpg","text":"1.Mybatis入门在前面我们学习MySQL数据库时，都是利用图形化客户端工具(如：idea、datagrip)，来操作数据库的。 在客户端工具中，编写增删改...","permalink":"/post/Mybatis学习","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"Study","slug":"Study","count":30,"path":"api/categories/Study.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"Mybatis","slug":"Mybatis","count":1,"path":"api/tags/Mybatis.json"}],"author":{"name":"Fioransh","slug":"blog-author","avatar":"/medias/2.jpg","link":"/","description":"<p> 学而无知，无知而学 <p> <p> Anime is trash and so am I. <p>","socials":{"github":"https://github.com/orangefish1118","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/14481775?spm_id_from=333.1007.0.0"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/Orangefish-cyc"},"mail":{"icon":"/svg/email.svg","link":"mailto:1263938020@qq.com"}}}}}}