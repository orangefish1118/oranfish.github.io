<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件工程基础复习材料</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="名词解释题"><a href="#名词解释题" class="headerlink" title="名词解释题"></a>名词解释题</h2><h3 id="1-软件工程"><a href="#1-软件工程" class="headerlink" title="1.软件工程"></a>1.软件工程</h3><p>将<strong>系统化、规范化、可量化</strong>的方法应用于软件的开发、运行和维护的过程，以及上述方法的研究</p><p><strong>软件工程</strong>是：<br>    ①将系统化的、严格约束的、可量化的方法应用于软件的开发、运行和维护，即将工程化应用于软件；<br>    ②在①中所述方法的研究。</p><h3 id="2-软件制品"><a href="#2-软件制品" class="headerlink" title="2.软件制品"></a>2.软件制品</h3><p>软件过程的每一项活动都需要人员去完成，活动实施需投入必要的成本、资源和工具，活动的完成需要时间，结束之后会产生相应的软件制品。 因此 ，软件过程将软件项目相关的人力、成本、进度、资源、制品、工具等组织在一起，不仅软件项目的实施需要软件过程的指导 ，软件项目的管理也依赖具体的软件过程 ，比如基于软件过程来制订项目实施计划、跟踪计划的开展、估算软件项目的成本等。</p><p>①软件原型②软件用例模型③软件需求文档</p><h3 id="3-系统软件"><a href="#3-系统软件" class="headerlink" title="3.系统软件"></a>3.系统软件</h3><p>系统软件是指<strong>对计算资源进行管理， 为应用软件的运行提供基础服务</strong>的一类软件。</p><h3 id="4-支撑软件"><a href="#4-支撑软件" class="headerlink" title="4.支撑软件"></a>4.支撑软件</h3><p>支撑软件是指用于<strong>辅助软件开发和运维</strong>，帮助软件开发入员完成<strong>软件开发和维护工作</strong>的一类软件。 </p><h3 id="5-软件生存周期"><a href="#5-软件生存周期" class="headerlink" title="5.软件生存周期"></a>5.软件生存周期</h3><p>软件生命周期指一个软件<strong>从提出开发开始，到开发完成交付用户使用，及至最后退役不再使用</strong>的全过程。 </p><h3 id="6-需求工程"><a href="#6-需求工程" class="headerlink" title="6.需求工程"></a>6.需求工程</h3><p>需求工程是指应用工程化的方法、技术和规格来开发和管理软件的需求。</p><p>需求工程旨在用工程的理念和方法来指导软件需求实践。 </p><p>它提供了一系列过程、策略、方法学和工具，帮助需求工程师加强对业务或领域问题及其环境的理解，获取和分析软件需求，指导软件需求的文档化和评审，以尽可能获得准确、一致和完整的软件需求，产生软件需求的相关软件制品。 </p><h3 id="7-原型"><a href="#7-原型" class="headerlink" title="7.原型"></a>7.原型</h3><p>所谓原型 (prototype) ，是指<strong>在产品开发前期所产生的产品雏形或仿真产品</strong>。 相较于实际产品，原型具有可直观展示产品的特性、贴近业务应用、能自然地反映产品需求等特点。</p><h3 id="8-强内聚低耦合"><a href="#8-强内聚低耦合" class="headerlink" title="8.强内聚低耦合"></a>8.强内聚低耦合</h3><p>内聚度是指模块内各成分间彼此结合的紧密程度，耦合度是指不同模块之间的相关程度。 高内聚度、低耦合度的原则要求模块应该设计得每个模块内部内聚度要高，不同模块之间的耦合度要低。 这两项基本原则可以用来有效指导软件模块的设计，确保得到高质量的模块设计。</p><h3 id="9-模块化"><a href="#9-模块化" class="headerlink" title="9.模块化"></a>9.模块化</h3><p>模块化原则是指将软件系统的功能分解和实现为若干个模块，每个模块具有独立的功能，模块之间通过接口进行调用和访问。 </p><h3 id="10-信息隐藏原则"><a href="#10-信息隐藏原则" class="headerlink" title="10.信息隐藏原则"></a>10.信息隐藏原则</h3><p>信息隐藏原则是指模块应该设计为使其所含的信息（如内部语句、变址等）对那些不需要这些信息的模块而言不可访问，模块间仅交换实现系统功能所须交换的信息（如接口）。 </p><h3 id="11-系统响应时间"><a href="#11-系统响应时间" class="headerlink" title="11.系统响应时间"></a>11.系统响应时间</h3><p>系统响应时间指从用户执行某个控制动作（如按回车键或单击鼠标）到软件作出响应（期望的输出或动作）的时间。</p><h3 id="12-图形用户界面"><a href="#12-图形用户界面" class="headerlink" title="12.图形用户界面"></a>12.图形用户界面</h3><p>用户通过键盘和鼠标等方式来操纵图形化界面，向软件输入所需的信息，如点击按钮、选择某项信息等。软件处理完成之后，采用图形化方式向用户现实和反馈处理的结果，如通过窗口、采用图形等形式来显示处理结果。它以图形化方式向用户展示输入、输出信息，如图形、窗口、按钮、对话框、菜单等。这种方式尤其是鼠标极大促进了它的使用，方便了用户操作软件。用户无须记忆各种命令符号，只需点击菜单项或按钮可发出各种命令，通过选择或填写对话框中的各信息输入项就可以完成参数设置。</p><h3 id="13-软件测试用例"><a href="#13-软件测试用例" class="headerlink" title="13.软件测试用例"></a>13.软件测试用例</h3><p>软件测试用例的设计是软件测试的关键，它描述了对程序代码进行测试时所输入的数据以及预期的结果。一般地，一个测试用例是由以下4类元素所构成的，输入数据，前置条件，测试步骤，预期输出。</p><ul><li><p>输入数据。输入数据代表将交由待测试程序代码进行处理的数据，程序代码基于输入数据执行相应的业务逻辑，并产生数据输出。</p></li><li><p>前置条件。当待测试的程序代码对数据进行处理是，如阿坚测试工程师需要明确程序处理输入数据的运行上下文，也即要满足的前置条件。</p></li><li><p>测试步骤。在软件测试的过程中，程序代码对输入数据的处理可能设计一系列步骤，其中某些步骤需要用户的进一步输入。</p></li><li><p>预期输出。根据待测试程序代码的功能及内部执行逻辑，输入不同的数据，程序代码应该有不同的预期输出结果。</p></li></ul><h3 id="14-单元测试-集成测试-确认测试"><a href="#14-单元测试-集成测试-确认测试" class="headerlink" title="14.单元测试\集成测试\确认测试"></a>14.单元测试\集成测试\确认测试</h3><ul><li><p>单元测试：单元测试依据软件详细设计模型和文档来设计测试用例，它主要对程序单元的接口以及内部执行逻辑进行测试。单元测试通常由程序员完成，一般采用白盒测试技术。</p></li><li><p>集成测试：集成测试是将构成目标软件系统的程序单元进行逐步组装，测试它们的接口和集成是否存在缺陷。软件概要设计模型和文档(如子系统设计模型、软件体系结构设计模型等)是指导集成测试的依据，也即集成测试是要测试程序单元间的接口及其集成是否满足概要设计的相关要求。通常，集成测试在单元测试完成之后，由专门的软件测试工程师来完成，其测试用例可在软件概要设计阶段产生。集成测试通常采用黑盒测试技术。</p></li><li><p>确认测试需要在集成测试完成之后，由专门的软件测试工程师在软件测试阶段来负责完成，其测试用例可在软件需求分析阶段产生。确认测试通常采用黑盒测试技术。</p></li></ul><h3 id="15-性能测试"><a href="#15-性能测试" class="headerlink" title="15.性能测试"></a>15.性能测试</h3><p>性能测试用来测试软件在集成的系统中的性能。性能测试可发生在测试过程的所有步骤中，单元测试时主要测试一个模块的性能，软件的整体性能只有在软件集成后进行，整个计算机系统性能实在计算机系统集成后进行。 </p><h3 id="16-安全测试"><a href="#16-安全测试" class="headerlink" title="16.安全测试"></a>16.安全测试</h3><p>安全性测试借助工具或人工手段来模拟黑客入侵，以发现软件系统中存在的安全隐患，检查软件系统对非法侵入的防范能力。</p><h3 id="17-回归测试"><a href="#17-回归测试" class="headerlink" title="17.回归测试"></a>17.回归测试</h3><p>程序员修复了程序后，还需要对修复后的代码进行回归测试，以判断缺陷和错误是否已经被成功修复，或者在修复代码过程中有没有引入新的缺陷和错误。</p><h3 id="18-软件部署"><a href="#18-软件部署" class="headerlink" title="18.软件部署"></a>18.软件部署</h3><p>软件部署是指将目标软件系统（包括构建、配置文件、用户手册、帮助文档等）进行收集、打包、安装、配置和发布到运行环境的过程。</p><h3 id="19-纠正性维护-完善性维护-适应性维护-预防性维护"><a href="#19-纠正性维护-完善性维护-适应性维护-预防性维护" class="headerlink" title="19.纠正性维护\完善性维护\适应性维护\预防性维护"></a>19.纠正性维护\完善性维护\适应性维护\预防性维护</h3><ul><li><p>纠正性维护：纠正性维护是指为修复和纠正软件中缺陷而开展的维护活动。</p></li><li><p>改善性维护：改善型维护是指对软件进行改造以增加新的功能、修改已有的功能等维护活动。</p></li><li><p>适应性维护：适应性维护是指为实用软件运行环境变化而对软件进行的维护活动。</p></li><li><p>预防性维护：预防性维护是指对软件结构进行改造，一边提高软件的可靠性和可维护性而进行的维护活动。</p></li></ul><h3 id="20-软件演化"><a href="#20-软件演化" class="headerlink" title="20.软件演化"></a>20.软件演化</h3><p>软件演化是指针对软件的大规模功能增强和结构调整，以实现变化的软件需求或者提高软件系统的质量。</p><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><h3 id="1-什么是开源软件，和其他闭源软件相比，有什么优势和不足？"><a href="#1-什么是开源软件，和其他闭源软件相比，有什么优势和不足？" class="headerlink" title="1.什么是开源软件，和其他闭源软件相比，有什么优势和不足？"></a>1.什么是开源软件，和其他闭源软件相比，有什么优势和不足？</h3><p>开源软件是一种源代码可以自由获取和传播的计算机软件，其拥有者通过开源许可证赋予被许可人对软件进行使用、修改和传播的权利。开源软件采用群体化的思想和理念，代表了一种新的软件开发方法 。</p><ul><li><p>优势：</p><ul><li>采购和开发成本更低</li><li>软件质量更高、更安全</li><li>软件研制和交付更快</li><li>软件功能更全面、更具创新性</li></ul></li><li><p>不足：</p><ul><li>安装开源软件有时需要更多的技术经验，比如要有配置或编译源代码的能力。</li><li>开源软件许可协议一般会包含类似的规定，说明作者对用户使用该软件所产生的任何问题不承担责任。由开源软件引发的损失由谁负责是个问题。</li><li>引入或使用开源软件，发现缺陷有谁来维护也是问题，特别是原作者已经不在维护了。</li></ul></li></ul><h3 id="2-什么是软件过程模型？请列举2个进行介绍"><a href="#2-什么是软件过程模型？请列举2个进行介绍" class="headerlink" title="2.什么是软件过程模型？请列举2个进行介绍"></a>2.什么是软件过程模型？请列举2个进行介绍</h3><p>它又称软件开发模型，是软件开发技术活动和管理活动的结构框架，刻画活动间的不同次序，反映对软件开发的理解和认识，展示软件开发理念和思想。</p><ul><li><p>瀑布模型：瀑布模型将软件开发过程分为若干步骤和活动，包括需求分析、软件设计、编码实现、软件测试和运行维护。这些步骤严格按照先后次序和逻辑关系来组织实施。需求分析活动完成之后产生了软件需求文档，才能开展软件设计，以此类推。每个阶段的末尾需要对该阶段产生的软件制品（文档、模型和代码等）进行评审，以发现和纠正软件制品中的问题和缺陷，防止有质批问题的软件制品进入下一步骤。评审通过后意味着该阶段的开发任务完成，随后就可以进入下一个阶段的工作 因此，在瀑布模型中上一步骤的输出是下一步骤的输入，下一步骤需等到前一步骤完成之后才能实施。整个软件开发过程的步骤和实施次序与软件生存周期相一致。软件开发过程中的活动被组织为线性形状，类似于瀑布，故而因此得名。</p></li><li><p>增量模型：瀑布模型要等到软件开发后期才能给用户提供可运行的软件系统，这一点往往不利于用户使用。此外，滞后的软件交付和使用必然会导致软件缺陷和问题的滞后发现，加大软件开发的成本和工作队，影响软件质乱出现这一状况的根本原因在于，获取软件需求后瀑布模型要求一次性实现所有的软件需求，这势必会导致软件设计和实现的工作址大、开发周期长，使软件交付延后<br>针对这一问题，增量模型对瀑布模型做了适当改进，它不再要求软件开发人员，一次性实现所有的软件需求，而是在软件需求和总体设计确定好之后，采用增扯开发的模式渐进式地实现软件系统的所有功能，从而确保软件开发人员可以尽早为用户提交可运行的软件系统。增乱模型的另一个显著优点是允许软件开发人员平行地开发软件、实现软件系统的各个独立模块，从而提高软件开发效率，加快交付目标软件系统的进度。</p></li><li><p>增量模型：在软件需求和总体设计确定好之后，采用增量开发的模式渐进式地实现软件系统的所有功能，从而确保软件开发人员可以尽早为用户提交可运行的软件系统。</p></li><li><p>原型模型：在软件开发早期(通常在需求分析阶段)根据用户的初步需求构建软件原型并将其交给用户使用，获得用户的评价和反馈，帮助用户导出软件需求、发现开发人员与用户之间的需求认识偏差，进而有效地支持软件需求分析。这一过程模型即为原型模型。</p></li></ul><h3 id="3-什么是计算机辅助软件工程（CASE）-请举例说明典型的CASE工具（至少写出3个）"><a href="#3-什么是计算机辅助软件工程（CASE）-请举例说明典型的CASE工具（至少写出3个）" class="headerlink" title="3.什么是计算机辅助软件工程（CASE）,请举例说明典型的CASE工具（至少写出3个）"></a>3.什么是计算机辅助软件工程（CASE）,请举例说明典型的CASE工具（至少写出3个）</h3><p>计算机辅助软件工程(computer aided software engineering, CASE)是指借助计算机软件来辅助软件开发、运行、维护和管理的过程。用于支持计算机辅助软件工程的工具称为 CASE 工具。通常每个 CASE 工具提供一个相对独立的功能，辅助软件开发人员完成某项特定的工作。 </p><ul><li>SonarQube 就是一种 CASE 工具，它可辅助软件开发人员完成代码质量分析和评估工作。</li><li>Microsoft Office也可视为 CASE 工具，它可辅助软件开发人员撰写软件文档。</li><li>Eclipse 也是CASE工具，用于代码编写、程序编译、程序调试等等。</li><li>Git也是CASE工具，用于项目管理，团队合作，软件版本管理。</li></ul><h3 id="4-软件需求是什么？包含哪些具体内容？"><a href="#4-软件需求是什么？包含哪些具体内容？" class="headerlink" title="4.软件需求是什么？包含哪些具体内容？"></a>4.软件需求是什么？包含哪些具体内容？</h3><p>可以从软件本身和软件利益相关者两个不同的角度来理解软件需求 (software requirements) 。</p><p>从软件本身的角度，软件需求是指软件用千解决现实世界问题时所表现出的功能和性能等要求；</p><p>从软件利益相关者的角度，软件需求是指软件系统的利益相关者对软件系统的功能和质量，以及软件运行环境、交付进度等方面提出的期望和要求。</p><p>《计算机科学技术名词》将软件需求定义为：为解决用户或客户的问题或实现其目标，软件系统必须具备的能力及必须满足的约束条件。本质上，软件需求刻画了软件系统能够做什么、应表现出怎样的行为、需满足哪些方面的条件和约束等要求。</p><p>软件需求主要表现为三种形式：功能需求、软件质量需求和软件开发约束需求。后两种形式统称为非功能需求。</p><ul><li><p>软件的功能需求描述了软件能做什么、具有什么功能、可提供怎样的服务，刻画了软件在具体场景下所展现的行为及效果。软件的功能需求大多来自软件的用户、客户和开发者群体。 对于一些人机物共生系统而言，目标系统的某些功能需要通过软件加以实现，因而会对软件提出特定的功能要求。</p></li><li><p>软件质量需求是指软件的利益相关者对软件应具有的质蜇属性所提出的具体要求。 软件的质量属性既包括内部质量属性，也包括外部质量属性。 通常而言，软件系统的客户、用户、开发者群体或者与软件发生交互的其他系统都会对软件的外部质量属性提出要求，如运行性能、可靠性 、易用性、安全性 、私密性、可用性、持续性、可信性等。 软件系统的开发者群体还会对软 件系统的内部质扯属性提出要求 ，如软件的可扩展性、 可维护性、可理解性、可重用性 、可移植性有效性等。</p></li><li><p>软件开发约束需求是指软件的利益相关者对软件系统的开发成本、交付进度、技术选型、遵循标准等方面提出的要求。 站在客户或开发者的视角，软件开发是一项工程，需要投入资源和 成本，产品交付需要时间。 为了获益，他们会对软件产品的开发成本和进度提出明确要求。</p></li></ul><h3 id="5-写出瀑布模型的特征和不足"><a href="#5-写出瀑布模型的特征和不足" class="headerlink" title="5.写出瀑布模型的特征和不足"></a>5.写出瀑布模型的特征和不足</h3><p>特征：</p><ul><li>接受上一阶段的结果作为本阶段的输入</li><li>利用这一输入实施本阶段应完成的活动</li><li>对本阶段的工作进行评审</li><li>将本阶段的结果作为输出，传递给下一阶段</li></ul><p>缺点：</p><ul><li>缺乏灵活性，难以适应需求不明确或需求经常变化的软件开发</li><li>开发早期存在的问题往往要到交付使用时才发现，维护代价大</li></ul><h3 id="6-如何选择合适的过程模型"><a href="#6-如何选择合适的过程模型" class="headerlink" title="6.如何选择合适的过程模型"></a>6.如何选择合适的过程模型</h3><p>在具体的软件开发实践中，软件开发人员和管理人员需根据各个软件过程模型的特点和适用场合，结合所开发软件项目的实际情况和具体要求，合理地选择或制定软件项目的过程模型。</p><ol><li>考虑软件项目的特点：考虑软件项目的特点，尤其是所开发软件的业务特点，如业务领域是否明确、软件需求是否易于确定、用户需求是否会经常变化等。</li><li>考虑软件项目开发的风险：如果在软件项目实施之前就可以预估到该项目可能会面临多样化的软件风险，可以考虑采用螺旋模型等过程模型。</li><li>考虑团队的经验和水平：需要结合软件开发团队的能力和水平来选择过程模型，以防开发团队和管理人员无法掌控和驾驭过程模型。</li></ol><h3 id="7-写出需求工程的一般过程"><a href="#7-写出需求工程的一般过程" class="headerlink" title="7.写出需求工程的一般过程"></a>7.写出需求工程的一般过程</h3><p>需求工程提供了一般性过程，以指导软件需求的获取、分析和文档化。 它包含了若干与需求工程密切相关的活动，明确了每项活动的具体任务以及不同活动间的关系，以帮助需求工程师等循序渐进地开展需求工程。</p><ol><li>获取软件需求：该活动的任务是要获得软件利益相关者对软件的期望和要求，进而获取初步软件需求。</li><li>分析软件需求：该项工作的任务是要在初步软件需求的基础上，对软件需求进行稍化、建模和分析，获得软件需求在功能、行为、特征和约束等方面更为详细的信息，发现并解决软件需求中潜在的问题，产生准确、一致和完整的软件需求及其描述。</li><li>文档化软件需求：该项活动的任务是要在获取和分析软件需求及其成果的基础上．撰写软件需求文档，产生软件需求规格说明书。</li><li>确认和验证软件需求：该项活动的任务是要对前面工作所产生的软件需求模型和文档进行评审，让软件系统的利益相关者确认和验证软件需求，发现其中的问题和存在的缺陷，并加以解决和纠正 ， 确保经评审后的软件需求模型和文档符合利益相关者的诉求并满足质址要求。</li><li>管理软件需求：由于软件需求工程贯穿于整个软件生存周期，软件需求会持续发生变化，并且需求变化会对软件开发和运维产生重要的影响，因此必须对软件需求变化以及相应的软件需求制品进行有效的管理，包括明确和验证软件需求变更、追踪需求变化、分析和评估需求变化所产生的影响、 对变化后的软件需求制品进行配置管理等。</li></ol><h3 id="8-获取软件需求的方法有哪些，请列举2个进行介绍"><a href="#8-获取软件需求的方法有哪些，请列举2个进行介绍" class="headerlink" title="8.获取软件需求的方法有哪些，请列举2个进行介绍"></a>8.获取软件需求的方法有哪些，请列举2个进行介绍</h3><ul><li>从软件系统的用户和客户处导出软件需求：在获取软件需求的过程中，如果在现实世界能够找到软件系统的潜在用户和实际客户，那么需求工程师可以通过与这些用户或客户进行交互，从他们那里导出软件系统的需求。 </li><li>分解其他系统的需求产生软件需求：多软件系统并不是独立存在的，而是作为更大系统的一个组成部分，负责完成整个系统的部分需求。</li><li>重用已有的系统的需求：当开发一个软件系统时，如果类似的软件产品已经存在，需求工程师可通过对已有软件产品的功能和特点进行分析形成待开发软件系统的需求。</li><li>通过软件开发者构思和创作软件需求</li><li>激励互联网开放群体贡献软件需求</li></ul><h3 id="9-请简述软件设计的任务"><a href="#9-请简述软件设计的任务" class="headerlink" title="9.请简述软件设计的任务"></a>9.请简述软件设计的任务</h3><p>软件设计的任务是根据需求工程所定义的软件需求，包括功能需求、质量需求和开发约束需求，遵循软件设计的基本原则，定义构成软件系统的各个设计元素，提供可指导软件实现的解决方案，形成高质量的软件设计模型和文档。</p><h3 id="10-写出软件设计的一般过程"><a href="#10-写出软件设计的一般过程" class="headerlink" title="10.写出软件设计的一般过程"></a>10.写出软件设计的一般过程</h3><p>在软件设计阶段，软件设计工程师需要基千软件需求模型，通过一系列软件设计活动，产生由各种设计元素所表述的软件设计模型，以此来指导程序员编写目标软件系统的代码。 为此，软件设计工程师需要在充分理解软件需求的基础上，有序地开展一系列软件设计工作，产生支持目标软件系统的设计模型和文档。</p><ol><li>体系结构性设计：软件设计首先需要回答软件系统应具有什么样的软件体系结构，也称为软件架构。 </li><li>用户界面设计：用户界面设计就是要明确目标软件系统有哪些用户界面（如窗口和对话框等），这些界面之间的跳转关系（如在一个窗口点击确认后将弹出另一个窗口），每个界面内部的输入输出元素及其布局，包括输入框、按钮、文本显示框、菜单项等。 所有的界面设计元素可由设计类来表示。 </li><li>详细设计：在上述两项软件设计的基础上，软件设计工程师须进一步细化软件设计，所谓的详细设计，顾名思义就是要给出软件系统更为具体的细节性设计，需要详细到足以支待程序员的编码实现。 包括了用例设计、子系统和构件设计、类设计、数据设计。</li><li>文档化软件设计：软件设计工程师需在上述软件设计及其成果的基础上，按照软件设计规格说明书的规范和要求撰写软件设计文档，详细记录软件设计的具体信息，并以此作为与其他人员进行交流和评审的媒介。 </li><li>软件设计评审：软件设计工程师需要组织多方人员一起对软件设计制品进行评审，验证软件设计是否实现 了软件需求，分析软件设计的质址，发现软件设计中存在的缺陷和问题，并与多方人员 一起协商加以解决。</li><li>软件设计管理：由于软件设计在软件生存周期中会发生变化，并且设计变化会对软件的编码、测试和运维产生重要影响，因此必须对软件设计变化以及相应的软件设计制品进行有效的管理，包括追踪软件设计变化、分析和评估软件设计变化所产生的影响、对变化后的软件设计制品进行配置管理等。</li></ol><h3 id="11-体系结构结构设计风格有哪些，请列举两个进行介绍"><a href="#11-体系结构结构设计风格有哪些，请列举两个进行介绍" class="headerlink" title="11.体系结构结构设计风格有哪些，请列举两个进行介绍"></a>11.体系结构结构设计风格有哪些，请列举两个进行介绍</h3><ul><li><p>管道&#x2F;过滤器风格：</p></li><li><p>管道&#x2F;过滤器风格将软件系统的功能实现为一系列处理步骤，每个步骤完成特定的子功能冰凤凰装在一个成为“过滤器”的构建中。响铃过滤器之间以“管道”相连，也即连接件，前一个过滤器的输出数据通过管道流向最后一个过滤器。整个软件系统的输入由数据源提供，它通过管道与某个过滤器项链。软件系统的最终输出由源自某个过滤器的管道流向数据宿，也称数据汇。典型的数据源和数据汇包括数据库、数据文件、其他软件系统、物理设备（如智能手机等）。</p></li><li><p>层次风格：</p></li><li><p>层次风格将软件系统按照抽象级别划分为若干层次,每层由若干抽象级别相同的构件组成,因而整个软件体系结构呈现出层次化的形式(见图8.6)。每层构件仅为紧邻其上的抽象别更高的层次及其构件提供服务,并且它们仅使用紧邻下层及其构件提供的服务。一般而言，处于顶层的构件直接面向用户提供软件系统的交互界面,处于底层的构件则负责提供基础性、公共性的功能和服务。相邻层次间的构件连接通常采用以下两种方式:一种是高层构件向低层构件发出服务请求,低层构件在计算完成后向请求者发送服务应答;另一种是低层构件在主动探测或被动获知计算环境的变化后,以事件的形式通知高层构件。每个层次可以采用两种方式来向上层提供服务接口:一种是层次中每个提供服务的构件对外公开其接口;另一种是将服务接口封装于层次的内部,每个层次提供统一的服务接口。</p></li><li><p>MvC风格：</p></li><li><p>MVC风格将软件系统划分为三类主要的构件:模型(model)、视图(view)和控制器(controller)(见图8.7)。模型构件负责存储业务数据，提供业务逻辑处理功能；视图构件负责向用户展示模型结果；控制器构件在接收模型的业务逻辑处理结果后，负责选择适当的视图作为软件系统对用户的界面动作的响应，它实际上是模型和视图之间的连接桥梁。</p></li></ul><h3 id="12-写出用户界面设计的一般过程"><a href="#12-写出用户界面设计的一般过程" class="headerlink" title="12.写出用户界面设计的一般过程"></a>12.写出用户界面设计的一般过程</h3><p><img src="/oranfish.github.io/posts/0/%E8%BD%AF%E5%9F%BA-%E5%A4%8D%E4%B9%A0%E6%9D%90%E6%96%99/image-20240613141327069.png" alt="image-20240613141327069"></p><h3 id="13-编写程序代码时，标识符命名应该注意什么问题（至少写出5条）"><a href="#13-编写程序代码时，标识符命名应该注意什么问题（至少写出5条）" class="headerlink" title="13.编写程序代码时，标识符命名应该注意什么问题（至少写出5条）"></a>13.编写程序代码时，标识符命名应该注意什么问题（至少写出5条）</h3><p>I. 名字应反映所代表的实体，具有一定实际意义</p><p>II. 选择精炼的意义明确的名字</p><p>III. 不用关键字作标识符</p><p>IV. 同一个名字不要有多个含义</p><p>V. 避免使用容易混淆的字符 </p><h3 id="14-写出软件调试的步骤"><a href="#14-写出软件调试的步骤" class="headerlink" title="14.写出软件调试的步骤"></a>14.写出软件调试的步骤</h3><p><img src="/oranfish.github.io/posts/0/%E8%BD%AF%E5%9F%BA-%E5%A4%8D%E4%B9%A0%E6%9D%90%E6%96%99/image-20240613141335825.png" alt="image-20240613141335825"></p><h3 id="15-软件设计的原则有哪些？请列举2个进行介绍"><a href="#15-软件设计的原则有哪些？请列举2个进行介绍" class="headerlink" title="15.软件设计的原则有哪些？请列举2个进行介绍"></a>15.软件设计的原则有哪些？请列举2个进行介绍</h3><ul><li><p>抽象和逐步求精原则：</p></li><li><p>抽象是指在认识事物、分析和解决问题时，忽略那些与当前研究目标不相关的部分及要以便将注意力集中在与当前目标相关的方面。</p></li><li><p>逐步求精是指在分析问题和解决问题过程中，先建立关于问题及其解的高层次抽象，然后以此为基础，通过精化获得更多的细节，建立问题和系统的低层次抽象。</p></li><li><p>模块化与高内聚度、低耦合度原则：</p></li><li><p>模块化是软件工程的一项基本原则，即在开发软件时将整个软件系统设计为一个个功能单一、接口明确、相对独立的模块单元，并通过这些模块之间的交互来实现软件系统的功能。</p></li><li><p>内聚度是指模块内各成分间彼此结合的紧密程度，耦合度是指不同模块之间的相关程度。高内聚度、低耦合度的原则要求模块应该设计得每个模块内部内聚度要高，不同模块之间的耦合度要低。</p></li><li><p>信息隐藏原则：</p></li><li><p>该原则有助于设计出高质量的软件系统其优点具体表现为以下几个方面。</p></li><li><p>它使模块的独立性更好，其内部尽可能少地受其他模块的影响。</p></li><li><p>由于模块的独立性好，因而有助于模块的并行开发(设计和编码)，提高了软件开发的效率。</p></li><li><p>由于模块内部的信息对外不可访问，因而它可以有效地减少错误向外传播，便于软件测试，提高软件系统的可维护性。</p></li><li><p>便于软件系统增加新的功能，也即新功能的增加可以通过增加相关的模块来完成，而非对已有模块的修改。</p></li><li><p>将模块内部的信息隐藏起来，可以防止对模块内部的不必要访问。一旦软件模块出现问题，可以方便地寻找错误原因和定位错误源头。</p></li><li><p>实际上，现有的软件设计和程序设计技术均在不同程度上支持信息隐藏。</p></li><li><p>多视点及关注点分离原则：</p></li><li><p>一个软件系统的设计包含多个不同的方面，需要从不同的视点对它进行设计。</p></li><li><p>当然，软件设计的不同视点有其各自的独立性和关注点，或者说不同视点所关心的问题以及欲达成的设计目标是不一样的，不可将它们混为一谈。</p></li><li><p>软件重用原则：</p></li><li><p>软件重用是软件工程的一项基本原则，它是指在软件开发过程中要尽可能地重用已有的软件资产来实现软件系统的功能，同时要确保所开发的软件系统易于为其他软件系统所重用。</p></li><li><p>软件工程提供了诸多的****技术手段*<em><strong>来支持软件重用，如封装、继承、信息隐藏、多态等。软件重用的</strong></em>*形式*<em><strong>也从早期基于过程和函数的细粒度重用，逐步过渡到基于类、构件、服务和镜像的粗粒度重用，以及近年来出现的基于开源软件的更大粒度重用。</strong></em>*重用的内容*<em><strong>不仅表现为源代码和可执行程序代码，而且还可以重用</strong></em>*体系结构风格、软件设计模式、软件开发知识*<em><strong>等。软件重用不仅发生在</strong></em>*编码实现阶段*<em><strong>，而且在</strong></em>*需求分析、软件设计、软件测试阶段****也可以进行软件重用。</p></li><li><p>迭代设计原则：</p></li><li><p>根据前面的阐述，软件设计极为复杂，要考虑的问题和因素很多，期望通过一次性设计就达成相关的设计任务是不现实的。软件设计需要经过多次反复迭代才能完成。每次迭代都是在前一次迭代的基础上，对产生的设计模型进行反复权衡、折中、优化等工作，以得到更为合理、高效、高质量的软件设计成果。</p></li><li><p>可追踪性原则：</p></li><li><p>概括而言，软件设计的目的是为软件需求的实现提供解决方案。因此，任何软件设计活动以及由此而产生的设计结果都要服务于特定的软件需求。软件设计应能通过逆向追踪找到其对应的软件需求，或者软件需求可以通过正向追踪找到其对应的设计元素。</p></li><li><p>权衡抉择原则：</p></li><li><p>首先，选择什么样的技术来设计和开发软件，新技术也许会让软件产品及其开发具备一定的技术优势，但是也会由于缺乏足够的实践和检验、未能熟练地掌握等因素而带来相关的技术风险，旧技术虽然老旧，但是成熟，利用它们来开发软件相对而言风险较小。为此，设计工程师需要在新旧技术之间进行合理的权衡抉择。</p></li><li><p>其次，在实现软件需求时，不同软件需求项之间可能存在“负相关”的关系，尤其对于质量需求而言体现得更加明显，也即当增强某些质量需求的同时可能会导致另一些质量需求的变弱。因此，设计工程师需要在不同的设计考虑、不同的设计方案之间进行权衠抉择，以得到符合其要求和关注点的合理设计。</p></li></ul><h3 id="16-软件测试的V模型包括哪些步骤？说明这些步骤的测试对象是什么？"><a href="#16-软件测试的V模型包括哪些步骤？说明这些步骤的测试对象是什么？" class="headerlink" title="16.软件测试的V模型包括哪些步骤？说明这些步骤的测试对象是什么？"></a>16.软件测试的V模型包括哪些步骤？说明这些步骤的测试对象是什么？</h3><p><img src="/oranfish.github.io/posts/0/%E8%BD%AF%E5%9F%BA-%E5%A4%8D%E4%B9%A0%E6%9D%90%E6%96%99/image-20240613141350487.png" alt="image-20240613141350487"></p><ul><li>单元测试：模块或构件</li><li>集成测试：集成的软件系统</li><li>确认测试：软件需求规约</li><li>系统测试：基于计算机的系统</li><li>测试对象：类方法、类对象、构建、子系统、整个软件系统</li></ul><h3 id="17-请解释什么是改善性维护，并举例说明"><a href="#17-请解释什么是改善性维护，并举例说明" class="headerlink" title="17.请解释什么是改善性维护，并举例说明"></a>17.请解释什么是改善性维护，并举例说明</h3><p>改善性维护是指对软件进行改造以增加新的功能、修改已有的功能等维护活动。例如，“12306”软件投入使用之后，用户希望该软件能够提供车票改签、退票等功能，为此软件维护团队需要基于这些新需求，对软件进行改善性维护。</p><h3 id="18-为提高程序的可理解性，有哪些主要的注意事项？请至少写出3条"><a href="#18-为提高程序的可理解性，有哪些主要的注意事项？请至少写出3条" class="headerlink" title="18.为提高程序的可理解性，有哪些主要的注意事项？请至少写出3条"></a>18.为提高程序的可理解性，有哪些主要的注意事项？请至少写出3条</h3><p>1）易读，一看就懂</p><p>2）易改，便于维护</p><p>3）降低代码复杂度</p><p>4）尽可能开展软件重用和编写可重用的程序代码</p><p>5）要能处理异常和提高代码的容错性</p><p>6）代码要与模型和文档相一致</p><p>7）格式化代码的布局。尽可能使其清晰、明了</p><p>8）进可能提供简单的代码，不要人为地增加代码的复杂度</p><p>9）对代码辅之以适当的文档，以加强程序的理解</p><p>10）加强程序代码的结构化组织，提高代码的可读性</p><h3 id="19-什么是模块化？软件设计时，模块是否应该划分越多越好？为什么？"><a href="#19-什么是模块化？软件设计时，模块是否应该划分越多越好？为什么？" class="headerlink" title="19.什么是模块化？软件设计时，模块是否应该划分越多越好？为什么？"></a>19.什么是模块化？软件设计时，模块是否应该划分越多越好？为什么？</h3><p>模块化原则是指将软件系统的功能分解和实现为若干个模块，每个模块具有独立的功能，模块之间通过接口进行调用和访问。每个模块内部的要素(如语句、变量等)与模块的功能相关，且相互间关系密切，即模块内部高内聚；每个模块独立性强，模块间的关系松散，即模块间松耦合。</p><p>不是模块分得越细越好、得到的模块个数越多越好。虽然单个模块的复杂性有所降低，但是模块个数多了，组装（或集成）模块得到整个软件的复杂性和代价会增加的。其实划分每个模块的大小和得到的模块个数实际上有个合理的范围，在这个范围内复杂性和代价相对比较合理。</p><h3 id="20-写出测试策略（测试的V模型）中的四种测试和它们的任务"><a href="#20-写出测试策略（测试的V模型）中的四种测试和它们的任务" class="headerlink" title="20.写出测试策略（测试的V模型）中的四种测试和它们的任务"></a>20.写出测试策略（测试的V模型）中的四种测试和它们的任务</h3><ul><li>单元测试：程序单元的接口测试、局部数据的接口测试、执行路径的接口测试、错误处理路径测试。</li><li>集成测试：自顶向下集成测试、自底向上集成测试。</li><li>确认测试：针对整个软件系统进行确认测试，以测试目标软件系统是否满足软件需求文档所定义的各项软件需求。</li><li>系统测试：一旦软件系统通过了确认测试之后，它还要与相关的其他系统进行集成，以进行系统测试，发现软件系统与其他系统交互过程中是否存在缺陷。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 软件工程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础-网络模型</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>对于同一台设备上的进程间通信，有很多种方式，比如有管道、消息队列、共享内存、信号等方式，而对于不同设备上的进程间通信，就需要网络通信，而设备是多样性的，所以要兼容多种多样的设备，就协商出了一套<strong>通用的网络协议</strong>。</p><p>这个网络协议是分层的，每一层都有各自的作用和职责，根据「 TCP&#x2F;IP 网络模型」分别对每一层进行介绍。</p><h2 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1.应用层"></a>1.应用层</h2><p>最上层的，也是我们能直接接触到的就是<strong>应用层</strong>（<em>Application Layer</em>），我们电脑或手机使用的应用软件都是在应用层实现。那么，当两个不同设备的应用需要通信的时候，应用就把应用数据传给下一层，也就是传输层。</p><p>所以，应用层只需要专注于为用户提供应用功能，比如 HTTP、FTP、Telnet、DNS、SMTP等。</p><p>应用层是不用去关心数据是如何传输的，就类似于，我们寄快递的时候，只需要把包裹交给快递员，由他负责运输快递，我们不需要关心快递是如何被运输的。</p><p>而且应用层是工作在操作系统中的用户态，传输层及以下则工作在内核态。</p><h2 id="2-传输层"><a href="#2-传输层" class="headerlink" title="2.传输层"></a>2.传输层</h2><p>应用层的数据包会传给传输层，<strong>传输层</strong>（<em>Transport Layer</em>）是为应用层提供网络支持的。</p><img src="/oranfish.github.io/posts/0/%E5%BA%94%E7%94%A8%E5%B1%82.png" alt="img" style="zoom:33%;"><p>在传输层会有两个传输协议，分别是 TCP 和 UDP。</p><p>TCP 的全称叫传输控制协议（<em>Transmission Control Protocol</em>），大部分应用使用的正是 TCP 传输层协议，比如 HTTP 应用层协议。TCP 相比 UDP 多了很多特性，比如流量控制、超时重传、拥塞控制等，这些都是为了保证数据包能可靠地传输给对方。</p><p>UDP 相对来说就很简单，简单到只负责发送数据包，不保证数据包是否能抵达对方，但它实时性相对更好，传输效率也高。当然，UDP 也可以实现可靠传输，把 TCP 的特性在应用层上实现就可以，不过要实现一个商用的可靠 UDP 传输协议，也不是一件简单的事情。</p><p>应用需要传输的数据可能会非常大，如果直接传输就不好控制，因此当传输层的数据包大小超过 MSS（TCP 最大报文段长度） ，就要将数据包分块，这样即使中途有一个分块丢失或损坏了，只需要重新发送这一个分块，而不用重新发送整个数据包。在 TCP 协议中，我们把每个分块称为一个 <strong>TCP 段</strong>（<em>TCP Segment</em>）。</p><img src="/oranfish.github.io/posts/0/TCP%E6%AE%B5.png" alt="img" style="zoom:50%;"><p>当设备作为接收方时，传输层则要负责把数据包传给应用，但是一台设备上可能会有很多应用在接收或者传输数据，因此需要用一个编号将应用区分开来，这个编号就是<strong>端口</strong>。</p><p>比如 80 端口通常是 Web 服务器用的，22 端口通常是远程登录服务器用的。而对于浏览器（客户端）中的每个标签栏都是一个独立的进程，操作系统会为这些进程分配临时的端口号。</p><p>由于传输层的报文中会携带端口号，因此接收方可以识别出该报文是发送给哪个应用。</p><h2 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3.网络层"></a>3.网络层</h2><p>传输层可能大家刚接触的时候，会认为它负责将数据从一个设备传输到另一个设备，事实上它并不负责。</p><p>实际场景中的网络环节是错综复杂的，中间有各种各样的线路和分叉路口，如果一个设备的数据要传输给另一个设备，就需要在各种各样的路径和节点进行选择，而传输层的设计理念是简单、高效、专注，如果传输层还负责这一块功能就有点违背设计原则了。</p><p>也就是说，我们不希望传输层协议处理太多的事情，只需要服务好应用即可，让其作为应用间数据传输的媒介，帮助实现应用到应用的通信，而实际的传输功能就交给下一层，也就是<strong>网络层</strong>（<em>Internet Layer</em>）。</p><p><img src="/oranfish.github.io/posts/0/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%BD%91%E7%BB%9C%E5%B1%82.png" alt="img"></p><p>网络层最常使用的是 IP 协议（<em>Internet Protocol</em>），IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般为 1500 字节）就会<strong>再次进行分片</strong>，得到一个即将发送到网络的 IP 报文。</p><p><img src="/oranfish.github.io/posts/0/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/12.jpg" alt="img"></p><p>网络层负责将数据从一个设备传输到另一个设备，世界上那么多设备，又该如何找到对方呢？因此，网络层需要有区分设备的编号。</p><p>我们一般用 IP 地址给设备进行编号，对于 IPv4 协议， IP 地址共 32 位，分成了四段（比如，192.168.100.1），每段是 8 位。只有一个单纯的 IP 地址虽然做到了区分设备，但是寻址起来就特别麻烦，全世界那么多台设备，难道一个一个去匹配？这显然不科学。</p><p>因此，需要将 IP 地址分成两种意义：</p><ul><li>一个是<strong>网络号</strong>，负责标识该 IP 地址是属于哪个「子网」的；</li><li>一个是<strong>主机号</strong>，负责标识同一「子网」下的不同主机；</li></ul><p>怎么分的呢？这需要配合<strong>子网掩码</strong>才能算出 IP 地址 的网络号和主机号。</p><p>举个例子，比如 10.100.122.0&#x2F;24，后面的<code>/24</code>表示就是 <code>255.255.255.0</code> 子网掩码，255.255.255.0 二进制是「11111111-11111111-11111111-00000000」，大家数数一共多少个1？不用数了，是 24 个1，为了简化子网掩码的表示，用&#x2F;24代替255.255.255.0。</p><p>知道了子网掩码，该怎么计算出网络地址和主机地址呢？</p><p>将 10.100.122.2 和 255.255.255.0 进行<strong>按位与运算</strong>，就可以得到网络号，如下图：</p><p><img src="/oranfish.github.io/posts/0/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/16.jpg" alt="img"></p><p>将 255.255.255.0 取反后与IP地址进行进行<strong>按位与运算</strong>，就可以得到主机号。</p><p>大家可以去搜索下子网掩码计算器，自己改变下「掩码位」的数值，就能体会到子网掩码的作用了。</p><p><img src="/oranfish.github.io/posts/0/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E8%AE%A1%E7%AE%97%E5%99%A8.png" alt="子网掩码计算器"></p><p>那么在寻址的过程中，先匹配到相同的网络号（表示要找到同一个子网），才会去找对应的主机。</p><p>除了寻址能力， IP 协议还有另一个重要的能力就是<strong>路由</strong>。实际场景中，两台设备并不是用一条网线连接起来的，而是通过很多网关、路由器、交换机等众多网络设备连接起来的，那么就会形成很多条网络的路径，因此当数据包到达一个网络节点，就需要通过路由算法决定下一步走哪条路径。</p><p>路由器寻址工作中，就是要找到目标地址的子网，找到后进而把数据包转发给对应的网络内。</p><p><img src="/oranfish.github.io/posts/0/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/17.jpg" alt="IP地址的网络号"></p><p>所以，<strong>IP 协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走，路由则是根据「下一个目的地」选择路径。寻址更像在导航，路由更像在操作方向盘</strong>。</p><h2 id="4-网络接口层"><a href="#4-网络接口层" class="headerlink" title="4.网络接口层"></a>4.网络接口层</h2><p>生成了 IP 头部之后，接下来要交给<strong>网络接口层</strong>（<em>Link Layer</em>）在 IP 头部的前面加上 MAC 头部，并封装成数据帧（Data frame）发送到网络上。</p><p><img src="/oranfish.github.io/posts/0/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82.png" alt="img"></p><p>IP 头部中的接收方 IP 地址表示网络包的目的地，通过这个地址我们就可以判断要将包发到哪里，但在以太网的世界中，这个思路是行不通的。</p><p>什么是以太网呢？电脑上的以太网接口，Wi-Fi接口，以太网交换机、路由器上的千兆，万兆以太网口，还有网线，它们都是以太网的组成部分。以太网就是一种在「局域网」内，把附近的设备连接起来，使它们之间可以进行通讯的技术。</p><p>以太网在判断网络包目的地时和 IP 的方式不同，因此必须采用相匹配的方式才能在以太网中将包发往目的地，而 MAC 头部就是干这个用的，所以，在以太网进行通讯要用到 MAC 地址。</p><p>MAC 头部是以太网使用的头部，它包含了接收方和发送方的 MAC 地址等信息，我们可以通过 ARP 协议获取对方的 MAC 地址。</p><p>所以说，网络接口层主要为网络层提供「链路级别」传输的服务，负责在以太网、WiFi 这样的底层网络上发送原始数据包，工作在网卡这个层次，使用 MAC 地址来标识网络上的设备。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>综上所述，TCP&#x2F;IP 网络通常是由上到下分成 4 层，分别是<strong>应用层，传输层，网络层和网络接口层</strong>。</p><p><img src="/oranfish.github.io/posts/0/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/tcpip%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.drawio.png" alt="img"></p><p>每一层的封装格式：</p><p><img src="/oranfish.github.io/posts/0/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E5%B0%81%E8%A3%85.png" alt="img"></p><p>网络接口层的传输单位是帧（frame），IP 层的传输单位是包（packet），TCP 层的传输单位是段（segment），HTTP 的传输单位则是消息或报文（message）。但这些名词并没有什么本质的区分，可以统称为数据包。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-进程线程基础知识</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-进程"><a href="#1-进程" class="headerlink" title="1.进程"></a>1.进程</h2><p>执行文件后将其装载到内存中，通过CPU执行程序中的每一条指令，那么这个<strong>运行中的程序，就被称为「进程」（Process）</strong></p><p>当进程要从硬盘读取数据时，CPU 不需要阻塞等待数据的返回，而是去执行另外的进程。当硬盘数据返回时，CPU 会收到个<strong>中断</strong>，于是 CPU 再继续运行这个进程。</p><p>这种<strong>多个程序、交替执行</strong>的思想，就有 CPU 管理多个进程的初步想法。</p><p>在 1 秒钟期间，它可能会运行多个进程，这样就产生<strong>并行的错觉</strong>，实际上这是<strong>并发</strong>。</p><h3 id="1-1-并发和并行的区别"><a href="#1-1-并发和并行的区别" class="headerlink" title="1.1 并发和并行的区别"></a>1.1 并发和并行的区别</h3><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/5-%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C.jpg" alt="并发与并行" style="zoom: 50%;"><h3 id="1-2-进程与程序的关系"><a href="#1-2-进程与程序的关系" class="headerlink" title="1.2 进程与程序的关系"></a>1.2 进程与程序的关系</h3><p><img src="/oranfish.github.io/posts/0/OS-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/6-%E5%81%9A%E8%8F%9C%E5%AF%B9%E5%BA%94%E8%BF%9B%E7%A8%8B%E5%85%B3%E7%B3%BB.jpg" alt="img"></p><p><strong>CPU 可以从一个进程（做菜）切换到另外一个进程（买可乐），在切换前必须要记录当前进程中运行的状态信息，以备下次切换回来的时候可以恢复执行。</strong></p><p>进程有着「<strong>运行 - 暂停 - 运行</strong>」的活动规律。</p><h3 id="1-3-进程的状态"><a href="#1-3-进程的状态" class="headerlink" title="1.3 进程的状态"></a>1.3 进程的状态</h3><p><strong>在一个进程的活动期间至少具备三种基本状态，即运行状态、就绪状态、阻塞状态。</strong></p><ul><li>运行状态（<em>Running</em>）：该时刻进程占用 CPU；</li><li>就绪状态（<em>Ready</em>）：可运行，由于其他进程处于运行状态而暂时停止运行；</li><li>阻塞状态（<em>Blocked</em>）：该进程正在等待某一事件发生（如等待输入&#x2F;输出操作的完成）而暂时停止运行，这时，即使给它CPU控制权，它也无法运行；</li></ul><p>当然，进程还有另外两个基本状态：</p><ul><li>创建状态（<em>new</em>）：进程正在被创建时的状态；</li><li>结束状态（<em>Exit</em>）：进程正在从系统中消失时的状态；</li></ul><img src="/oranfish.github.io/posts/0/8-%E8%BF%9B%E7%A8%8B%E4%BA%94%E4%B8%AA%E7%8A%B6%E6%80%81.jpg" alt="进程五种状态的变迁" style="zoom:50%;"><p>进程的状态变迁：</p><ul><li><em>NULL -&gt; 创建状态</em>：一个新进程被创建时的第一个状态；</li><li><em>创建状态 -&gt; 就绪状态</em>：当进程被创建完成并初始化后，一切就绪准备运行时，变为就绪状态，这个过程是很快的；</li><li><em>就绪态 -&gt; 运行状态</em>：处于就绪状态的进程被操作系统的进程调度器选中后，就分配给 CPU 正式运行该进程；</li><li><em>运行状态 -&gt; 结束状态</em>：当进程已经运行完成或出错时，会被操作系统作结束状态处理；</li><li><em>运行状态 -&gt; 就绪状态</em>：处于运行状态的进程在运行过程中，由于分配给它的运行时间片用完，操作系统会把该进程变为就绪态，接着从就绪态选中另外一个进程运行；</li><li><em>运行状态 -&gt; 阻塞状态</em>：当进程请求某个事件且必须等待时，例如请求 I&#x2F;O 事件；</li><li><em>阻塞状态 -&gt; 就绪状态</em>：当进程要等待的事件完成时，它从阻塞状态变到就绪状态；</li></ul><p>在虚拟内存管理的操作系统中，通常会把阻塞状态的进程的物理内存空间换出到硬盘，等需要再次运行的时候，再从硬盘换入到物理内存。</p><p>那么，就需要一个新的状态，来<strong>描述进程没有占用实际的物理内存空间的情况，这个状态就是挂起状态</strong>。这跟阻塞状态是不一样，阻塞状态是等待某个事件的返回。</p><p>另外，挂起状态可以分为两种：</p><ul><li>阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现；</li><li>就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行；</li></ul><img src="/oranfish.github.io/posts/0/10-%E8%BF%9B%E7%A8%8B%E4%B8%83%E4%B8%AD%E7%8A%B6%E6%80%81.jpg" alt="七种状态变迁" style="zoom:50%;"><p>导致进程挂起的原因不只是因为进程所使用的内存空间不在物理内存，还包括如下情况：</p><ul><li>通过 sleep 让进程间歇性挂起，其工作原理是设置一个定时器，到期后唤醒进程。</li><li>用户希望挂起一个程序的执行，比如在 Linux 中用 <code>Ctrl+Z</code> 挂起进程；</li></ul><h3 id="1-4-进程的控制结构"><a href="#1-4-进程的控制结构" class="headerlink" title="1.4 进程的控制结构"></a>1.4 进程的控制结构</h3><p>在操作系统中，是用<strong>进程控制块</strong>（<em>process control block，PCB</em>）数据结构来描述进程的。</p><p><strong>PCB 是进程存在的唯一标识</strong>，这意味着一个进程的存在，必然会有一个 PCB，如果进程消失了，那么 PCB 也会随之消失。</p><h4 id="1-4-1-PCB包含的信息"><a href="#1-4-1-PCB包含的信息" class="headerlink" title="1.4.1 PCB包含的信息"></a>1.4.1 PCB包含的信息</h4><p><strong>进程描述信息：</strong></p><ul><li>进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符；</li><li>用户标识符：进程归属的用户，用户标识符主要为共享和保护服务；</li></ul><p><strong>进程控制和管理信息：</strong></p><ul><li>进程当前状态，如 new、ready、running、waiting 或 blocked 等；</li><li>进程优先级：进程抢占 CPU 时的优先级；</li></ul><p><strong>资源分配清单：</strong></p><ul><li>有关内存地址空间或虚拟地址空间的信息，所打开文件的列表和所使用的 I&#x2F;O 设备信息。</li></ul><p><strong>CPU 相关信息：</strong></p><ul><li>CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。</li></ul><h4 id="1-4-2-PCB如何组织"><a href="#1-4-2-PCB如何组织" class="headerlink" title="1.4.2 PCB如何组织"></a>1.4.2 PCB如何组织</h4><p>通常是通过<strong>链表</strong>的方式进行组织，把具有<strong>相同状态的进程链在一起，组成各种队列</strong>。比如：</p><ul><li>将所有处于就绪状态的进程链在一起，称为<strong>就绪队列</strong>；</li><li>把所有因等待某事件而处于等待状态的进程链在一起就组成各种<strong>阻塞队列</strong>；</li><li>另外，对于运行队列在单核 CPU 系统中则只有一个运行指针了，因为单核 CPU 在某个时间，只能运行一个程序。</li></ul><p>除了链接的组织方式，还有索引方式，它的工作原理：将同一状态的进程组织在一个索引表中，索引表项指向相应的 PCB，不同状态对应不同的索引表。</p><h3 id="1-5-进程的控制"><a href="#1-5-进程的控制" class="headerlink" title="1.5 进程的控制"></a>1.5 进程的控制</h3><p>进程的<strong>创建、终止、阻塞、唤醒</strong>的过程，这些过程也就是进程的控制。</p><p><strong>01 创建进程</strong></p><p>操作系统允许一个进程创建另一个进程，而且允许子进程继承父进程所拥有的资源。</p><p>创建进程的过程如下：</p><ul><li>申请一个空白的 PCB，并向 PCB 中填写一些控制和管理进程的信息，比如进程的唯一标识等；</li><li>为该进程分配运行时所必需的资源，比如内存资源；</li><li>将 PCB 插入到就绪队列，等待被调度运行；</li></ul><p><strong>02 终止进程</strong></p><p>进程可以有 3 种终止方式：正常结束、异常结束以及外界干预（信号 <code>kill</code> 掉）。</p><p>当子进程被终止时，其在父进程处继承的资源应当还给父进程。而当父进程被终止时，该父进程的子进程就变为孤儿进程，会被 1 号进程收养，并由 1 号进程对它们完成状态收集工作。</p><p>终止进程的过程如下：</p><ul><li>查找需要终止的进程的 PCB；</li><li>如果处于执行状态，则立即终止该进程的执行，然后将 CPU 资源分配给其他进程；</li><li>如果其还有子进程，则应将该进程的子进程交给 1 号进程接管；</li><li>将该进程所拥有的全部资源都归还给操作系统；</li><li>将其从 PCB 所在队列中删除；</li></ul><p><strong>03 阻塞进程</strong></p><p>当进程需要等待某一事件完成时，它可以调用阻塞语句把自己阻塞等待。而一旦被阻塞等待，它只能由另一个进程唤醒。</p><p>阻塞进程的过程如下：</p><ul><li>找到将要被阻塞进程标识号对应的 PCB；</li><li>如果该进程为运行状态，则保护其现场，将其状态转为阻塞状态，停止运行；</li><li>将该 PCB 插入到阻塞队列中去；</li></ul><p><strong>04 唤醒进程</strong></p><p>进程由「运行」转变为「阻塞」状态是由于进程必须等待某一事件的完成，所以处于阻塞状态的进程是绝对不可能叫醒自己的。</p><p>如果某进程正在等待 I&#x2F;O 事件，需由别的进程发消息给它，则只有当该进程所期待的事件出现时，才由发现者进程用唤醒语句叫醒它。</p><p>唤醒进程的过程如下：</p><ul><li>在该事件的阻塞队列中找到相应进程的 PCB；</li><li>将其从阻塞队列中移出，并置其状态为就绪状态；</li><li>把该 PCB 插入到就绪队列中，等待调度程序调度；</li></ul><p>进程的阻塞和唤醒是一对功能相反的语句，如果某个进程调用了阻塞语句，则必有一个与之对应的唤醒语句。</p><h3 id="1-6-进程的上下文切换"><a href="#1-6-进程的上下文切换" class="headerlink" title="1.6 进程的上下文切换"></a>1.6 进程的上下文切换</h3><p>各个进程之间是共享 CPU 资源的，在不同的时候进程之间需要切换，让不同的进程可以在 CPU 执行，那么这个<strong>一个进程切换到另一个进程运行，称为进程的上下文切换</strong>。</p><h4 id="1-6-1-CPU上下文切换"><a href="#1-6-1-CPU上下文切换" class="headerlink" title="1.6.1 CPU上下文切换"></a>1.6.1 CPU上下文切换</h4><p>操作系统需要事先帮 CPU 设置好 <strong>CPU 寄存器和程序计数器</strong>。</p><p>CPU 寄存器是 CPU 内部一个容量小，但是速度极快的内存（缓存）。程序计数器则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。</p><p>CPU 寄存器和程序计数是 CPU 在运行任何任务前，所必须依赖的环境，这些环境就叫做 <strong>CPU 上下文</strong>。</p><p>CPU 上下文切换就是先把前一个任务的 CPU 上下文（CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。</p><p>系统内核会存储保持下来的上下文信息，当此任务再次被分配给 CPU 运行时，CPU 会重新加载这些上下文，这样就能保证任务原来的状态不受影响，让任务看起来还是连续运行。</p><p>上面说到所谓的「任务」，主要包含进程、线程和中断。所以，可以根据任务的不同，把 CPU 上下文切换分成：<strong>进程上下文切换、线程上下文切换和中断上下文切换</strong>。</p><h4 id="1-6-2-进程上下文切换"><a href="#1-6-2-进程上下文切换" class="headerlink" title="1.6.2 进程上下文切换"></a>1.6.2 进程上下文切换</h4><p>进程是由内核管理和调度的，所以进程的切换只能发生在内核态。</p><p><strong>进程的上下文切换不仅包含了虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的资源。</strong></p><p>会把交换的信息保存在进程的 PCB，当要运行另外一个进程的时候，我们需要从这个进程的 PCB 取出上下文，然后恢复到 CPU 中，这使得这个进程可以继续执行</p><h4 id="1-6-3-发生场景"><a href="#1-6-3-发生场景" class="headerlink" title="1.6.3 发生场景"></a>1.6.3 发生场景</h4><ul><li>为了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，进程就从运行状态变为就绪状态，系统从就绪队列选择另外一个进程运行；</li><li>进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行；</li><li>当进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度；</li><li>当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行；</li><li>发生硬件中断时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序；</li></ul><h2 id="2-线程"><a href="#2-线程" class="headerlink" title="2.线程"></a>2.线程</h2><p>在早期的操作系统中都是以进程作为独立运行的基本单位，直到后面，计算机科学家们又提出了更小的能独立运行的基本单位，也就是<strong>线程。</strong></p><h3 id="2-1-什么是线程"><a href="#2-1-什么是线程" class="headerlink" title="2.1 什么是线程"></a>2.1 什么是线程</h3><p>**线程( *Thread* )**，线程之间可以并发运行且共享相同的地址空间。</p><p><strong>线程是进程当中的一条执行流程。</strong></p><p>同一个进程内多个线程之间可以共享代码段、数据段、打开的文件等资源，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相对独立的。</p><p><strong>线程的优缺点：</strong></p><ul><li>线程的优点：<ul><li>一个进程中可以同时存在多个线程；</li><li>各个线程之间可以并发执行；</li><li>各个线程之间可以共享地址空间和文件等资源；</li></ul></li><li>线程的缺点：<ul><li>当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃（这里是针对 C&#x2F;C++ 语言，Java语言中的线程奔溃不会造成进程崩溃</li></ul></li></ul><h3 id="2-2-线程与进程的比较"><a href="#2-2-线程与进程的比较" class="headerlink" title="2.2 线程与进程的比较"></a>2.2 线程与进程的比较</h3><p>线程与进程的比较如下：</p><ul><li>进程是资源（包括内存、打开的文件等）分配的单位，线程是 CPU 调度的单位；</li><li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li><li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</li><li>线程能减少并发执行的时间和空间开销；</li></ul><p>对于，线程相比进程能减少开销，体现在：</p><ul><li>线程的创建时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；</li><li>线程的终止时间比进程快，因为线程释放的资源相比进程少很多；</li><li>同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；</li><li>由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；</li></ul><p>不管是时间效率，还是空间效率线程比进程都要高。</p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="2-3-线程的上下文切换"><a href="#2-3-线程的上下文切换" class="headerlink" title="2.3 线程的上下文切换"></a>2.3 线程的上下文切换</h3><p>线程与进程最大的区别在于：<strong>线程是调度的基本单位，而进程则是资源拥有的基本单位</strong>。</p><p>操作系统的任务调度，实际上的调度对象是线程，而进程只是给线程提供了虚拟内存、全局变量等资源。</p><ul><li>当进程只有一个线程时，可以认为进程就等于线程；</li><li>当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源，这些资源在上下文切换时是不需要修改的；</li></ul><p>另外，线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的。</p><ul><li>当两个线程不是属于同一个进程，则切换的过程就跟进程上下文切换一样；</li><li><strong>当两个线程是属于同一个进程，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据</strong>；</li></ul><h3 id="2-4-线程的实现"><a href="#2-4-线程的实现" class="headerlink" title="2.4 线程的实现"></a>2.4 线程的实现</h3><p>主要有三种线程的实现方式：</p><ul><li><strong>用户线程（*User Thread*）</strong>：在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理；</li><li><strong>内核线程（*Kernel Thread*）</strong>：在内核中实现的线程，是由内核管理的线程；</li><li><strong>轻量级进程（*LightWeight Process*）</strong>：在内核中来支持用户线程；</li></ul><p>用户线程和内核线程对应关系：多对一、一对一、一对多</p><h4 id="2-4-1-用户线程概念以及优势缺陷"><a href="#2-4-1-用户线程概念以及优势缺陷" class="headerlink" title="2.4.1 用户线程概念以及优势缺陷"></a>2.4.1 用户线程概念以及优势缺陷</h4><p>用户线程是基于用户态的线程管理库来实现的，那么<strong>线程控制块（*Thread Control Block, TCB*）</strong> 也是在库里面来实现的，对于操作系统而言是看不到这个 TCB 的，它只能看到整个进程的 PCB。</p><p><strong>用户线程的整个线程管理和调度，操作系统是不直接参与的，而是由用户级线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等。</strong></p><p>类似多对一关系：</p><img src="/oranfish.github.io/posts/0/20-%E7%BA%BF%E7%A8%8BPCB-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB.jpg" alt="用户级线程模型" style="zoom: 33%;"><p>用户线程的<strong>优点</strong>：</p><ul><li>每个进程都需要有它私有的线程控制块（TCB）列表，用来跟踪记录它各个线程状态信息（PC、栈指针、寄存器），TCB 由用户级线程库函数来维护，可用于不支持线程技术的操作系统；</li><li>用户线程的切换也是由线程库函数来完成的，无需用户态与内核态的切换，所以速度特别快；</li></ul><p>用户线程的<strong>缺点</strong>：</p><ul><li>由于操作系统不参与线程的调度，如果一个线程发起了系统调用而阻塞，那进程所包含的用户线程都不能执行了。</li><li>当一个线程开始运行后，除非它主动地交出 CPU 的使用权，否则它所在的进程当中的其他线程无法运行，因为用户态的线程没法打断当前运行中的线程，它没有这个特权，只有操作系统才有，但是用户线程不是由操作系统管理的。</li><li>由于时间片分配给进程，故与其他进程比，在多线程执行时，每个线程得到的时间片较少，执行会比较慢；</li></ul><h4 id="2-4-2-内核线程概念以及优势缺陷"><a href="#2-4-2-内核线程概念以及优势缺陷" class="headerlink" title="2.4.2 内核线程概念以及优势缺陷"></a>2.4.2 内核线程概念以及优势缺陷</h4><p><strong>内核线程是由操作系统管理的，线程对应的 TCB 自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责。</strong></p><p>类似一对一关系：</p><img src="/oranfish.github.io/posts/0/21-%E7%BA%BF%E7%A8%8BPCB-%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB.jpg" alt="内核线程模型" style="zoom:33%;"><p>内核线程的<strong>优点</strong>：</p><ul><li>在一个进程当中，如果某个内核线程发起系统调用而被阻塞，并不会影响其他内核线程的运行；</li><li>分配给线程，多线程的进程获得更多的 CPU 运行时间；</li></ul><p>内核线程的<strong>缺点</strong>：</p><ul><li>在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息，如 PCB 和 TCB；</li><li>线程的创建、终止和切换都是通过系统调用的方式来进行，因此对于系统来说，系统开销比较大；</li></ul><h4 id="2-4-3-轻量级进程"><a href="#2-4-3-轻量级进程" class="headerlink" title="2.4.3 轻量级进程"></a>2.4.3 轻量级进程</h4><p><strong>轻量级进程（*Light-weight process，LWP*）是内核支持的用户线程，一个进程可有一个或多个 LWP，每个 LWP 是跟内核线程一对一映射的，也就是 LWP 都是由一个内核线程支持，而且 LWP 是由内核管理并像普通进程一样被调度</strong>。</p><p>在大多数系统中，<strong>LWP与普通进程的区别也在于它只有一个最小的执行上下文和调度程序所需的统计信息</strong>。一般来说，一个进程代表程序的一个实例，而 LWP 代表程序的执行线程，因为一个执行线程不像进程那样需要那么多状态信息，所以 LWP 也不带有这样的信息。</p><p>在 LWP 之上也是可以使用用户线程的，那么 LWP 与用户线程的对应关系就有三种：</p><ul><li><code>1 : 1</code>，即一个 LWP 对应 一个用户线程；</li><li><code>N : 1</code>，即一个 LWP 对应多个用户线程；</li><li><code>M : N</code>，即多个 LWP 对应多个用户线程；</li></ul><img src="/oranfish.github.io/posts/0/22-LWP.jpg" alt="LWP 模型" style="zoom:33%;"><p><strong>1 : 1 模式</strong></p><p>一个线程对应到一个 LWP 再对应到一个内核线程，如上图的进程 4，属于此模型。</p><ul><li>优点：实现并行，当一个 LWP 阻塞，不会影响其他 LWP；</li><li>缺点：每一个用户线程，就产生一个内核线程，创建线程的开销较大。</li></ul><p><strong>N : 1 模式</strong></p><p>多个用户线程对应一个 LWP 再对应一个内核线程，如上图的进程 2，线程管理是在用户空间完成的，此模式中用户的线程对操作系统不可见。</p><ul><li>优点：用户线程要开几个都没问题，且上下文切换发生用户空间，切换的效率较高；</li><li>缺点：一个用户线程如果阻塞了，则整个进程都将会阻塞，另外在多核 CPU 中，是没办法充分利用 CPU 的。</li></ul><p><strong>M : N 模式</strong></p><p>根据前面的两个模型混搭一起，就形成 <code>M:N</code> 模型，该模型提供了两级控制，首先多个用户线程对应到多个 LWP，LWP 再一一对应到内核线程，如上图的进程 3。</p><ul><li>优点：综合了前两种优点，大部分的线程上下文发生在用户空间，且多个线程又可以充分利用多核 CPU 的资源。</li></ul><p><strong>组合模式</strong></p><p>如上图的进程 5，此进程结合 <code>1:1</code> 模型和 <code>M:N</code> 模型。开发人员可以针对不同的应用特点调节内核线程的数目来达到物理并行性和逻辑并行性的最佳方案。</p><h2 id="3-调度"><a href="#3-调度" class="headerlink" title="3.调度"></a>3.调度</h2><p>选择一个进程运行这一功能是在操作系统中完成的，通常称为<strong>调度程序</strong>（<em>scheduler</em>）。</p><h3 id="3-1-调度时机"><a href="#3-1-调度时机" class="headerlink" title="3.1 调度时机"></a>3.1 调度时机</h3><p>在进程的生命周期中，当进程从一个运行状态到另外一状态变化的时候，其实会触发一次调度。</p><p>比如，以下状态的变化都会触发操作系统的调度：</p><ul><li><em>从就绪态 -&gt; 运行态</em>：当进程被创建时，会进入到就绪队列，操作系统会从就绪队列选择一个进程运行；</li><li><em>从运行态 -&gt; 阻塞态</em>：当进程发生 I&#x2F;O 事件而阻塞时，操作系统必须选择另外一个进程运行；</li><li><em>从运行态 -&gt; 结束态</em>：当进程退出结束后，操作系统得从就绪队列选择另外一个进程运行；</li></ul><p>这些状态变化的时候，操作系统需要考虑是否要让新的进程给 CPU 运行，或者是否让当前进程从 CPU 上退出来而换另一个进程运行。</p><p>如果硬件时钟提供某个频率的周期性中断，那么可以根据如何处理时钟中断 ，把调度算法分为两类：</p><ul><li><strong>非抢占式调度算法</strong>挑选一个进程，然后让该进程运行直到被阻塞，或者直到该进程退出，才会调用另外一个进程，也就是说不会理时钟中断这个事情。</li><li><strong>抢占式调度算法</strong>挑选一个进程，然后让该进程只运行某段时间，如果在该时段结束时，该进程仍然在运行时，则会把它挂起，接着调度程序从就绪队列挑选另外一个进程。这种抢占式调度处理，需要在时间间隔的末端发生<strong>时钟中断</strong>，以便把 CPU 控制返回给调度程序进行调度，也就是常说的<strong>时间片机制</strong>。</li></ul><h3 id="3-2-调度原则"><a href="#3-2-调度原则" class="headerlink" title="3.2 调度原则"></a>3.2 调度原则</h3><p><em>原则一</em>：如果运行的程序，发生了 I&#x2F;O 事件的请求，那 CPU 使用率必然会很低，因为此时进程在阻塞等待硬盘的数据返回。这样的过程，势必会造成 CPU 突然的空闲。所以，<strong>为了提高 CPU 利用率，在这种发送 I&#x2F;O 事件致使 CPU 空闲的情况下，调度程序需要从就绪队列中选择一个进程来运行。</strong></p><p><em>原则二</em>：有的程序执行某个任务花费的时间会比较长，如果这个程序一直占用着 CPU，会造成系统吞吐量（CPU 在单位时间内完成的进程数量）的降低。所以，<strong>要提高系统的吞吐率，调度程序要权衡长任务和短任务进程的运行完成数量。</strong></p><p><em>原则三</em>：从进程开始到结束的过程中，实际上是包含两个时间，分别是进程运行时间和进程等待时间，这两个时间总和就称为周转时间。进程的周转时间越小越好，<strong>如果进程的等待时间很长而运行时间很短，那周转时间就很长，这不是我们所期望的，调度程序应该避免这种情况发生。</strong></p><p><em>原则四</em>：处于就绪队列的进程，也不能等太久，当然希望这个等待的时间越短越好，这样可以使得进程更快的在 CPU 中执行。所以，<strong>就绪队列中进程的等待时间也是调度程序所需要考虑的原则。</strong></p><p><em>原则五</em>：对于鼠标、键盘这种交互式比较强的应用，我们当然希望它的响应时间越快越好，否则就会影响用户体验了。所以，<strong>对于交互式比较强的应用，响应时间也是调度程序需要考虑的原则。</strong></p><p>针对上面的五种调度原则，总结成如下：</p><ul><li><strong>CPU 利用率</strong>：调度程序应确保 CPU 是始终匆忙的状态，这可提高 CPU 的利用率；</li><li><strong>系统吞吐量</strong>：吞吐量表示的是单位时间内 CPU 完成进程的数量，长作业的进程会占用较长的 CPU 资源，因此会降低吞吐量，相反，短作业的进程会提升系统吞吐量；</li><li><strong>周转时间</strong>：周转时间是进程运行+阻塞时间+等待时间的总和，一个进程的周转时间越小越好；</li><li><strong>等待时间</strong>：这个等待时间不是阻塞状态的时间，而是进程处于就绪队列的时间，等待的时间越长，用户越不满意；</li><li><strong>响应时间</strong>：用户提交请求到系统第一次产生响应所花费的时间，在交互式系统中，响应时间是衡量调度算法好坏的主要标准。</li></ul><h3 id="3-3-调度算法"><a href="#3-3-调度算法" class="headerlink" title="3.3 调度算法"></a>3.3 调度算法</h3><p>先来先服务FCFS、最短作业优先SJF、高响应比优先HRRN、时间片轮转RR、最高优先级调度HPF、多级反馈队列调度。具体详看另文。</p><h2 id="4-一个进程最多可以创建多少线程"><a href="#4-一个进程最多可以创建多少线程" class="headerlink" title="4.一个进程最多可以创建多少线程"></a>4.一个进程最多可以创建多少线程</h2><p>这个问题跟两个东西有关系：</p><ul><li><strong>进程的虚拟内存空间上限</strong>，因为创建一个线程，操作系统需要为其分配一个栈空间，如果线程数量越多，所需的栈空间就要越大，那么虚拟内存就会占用的越多。</li><li><strong>系统参数限制</strong>，虽然 Linux 并没有内核参数来控制单个进程创建的最大线程个数，但是有系统级别的参数来控制整个系统的最大线程个数。</li></ul><p>区别于不同系统：</p><ul><li>32 位系统，用户态的虚拟空间只有 3G，如果创建线程时分配的栈空间是 10M，那么一个进程最多只能创建 300 个左右的线程。</li><li>64 位系统，用户态的虚拟空间大到有 128T，理论上不会受虚拟内存大小的限制，而会受系统的参数或性能限制。</li></ul><h2 id="5-线程崩溃了进程会崩溃吗"><a href="#5-线程崩溃了进程会崩溃吗" class="headerlink" title="5.线程崩溃了进程会崩溃吗"></a>5.线程崩溃了进程会崩溃吗</h2><p><strong>为什么 C&#x2F;C++ 语言里，线程崩溃后，进程也会崩溃，而 Java 语言里却不会呢？</strong></p><h3 id="5-1-线程崩溃进程一定崩溃吗"><a href="#5-1-线程崩溃进程一定崩溃吗" class="headerlink" title="5.1 线程崩溃进程一定崩溃吗"></a>5.1 线程崩溃进程一定崩溃吗</h3><p>一般来说如果线程是因为非法访问内存引起的崩溃，那么进程肯定会崩溃，为什么系统要让进程崩溃呢，这主要是因为在进程中，<strong>各个线程的地址空间是共享的</strong>，既然是共享，那么某个线程对地址的非法访问就会导致内存的不确定性，进而可能会影响到其他线程，这种操作是危险的，操作系统会认为这很可能导致一系列严重的后果，于是干脆让整个进程崩溃</p><p>线程共享代码段，数据段，地址空间，文件非法访问内存有以下几种情况，我们以 C 语言举例来看看。</p><p>1.、针对只读内存写入数据</p><div class="language-c"><button title="Copy code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">   </span><span style="color: #89DDFF; font-style: italic">#include</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">stdio.h</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #89DDFF; font-style: italic">#include</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">stdlib.h</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">   </span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">char</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178">s </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">hello world</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 向只读内存写入数据，崩溃</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #BABED8">s</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">H</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span></span><span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>2、访问了进程没有权限访问的地址空间（比如内核空间）</p><div class="language-c"><button title="Copy code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">   </span><span style="color: #89DDFF; font-style: italic">#include</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">stdio.h</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #89DDFF; font-style: italic">#include</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">stdlib.h</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">int</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178">p </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*)</span><span style="color: #F78C6C">0xC0000fff</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 针对进程的内核空间写入数据，崩溃</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">*</span><span style="color: #F07178">p </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span></span><span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>在 32 位虚拟地址空间中，p 指向的是内核空间，显然不具有写入权限，所以上述赋值操作会导致崩溃</p><p>3、访问了不存在的内存，比如：</p><div class="language-c"><button title="Copy code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">   </span><span style="color: #89DDFF; font-style: italic">#include</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">stdio.h</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #89DDFF; font-style: italic">#include</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">stdlib.h</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">   </span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">int</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178">a </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">NULL;</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">*</span><span style="color: #F07178">a </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178">     </span></span><span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>以上错误都是访问内存时的错误，所以统一会报 Segment Fault 错误（即段错误），这些都会导致进程崩溃</p><h3 id="5-2-进程是如何崩溃的"><a href="#5-2-进程是如何崩溃的" class="headerlink" title="5.2 进程是如何崩溃的"></a>5.2 进程是如何崩溃的</h3><p>那么线程崩溃后，进程是如何崩溃的呢，这背后的机制到底是怎样的，答案是<strong>信号</strong>。</p><p>大家想想要干掉一个正在运行的进程是不是经常用 kill -9 pid 这样的命令，这里的 kill 其实就是给指定 pid 发送终止信号的意思，其中的 9 就是信号。</p><p>当然了发 kill 信号必须具有一定的权限，否则任意进程都可以通过发信号来终止其他进程，那显然是不合理的，实际上 kill 执行的是系统调用，将控制权转移给了内核（操作系统），由内核来给指定的进程发送信号</p><p>那么发个信号进程怎么就崩溃了呢，这背后的原理到底是怎样的？</p><p>其背后的机制如下</p><ol><li>CPU 执行正常的进程指令</li><li>调用 kill 系统调用向进程发送信号</li><li>进程收到操作系统发的信号，CPU 暂停当前程序运行，并将控制权转交给操作系统</li><li>调用 kill 系统调用向进程发送信号（假设为 11，即 SIGSEGV，一般非法访问内存报的都是这个错误）</li><li><strong>操作系统根据情况执行相应的信号处理程序（函数），一般执行完信号处理程序逻辑后会让进程退出</strong></li></ol><h3 id="5-3-为什么线程崩溃不会导致JVM进程崩溃"><a href="#5-3-为什么线程崩溃不会导致JVM进程崩溃" class="headerlink" title="5.3 为什么线程崩溃不会导致JVM进程崩溃"></a>5.3 为什么线程崩溃不会导致JVM进程崩溃</h3><p>在 Java 中有哪些是常见的由于非法访问内存而产生的 Exception 或 error 呢，常见的是大家熟悉的 StackoverflowError 或者 NPE（NullPointerException）,NPE 我们都了解，属于是访问了不存在的内存。</p><p>但为什么栈溢出（Stackoverflow）也属于非法访问内存呢，这得简单聊一下进程的虚拟空间，也就是前面提到的共享地址空间。</p><p>现代操作系统为了保护进程之间不受影响，所以使用了虚拟地址空间来隔离进程，进程的寻址都是针对虚拟地址，每个进程的虚拟空间都是一样的，而线程会共用进程的地址空间。</p><p>进程每调用一个函数，都会分配一个栈桢，然后在栈桢里会分配函数里定义的各种局部变量。</p><p>假设现在调用了一个无限递归的函数，那就会持续分配栈帧，但 stack 的大小是有限的（Linux 中默认为 8 M，可以通过 ulimit -a 查看），如果无限递归很快栈就会分配完了，此时再调用函数试图分配超出栈的大小内存，就会发生段错误，也就是 stackoverflowError。</p><p>JVM 为什么不会崩溃呢？其实就是<strong>因为 JVM 自定义了自己的信号处理函数，拦截了 SIGSEGV 信号，针对这两者不让它们崩溃</strong>。</p><h3 id="5-4-总结"><a href="#5-4-总结" class="headerlink" title="5.4 总结"></a>5.4 总结</h3><p>为什么发生了 StackoverflowError 和 NPE 这两个非法访问内存的错误，JVM 却没有崩溃。</p><p><strong>原因其实就是虚拟机内部定义了信号处理函数，而在信号处理函数中对这两者做了额外的处理以让 JVM 不崩溃，另一方面也可以看出如果 JVM 不对信号做额外的处理，最后会自己退出并产生 crash 文件 hs_err_pid_xxx.log（可以通过 -XX:ErrorFile&#x3D;&#x2F;var&#x2F;*log*&#x2F;hs_err.log 这样的方式指定），这个文件记录了虚拟机崩溃的重要原因</strong>。</p><p>所以也可以说，虚拟机是否崩溃只要看它是否会产生此崩溃日志文件</p><p>正常情况下，操作系统为了保证系统安全，所以针对非法内存访问会发送一个 SIGSEGV 信号，而操作系统一般会调用默认的信号处理函数（一般会让相关的进程崩溃）。</p><p>但如果进程觉得”罪不致死”，那么它也可以选择自定义一个信号处理函数，这样的话它就可以做一些自定义的逻辑，比如记录 crash 信息等有意义的事。</p><p>回过头来看为什么虚拟机会针对 StackoverflowError 和 NullPointerException 做额外处理让线程恢复呢，针对 stackoverflow 其实它采用了一种栈回溯的方法保证线程可以一直执行下去，而捕获空指针错误主要是这个错误实在太普遍了。</p><p>为了这一个很常见的错误而让 JVM 崩溃那线上的 JVM 要宕机多少次，所以出于工程健壮性的考虑，与其直接让 JVM 崩溃倒不如让线程起死回生，并且将这两个错误&#x2F;异常抛给用户来处理。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-死锁</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-死锁的概念"><a href="#1-死锁的概念" class="headerlink" title="1.死锁的概念"></a>1.死锁的概念</h2><p>在多线程编程中，我们为了防止多线程竞争共享资源而导致数据错乱，都会在操作共享资源之前加上互斥锁，只有成功获得到锁的线程，才能操作共享资源，获取不到锁的线程就只能等待，直到锁被释放。</p><p>那么，当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成<strong>两个线程都在等待对方释放锁</strong>，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了<strong>死锁</strong>。</p><p>死锁只有<strong>同时满足</strong>以下四个条件才会发生：</p><ul><li>互斥条件；</li><li>持有并等待条件；</li><li>不可剥夺条件；</li><li>环路等待条件；</li></ul><h3 id="1-1-互斥条件"><a href="#1-1-互斥条件" class="headerlink" title="1.1 互斥条件"></a>1.1 互斥条件</h3><p>互斥条件是指<strong>多个线程不能同时使用同一个资源</strong>。</p><p>如果线程 A 已经持有的资源，不能再同时被线程 B 持有，如果线程 B 请求获取线程 A 已经占用的资源，那线程 B 只能等待，直到线程 A 释放了资源。</p><h3 id="1-2-持有并等待条件"><a href="#1-2-持有并等待条件" class="headerlink" title="1.2 持有并等待条件"></a>1.2 持有并等待条件</h3><p>持有并等待条件是指，当线程 A 已经持有了资源 1，又想申请资源 2，而资源 2 已经被线程 C 持有了，所以线程 A 就会处于等待状态，但是<strong>线程 A 在等待资源 2 的同时并不会释放自己已经持有的资源 1</strong>。</p><h3 id="1-3-不可剥夺条件"><a href="#1-3-不可剥夺条件" class="headerlink" title="1.3 不可剥夺条件"></a>1.3 不可剥夺条件</h3><p>不可剥夺条件是指，当线程已经持有了资源 ，<strong>在自己使用完之前不能被其他线程获取</strong>，线程 B 如果也想使用此资源，则只能在线程 A 使用完并释放后才能获取。</p><h3 id="1-4-环路等待条件"><a href="#1-4-环路等待条件" class="headerlink" title="1.4 环路等待条件"></a>1.4 环路等待条件</h3><p>环路等待条件指的是，在死锁发生的时候，<strong>两个线程获取资源的顺序构成了环形链</strong>。</p><p>比如，线程 A 已经持有资源 2，而想请求资源 1， 线程 B 已经获取了资源 1，而想请求资源 2，这就形成资源请求等待的环形图。</p><h2 id="2-模拟死锁问题的产生"><a href="#2-模拟死锁问题的产生" class="headerlink" title="2.模拟死锁问题的产生"></a>2.模拟死锁问题的产生</h2><p>我们用代码来模拟死锁问题的产生。</p><p>首先，我们先创建 2 个线程，分别为线程 A 和 线程 B，然后有两个互斥锁，分别是 mutex_A 和 mutex_B，代码如下：</p><div class="language-c"><button title="Copy code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">pthread_mutex_t</span><span style="color: #BABED8"> mutex_A </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> PTHREAD_MUTEX_INITIALIZER</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #C792EA">pthread_mutex_t</span><span style="color: #BABED8"> mutex_B </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> PTHREAD_MUTEX_INITIALIZER</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">()</span></span><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">pthread_t</span><span style="color: #F07178"> tidA</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> tidB</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//创建两个线程</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_create</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">tidA</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">NULL,</span><span style="color: #F07178"> threadA_proc</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">NULL);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_create</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">tidB</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">NULL,</span><span style="color: #F07178"> threadB_proc</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">NULL);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_join</span><span style="color: #89DDFF">(</span><span style="color: #F07178">tidA</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">NULL);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_join</span><span style="color: #89DDFF">(</span><span style="color: #F07178">tidB</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">NULL);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">exit</span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>接下来，我们看下线程 A 函数做了什么。</p><div class="language-c"><button title="Copy code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//线程函数 A</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #82AAFF">threadA_proc</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread A waiting get ResourceA </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_lock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_A</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread A got ResourceA </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">sleep</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread A waiting get ResourceB </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_lock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_B</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread A got ResourceB </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_unlock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_B</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_unlock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_A</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">void</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*)</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>可以看到，线程 A 函数的过程：</p><ul><li>先获取互斥锁 A，然后睡眠 1 秒；</li><li>再获取互斥锁 B，然后释放互斥锁 B；</li><li>最后释放互斥锁 A；</li></ul><div class="language-c"><button title="Copy code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//线程函数 B</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #82AAFF">threadB_proc</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread B waiting get ResourceB </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_lock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_B</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread B got ResourceB </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">sleep</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread B waiting  get ResourceA </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_lock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_A</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread B got ResourceA </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_unlock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_A</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_unlock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_B</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">void</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*)</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>可以看到，线程 B 函数的过程：</p><ul><li>先获取互斥锁 B，然后睡眠 1 秒；</li><li>再获取互斥锁 A，然后释放互斥锁 A；</li><li>最后释放互斥锁 B；</li></ul><p>然后，我们运行这个程序，运行结果如下：</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">B</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">waiting</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">get</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceB</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">B</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">got</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceB</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">A</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">waiting</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">get</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceA</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">A</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">got</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceA</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">B</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">waiting</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">get</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceA</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">A</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">waiting</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">get</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceB</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">//</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">阻塞中。。。</span></span></code></pre></div><p>可以看到线程 B 在等待互斥锁 A 的释放，线程 A 在等待互斥锁 B 的释放，双方都在等待对方资源的释放，很明显，产生了死锁问题。</p><h2 id="3-利用工具排查死锁问题"><a href="#3-利用工具排查死锁问题" class="headerlink" title="3.利用工具排查死锁问题"></a>3.利用工具排查死锁问题</h2><p>如果你想排查你的 Java 程序是否死锁，则可以使用 <code>jstack</code> 工具，它是 jdk 自带的线程堆栈分析工具。</p><p>死锁代码例子是 C 写的，在 Linux 下，我们可以使用 <code>pstack</code> + <code>gdb</code> 工具来定位死锁问题。</p><p>pstack 命令可以显示每个线程的栈跟踪信息（函数调用过程），它的使用方式也很简单，只需要 <code>pstack &lt;pid&gt;</code> 就可以了。</p><p>那么，在定位死锁问题时，我们可以多次执行 pstack 命令查看线程的函数调用过程，多次对比结果，确认哪几个线程一直没有变化，且是因为在等待锁，那么大概率是由于死锁问题导致的。</p><p>我用 pstack 输出了我前面模拟死锁问题的进程的所有线程的情况，我多次执行命令后，其结果都一样，如下：</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">pstack</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">87746</span></span><span class="line"><span style="color: #FFCB6B">Thread</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #BABED8"> (Thread </span><span style="color: #F78C6C">0x7f60a610a700</span><span style="color: #BABED8"> (LWP </span><span style="color: #F78C6C">87747</span><span style="color: #BABED8">)):</span></span><span class="line"><span style="color: #676E95; font-style: italic">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#3  0x0000000000400725 in threadA_proc ()</span></span><span class="line"><span style="color: #676E95; font-style: italic">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span></span><span class="line"><span style="color: #FFCB6B">Thread</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> (Thread </span><span style="color: #F78C6C">0x7f60a5709700</span><span style="color: #BABED8"> (LWP </span><span style="color: #F78C6C">87748</span><span style="color: #BABED8">)):</span></span><span class="line"><span style="color: #676E95; font-style: italic">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#3  0x0000000000400792 in threadB_proc ()</span></span><span class="line"><span style="color: #676E95; font-style: italic">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span></span><span class="line"><span style="color: #FFCB6B">Thread</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8"> (Thread </span><span style="color: #F78C6C">0x7f60a610c700</span><span style="color: #BABED8"> (LWP </span><span style="color: #F78C6C">87746</span><span style="color: #BABED8">)):</span></span><span class="line"><span style="color: #676E95; font-style: italic">#0  0x0000003720e080e5 in pthread_join () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#1  0x0000000000400806 in main ()</span></span><span class="line"></span><span class="line"><span style="color: #82AAFF">....</span></span><span class="line"></span><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">pstack</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">87746</span></span><span class="line"><span style="color: #FFCB6B">Thread</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #BABED8"> (Thread </span><span style="color: #F78C6C">0x7f60a610a700</span><span style="color: #BABED8"> (LWP </span><span style="color: #F78C6C">87747</span><span style="color: #BABED8">)):</span></span><span class="line"><span style="color: #676E95; font-style: italic">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#3  0x0000000000400725 in threadA_proc ()</span></span><span class="line"><span style="color: #676E95; font-style: italic">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span></span><span class="line"><span style="color: #FFCB6B">Thread</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> (Thread </span><span style="color: #F78C6C">0x7f60a5709700</span><span style="color: #BABED8"> (LWP </span><span style="color: #F78C6C">87748</span><span style="color: #BABED8">)):</span></span><span class="line"><span style="color: #676E95; font-style: italic">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#3  0x0000000000400792 in threadB_proc ()</span></span><span class="line"><span style="color: #676E95; font-style: italic">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span></span><span class="line"><span style="color: #FFCB6B">Thread</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8"> (Thread </span><span style="color: #F78C6C">0x7f60a610c700</span><span style="color: #BABED8"> (LWP </span><span style="color: #F78C6C">87746</span><span style="color: #BABED8">)):</span></span><span class="line"><span style="color: #676E95; font-style: italic">#0  0x0000003720e080e5 in pthread_join () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#1  0x0000000000400806 in main ()</span></span></code></pre></div><p>可以看到，Thread 2 和 Thread 3 一直阻塞获取锁（<em>pthread_mutex_lock</em>）的过程，而且 pstack 多次输出信息都没有变化，那么可能大概率发生了死锁。</p><p>但是，还不能够确认这两个线程是在互相等待对方的锁的释放，因为我们看不到它们是等在哪个锁对象，于是我们可以使用 gdb 工具进一步确认。</p><p>整个 gdb 调试过程，如下：</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">//</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">gdb</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">命令</span></span><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">gdb</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-p</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">87746</span></span><span class="line"></span><span class="line"><span style="color: #FFCB6B">//</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">打印所有的线程信息</span></span><span class="line"><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">gdb</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> info thread</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #FFCB6B">3</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Thread</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0x7f60a610a700</span><span style="color: #BABED8"> (LWP </span><span style="color: #F78C6C">87747</span><span style="color: #BABED8">)  0x0000003720e0da1d </span><span style="color: #89DDFF; font-style: italic">in</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">__lll_lock_wait</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #BABED8">  2 Thread 0x7f60a5709700 </span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">LWP</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">87748</span><span style="color: #89DDFF">)</span><span style="color: #BABED8">  0x0000003720e0da1d </span><span style="color: #89DDFF; font-style: italic">in</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">__lll_lock_wait</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #BABED8">* 1 Thread 0x7f60a610c700 </span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">LWP</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">87746</span><span style="color: #89DDFF">)</span><span style="color: #BABED8">  0x0000003720e080e5 </span><span style="color: #89DDFF; font-style: italic">in</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">pthread_join</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #BABED8">//最左边的 * 表示 gdb 锁定的线程，切换到第二个线程去查看</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">// 切换到第2个线程</span></span><span class="line"><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">gdb</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> thread 2</span></span><span class="line"><span style="color: #89DDFF">[</span><span style="color: #BABED8">Switching to thread </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> (Thread </span><span style="color: #F78C6C">0x7f60a5709700</span><span style="color: #BABED8"> (LWP </span><span style="color: #F78C6C">87748</span><span style="color: #BABED8">))</span><span style="color: #89DDFF">]</span><span style="color: #BABED8">#0  0x0000003720e0da1d </span><span style="color: #89DDFF; font-style: italic">in</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">__lll_lock_wait</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> from /lib64/libpthread.so.0 </span></span><span class="line"></span><span class="line"><span style="color: #BABED8">// bt 可以打印函数堆栈，却无法看到函数参数，跟 pstack 命令一样 </span></span><span class="line"><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">gdb</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> bt</span></span><span class="line"><span style="color: #676E95; font-style: italic">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#3  0x0000000000400792 in threadB_proc (data=0x0) at dead_lock.c:25</span></span><span class="line"><span style="color: #676E95; font-style: italic">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span></span><span class="line"><span style="color: #676E95; font-style: italic">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span></span><span class="line"></span><span class="line"><span style="color: #FFCB6B">//</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">打印第三帧信息，每次函数调用都会有压栈的过程，而</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">frame</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">则记录栈中的帧信息</span></span><span class="line"><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">gdb</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> frame 3</span></span><span class="line"><span style="color: #676E95; font-style: italic">#3  0x0000000000400792 in threadB_proc (data=0x0) at dead_lock.c:25</span></span><span class="line"><span style="color: #FFCB6B">27</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">printf</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">&quot;thread B waiting get ResourceA \n&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #FFCB6B">28</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">pthread_mutex_lock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #FFCB6B">mutex_A</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #FFCB6B">//</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">打印mutex_A的值</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">,</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">__owner表示gdb中标示线程的值，即LWP</span></span><span class="line"><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">gdb</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> p mutex_A</span></span><span class="line"><span style="color: #BABED8; font-style: italic">$1</span><span style="color: #BABED8"> = </span><span style="color: #89DDFF">&#123;</span><span style="color: #FFCB6B">__data</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">&#123;__lock</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__count</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__owner</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">87747</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__nusers</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__kind</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__spins</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__list</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">&#123;__prev</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0x0</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__next</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0x0</span><span style="color: #C3E88D">&#125;&#125;,</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #FFCB6B">__size</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">\002\000\000\000\000\000\000\000\303V\001\000\001</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">\000</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">repeats</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">26</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">time</span><span style="color: #BABED8">s</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__align</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #C3E88D">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #FFCB6B">//</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">打印mutex_B的值</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">,</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">__owner表示gdb中标示线程的值，即LWP</span></span><span class="line"><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">gdb</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> p mutex_B</span></span><span class="line"><span style="color: #BABED8; font-style: italic">$2</span><span style="color: #BABED8"> = </span><span style="color: #89DDFF">&#123;</span><span style="color: #FFCB6B">__data</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">&#123;__lock</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__count</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__owner</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">87748</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__nusers</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__kind</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__spins</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__list</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">&#123;__prev</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0x0</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__next</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0x0</span><span style="color: #C3E88D">&#125;&#125;,</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #FFCB6B">__size</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">\002\000\000\000\000\000\000\000\304V\001\000\001</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">\000</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">repeats</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">26</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">time</span><span style="color: #BABED8">s</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">__align</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #C3E88D">&#125;</span><span style="color: #BABED8">  </span></span></code></pre></div><p>我来解释下，上面的调试过程：</p><ol><li>通过 <code>info thread</code> 打印了所有的线程信息，可以看到有 3 个线程，一个是主线程（LWP 87746），另外两个都是我们自己创建的线程（LWP 87747 和 87748）；</li><li>通过 <code>thread 2</code>，将切换到第 2 个线程（LWP 87748）；</li><li>通过 <code>bt</code>，打印线程的调用栈信息，可以看到有 threadB_proc 函数，说明这个是线程 B 函数，也就说 LWP 87748 是线程 B;</li><li>通过 <code>frame 3</code>，打印调用栈中的第三个帧的信息，可以看到线程 B 函数，在获取互斥锁 A 的时候阻塞了；</li><li>通过 <code>p mutex_A</code>，打印互斥锁 A 对象信息，可以看到它被 LWP 为 87747（线程 A） 的线程持有着；</li><li>通过 <code>p mutex_B</code>，打印互斥锁 B 对象信息，可以看到他被 LWP 为 87748 （线程 B） 的线程持有着；</li></ol><p>因为线程 B 在等待线程 A 所持有的 mutex_A, 而同时线程 A 又在等待线程 B 所拥有的mutex_B, 所以可以断定该程序发生了死锁。</p><h2 id="4-避免死锁问题的发生"><a href="#4-避免死锁问题的发生" class="headerlink" title="4.避免死锁问题的发生"></a>4.避免死锁问题的发生</h2><p>前面我们提到，产生死锁的四个必要条件是：互斥条件、持有并等待条件、不可剥夺条件、环路等待条件。</p><p>那么避免死锁问题就只需要破环其中一个条件就可以，最常见的并且可行的就是<strong>使用资源有序分配法，来破环环路等待条件</strong>。</p><p>那什么是资源有序分配法呢？</p><p>线程 A 和 线程 B 获取资源的顺序要一样，当线程 A 是先尝试获取资源 A，然后尝试获取资源 B 的时候，线程 B 同样也是先尝试获取资源 A，然后尝试获取资源 B。也就是说，线程 A 和 线程 B 总是以相同的顺序申请自己想要的资源。</p><p>我们使用资源有序分配法的方式来修改前面发生死锁的代码，我们可以不改动线程 A 的代码。</p><p>我们先要清楚线程 A 获取资源的顺序，它是先获取互斥锁 A，然后获取互斥锁 B。</p><p>所以我们只需将线程 B 改成以相同顺序的获取资源，就可以打破死锁了。</p><p>线程 B 函数改进后的代码如下：</p><div class="language-c"><button title="Copy code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//线程 B 函数，同线程 A 一样，先获取互斥锁 A，然后获取互斥锁 B</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #82AAFF">threadB_proc</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread B waiting get ResourceA </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_lock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_A</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread B got ResourceA </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">sleep</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread B waiting  get ResourceB </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_lock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_B</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">thread B got ResourceB </span><span style="color: #BABED8">\n</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_unlock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_B</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">pthread_mutex_unlock</span><span style="color: #89DDFF">(&amp;</span><span style="color: #F07178">mutex_A</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">void</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*)</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>执行结果如下，可以看，没有发生死锁。</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">B</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">waiting</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">get</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceA</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">B</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">got</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceA</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">A</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">waiting</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">get</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceA</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">B</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">waiting</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">get</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceB</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">B</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">got</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceB</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">A</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">got</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceA</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">A</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">waiting</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">get</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceB</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">thread</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">A</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">got</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ResourceB</span></span><span class="line"><span style="color: #82AAFF">exit</span></span></code></pre></div><p>简单来说，死锁问题的产生是由两个或者以上线程并行执行的时候，争夺资源而互相等待造成的。</p><p>死锁只有同时满足互斥、持有并等待、不可剥夺、环路等待这四个条件的时候才会发生。</p><p>所以要避免死锁问题，就是要破坏其中一个条件即可，最常用的方法就是使用资源有序分配法来破坏环路等待条件。</p><h2 id="5-互斥锁与自选锁"><a href="#5-互斥锁与自选锁" class="headerlink" title="5.互斥锁与自选锁"></a>5.互斥锁与自选锁</h2><p>多线程访问共享资源的时候，避免不了资源竞争而导致数据错乱的问题，所以我们通常为了解决这一问题，都会在访问共享资源之前加锁。为了选择合适的锁，我们不仅需要清楚知道加锁的成本开销有多大，还需要分析业务场景中访问的共享资源的方式，再来还要考虑并发访问共享资源时的冲突概率。</p><p>最底层的两种就是会「互斥锁和自旋锁」，有很多高级的锁都是基于它们实现的，你可以认为它们是各种锁的地基，所以我们必须清楚它俩之间的区别和应用。</p><p>加锁的目的就是保证共享资源在任意时间里，只有一个线程访问，这样就可以避免多线程导致共享数据错乱的问题。</p><p>当已经有一个线程加锁后，其他线程加锁则就会失败，互斥锁和自旋锁对于加锁失败后的处理方式是不一样的：</p><ul><li><strong>互斥锁</strong>加锁失败后，线程会<strong>释放 CPU</strong> ，给其他线程；</li><li><strong>自旋锁</strong>加锁失败后，线程会<strong>忙等待</strong>，直到它拿到锁；</li></ul><p>互斥锁是一种「独占锁」，比如当线程 A 加锁成功后，此时互斥锁已经被线程 A 独占了，只要线程 A 没有释放手中的锁，线程 B 加锁就会失败，于是就会释放 CPU 让给其他线程，<strong>既然线程 B 释放掉了 CPU，自然线程 B 加锁的代码就会被阻塞</strong>。</p><p><strong>对于互斥锁加锁失败而阻塞的现象，是由操作系统内核实现的</strong>。当加锁失败时，内核会将线程置为「睡眠」状态，等到锁被释放后，内核会在合适的时机唤醒线程，当这个线程成功获取到锁后，于是就可以继续执行。如下图：</p><img src="/oranfish.github.io/posts/0/%E4%BA%92%E6%96%A5%E9%94%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="img" style="zoom:50%;"><p>所以，互斥锁加锁失败时，会从用户态陷入到内核态，让内核帮我们切换线程，虽然简化了使用锁的难度，但是存在一定的性能开销成本。</p><p>那这个开销成本是什么呢？会有<strong>两次线程上下文切换的成本</strong>：</p><ul><li>当线程加锁失败时，内核会把线程的状态从「运行」状态设置为「睡眠」状态，然后把 CPU 切换给其他线程运行；</li><li>接着，当锁被释放时，之前「睡眠」状态的线程会变为「就绪」状态，然后内核会在合适的时间，把 CPU 切换给该线程运行。</li></ul><p>线程的上下文切换的是什么？当两个线程是属于同一个进程，<strong>因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据。</strong></p><p>上下切换的耗时有大佬统计过，大概在几十纳秒到几微秒之间，如果你锁住的代码执行时间比较短，那可能上下文切换的时间都比你锁住的代码执行时间还要长。</p><p>所以，<strong>如果你能确定被锁住的代码执行时间很短，就不应该用互斥锁，而应该选用自旋锁，否则使用互斥锁。</strong></p><p>自旋锁是通过 CPU 提供的 <code>CAS</code> 函数（<em>Compare And Swap</em>），在「用户态」完成加锁和解锁操作，不会主动产生线程上下文切换，所以相比互斥锁来说，会快一些，开销也小一些。</p><p>一般加锁的过程，包含两个步骤：</p><ul><li>第一步，查看锁的状态，如果锁是空闲的，则执行第二步；</li><li>第二步，将锁设置为当前线程持有；</li></ul><p>CAS 函数就把这两个步骤合并成一条硬件级指令，形成<strong>原子指令</strong>，这样就保证了这两个步骤是不可分割的，要么一次性执行完两个步骤，要么两个步骤都不执行。</p><p>比如，设锁为变量 lock，整数 0 表示锁是空闲状态，整数 pid 表示线程 ID，那么 CAS(lock, 0, pid) 就表示自旋锁的加锁操作，CAS(lock, pid, 0) 则表示解锁操作。</p><p>使用自旋锁的时候，当发生多线程竞争锁的情况，加锁失败的线程会「忙等待」，直到它拿到锁。这里的「忙等待」可以用 <code>while</code> 循环等待实现，不过最好是使用 CPU 提供的 <code>PAUSE</code> 指令来实现「忙等待」，因为可以减少循环等待时的耗电量。</p><p>自旋锁是最比较简单的一种锁，一直自旋，利用 CPU 周期，直到锁可用。<strong>需要注意，在单核 CPU 上，需要抢占式的调度器（即不断通过时钟中断一个线程，运行其他线程）。否则，自旋锁在单 CPU 上无法使用，因为一个自旋的线程永远不会放弃 CPU。</strong></p><p>自旋锁开销少，在多核系统下一般不会主动产生线程切换，适合异步、协程等在用户态切换请求的编程方式，但如果被锁住的代码执行时间过长，自旋的线程会长时间占用 CPU 资源，所以自旋的时间和被锁住的代码执行的时间是成「正比」的关系，我们需要清楚的知道这一点。</p><p>自旋锁与互斥锁使用层面比较相似，但实现层面上完全不同：<strong>当加锁失败时，互斥锁用「线程切换」来应对，自旋锁则用「忙等待」来应对</strong>。</p><p>它俩是锁的最基本处理方式，更高级的锁都会选择其中一个来实现，比如读写锁既可以选择互斥锁实现，也可以基于自旋锁实现。</p><h2 id="6-读写锁"><a href="#6-读写锁" class="headerlink" title="6.读写锁"></a>6.读写锁</h2><p>读写锁从字面意思我们也可以知道，它由「读锁」和「写锁」两部分构成，如果只读取共享资源用「读锁」加锁，如果要修改共享资源则用「写锁」加锁。</p><p>所以，<strong>读写锁适用于能明确区分读操作和写操作的场景</strong>。</p><p>读写锁的工作原理是：</p><ul><li>当「写锁」没有被线程持有时，多个线程能够并发地持有读锁，这大大提高了共享资源的访问效率，因为「读锁」是用于读取共享资源的场景，所以多个线程同时持有读锁也不会破坏共享资源的数据。</li><li>但是，一旦「写锁」被线程持有后，读线程的获取读锁的操作会被阻塞，而且其他写线程的获取写锁的操作也会被阻塞。</li></ul><p>所以说，写锁是独占锁，因为任何时刻只能有一个线程持有写锁，类似互斥锁和自旋锁，而读锁是共享锁，因为读锁可以被多个线程同时持有。</p><p>知道了读写锁的工作原理后，我们可以发现，<strong>读写锁在读多写少的场景，能发挥出优势</strong>。</p><p>另外，根据实现的不同，读写锁可以分为「读优先锁」和「写优先锁」。</p><p>读优先锁期望的是，读锁能被更多的线程持有，以便提高读线程的并发性，它的工作方式是：当读线程 A 先持有了读锁，写线程 B 在获取写锁的时候，会被阻塞，并且在阻塞过程中，后续来的读线程 C 仍然可以成功获取读锁，最后直到读线程 A 和 C 释放读锁后，写线程 B 才可以成功获取写锁。如下图：</p><img src="/oranfish.github.io/posts/0/%E8%AF%BB%E4%BC%98%E5%85%88%E9%94%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="img" style="zoom:33%;"><p>而「写优先锁」是优先服务写线程，其工作方式是：当读线程 A 先持有了读锁，写线程 B 在获取写锁的时候，会被阻塞，并且在阻塞过程中，后续来的读线程 C 获取读锁时会失败，于是读线程 C 将被阻塞在获取读锁的操作，这样只要读线程 A 释放读锁后，写线程 B 就可以成功获取写锁。如下图：</p><img src="/oranfish.github.io/posts/0/%E5%86%99%E4%BC%98%E5%85%88%E9%94%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="img" style="zoom: 33%;"><p>读优先锁对于读线程并发性更好，但也不是没有问题。我们试想一下，如果一直有读线程获取读锁，那么写线程将永远获取不到写锁，这就造成了写线程「饥饿」的现象。</p><p>写优先锁可以保证写线程不会饿死，但是如果一直有写线程获取写锁，读线程也会被「饿死」。</p><p>既然不管优先读锁还是写锁，对方可能会出现饿死问题，那么我们就不偏袒任何一方，搞个「公平读写锁」。</p><p><strong>公平读写锁比较简单的一种方式是：用队列把获取锁的线程排队，不管是写线程还是读线程都按照先进先出的原则加锁即可，这样读线程仍然可以并发，也不会出现「饥饿」的现象。</strong></p><p>互斥锁和自旋锁都是最基本的锁，读写锁可以根据场景来选择这两种锁其中的一个进行实现。</p><h2 id="7-乐观锁和悲观锁"><a href="#7-乐观锁和悲观锁" class="headerlink" title="7.乐观锁和悲观锁"></a>7.乐观锁和悲观锁</h2><p>前面提到的互斥锁、自旋锁、读写锁，都是属于悲观锁。</p><p>悲观锁做事比较悲观，它认为<strong>多线程同时修改共享资源的概率比较高，于是很容易出现冲突，所以访问共享资源前，先要上锁</strong>。</p><p>那相反的，如果多线程同时修改共享资源的概率比较低，就可以采用乐观锁。</p><p>乐观锁做事比较乐观，它假定冲突的概率很低，它的工作方式是：<strong>先修改完共享资源，再验证这段时间内有没有发生冲突，如果没有其他线程在修改资源，那么操作完成，如果发现有其他线程已经修改过这个资源，就放弃本次操作</strong>。</p><p>放弃后如何重试，这跟业务场景息息相关，虽然重试的成本很高，但是冲突的概率足够低的话，还是可以接受的。</p><p>可见，乐观锁的心态是，不管三七二十一，先改了资源再说。另外，你会发现<strong>乐观锁全程并没有加锁，所以它也叫无锁编程</strong>。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>这里举一个场景例子：在线文档。</p><p>我们都知道在线文档可以同时多人编辑的，如果使用了悲观锁，那么只要有一个用户正在编辑文档，此时其他用户就无法打开相同的文档了，这用户体验当然不好了。</p><p>那实现多人同时编辑，实际上是用了乐观锁，它允许多个用户打开同一个文档进行编辑，编辑完提交之后才验证修改的内容是否有冲突。</p><p>怎么样才算发生冲突？这里举个例子，比如用户 A 先在浏览器编辑文档，之后用户 B 在浏览器也打开了相同的文档进行编辑，但是用户 B 比用户 A 提交早，这一过程用户 A 是不知道的，当 A 提交修改完的内容时，那么 A 和 B 之间并行修改的地方就会发生冲突。</p><p>服务端要怎么验证是否冲突了呢？通常方案如下：</p><ul><li>由于发生冲突的概率比较低，所以先让用户编辑文档，但是浏览器在下载文档时会记录下服务端返回的文档版本号；</li><li>当用户提交修改时，发给服务端的请求会带上原始文档版本号，服务器收到后将它与当前版本号进行比较，如果版本号不一致则提交失败，如果版本号一致则修改成功，然后服务端版本号更新到最新的版本号。</li></ul></blockquote><p>实际上，我们常见的 SVN 和 Git 也是用了乐观锁的思想，先让用户编辑代码，然后提交的时候，通过版本号来判断是否产生了冲突，发生了冲突的地方，需要我们自己修改后，再重新提交。</p><p>乐观锁虽然去除了加锁解锁的操作，但是一旦发生冲突，重试的成本非常高，所以<strong>只有在冲突概率非常低，且加锁成本非常高的场景时，才考虑使用乐观锁。</strong></p><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h2><p>开发过程中，最常见的就是互斥锁的了，互斥锁加锁失败时，会用「线程切换」来应对，当加锁失败的线程再次加锁成功后的这一过程，会有两次线程上下文切换的成本，性能损耗比较大。</p><p>如果我们明确知道被锁住的代码的执行时间很短，那我们应该选择开销比较小的自旋锁，因为自旋锁加锁失败时，并不会主动产生线程切换，而是一直忙等待，直到获取到锁，那么如果被锁住的代码执行时间很短，那这个忙等待的时间相对应也很短。</p><p>如果能区分读操作和写操作的场景，那读写锁就更合适了，它允许多个读线程可以同时持有读锁，提高了读的并发性。根据偏袒读方还是写方，可以分为读优先锁和写优先锁，读优先锁并发性很强，但是写线程会被饿死，而写优先锁会优先服务写线程，读线程也可能会被饿死，那为了避免饥饿的问题，于是就有了公平读写锁，它是用队列把请求锁的线程排队，并保证先入先出的原则来对线程加锁，这样便保证了某种线程不会被饿死，通用性也更好点。</p><p>互斥锁和自旋锁都是最基本的锁，读写锁可以根据场景来选择这两种锁其中的一个进行实现。</p><p>另外，互斥锁、自旋锁、读写锁都属于悲观锁，悲观锁认为并发访问共享资源时，冲突概率可能非常高，所以在访问共享资源前，都需要先加锁。</p><p>相反的，如果并发访问共享资源时，冲突概率非常低的话，就可以使用乐观锁，它的工作方式是，在访问共享资源时，不用先加锁，修改完共享资源后，再验证这段时间内有没有发生冲突，如果没有其他线程在修改资源，那么操作完成，如果发现有其他线程已经修改过这个资源，就放弃本次操作。</p><p>但是，一旦冲突概率上升，就不适合使用乐观锁了，因为它解决冲突的重试成本非常高。</p><p>不管使用的哪种锁，我们的加锁的代码范围应该尽可能的小，也就是加锁的粒度要小，这样执行速度会比较快。再来，使用上了合适的锁，就会快上加快了。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-同步与互斥</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-竞争与合作"><a href="#1-竞争与合作" class="headerlink" title="1.竞争与合作"></a>1.竞争与合作</h2><h3 id="1-1-入门"><a href="#1-1-入门" class="headerlink" title="1.1 入门"></a>1.1 入门</h3><p>在单核 CPU 系统里，为了实现多个程序同时运行的假象，操作系统通常以时间片调度的方式，让每个进程执行每次执行一个时间片，时间片用完了，就切换下一个进程运行，由于这个时间片的时间很短，于是就造成了「并发」的现象。</p><p>另外，操作系统也为每个进程创建巨大、私有的虚拟内存的假象，这种地址空间的抽象让每个程序好像拥有自己的内存，而实际上操作系统在背后秘密地让多个地址空间「复用」物理内存或者磁盘。</p><p>如果一个程序只有一个执行流程，也代表它是单线程的。当然一个程序可以有多个执行流程，也就是所谓的多线程程序，线程是调度的基本单位，进程则是资源分配的基本单位。</p><p>所以，线程之间是可以共享进程的资源，比如代码段、堆空间、数据段、打开的文件等资源，但每个线程都有自己独立的栈空间。</p><p>那么问题就来了，多个线程如果竞争共享资源，如果不采取有效的措施，则会造成共享数据的混乱。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><img src="/oranfish.github.io/posts/0/9-%E6%B1%87%E7%BC%96%E8%AF%AD%E5%8F%A5-%E8%B5%8B%E5%80%BC%E8%BF%87%E7%A8%8B-%E7%AB%9E%E4%BA%89.jpg" alt="蓝色表示线程 1 ，红色表示线程 2" style="zoom:50%;"></blockquote><h3 id="1-2-互斥的概念"><a href="#1-2-互斥的概念" class="headerlink" title="1.2 互斥的概念"></a>1.2 互斥的概念</h3><p>上面展示的情况称为<strong>竞争条件（*race condition*）</strong>，当多线程相互竞争操作共享变量时，由于运气不好，即在执行过程中发生了上下文切换，我们得到了错误的结果，事实上，每次运行都可能得到不同的结果，因此输出的结果存在<strong>不确定性（*indeterminate*）</strong>。</p><p>由于多线程执行操作共享变量的这段代码可能会导致竞争状态，因此我们将此段代码称为<strong>临界区（*critical section*），它是访问共享资源的代码片段，一定不能给多线程同时执行。</strong></p><p>我们希望这段代码是<strong>互斥（*mutualexclusion*）的，也就说保证一个线程在临界区执行时，其他线程应该被阻止进入临界区</strong>，说白了，就是这段代码执行过程中，最多只能出现一个线程。</p><p>互斥也并不是只针对多线程。在多进程竞争共享资源的时候，也同样是可以使用互斥的方式来避免资源竞争造成的资源混乱。</p><p>互斥解决了并发进程&#x2F;线程对临界区的使用问题。这种基于临界区控制的交互作用是比较简单的，只要一个进程&#x2F;线程进入了临界区，其他试图想进入临界区的进程&#x2F;线程都会被阻塞着，直到第一个进程&#x2F;线程离开了临界区。</p><h3 id="1-3-同步的概念"><a href="#1-3-同步的概念" class="headerlink" title="1.3 同步的概念"></a>1.3 同步的概念</h3><p><strong>所谓同步，就是并发进程&#x2F;线程在一些关键点上可能需要互相等待与互通消息，这种相互制约的等待与互通信息称为进程&#x2F;线程同步</strong>。</p><p>例子，线程 1 是负责读入数据的，而线程 2 是负责处理数据的，这两个线程是相互合作、相互依赖的。线程 2 在没有收到线程 1 的唤醒通知时，就会一直阻塞等待，当线程 1 读完数据需要把数据传给线程 2 时，线程 1 会唤醒线程 2，并把数据交给线程 2 处理。</p><p>注意，同步与互斥是两种不同的概念：</p><ul><li>同步就好比：「操作 A 应在操作 B 之前执行」，「操作 C 必须在操作 A 和操作 B 都完成之后才能执行」等；</li><li>互斥就好比：「操作 A 和操作 B 不能在同一时刻执行」；</li></ul><h2 id="2-互斥与同步的实现与使用"><a href="#2-互斥与同步的实现与使用" class="headerlink" title="2.互斥与同步的实现与使用"></a>2.互斥与同步的实现与使用</h2><p>在进程&#x2F;线程并发执行的过程中，进程&#x2F;线程之间存在协作的关系，例如有互斥、同步的关系。</p><p>为了实现进程&#x2F;线程间正确的协作，操作系统必须提供实现进程协作的措施和方法，主要的方法有两种：</p><ul><li><em>锁</em>：加锁、解锁操作；</li><li><em>信号量</em>：P、V 操作；</li></ul><p>这两个都可以方便地实现进程&#x2F;线程互斥，而信号量比锁的功能更强一些，它还可以方便地实现进程&#x2F;线程同步。</p><h3 id="2-1-锁"><a href="#2-1-锁" class="headerlink" title="2.1 锁"></a>2.1 锁</h3><p>使用加锁操作和解锁操作可以解决并发线程&#x2F;进程的互斥问题。</p><p>任何想进入临界区的线程，必须先执行加锁操作。若加锁操作顺利通过，则线程可进入临界区；在完成对临界资源的访问后再执行解锁操作，以释放该临界资源。</p><p>根据锁的实现不同，可以分为<strong>「忙等待锁」</strong>和<strong>「无忙等待锁」</strong>。</p><h4 id="2-1-1-忙等待锁"><a href="#2-1-1-忙等待锁" class="headerlink" title="2.1.1 忙等待锁"></a>2.1.1 忙等待锁</h4><p>在说明「忙等待锁」的实现之前，先介绍现代 CPU 体系结构提供的特殊<strong>原子操作指令 —— 测试和置位（*Test-and-Set*）指令</strong>。</p><p>如果用 C 代码表示 Test-and-Set 指令，形式如下：</p><p><img src="/oranfish.github.io/posts/0/OS-%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5/13-TestAndSet.jpg" alt="img"></p><p>测试并设置指令做了下述事情:</p><ul><li>把 <code>old_ptr</code> 更新为 <code>new</code> 的新值</li><li>返回 <code>old_ptr</code> 的旧值；</li></ul><p>当然，<strong>关键是这些代码是原子执行</strong>。因为既可以测试旧值，又可以设置新值，所以我们把这条指令叫作「测试并设置」。</p><p>那什么是原子操作呢？<strong>原子操作就是要么全部执行，要么都不执行，不能出现执行到一半的中间状态</strong></p><p>我们可以运用 Test-and-Set 指令来实现「忙等待锁」，代码如下：</p><p><img src="/oranfish.github.io/posts/0/OS-%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5/14-%E8%87%AA%E6%97%8B%E9%94%81.jpg" alt="img"></p><p>我们来确保理解为什么这个锁能工作：</p><ul><li>第一个场景是，首先假设一个线程在运行，调用 <code>lock()</code>，没有其他线程持有锁，所以 <code>flag</code> 是 0。当调用 <code>TestAndSet(flag, 1)</code> 方法，返回 0，线程会跳出 while 循环，获取锁。同时也会原子的设置 flag 为1，标志锁已经被持有。当线程离开临界区，调用 <code>unlock()</code> 将 <code>flag</code> 清理为 0。</li><li>第二种场景是，当某一个线程已经持有锁（即 <code>flag</code> 为1）。本线程调用 <code>lock()</code>，然后调用 <code>TestAndSet(flag, 1)</code>，这一次返回 1。只要另一个线程一直持有锁，<code>TestAndSet()</code> 会重复返回 1，本线程会一直<strong>忙等</strong>。当 <code>flag</code> 终于被改为 0，本线程会调用 <code>TestAndSet()</code>，返回 0 并且原子地设置为 1，从而获得锁，进入临界区。</li></ul><p>很明显，当获取不到锁时，线程就会一直 while 循环，不做任何事情，所以就被称为「忙等待锁」，也被称为<strong>自旋锁（*spin lock*）</strong>。</p><p>这是最简单的一种锁，一直自旋，利用 CPU 周期，直到锁可用。在单处理器上，需要抢占式的调度器（即不断通过时钟中断一个线程，运行其他线程）。否则，自旋锁在单 CPU 上无法使用，因为一个自旋的线程永远不会放弃 CPU。</p><h4 id="2-1-2-无等待锁"><a href="#2-1-2-无等待锁" class="headerlink" title="2.1.2 无等待锁"></a>2.1.2 无等待锁</h4><p>无等待锁顾明思议就是获取不到锁的时候，不用自旋。</p><p>既然不想自旋，那当没获取到锁的时候，就把当前线程放入到锁的等待队列，然后执行调度程序，把 CPU 让给其他线程执行。</p><img src="/oranfish.github.io/posts/0/15-%E6%97%A0%E7%AD%89%E5%BE%85%E9%94%81.jpg" alt="img" style="zoom: 25%;"><p>本次只是提出了两种简单锁的实现方式。在具体操作系统实现中，会更复杂，但也离不开本例子两个基本元素。</p><h3 id="2-2-信号量"><a href="#2-2-信号量" class="headerlink" title="2.2 信号量"></a>2.2 信号量</h3><p>信号量是操作系统提供的一种协调共享资源访问的方法。</p><p>通常<strong>信号量表示资源的数量</strong>，对应的变量是一个整型（<code>sem</code>）变量。</p><p>另外，还有<strong>两个原子操作的系统调用函数来控制信号量的</strong>，分别是：</p><ul><li><em>P 操作</em>：将 <code>sem</code> 减 <code>1</code>，相减后，如果 <code>sem &lt; 0</code>，则进程&#x2F;线程进入阻塞等待，否则继续，表明 P 操作可能会阻塞；</li><li><em>V 操作</em>：将 <code>sem</code> 加 <code>1</code>，相加后，如果 <code>sem &lt;= 0</code>，唤醒一个等待中的进程&#x2F;线程，表明 V 操作不会阻塞；</li></ul><p>P 操作是用在进入临界区之前，V 操作是用在离开临界区之后，这两个操作是必须成对出现的。</p><h4 id="2-2-1-PV操作如何使用"><a href="#2-2-1-PV操作如何使用" class="headerlink" title="2.2.1 PV操作如何使用"></a>2.2.1 PV操作如何使用</h4><p>信号量不仅可以实现临界区的互斥访问控制，还可以线程间的事件同步。</p><p>我们先来说说如何使用<strong>信号量实现临界区的互斥访问</strong>。</p><p>为每类共享资源设置一个信号量 <code>s</code>，其初值为 <code>1</code>，表示该临界资源未被占用。</p><p>只要把进入临界区的操作置于 <code>P(s)</code> 和 <code>V(s)</code> 之间，即可实现进程&#x2F;线程互斥。</p><p>此时，任何想进入临界区的线程，必先在互斥信号量上执行 P 操作，在完成对临界资源的访问后再执行 V 操作。由于互斥信号量的初始值为 1，故在第一个线程执行 P 操作后 s 值变为 0，表示临界资源为空闲，可分配给该线程，使之进入临界区。</p><p>若此时又有第二个线程想进入临界区，也应先执行 P 操作，结果使 s 变为负值，这就意味着临界资源已被占用，因此，第二个线程被阻塞。</p><p>并且，直到第一个线程执行 V 操作，释放临界资源而恢复 s 值为 0 后，才唤醒第二个线程，使之进入临界区，待它完成临界资源的访问后，又执行 V 操作，使 s 恢复到初始值 1。</p><p>对于两个并发线程，互斥信号量的值仅取 1、0 和 -1 三个值，分别表示：</p><ul><li>如果互斥信号量为 1，表示没有线程进入临界区；</li><li>如果互斥信号量为 0，表示有一个线程进入临界区；</li><li>如果互斥信号量为 -1，表示一个线程进入临界区，另一个线程等待进入。</li></ul><p>通过互斥信号量的方式，就能保证临界区任何时刻只有一个线程在执行，就达到了互斥的效果。</p><p><strong>信号量实现事件同步</strong>。同步的方式是设置一个信号量，其初值为 <code>0</code>。</p><h3 id="2-3-生产者-消费者问题"><a href="#2-3-生产者-消费者问题" class="headerlink" title="2.3 生产者-消费者问题"></a>2.3 生产者-消费者问题</h3><img src="/oranfish.github.io/posts/0/20-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85.jpg" alt="生产者-消费者模型" style="zoom:33%;"><p>生产者-消费者问题描述：</p><ul><li><strong>生产者</strong>在生成数据后，放在一个缓冲区中；</li><li><strong>消费者</strong>从缓冲区取出数据处理；</li><li>任何时刻，<strong>只能有一个</strong>生产者或消费者可以访问缓冲区；</li></ul><p>我们对问题分析可以得出：</p><ul><li>任何时刻只能有一个线程操作缓冲区，说明操作缓冲区是临界代码，<strong>需要互斥</strong>；</li><li>缓冲区空时，消费者必须等待生产者生成数据；缓冲区满时，生产者必须等待消费者取出数据。说明生产者和消费者<strong>需要同步</strong>。</li></ul><p>那么我们需要三个信号量，分别是：</p><ul><li>互斥信号量 <code>mutex</code>：用于互斥访问缓冲区，初始化值为 1；</li><li>资源信号量 <code>fullBuffers</code>：用于消费者询问缓冲区是否有数据，有数据则读取数据，初始化值为 0（表明缓冲区一开始为空）；</li><li>资源信号量 <code>emptyBuffers</code>：用于生产者询问缓冲区是否有空位，有空位则生成数据，初始化值为 n （缓冲区大小）；</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>具体的实现代码：</p><img src="/oranfish.github.io/posts/0/21-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B.jpg" alt="img" style="zoom:15%;"><p>如果消费者线程一开始执行 <code>P(fullBuffers)</code>，由于信号量 <code>fullBuffers</code> 初始值为 0，则此时 <code>fullBuffers</code> 的值从 0 变为 -1，说明缓冲区里没有数据，消费者只能等待。</p><p>接着，轮到生产者执行 <code>P(emptyBuffers)</code>，表示减少 1 个空槽，如果当前没有其他生产者线程在临界区执行代码，那么该生产者线程就可以把数据放到缓冲区，放完后，执行 <code>V(fullBuffers)</code> ，信号量 <code>fullBuffers</code> 从 -1 变成 0，表明有「消费者」线程正在阻塞等待数据，于是阻塞等待的消费者线程会被唤醒。</p><p>消费者线程被唤醒后，如果此时没有其他消费者线程在读数据，那么就可以直接进入临界区，从缓冲区读取数据。最后，离开临界区后，把空槽的个数 + 1。</p></blockquote><h2 id="3-经典同步问题"><a href="#3-经典同步问题" class="headerlink" title="3.经典同步问题"></a>3.经典同步问题</h2><h3 id="3-1-哲学家就餐问题"><a href="#3-1-哲学家就餐问题" class="headerlink" title="3.1 哲学家就餐问题"></a>3.1 哲学家就餐问题</h3><p>哲学家就餐的问题描述：</p><ul><li><code>5</code> 个老大哥哲学家，闲着没事做，围绕着一张圆桌吃面；</li><li>巧就巧在，这个桌子只有 <code>5</code> 支叉子，每两个哲学家之间放一支叉子；</li><li>哲学家围在一起先思考，思考中途饿了就会想进餐；</li><li><strong>奇葩的是，这些哲学家要两支叉子才愿意吃面，也就是需要拿到左右两边的叉子才进餐</strong>；</li><li><strong>吃完后，会把两支叉子放回原处，继续思考</strong>；</li></ul><img src="/oranfish.github.io/posts/0/23-%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E6%A8%A1%E5%9E%8B.jpg" alt="哲学家就餐的问题" style="zoom:25%;"><h4 id="3-1-1-方案一"><a href="#3-1-1-方案一" class="headerlink" title="3.1.1 方案一"></a>3.1.1 方案一</h4><p>我们用信号量的方式，也就是 PV 操作来尝试解决它</p><img src="/oranfish.github.io/posts/0/24-%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90-%E6%96%B9%E6%A1%88%E4%B8%80%E7%A4%BA%E4%BE%8B.jpg" alt="img" style="zoom:33%;"><p>拿起叉子用 P 操作，代表有叉子就直接用，没有叉子时就等待其他哲学家放回叉子。</p><p>不过，这种解法存在一个极端的问题：<strong>假设五位哲学家同时拿起左边的叉子，桌面上就没有叉子了， 这样就没有人能够拿到他们右边的叉子，也就说每一位哲学家都会在 <code>P(fork[(i + 1) % N ])</code> 这条语句阻塞了，很明显这发生了死锁的现象</strong>。</p><h4 id="3-1-2-方案二"><a href="#3-1-2-方案二" class="headerlink" title="3.1.2 方案二"></a>3.1.2 方案二</h4><p>既然「方案一」会发生同时竞争左边叉子导致死锁的现象，那么我们就在拿叉子前，加个互斥信号量，代码如下：</p><img src="/oranfish.github.io/posts/0/26-%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90-%E6%96%B9%E6%A1%88%E4%BA%8C%E7%A4%BA%E4%BE%8B.jpg" alt="img" style="zoom:33%;"><p>上面程序中的互斥信号量的作用就在于，<strong>只要有一个哲学家进入了「临界区」，也就是准备要拿叉子时，其他哲学家都不能动，只有这位哲学家用完叉子了，才能轮到下一个哲学家进餐。</strong></p><p>方案二虽然能让哲学家们按顺序吃饭，但是每次进餐只能有一位哲学家，而桌面上是有 5 把叉子，按道理是能可以有两个哲学家同时进餐的，所以从效率角度上，这不是最好的解决方案。</p><h4 id="3-1-3-方案三"><a href="#3-1-3-方案三" class="headerlink" title="3.1.3 方案三"></a>3.1.3 方案三</h4><p>那既然方案二使用互斥信号量，会导致只能允许一个哲学家就餐，那么我们就不用它。</p><p>另外，方案一的问题在于，会出现所有哲学家同时拿左边刀叉的可能性，那我们就避免哲学家可以同时拿左边的刀叉，采用分支结构，根据哲学家的编号的不同，而采取不同的动作。</p><p><strong>即让偶数编号的哲学家「先拿左边的叉子后拿右边的叉子」，奇数编号的哲学家「先拿右边的叉子后拿左边的叉子」。</strong></p><img src="/oranfish.github.io/posts/0/28-%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90-%E6%96%B9%E6%A1%88%E4%B8%89%E7%A4%BA%E4%BE%8B.jpg" alt="img" style="zoom:33%;"><p>上面的程序，在 P 操作时，根据哲学家的编号不同，拿起左右两边叉子的顺序不同。另外，V 操作是不需要分支的，因为 V 操作是不会阻塞的。</p><p>方案三即不会出现死锁，也可以两人同时进餐。</p><h4 id="3-1-4-方案四"><a href="#3-1-4-方案四" class="headerlink" title="3.1.4 方案四"></a>3.1.4 方案四</h4><p>在这里再提出另外一种可行的解决方案，我们<strong>用一个数组 state 来记录每一位哲学家的三个状态，分别是在进餐状态、思考状态、饥饿状态（正在试图拿叉子）。</strong></p><p>那么，<strong>一个哲学家只有在两个邻居都没有进餐时，才可以进入进餐状态。</strong></p><p>第 <code>i</code> 个哲学家的左邻右舍，则由宏 <code>LEFT</code> 和 <code>RIGHT</code> 定义：</p><ul><li><em>LEFT</em> : ( i + 5 - 1 ) % 5</li><li><em>RIGHT</em> : ( i + 1 ) % 5</li></ul><p>比如 i 为 2，则 <code>LEFT</code> 为 1，<code>RIGHT</code> 为 3。</p><p>具体代码实现如下：</p><img src="/oranfish.github.io/posts/0/30-%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90-%E6%96%B9%E6%A1%88%E5%9B%9B%E7%A4%BA%E4%BE%8B.jpg" alt="img" style="zoom:33%;"><p>上面的程序使用了一个信号量数组，每个信号量对应一位哲学家，这样在所需的叉子被占用时，想进餐的哲学家就被阻塞。</p><p>注意，每个进程&#x2F;线程将 <code>smart_person</code> 函数作为主代码运行，而其他 <code>take_forks</code>、<code>put_forks</code> 和 <code>test</code> 只是普通的函数，而非单独的进程&#x2F;线程。</p><p>方案四同样不会出现死锁，也可以两人同时进餐。</p><h3 id="3-2-读者-写者问题"><a href="#3-2-读者-写者问题" class="headerlink" title="3.2 读者-写者问题"></a>3.2 读者-写者问题</h3><p>前面的「哲学家进餐问题」对于互斥访问有限的竞争问题（如 I&#x2F;O 设备）一类的建模过程十分有用。</p><p>另外，还有个著名的问题是「读者-写者」，它为数据库访问建立了一个模型。</p><p>读者只会读取数据，不会修改数据，而写者即可以读也可以修改数据。</p><p>读者-写者的问题描述：</p><ul><li>「读-读」允许：同一时刻，允许多个读者同时读</li><li>「读-写」互斥：没有写者时读者才能读，没有读者时写者才能写</li><li>「写-写」互斥：没有其他写者时，写者才能写</li></ul><h4 id="3-2-1-方案一"><a href="#3-2-1-方案一" class="headerlink" title="3.2.1 方案一"></a>3.2.1 方案一</h4><p>使用信号量的方式来尝试解决：</p><ul><li>信号量 <code>wMutex</code>：控制写操作的互斥信号量，初始值为 1 ；</li><li>读者计数 <code>rCount</code>：正在进行读操作的读者个数，初始化为 0；</li><li>信号量 <code>rCountMutex</code>：控制对 rCount 读者计数器的互斥修改，初始值为 1；</li></ul><p>接下来看看代码的实现：</p><img src="/oranfish.github.io/posts/0/32-%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85-%E6%96%B9%E6%A1%88%E4%B8%80%E7%A4%BA%E4%BE%8B.jpg" alt="img" style="zoom:25%;"><p>上面的这种实现，是读者优先的策略，因为只要有读者正在读的状态，后来的读者都可以直接进入，如果读者持续不断进入，则写者会处于饥饿状态。</p><h4 id="3-2-2-方案二"><a href="#3-2-2-方案二" class="headerlink" title="3.2.2 方案二"></a>3.2.2 方案二</h4><p>那既然有读者优先策略，自然也有写者优先策略：</p><ul><li>只要有写者准备要写入，写者应尽快执行写操作，后来的读者就必须阻塞；</li><li>如果有写者持续不断写入，则读者就处于饥饿；</li></ul><p>在方案一的基础上新增如下变量：</p><ul><li>信号量 <code>rMutex</code>：控制读者进入的互斥信号量，初始值为 1；</li><li>信号量 <code>wDataMutex</code>：控制写者写操作的互斥信号量，初始值为 1；</li><li>写者计数 <code>wCount</code>：记录写者数量，初始值为 0；</li><li>信号量 <code>wCountMutex</code>：控制 wCount 互斥修改，初始值为 1；</li></ul><p>具体实现如下代码：</p><img src="/oranfish.github.io/posts/0/33-%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85-%E6%96%B9%E6%A1%88%E4%BA%8C%E7%A4%BA%E4%BE%8B.jpg" alt="img" style="zoom: 25%;"><p>注意，这里 <code>rMutex</code> 的作用，开始有多个读者读数据，它们全部进入读者队列，此时来了一个写者，执行了 <code>P(rMutex)</code> 之后，后续的读者由于阻塞在 <code>rMutex</code> 上，都不能再进入读者队列，而写者到来，则可以全部进入写者队列，因此保证了写者优先。</p><p>同时，第一个写者执行了 <code>P(rMutex)</code> 之后，也不能马上开始写，必须等到所有进入读者队列的读者都执行完读操作，通过 <code>V(wDataMutex)</code> 唤醒写者的写操作。</p><h4 id="3-2-3-方案三"><a href="#3-2-3-方案三" class="headerlink" title="3.2.3 方案三"></a>3.2.3 方案三</h4><p>既然读者优先策略和写者优先策略都会造成饥饿的现象，那么我们就来实现一下公平策略。</p><p>公平策略：</p><ul><li>优先级相同；</li><li>写者、读者互斥访问；</li><li>只能一个写者访问临界区；</li><li>可以有多个读者同时访问临界资源；</li></ul><p>具体代码实现：</p><img src="/oranfish.github.io/posts/0/34-%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85-%E6%96%B9%E6%A1%88%E4%B8%89%E7%A4%BA%E4%BE%8B.jpg" alt="img" style="zoom:25%;"><p>看完代码不知你是否有这样的疑问，为什么加了一个信号量 <code>flag</code>，就实现了公平竞争？</p><p>对比方案一的读者优先策略，可以发现，读者优先中只要后续有读者到达，读者就可以进入读者队列， 而写者必须等待，直到没有读者到达。</p><p>没有读者到达会导致读者队列为空，即 <code>rCount==0</code>，此时写者才可以进入临界区执行写操作。</p><p>而这里 <code>flag</code> 的作用就是阻止读者的这种特殊权限（特殊权限是只要读者到达，就可以进入读者队列）。</p><p>比如：开始来了一些读者读数据，它们全部进入读者队列，此时来了一个写者，执行 <code>P(falg)</code> 操作，使得后续到来的读者都阻塞在 <code>flag</code> 上，不能进入读者队列，这会使得读者队列逐渐为空，即 <code>rCount</code> 减为 0。</p><p>这个写者也不能立马开始写（因为此时读者队列不为空），会阻塞在信号量 <code>wDataMutex</code> 上，读者队列中的读者全部读取结束后，最后一个读者进程执行 <code>V(wDataMutex)</code>，唤醒刚才的写者，写者则继续开始进行写操作。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-进程通信方式</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-管道"><a href="#1-管道" class="headerlink" title="1.管道"></a>1.管道</h2><h3 id="1-1-基础介绍"><a href="#1-1-基础介绍" class="headerlink" title="1.1 基础介绍"></a>1.1 基础介绍</h3><p>每个进程的用户地址空间都是独立的，一般而言是不能互相访问的，但内核空间是每个进程都共享的，所以进程之间要通信必须通过内核。Linux 内核提供了不少进程间通信的机制。</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ps</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">auxf</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">grep</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span></code></pre></div><p>上面命令行里的「<code>|</code>」竖线就是一个<strong>管道</strong>，它的功能是将前一个命令（<code>ps auxf</code>）的输出，作为后一个命令（<code>grep mysql</code>）的输入，从这功能描述，可以看出<strong>管道传输数据是单向的</strong>，如果想相互通信，我们需要创建两个管道才行。</p><p>同时，我们得知上面这种管道是没有名字，所以「<code>|</code>」表示的管道称为<strong>匿名管道</strong>，用完了就销毁。</p><p>管道还有另外一个类型是<strong>命名管道</strong>，也被叫做 <code>FIFO</code>，因为数据是先进先出的传输方式。</p><p>在使用命名管道前，先需要通过 <code>mkfifo</code> 命令来创建，并且指定管道名字：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mkfifo</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">myPipe</span></span></code></pre></div><p>myPipe 就是这个管道的名称，基于 Linux 一切皆文件的理念，所以管道也是以文件的方式存在，我们可以用 ls 看一下，这个文件的类型是 p，也就是 pipe（管道） 的意思：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ls</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-l</span></span><span class="line"><span style="color: #FFCB6B">prw-r--r--.</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">root</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">root</span><span style="color: #BABED8">         </span><span style="color: #F78C6C">0</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Jul</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">17</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">02</span><span style="color: #C3E88D">:45</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">myPipe</span></span></code></pre></div><p>接下来，我们往 myPipe 这个管道写入数据：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">echo</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">hello</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">myPipe</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">//</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">将数据写进管道</span></span><span class="line"><span style="color: #BABED8">                         </span><span style="color: #FFCB6B">//</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">停住了</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">...</span></span></code></pre></div><p>你操作了后，你会发现命令执行后就停在这了，这是因为管道里的内容没有被读取，只有当管道里的数据被读完后，命令才可以正常退出。</p><p>于是，我们执行另外一个命令来读取这个管道里的数据：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">cat</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">myPipe</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">//</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">读取管道里的数据</span></span><span class="line"><span style="color: #FFCB6B">hello</span></span></code></pre></div><p>可以看到，管道里的内容被读取出来了，并打印在了终端上，另外一方面，echo 那个命令也正常退出了。</p><p>我们可以看出，<strong>管道这种通信方式效率低，不适合进程间频繁地交换数据</strong>。当然，它的好处，自然就是简单，同时也我们很容易得知管道里的数据已经被另一个进程读取了。</p><h3 id="1-2-管道的创建与原理"><a href="#1-2-管道的创建与原理" class="headerlink" title="1.2 管道的创建与原理"></a>1.2 管道的创建与原理</h3><p>匿名管道的创建，需要通过下面这个系统调用：</p><div class="language-c"><button title="Copy code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">pipe</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> fd</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">])</span></span></code></pre></div><p>这里表示创建一个匿名管道，并返回了两个描述符，一个是管道的读取端描述符 <code>fd[0]</code>，另一个是管道的写入端描述符 <code>fd[1]</code>。注意，这个匿名管道是特殊的文件，只存在于内存，不存于文件系统中。</p><img src="/oranfish.github.io/posts/0/5-%E7%AE%A1%E9%81%93-pipe.jpg" alt="img" style="zoom:25%;"><p><strong>管道，就是内核里面的一串缓存</strong>。从管道的一段写入的数据，实际上是缓存在内核中的，另一端读取，也就是从内核中读取这段数据。另外，管道传输的数据是无格式的流且大小受限。</p><p>如何使管道跨过两个进程实现通讯？</p><p>我们可以使用 <code>fork</code> 创建子进程，<strong>创建的子进程会复制父进程的文件描述符</strong>，这样就做到了两个进程各有两个「 <code>fd[0]</code> 与 <code>fd[1]</code>」，两个进程就可以通过各自的 fd 写入和读取同一个管道文件实现跨进程通信了。</p><img src="/oranfish.github.io/posts/0/6-%E7%AE%A1%E9%81%93-pipe-fork.jpg" alt="img" style="zoom:25%;"><p>管道只能一端写入，另一端读出，所以上面这种模式容易造成混乱，因为父进程和子进程都可以同时写入，也都可以读出。那么，为了避免这种情况，通常的做法是：</p><ul><li>父进程关闭读取的 fd[0]，只保留写入的 fd[1]；</li><li>子进程关闭写入的 fd[1]，只保留读取的 fd[0]；</li></ul><p>所以说如果需要双向通信，则应该创建两个管道。</p><p>到这里，我们仅仅解析了使用管道进行父进程与子进程之间的通信，但是在我们 shell 里面并不是这样的。</p><p>在 shell 里面执行 <code>A | B</code>命令的时候，A 进程和 B 进程都是 shell 创建出来的子进程，A 和 B 之间不存在父子关系，它俩的父进程都是 shell。</p><img src="/oranfish.github.io/posts/0/8-%E7%AE%A1%E9%81%93-pipe-shell.jpg" alt="img" style="zoom: 33%;"><p>所以说，在 shell 里通过「<code>|</code>」匿名管道将多个命令连接在一起，实际上也就是创建了多个子进程，那么在我们编写 shell 脚本时，能使用一个管道搞定的事情，就不要多用一个管道，这样可以减少创建子进程的系统开销。</p><p>我们可以得知，<strong>对于匿名管道，它的通信范围是存在父子关系的进程</strong>。因为管道没有实体，也就是没有管道文件，只能通过 fork 来复制父进程 fd 文件描述符，来达到通信的目的。</p><p>另外，<strong>对于命名管道，它可以在不相关的进程间也能相互通信</strong>。因为命令管道，提前创建了一个类型为管道的设备文件，在进程里只要使用这个设备文件，就可以相互通信。</p><p>不管是匿名管道还是命名管道，进程写入的数据都是缓存在内核中，另一个进程读取数据时候自然也是从内核中获取，同时通信数据都遵循<strong>先进先出</strong>原则，不支持 lseek 之类的文件定位操作。</p><h2 id="2-消息队列"><a href="#2-消息队列" class="headerlink" title="2.消息队列"></a>2.消息队列</h2><p>管道的通信方式是效率低的，因此管道不适合进程间频繁地交换数据。</p><p>对于这个问题，<strong>消息队列</strong>的通信模式就可以解决。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>A进程给B进程发送消息：A 进程把数据放在对应的消息队列后就可以正常返回了，B 进程需要的时候再去读取数据就可以了。</p></blockquote><p><strong>消息队列是保存在内核中的消息链表</strong>，在发送数据时，会分成一个一个独立的数据单元，也就是消息体（数据块），消息体是用户自定义的数据类型，消息的发送方和接收方要约定好消息体的数据类型，所以每个消息体都是固定大小的存储块，不像管道是无格式的字节流数据。如果进程从消息队列中读取了消息体，内核就会把这个消息体删除。</p><p>消息队列生命周期随内核，如果没有释放消息队列或者没有关闭操作系统，消息队列会一直存在，而前面提到的匿名管道的生命周期，是随进程的创建而建立，随进程的结束而销毁。</p><p>但邮件的通信方式存在不足的地方有两点，<strong>一是通信不及时，二是附件也有大小限制</strong>，这同样也是消息队列通信不足的点。</p><p><strong>消息队列不适合比较大数据的传输</strong>，因为在内核中每个消息体都有一个最大长度的限制，同时所有队列所包含的全部消息体的总长度也是有上限。在 Linux 内核中，会有两个宏定义 <code>MSGMAX</code> 和 <code>MSGMNB</code>，它们以字节为单位，分别定义了一条消息的最大长度和一个队列的最大长度。</p><p><strong>消息队列通信过程中，存在用户态与内核态之间的数据拷贝开销</strong>，因为进程写入数据到内核中的消息队列时，会发生从用户态拷贝数据到内核态的过程，同理另一进程读取内核中的消息数据时，会发生从内核态拷贝数据到用户态的过程。</p><h2 id="3-共享内存"><a href="#3-共享内存" class="headerlink" title="3.共享内存"></a>3.共享内存</h2><p>消息队列的读取和写入的过程，都会有发生用户态与内核态之间的消息拷贝过程。那<strong>共享内存</strong>的方式，就很好的解决了这一问题。</p><p><strong>共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中</strong>。这样这个进程写入的东西，另外一个进程马上就能看到了，都不需要拷贝来拷贝去，传来传去，大大提高了进程间通信的速度。</p><h2 id="4-信号量"><a href="#4-信号量" class="headerlink" title="4.信号量"></a>4.信号量</h2><p>用了共享内存通信方式，带来新的问题，那就是如果多个进程同时修改同一个共享内存，很有可能就冲突了。例如两个进程都同时写一个地址，那先写的那个进程会发现内容被别人覆盖了。</p><p>为了<strong>防止多进程竞争</strong>共享资源，而造成的数据错乱，所以需要保护机制，使得共享的资源，在任意时刻只能被一个进程访问。正好，<strong>信号量</strong>就实现了这一保护机制。</p><p><strong>信号量其实是一个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据</strong>。</p><p>信号量表示资源的数量，控制信号量的方式有两种原子操作：</p><ul><li>一个是 <strong>P 操作</strong>，这个操作会把信号量减去 1，相减后如果信号量 &lt; 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 &gt;&#x3D; 0，则表明还有资源可使用，进程可正常继续执行。</li><li>另一个是 <strong>V 操作</strong>，这个操作会把信号量加上 1，相加后如果信号量 &lt;&#x3D; 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 &gt; 0，则表明当前没有阻塞中的进程；</li></ul><p>P 操作是用在进入共享资源之前，V 操作是用在离开共享资源之后，这两个操作是必须成对出现的。</p><p><strong>如果要使得两个进程互斥访问共享内存，我们可以初始化信号量为 <code>1</code></strong></p><p>具体的过程如下：</p><ul><li>进程 A 在访问共享内存前，先执行了 P 操作，由于信号量的初始值为 1，故在进程 A 执行 P 操作后信号量变为 0，表示共享资源可用，于是进程 A 就可以访问共享内存。</li><li>若此时，进程 B 也想访问共享内存，执行了 P 操作，结果信号量变为了 -1，这就意味着临界资源已被占用，因此进程 B 被阻塞。</li><li>直到进程 A 访问完共享内存，才会执行 V 操作，使得信号量恢复为 0，接着就会唤醒阻塞中的线程 B，使得进程 B 可以访问共享内存，最后完成共享内存的访问后，执行 V 操作，使信号量恢复到初始值 1。</li></ul><p><strong>信号初始化为 <code>1</code><strong>，就代表着是</strong>互斥信号量</strong>，它可以保证共享内存在任何时刻只有一个进程在访问，这就很好的保护了共享内存。</p><p>在多进程里，每个进程并不一定是顺序执行的，它们基本是以各自独立的、不可预知的速度向前推进，但有时候我们又希望多个进程能密切合作，以实现一个共同的任务。</p><p>例如，进程 A 是负责生产数据，而进程 B 是负责读取数据，这两个进程是相互合作、相互依赖的，进程 A 必须先生产了数据，进程 B 才能读取到数据，所以执行是有前后顺序的。</p><p>那么这时候，就可以<strong>用信号量来实现多进程同步的方式，我们可以初始化信号量为 <code>0</code>。</strong></p><img src="/oranfish.github.io/posts/0/11-%E4%BF%A1%E5%8F%B7%E9%87%8F-%E5%90%8C%E6%AD%A5.jpg" alt="img" style="zoom:33%;"><p>具体过程：</p><ul><li>如果进程 B 比进程 A 先执行了，那么执行到 P 操作时，由于信号量初始值为 0，故信号量会变为 -1，表示进程 A 还没生产数据，于是进程 B 就阻塞等待；</li><li>接着，当进程 A 生产完数据后，执行了 V 操作，就会使得信号量变为 0，于是就会唤醒阻塞在 P 操作的进程 B；</li><li>最后，进程 B 被唤醒后，意味着进程 A 已经生产了数据，于是进程 B 就可以正常读取数据了。</li></ul><p>可以发现，<strong>信号初始化为 <code>0</code><strong>，就代表着是</strong>同步信号量</strong>，它可以保证进程 A 应在进程 B 之前执行。</p><h2 id="5-信号"><a href="#5-信号" class="headerlink" title="5. 信号"></a>5. 信号</h2><p>上面说的进程间通信，都是常规状态下的工作模式。<strong>对于异常情况下的工作模式，就需要用「信号」的方式来通知进程。</strong></p><p>信号跟信号量虽然名字相似度 66.66%，但两者用途完全不一样，就好像 Java 和 JavaScript 的区别。</p><p>在 Linux 操作系统中， 为了响应各种各样的事件，提供了几十种信号，分别代表不同的意义。我们可以通过 <code>kill -l</code> 命令，查看所有的信号：</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">kill</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-l</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">1</span><span style="color: #BABED8">) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">6</span><span style="color: #BABED8">) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span></span><span class="line"><span style="color: #FFCB6B">11</span><span style="color: #BABED8">) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span></span><span class="line"><span style="color: #FFCB6B">16</span><span style="color: #BABED8">) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span></span><span class="line"><span style="color: #FFCB6B">21</span><span style="color: #BABED8">) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span></span><span class="line"><span style="color: #FFCB6B">26</span><span style="color: #BABED8">) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span></span><span class="line"><span style="color: #FFCB6B">31</span><span style="color: #BABED8">) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span></span><span class="line"><span style="color: #FFCB6B">38</span><span style="color: #BABED8">) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span></span><span class="line"><span style="color: #FFCB6B">43</span><span style="color: #BABED8">) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span></span><span class="line"><span style="color: #FFCB6B">48</span><span style="color: #BABED8">) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span></span><span class="line"><span style="color: #FFCB6B">53</span><span style="color: #BABED8">) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span></span><span class="line"><span style="color: #FFCB6B">58</span><span style="color: #BABED8">) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span></span><span class="line"><span style="color: #FFCB6B">63</span><span style="color: #BABED8">) SIGRTMAX-1  64) SIGRTMAX</span></span></code></pre></div><p>运行在 shell 终端的进程，我们可以通过键盘输入某些组合键的时候，给进程发送信号。例如</p><ul><li>Ctrl+C 产生 <code>SIGINT</code> 信号，表示终止该进程；</li><li>Ctrl+Z 产生 <code>SIGTSTP</code> 信号，表示停止该进程，但还未结束；</li></ul><p>如果进程在后台运行，可以通过 <code>kill</code> 命令的方式给进程发送信号，但前提需要知道运行中的进程 PID 号，例如：</p><ul><li>kill -9 1050 ，表示给 PID 为 1050 的进程发送 <code>SIGKILL</code> 信号，用来立即结束该进程；</li></ul><p>所以，信号事件的来源主要有<strong>硬件来源</strong>（如键盘 Cltr+C ）和软件来源（如 kill 命令）。</p><p>信号是进程间通信机制中<strong>唯一的异步通信机制</strong>，因为可以在任何时候发送信号给某一进程，一旦有信号产生，我们就有下面这几种，用户进程对信号的处理方式。</p><p><strong>1.执行默认操作</strong>。Linux 对每种信号都规定了默认操作，例如，上面列表中的 SIGTERM 信号，就是终止进程的意思。</p><p><strong>2.捕捉信号</strong>。我们可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数。</p><p><strong>3.忽略信号</strong>。当我们不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。有两个信号是应用进程无法捕捉和忽略的，即 <code>SIGKILL</code> 和 <code>SEGSTOP</code>，它们用于在任何时候中断或结束某一进程。</p><h2 id="6-Socket"><a href="#6-Socket" class="headerlink" title="6.Socket"></a>6.Socket</h2><p>前面提到的管道、消息队列、共享内存、信号量和信号都是在同一台主机上进行进程间通信，那要想<strong>跨网络与不同主机上的进程之间通信，就需要 Socket 通信了。</strong></p><p>创建 socket 的系统调用：</p><div class="language-c"><button title="Copy code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">socket</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">domain</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">type</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">protocal</span><span style="color: #89DDFF">)</span></span></code></pre></div><p>三个参数分别代表：</p><ul><li>domain 参数用来指定协议族，比如 AF_INET 用于 IPV4、AF_INET6 用于 IPV6、AF_LOCAL&#x2F;AF_UNIX 用于本机；</li><li>type 参数用来指定通信特性，比如 SOCK_STREAM 表示的是字节流，对应 TCP、SOCK_DGRAM 表示的是数据报，对应 UDP、SOCK_RAW 表示的是原始套接字；</li><li>protocal 参数原本是用来指定通信协议的，但现在基本废弃。因为协议已经通过前面两个参数指定完成，protocol 目前一般写成 0 即可；</li></ul><p>根据创建 socket 类型的不同，通信的方式也就不同：</p><ul><li>实现 TCP 字节流通信： socket 类型是 AF_INET 和 SOCK_STREAM；</li><li>实现 UDP 数据报通信：socket 类型是 AF_INET 和 SOCK_DGRAM；</li><li>实现本地进程间通信： 「本地字节流 socket 」类型是 AF_LOCAL 和 SOCK_STREAM，「本地数据报 socket 」类型是 AF_LOCAL 和 SOCK_DGRAM。另外，AF_UNIX 和 AF_LOCAL 是等价的，所以 AF_UNIX 也属于本地 socket；</li></ul><h3 id="6-1-针对-TCP-协议通信的-socket-编程模型"><a href="#6-1-针对-TCP-协议通信的-socket-编程模型" class="headerlink" title="6.1 针对 TCP 协议通信的 socket 编程模型"></a>6.1 针对 TCP 协议通信的 socket 编程模型</h3><img src="/oranfish.github.io/posts/0/12-TCP%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B.jpg" alt="img" style="zoom:30%;"><ul><li>服务端和客户端初始化 <code>socket</code>，得到文件描述符；</li><li>服务端调用 <code>bind</code>，将绑定在 IP 地址和端口;</li><li>服务端调用 <code>listen</code>，进行监听；</li><li>服务端调用 <code>accept</code>，等待客户端连接；</li><li>客户端调用 <code>connect</code>，向服务器端的地址和端口发起连接请求；</li><li>服务端 <code>accept</code> 返回用于传输的 <code>socket</code> 的文件描述符；</li><li>客户端调用 <code>write</code> 写入数据；服务端调用 <code>read</code> 读取数据；</li><li>客户端断开连接时，会调用 <code>close</code>，那么服务端 <code>read</code> 读取数据的时候，就会读取到了 <code>EOF</code>，待处理完数据后，服务端调用 <code>close</code>，表示连接关闭。</li></ul><p>这里需要注意的是，服务端调用 <code>accept</code> 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。</p><p>所以，监听的 socket 和真正用来传送数据的 socket，是「<strong>两个</strong>」 socket，一个叫作<strong>监听 socket</strong>，一个叫作<strong>已完成连接 socket</strong>。</p><p>成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。</p><h3 id="6-2-针对-UDP-协议通信的-socket-编程模型"><a href="#6-2-针对-UDP-协议通信的-socket-编程模型" class="headerlink" title="6.2 针对 UDP 协议通信的 socket 编程模型"></a>6.2 针对 UDP 协议通信的 socket 编程模型</h3><img src="/oranfish.github.io/posts/0/13-UDP%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B.jpg" alt="img" style="zoom:40%;"><p>UDP 是没有连接的，所以不需要三次握手，也就不需要像 TCP 调用 listen 和 connect，但是 UDP 的交互仍然需要 IP 地址和端口号，因此也需要 bind。</p><p>对于 UDP 来说，不需要要维护连接，那么也就没有所谓的发送方和接收方，甚至都不存在客户端和服务端的概念，只要有一个 socket 多台机器就可以任意通信，因此每一个 UDP 的 socket 都需要 bind。</p><p>另外，每次通信时，调用 sendto 和 recvfrom，都要传入目标主机的 IP 地址和端口。</p><h3 id="6-3-针对本地进程间通信的-socket-编程模型"><a href="#6-3-针对本地进程间通信的-socket-编程模型" class="headerlink" title="6.3 针对本地进程间通信的 socket 编程模型"></a>6.3 针对本地进程间通信的 socket 编程模型</h3><p>本地 socket 被用于在<strong>同一台主机上进程间通信</strong>的场景：</p><ul><li>本地 socket 的编程接口和 IPv4 、IPv6 套接字编程接口是一致的，可以支持「字节流」和「数据报」两种协议；</li><li>本地 socket 的实现效率大大高于 IPv4 和 IPv6 的字节流、数据报 socket 实现；</li></ul><p>对于本地字节流 socket，其 socket 类型是 AF_LOCAL 和 SOCK_STREAM。</p><p>对于本地数据报 socket，其 socket 类型是 AF_LOCAL 和 SOCK_DGRAM。</p><p>本地字节流 socket 和 本地数据报 socket 在 bind 的时候，不像 TCP 和 UDP 要绑定 IP 地址和端口，而是<strong>绑定一个本地文件</strong>，这也就是它们之间的最大区别。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><p>由于每个进程的用户空间都是独立的，不能相互访问，这时就需要借助内核空间来实现进程间通信，原因很简单，每个进程都是共享一个内核空间。</p><p>Linux 内核提供了不少进程间通信的方式，其中最简单的方式就是管道，管道分为「匿名管道」和「命名管道」。</p><p><strong>匿名管道</strong>顾名思义，它没有名字标识，匿名管道是特殊文件只存在于内存，没有存在于文件系统中，shell 命令中的「<code>|</code>」竖线就是匿名管道，通信的数据是<strong>无格式的流并且大小受限</strong>，通信的方式是<strong>单向</strong>的，数据只能在一个方向上流动，如果要双向通信，需要创建两个管道，再来<strong>匿名管道是只能用于存在父子关系的进程间通信</strong>，匿名管道的生命周期随着进程创建而建立，随着进程终止而消失。</p><p><strong>命名管道</strong>突破了匿名管道只能在亲缘关系进程间的通信限制，因为使用命名管道的前提，需要在文件系统创建一个类型为 p 的设备文件，那么毫无关系的进程就可以通过这个设备文件进行通信。另外，不管是匿名管道还是命名管道，进程写入的数据都是<strong>缓存在内核</strong>中，另一个进程读取数据时候自然也是从内核中获取，同时通信数据都遵循<strong>先进先出</strong>原则，不支持 lseek 之类的文件定位操作。</p><p><strong>消息队列</strong>克服了管道通信的数据是无格式的字节流的问题，消息队列实际上是保存在内核的「消息链表」，消息队列的消息体是可以用户自定义的数据类型，发送数据时，会被分成一个一个独立的消息体，当然接收数据时，也要与发送方发送的消息体的数据类型保持一致，这样才能保证读取的数据是正确的。消息队列通信的速度不是最及时的，毕竟<strong>每次数据的写入和读取都需要经过用户态与内核态之间的拷贝过程。</strong></p><p><strong>共享内存</strong>可以解决消息队列通信中用户态与内核态之间数据拷贝过程带来的开销，<strong>它直接分配一个共享空间，每个进程都可以直接访问</strong>，就像访问进程自己的空间一样快捷方便，不需要陷入内核态或者系统调用，大大提高了通信的速度，享有<strong>最快</strong>的进程间通信方式之名。但是便捷高效的共享内存通信，<strong>带来新的问题，多进程竞争同个共享资源会造成数据的错乱。</strong></p><p>那么，就需要<strong>信号量</strong>来保护共享资源，以确保任何时刻只能有一个进程访问共享资源，这种方式就是互斥访问。<strong>信号量不仅可以实现访问的互斥性，还可以实现进程间的同步</strong>，信号量其实是一个计数器，表示的是资源个数，其值可以通过两个原子操作来控制，分别是 <strong>P 操作和 V 操作</strong>。</p><p>与信号量名字很相似的叫<strong>信号</strong>，它俩名字虽然相似，但功能一点儿都不一样。信号是<strong>异步通信机制</strong>，信号可以在应用进程和内核之间直接交互，内核也可以利用信号来通知用户空间的进程发生了哪些系统事件，信号事件的来源主要有硬件来源（如键盘 Cltr+C ）和软件来源（如 kill 命令），一旦有信号发生，<strong>进程有三种方式响应信号 1. 执行默认操作、2. 捕捉信号、3. 忽略信号</strong>。有两个信号是应用进程无法捕捉和忽略的，即 <code>SIGKILL</code> 和 <code>SIGSTOP</code>，这是为了方便我们能在任何时候结束或停止某个进程。</p><p>前面说到的通信机制，都是工作于同一台主机，如果<strong>要与不同主机的进程间通信，那么就需要 Socket 通信了</strong>。Socket 实际上不仅用于不同的主机进程间通信，还可以用于本地主机进程间通信，可根据创建 Socket 的类型不同，分为三种常见的通信方式，一个是基于 TCP 协议的通信方式，一个是基于 UDP 协议的通信方式，一个是本地进程间通信方式。</p><p>以上，就是进程间通信的主要机制了。你可能会问了，那线程通信间的方式呢？</p><p>同个进程下的线程之间都是共享进程的资源，只要是共享变量都可以做到线程间通信，比如全局变量，所以对于线程间关注的不是通信方式，而是关注多线程竞争共享资源的问题，信号量也同样可以在线程间实现互斥与同步：</p><ul><li>互斥的方式，可保证任意时刻只有一个线程访问共享资源；</li><li>同步的方式，可保证线程 A 应在线程 B 之前执行；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-文件系统</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-文件系统的基本组成"><a href="#1-文件系统的基本组成" class="headerlink" title="1.文件系统的基本组成"></a>1.文件系统的基本组成</h2><p>文件系统是操作系统中负责管理持久数据的子系统，负责把用户文件存到磁盘硬件。</p><p>文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。</p><p>Linux 最经典的一句话是：「<strong>一切皆文件</strong>」</p><p>Linux 文件系统会为每个文件分配两个数据结构：<strong>索引节点（*index node*）和目录项（*directory entry*）</strong>，它们主要用来记录文件的元信息和目录层次结构。</p><ul><li>索引节点，也就是 <em>inode</em>，用来记录文件的元信息，比如 inode 编号、文件大小、访问权限、创建时间、修改时间、<strong>数据在磁盘的位置</strong>等等。索引节点是文件的<strong>唯一</strong>标识，它们之间一一对应，也同样都会被存储在硬盘中，所以<strong>索引节点同样占用磁盘空间</strong>。</li><li>目录项，也就是 <em>dentry</em>，用来记录文件的名字、<strong>索引节点指针</strong>以及与其他目录项的层级关联关系。多个目录项关联起来，就会形成目录结构，但它与索引节点不同的是，<strong>目录项是由内核维护的一个数据结构，不存放于磁盘，而是缓存在内存</strong>。</li></ul><p>索引节点唯一标识一个文件，目录项记录文件名字，目录项和索引节点关系为多对一，一个文件可以有多个别名。</p><p>目录也是文件，也是索引节点唯一，普通文件在磁盘保存的是文件数据，目录文件保存的是子目录或文件。</p><h3 id="1-1-目录项和目录区别"><a href="#1-1-目录项和目录区别" class="headerlink" title="1.1 目录项和目录区别"></a>1.1 目录项和目录区别</h3><p>目录是文件，持久化存储在磁盘。目录项是内核一个数据结构，缓存在内存。</p><p>如果查询目录频繁从磁盘读，效率会很低，所以内核会把已经读过的目录用目录项这个数据结构缓存在内存，下次再次读到相同的目录时，只需从内存读就可以，大大提高了文件系统的效率。</p><p>目录项这个数据结构不只是表示目录，也是可以表示文件的。</p><h3 id="1-2-文件数据如何存储在磁盘"><a href="#1-2-文件数据如何存储在磁盘" class="headerlink" title="1.2 文件数据如何存储在磁盘"></a>1.2 文件数据如何存储在磁盘</h3><p>磁盘读写最小单位是<strong>扇区</strong>，扇区大小为521B</p><p>文件系统把多个扇区组成一个<strong>逻辑块</strong>，每次读写的最小单位就是逻辑块。</p><p>Linux中逻辑块大小为4KB，也就是一次性读写8个扇区，提高读写效率。</p><img src="/oranfish.github.io/posts/0/%E7%9B%AE%E5%BD%95%E9%A1%B9%E5%92%8C%E7%B4%A2%E5%BC%95%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="img" style="zoom:50%;"><p>索引节点是存储在硬盘上的数据，那么为了加速文件的访问，通常会把索引节点加载到内存中</p><p>磁盘进行格式化的时候，会被分成三个存储区域，分别是超级块、索引节点区和数据块区。</p><ul><li><em>超级块</em>，用来存储文件系统的详细信息，比如块个数、块大小、空闲块等等。</li><li><em>索引节点区</em>，用来存储索引节点；</li><li><em>数据块区</em>，用来存储文件或目录数据；</li></ul><p>当需要使用的时候，才将其加载进内存，它们加载进内存的时机是不同的：</p><ul><li>超级块：当文件系统挂载时进入内存；</li><li>索引节点区：当文件被访问时进入内存；</li></ul><h2 id="2-虚拟文件系统"><a href="#2-虚拟文件系统" class="headerlink" title="2.虚拟文件系统"></a>2.虚拟文件系统</h2><p>文件系统的种类众多，而操作系统希望<strong>对用户提供一个统一的接口</strong>，于是在用户层与文件系统层引入了中间层，这个中间层就称为<strong>虚拟文件系统（*Virtual File System，VFS*）。</strong></p><p>VFS 定义了一组所有文件系统都支持的数据结构和标准接口。</p><img src="/oranfish.github.io/posts/0/%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.png" alt="img" style="zoom:33%;"><p>Linux 支持的文件系统根据存储位置的不同，可以把文件系统分为三类：</p><ul><li><em>磁盘的文件系统</em>：直接把数据存储在磁盘中，比如 Ext 2&#x2F;3&#x2F;4、XFS 等都是这类文件系统。</li><li><em>内存的文件系统</em>：这类文件系统的数据不是存储在硬盘的，而是占用内存空间，我们经常用到的 <code>/proc</code> 和 <code>/sys</code> 文件系统都属于这一类，读写这类文件，实际上是读写内核中相关的数据。</li><li><em>网络的文件系统</em>：用来访问其他计算机主机数据的文件系统，比如 NFS、SMB 等等。</li></ul><p>文件系统首先要先挂载到某个目录才可以正常使用，比如 Linux 系统在启动时，会把文件系统挂载到根目录。</p><h2 id="3-文件的使用"><a href="#3-文件的使用" class="headerlink" title="3.文件的使用"></a>3.文件的使用</h2><p>文件打开过程：</p><ul><li>首先用 <code>open</code> 系统调用打开文件，<code>open</code> 的参数中包含文件的路径名和文件名。</li><li>使用 <code>write</code> 写数据，其中 <code>write</code> 使用 <code>open</code> 所返回的<strong>文件描述符</strong>，并不使用文件名作为参数。</li><li>使用完文件后，要用 <code>close</code> 系统调用关闭文件，避免资源的泄露。</li></ul><p>打开文件后，系统会跟踪打开的所有文件，所谓跟踪即是操作系统为每个进程维护一个打开文件表，文件表里的每一项代表「<strong>文件描述符</strong>」，所以说文件描述符是打开文件的标识。</p><p>操作系统在打开文件表中维护着打开文件的状态和信息：</p><ul><li>文件指针：系统跟踪上次读写位置作为当前文件位置指针，这种指针对打开文件的某个进程来说是唯一的；</li><li>文件打开计数器：文件关闭时，操作系统必须重用其打开文件表条目，否则表内空间不够用。因为多个进程可能打开同一个文件，所以系统在删除打开文件条目之前，必须等待最后一个进程关闭文件，该计数器跟踪打开和关闭的数量，当该计数为 0 时，系统关闭文件，删除该条目；</li><li>文件磁盘位置：绝大多数文件操作都要求系统修改文件数据，该信息保存在内存中，以免每个操作都从磁盘中读取；</li><li>访问权限：每个进程打开文件都需要有一个访问模式（创建、只读、读写、添加等），该信息保存在进程的打开文件表中，以便操作系统能允许或拒绝之后的 I&#x2F;O 请求；</li></ul><p>在用户视角里，文件就是一个持久化的数据结构，但操作系统并不会关心你想存在磁盘上的任何的数据结构，操作系统的视角是如何把文件数据和磁盘块对应起来。</p><p>所以，用户和操作系统对文件的读写操作是有差异的，用户习惯以字节的方式读写文件，而操作系统则是以数据块来读写文件，那屏蔽掉这种差异的工作就是文件系统了。</p><p>我们来分别看一下，读文件和写文件的过程：</p><ul><li>当用户进程从文件读取 1 个字节大小的数据时，文件系统则需要获取字节所在的数据块，再返回数据块对应的用户进程所需的数据部分。</li><li>当用户进程把 1 个字节大小的数据写进文件时，文件系统则找到需要写入数据的数据块的位置，然后修改数据块中对应的部分，最后再把数据块写回磁盘。</li></ul><p>所以说，<strong>文件系统的基本操作单位是数据块</strong>。</p><h2 id="4-文件的存储"><a href="#4-文件的存储" class="headerlink" title="4.文件的存储"></a>4.文件的存储</h2><p>文件的数据存储在硬盘上，数据在磁盘上的存放方式有以下两种：</p><ul><li><strong>连续空间</strong>存放方式</li><li><strong>非连续空间</strong>存放方式</li></ul><p>其中，非连续空间存放方式又可以分为<strong>「链表方式」</strong>和<strong>「索引方式」</strong>，重点分析它们的存储效率和读写性能。</p><h3 id="4-1-连续空间存放方式"><a href="#4-1-连续空间存放方式" class="headerlink" title="4.1 连续空间存放方式"></a>4.1 连续空间存放方式</h3><p><strong>文件存放在磁盘「连续的」物理空间中</strong>。这种模式下，文件的数据都是紧密相连，<strong>读写效率很高</strong>，因为一次磁盘寻道就可以读出整个文件。</p><p>使用连续存放方式前提：必须知道文件的大小。</p><p><strong>文件头里需要指定「起始块的位置」和「长度」</strong>，有了这两个信息就可以很好的表示文件存放方式是一块连续的磁盘空间。</p><p>注意，此处说的文件头，就类似于 Linux 的 inode。</p><img src="/oranfish.github.io/posts/0/%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F.png" alt="连续空间存放方式" style="zoom:50%;"><p>连续空间存放的方式虽然读写效率高，<strong>但是有「磁盘空间碎片」和「文件长度不易扩展」的缺陷。</strong></p><p>磁盘空间碎片与之前的内部存储碎片相似，文件存放小于空间空缺可以存放，存放后的剩余空间为碎片，大于则不能存放。</p><p>文件长度扩展不方便，唯一的方式也是挪动，效率低下。</p><p>使用非连续空间存放方式可以来解决这些缺陷。</p><h3 id="4-2-非连续空间存放方式"><a href="#4-2-非连续空间存放方式" class="headerlink" title="4.2 非连续空间存放方式"></a>4.2 非连续空间存放方式</h3><p>非连续空间存放方式分为<strong>「链表方式」</strong>和<strong>「索引方式」</strong>。</p><h4 id="4-2-1-链表方式"><a href="#4-2-1-链表方式" class="headerlink" title="4.2.1 链表方式"></a>4.2.1 链表方式</h4><p>链表的方式存放是<strong>离散的，不用连续的</strong>，于是就可以<strong>消除磁盘碎片</strong>，可大大提高磁盘空间的利用率，同时<strong>文件的长度可以动态扩展</strong>。根据实现的方式的不同，链表可分为「<strong>隐式链表</strong>」和「<strong>显式链接</strong>」两种形式。</p><p><strong>隐式链表：</strong></p><p>文件要以「<strong>隐式链表</strong>」的方式存放的话，<strong>实现的方式是文件头要包含「第一块」和「最后一块」的位置，并且每个数据块里面留出一个指针空间，用来存放下一个数据块的位置</strong>，这样一个数据块连着一个数据块，从链头开始就可以顺着指针找到所有的数据块，所以存放的方式可以是不连续的。</p><img src="/oranfish.github.io/posts/0/%E9%9D%9E%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F-%E9%93%BE%E8%A1%A8%E6%96%B9%E5%BC%8F.png" alt="隐式链表" style="zoom:50%;"><p>隐式链表的存放方式的<strong>缺点在于无法直接访问数据块，只能通过指针顺序访问文件，以及数据块指针消耗了一定的存储空间</strong>。隐式链接分配的<strong>稳定性较差</strong>，系统在运行过程中由于软件或者硬件错误<strong>导致链表中的指针丢失或损坏，会导致文件数据的丢失。</strong></p><p><strong>显式链表：</strong></p><p>如果取出每个磁盘块的指针，把它放在内存的一个表中，就可以解决上述隐式链表的两个不足。这种实现方式是「<strong>显式链接</strong>」，它指<strong>把用于链接文件各数据块的指针，显式地存放在内存的一张链接表中</strong>，该表在整个磁盘仅设置一张，<strong>每个表项中存放链接指针，指向下一个数据块号</strong>。</p><p>内存中的这样一个表格称为<strong>文件分配表（*File Allocation Table，FAT*）</strong>。</p><img src="/oranfish.github.io/posts/0/%E6%96%87%E4%BB%B6%E5%88%86%E9%85%8D%E8%A1%A8.png" alt="显式链接" style="zoom:25%;"><p>由于查找记录的过程是在内存中进行的，因而不仅显著地<strong>提高了检索速度</strong>，而且<strong>大大减少了访问磁盘的次数</strong>。但也正是整个表都存放在内存中的关系，它的主要的缺点是<strong>不适用于大磁盘</strong>。</p><h4 id="4-2-2-索引方式"><a href="#4-2-2-索引方式" class="headerlink" title="4.2.2 索引方式"></a>4.2.2 索引方式</h4><p>索引的实现是为每个文件创建一个「<strong>索引数据块</strong>」，里面存放的是<strong>指向文件数据块的指针列表</strong>，说白了就像书的目录一样，要找哪个章节的内容，看目录查就可以。</p><p><strong>文件头需要包含指向「索引数据块」的指针</strong>，这样就可以通过文件头知道索引数据块的位置，再通过索引数据块里的索引信息找到对应的数据块。</p><p>创建文件时，索引块的所有指针都设为空。当首次写入第 i 块时，先从空闲空间中取得一个块，再将其地址写到索引块的第 i 个条目。</p><img src="/oranfish.github.io/posts/0/%E9%9D%9E%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F-%E7%B4%A2%E5%BC%95%E6%96%B9%E5%BC%8F.png" alt="索引的方式" style="zoom:33%;"><p>索引的方式优点在于：</p><ul><li>文件的创建、增大、缩小很方便；</li><li>不会有碎片的问题；</li><li>支持顺序读写和随机读写；</li></ul><p>由于索引数据也是存放在磁盘块的，如果文件很小，明明只需一块就可以存放的下，但还是需要额外分配一块来存放索引数据，所以缺陷之一就是存储索引带来的开销。</p><p>如何处理过大文件（大于一个索引数据块）：</p><p>链表 + 索引的组合，这种组合称为「<strong>链式索引块</strong>」，它的实现方式是<strong>在索引数据块留出一个存放下一个索引数据块的指针</strong>，于是当一个索引数据块的索引信息用完了，就可以通过指针的方式，找到下一个索引数据块的信息。那这种方式也会出现前面提到的链表方式的问题，万一某个指针损坏了，后面的数据也就会无法读取了。</p><img src="/oranfish.github.io/posts/0/%E9%93%BE%E5%BC%8F%E7%B4%A2%E5%BC%95%E5%9D%97.png" alt="链式索引块" style="zoom:33%;"><p>还有另外一种组合方式是索引 + 索引的方式，这种组合称为「<strong>多级索引块</strong>」，实现方式是<strong>通过一个索引块来存放多个索引数据块</strong>，一层套一层索引。</p><img src="/oranfish.github.io/posts/0/%E5%A4%9A%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%9D%97.png" alt="多级索引块" style="zoom:33%;"><h3 id="4-3-Unix文件的实现方式"><a href="#4-3-Unix文件的实现方式" class="headerlink" title="4.3 Unix文件的实现方式"></a>4.3 Unix文件的实现方式</h3><img src="/oranfish.github.io/posts/0/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83.png" alt="img" style="zoom:50%;"><p>那早期 Unix 文件系统是组合了前面的文件存放方式的优点</p><img src="/oranfish.github.io/posts/0/Unix%20%E5%A4%9A%E7%BA%A7%E7%B4%A2%E5%BC%95.png" alt="早期 Unix 文件系统" style="zoom:25%;"><p>它是根据文件的大小，存放的方式会有所变化：</p><ul><li>如果存放文件所需的数据块小于 10 块，则采用直接查找的方式；</li><li>如果存放文件所需的数据块超过 10 块，则采用一级间接索引方式；</li><li>如果前面两种方式都不够存放大文件，则采用二级间接索引方式；</li><li>如果二级间接索引也不够存放大文件，这采用三级间接索引方式；</li></ul><p>那么，文件头（<em>Inode</em>）就需要包含 13 个指针：</p><ul><li>10 个指向数据块的指针；</li><li>第 11 个指向索引块的指针；</li><li>第 12 个指向二级索引块的指针；</li><li>第 13 个指向三级索引块的指针；</li></ul><p>所以，这种方式能很灵活地支持小文件和大文件的存放：</p><ul><li>对于小文件使用直接查找的方式可减少索引数据块的开销；</li><li>对于大文件则以多级索引的方式来支持，所以大文件在访问数据块时需要大量查询；</li></ul><h2 id="5-空闲空间管理"><a href="#5-空闲空间管理" class="headerlink" title="5.空闲空间管理"></a>5.空闲空间管理</h2><p>针对磁盘的空闲空间也是要引入管理的机制，接下来介绍几种常见的方法：</p><ul><li>空闲表法</li><li>空闲链表法</li><li>位图法</li></ul><h3 id="5-1-空闲表法"><a href="#5-1-空闲表法" class="headerlink" title="5.1 空闲表法"></a>5.1 空闲表法</h3><p>空闲表法就是为所有空闲空间建立一张表，表内容包括空闲区的第一个块号和该空闲区的块个数，注意，这个方式是连续分配的。</p><p>当请求分配磁盘空间时，系统依次扫描空闲表里的内容，直到找到一个合适的空闲区域为止。当用户撤销一个文件时，系统回收文件空间。这时，也需顺序扫描空闲表，寻找一个空闲表条目并将释放空间的第一个物理块号及它占用的块数填到这个条目中。</p><p>这种方法仅当有少量的空闲区时才有较好的效果。因为，如果存储空间中有着大量的小的空闲区，则空闲表变得很大，这样查询效率会很低。另外，这种分配技术适用于建立连续文件。</p><img src="/oranfish.github.io/posts/0/%E7%A9%BA%E9%97%B2%E8%A1%A8%E6%B3%95.png" alt="空闲表法" style="zoom:33%;"><h3 id="5-2-空闲链表法"><a href="#5-2-空闲链表法" class="headerlink" title="5.2 空闲链表法"></a>5.2 空闲链表法</h3><p>我们也可以使用「链表」的方式来管理空闲空间，每一个空闲块里有一个指针指向下一个空闲块，这样也能很方便的找到空闲块并管理起来。</p><p>当创建文件需要一块或几块时，就从链头上依次取下一块或几块。反之，当回收空间时，把这些空闲块依次接到链头上。</p><p>这种技术只要在主存中保存一个指针，令它指向第一个空闲块。其特点是简单，但不能随机访问，工作效率低，因为每当在链上增加或移动空闲块时需要做很多 I&#x2F;O 操作，同时数据块的指针消耗了一定的存储空间。</p><p>空闲表法和空闲链表法都不适合用于大型文件系统，因为这会使空闲表或空闲链表太大。</p><img src="/oranfish.github.io/posts/0/%E7%A9%BA%E9%97%B2%E5%9D%97%E9%93%BE%E8%A1%A8.png" alt="空闲链表法" style="zoom:50%;"><h3 id="5-3-位图法"><a href="#5-3-位图法" class="headerlink" title="5.3 位图法"></a>5.3 位图法</h3><p>位图是利用二进制的一位来表示磁盘中一个盘块的使用情况，磁盘上所有的盘块都有一个二进制位与之对应。</p><p>当值为 0 时，表示对应的盘块空闲，值为 1 时，表示对应的盘块已分配。它形式如下：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">1111110011111110001110110111111100111 ...</span></span></code></pre></div><p>在 Linux 文件系统就采用了位图的方式来管理空闲空间，不仅用于数据空闲块的管理，还用于 inode 空闲块的管理，因为 inode 也是存储在磁盘的，自然也要有对其管理。</p><h2 id="6-文件系统的结构"><a href="#6-文件系统的结构" class="headerlink" title="6.文件系统的结构"></a>6.文件系统的结构</h2><p>前面提到 Linux 是用位图的方式管理空闲空间，用户在创建一个新文件时，Linux 内核会通过 inode 的位图找到空闲可用的 inode，并进行分配。要存储数据时，会通过块的位图找到空闲的块，并分配，但仔细计算一下还是有问题的。</p><p>数据块的位图是放在磁盘块里的，假设是放在一个块里，一个块 4K，每位表示一个数据块，共可以表示 <code>4 * 1024 * 8 = 2^15</code> 个空闲块，由于 1 个数据块是 4K 大小，那么最大可以表示的空间为 <code>2^15 * 4 * 1024 = 2^27</code> 个 byte，也就是 128M。</p><p>也就是说按照上面的结构，如果采用「一个块的位图 + 一系列的块」，外加「一个块的 inode 的位图 + 一系列的 inode 的结构」能表示的最大空间也就 128M，这太少了，现在很多文件都比这个大。</p><p>在 Linux 文件系统，把这个结构称为一个<strong>块组</strong>，那么有 N 多的块组，就能够表示 N 大的文件。</p><p>下图给出了 Linux Ext2 整个文件系统的结构和块组的内容，文件系统都由大量块组组成，在硬盘上相继排布：</p><p><img src="/oranfish.github.io/posts/0/OS-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E5%9D%97%E7%BB%84.png" alt="img"></p><p>最前面的第一个块是引导块，在系统启动时用于启用引导，接着后面就是一个一个连续的块组了，块组的内容如下：</p><ul><li><em>超级块</em>，包含的是文件系统的重要信息，比如 inode 总个数、块总个数、每个块组的 inode 个数、每个块组的块个数等等。</li><li><em>块组描述符</em>，包含文件系统中各个块组的状态，比如块组中空闲块和 inode 的数目等，每个块组都包含了文件系统中「所有块组的组描述符信息」。</li><li><em>数据位图和 inode 位图</em>， 用于表示对应的数据块或 inode 是空闲的，还是被使用中。</li><li><em>inode 列表</em>，包含了块组中所有的 inode，inode 用于保存文件系统中与各个文件和目录相关的所有元数据。</li><li><em>数据块</em>，包含文件的有用数据。</li></ul><p>你可以会发现每个块组里有很多重复的信息，比如<strong>超级块和块组描述符表，这两个都是全局信息，而且非常的重要</strong>，这么做是有两个原因：</p><ul><li>如果系统崩溃破坏了超级块或块组描述符，有关文件系统结构和内容的所有信息都会丢失。如果有冗余的副本，该信息是可能恢复的。</li><li>通过使文件和管理数据尽可能接近，减少了磁头寻道和旋转，这可以提高文件系统的性能。</li></ul><p>不过，Ext2 的后续版本采用了稀疏技术。该做法是，超级块和块组描述符表不再存储到文件系统的每个块组中，而是只写入到块组 0、块组 1 和其他 ID 可以表示为 3、 5、7 的幂的块组中。</p><h2 id="7-目录的存储"><a href="#7-目录的存储" class="headerlink" title="7.目录的存储"></a>7.目录的存储</h2><p>基于 Linux 一切皆文件的设计思想，目录其实也是个文件，你甚至可以通过 <code>vim</code> 打开它，它也有 inode，inode 里面也是指向一些块。</p><p>和普通文件不同的是，<strong>普通文件的块里面保存的是文件数据，而目录文件的块里面保存的是目录里面一项一项的文件信息。</strong></p><p>在目录文件的块中，最简单的保存格式就是<strong>列表</strong>，就是一项一项地将目录下的文件信息（如文件名、文件 inode、文件类型等）列在表里。</p><p>列表中每一项就代表该目录下的文件的文件名和对应的 inode，通过这个 inode，就可以找到真正的文件。</p><img src="/oranfish.github.io/posts/0/%E7%9B%AE%E5%BD%95%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="目录格式哈希表" style="zoom:33%;"><p>如果一个目录有超级多的文件，我们要想在这个目录下找文件，按照列表一项一项的找，效率就不高了。</p><p>于是，保存目录的格式改成<strong>哈希表</strong>，对文件名进行哈希计算，把哈希值保存起来，如果我们要查找一个目录下面的文件名，可以通过名称取哈希。如果哈希能够匹配上，就说明这个文件的信息在相应的块里面。</p><p>Linux 系统的 ext 文件系统就是采用了哈希表，来保存目录的内容，这种方法的优点是查找非常迅速，插入和删除也较简单，不过需要一些预备措施来避免哈希冲突。</p><p>目录查询是通过在磁盘上反复搜索完成，需要不断地进行 I&#x2F;O 操作，开销较大。所以，为了减少 I&#x2F;O 操作，把当前使用的文件目录缓存在内存，以后要使用该文件时只要在内存中操作，从而降低了磁盘操作次数，提高了文件系统的访问速度。</p><h2 id="8-软链接和硬链接"><a href="#8-软链接和硬链接" class="headerlink" title="8.软链接和硬链接"></a>8.软链接和硬链接</h2><p>有时候我们希望给某个文件取个别名，那么在 Linux 中可以通过<strong>硬链接（*Hard Link*）</strong> 和<strong>软链接（*Symbolic Link*）</strong> 的方式来实现，它们都是比较特殊的文件，但是实现方式也是不相同的。</p><p>硬链接是<strong>多个目录项中的「索引节点」指向一个文件</strong>，也就是指向同一个 inode，但是 inode 是不可能跨越文件系统的，每个文件系统都有各自的 inode 数据结构和列表，所以<strong>硬链接是不可用于跨文件系统的</strong>。由于多个目录项都是指向一个 inode，那么<strong>只有删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。</strong></p><img src="/oranfish.github.io/posts/0/%E7%A1%AC%E9%93%BE%E6%8E%A5-2.png" alt="硬链接" style="zoom:50%;"><p>软链接相当于重新创建一个文件，这个文件有<strong>独立的 inode</strong>，但是这个<strong>文件的内容是另外一个文件的路径</strong>，所以访问软链接的时候，实际上相当于访问到了另外一个文件，所以<strong>软链接是可以跨文件系统的</strong>，甚至<strong>目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。</strong></p><img src="/oranfish.github.io/posts/0/%E8%BD%AF%E9%93%BE%E6%8E%A5.png" alt="软链接" style="zoom: 50%;"><h2 id="9-文件I-O"><a href="#9-文件I-O" class="headerlink" title="9.文件I&#x2F;O"></a>9.文件I&#x2F;O</h2><h3 id="9-1-缓存与非缓存I-O"><a href="#9-1-缓存与非缓存I-O" class="headerlink" title="9.1 缓存与非缓存I&#x2F;O"></a>9.1 缓存与非缓存I&#x2F;O</h3><p>文件操作的标准库是可以实现数据的缓存，那么<strong>根据「是否利用标准库缓冲」，可以把文件 I&#x2F;O 分为缓冲 I&#x2F;O 和非缓冲 I&#x2F;O</strong>：</p><ul><li>缓冲 I&#x2F;O，利用的是标准库的缓存实现文件的加速访问，而标准库再通过系统调用访问文件。</li><li>非缓冲 I&#x2F;O，直接通过系统调用访问文件，不经过标准库缓存。</li></ul><p>这里所说的「缓冲」特指标准库内部实现的缓冲。</p><p>比方说，很多程序遇到换行时才真正输出，而换行前的内容，其实就是被标准库暂时缓存了起来，这样做的目的是，减少系统调用的次数，毕竟系统调用是有 CPU 上下文切换的开销的。</p><h3 id="9-2-直接与非直接I-O"><a href="#9-2-直接与非直接I-O" class="headerlink" title="9.2 直接与非直接I&#x2F;O"></a>9.2 直接与非直接I&#x2F;O</h3><p>Linux 内核为了减少磁盘 I&#x2F;O 次数，在系统调用后，会把用户数据拷贝到内核中缓存起来，这个内核缓存空间也就是「页缓存」，只有当缓存满足某些条件的时候，才发起磁盘 I&#x2F;O 的请求。</p><p><strong>根据是「否利用操作系统的缓存」，可以把文件 I&#x2F;O 分为直接 I&#x2F;O 与非直接 I&#x2F;O</strong>：</p><ul><li>直接 I&#x2F;O，不会发生内核缓存和用户程序之间数据复制，而是直接经过文件系统访问磁盘。</li><li>非直接 I&#x2F;O，读操作时，数据从内核缓存中拷贝给用户程序，写操作时，数据从用户程序拷贝给内核缓存，再由内核决定什么时候写入数据到磁盘。</li></ul><p>如果你在使用文件操作类的系统调用函数时，指定了 <code>O_DIRECT</code> 标志，则表示使用直接 I&#x2F;O。如果没有设置过，默认使用的是非直接 I&#x2F;O。</p><p>以下几种场景会触发内核缓存的数据写入磁盘：</p><ul><li>在调用 <code>write</code> 的最后，当发现内核缓存的数据太多的时候，内核会把数据写到磁盘上；</li><li>用户主动调用 <code>sync</code>，内核缓存会刷到磁盘上；</li><li>当内存十分紧张，无法再分配页面时，也会把内核缓存的数据刷到磁盘上；</li><li>内核缓存的数据的缓存时间超过某个时间时，也会把数据刷到磁盘上；</li></ul><h3 id="9-3-阻塞与非阻塞I-O-VS-同步与异步I-O"><a href="#9-3-阻塞与非阻塞I-O-VS-同步与异步I-O" class="headerlink" title="9.3 阻塞与非阻塞I&#x2F;O VS  同步与异步I&#x2F;O"></a>9.3 阻塞与非阻塞I&#x2F;O VS  同步与异步I&#x2F;O</h3><p><strong>阻塞 I&#x2F;O</strong>，当用户程序执行 <code>read</code> ，线程会被阻塞，一直等到内核数据准备好，并把数据从内核缓冲区拷贝到应用程序的缓冲区中，当拷贝过程完成，<code>read</code> 才会返回。</p><p>注意，<strong>阻塞等待的是「内核数据准备好」和「数据从内核态拷贝到用户态」这两个过程</strong>。</p><img src="/oranfish.github.io/posts/0/%E9%98%BB%E5%A1%9E%20I_O.png" alt="阻塞 I/O" style="zoom:50%;"><p><strong>非阻塞 I&#x2F;O</strong>，非阻塞的 read 请求在数据未准备好的情况下立即返回，可以继续往下执行，此时应用程序不断轮询内核，直到数据准备好，内核将数据拷贝到应用程序缓冲区，<code>read</code> 调用才可以获取到结果。</p><img src="/oranfish.github.io/posts/0/%E9%9D%9E%E9%98%BB%E5%A1%9E%20I_O%20.png" alt="非阻塞 I/O" style="zoom:50%;"><p>注意，<strong>这里最后一次 read 调用，获取数据的过程，是一个同步的过程，是需要等待的过程。这里的同步指的是内核态的数据拷贝到用户程序的缓存区这个过程。</strong></p><p>为了解决程序每次轮询内核的I&#x2F;O上是否准备好的问题，产生了<strong>I&#x2F;O多路复用</strong>技术，如 select、poll，它是通过 I&#x2F;O 事件分发，当内核数据准备好时，再以事件通知应用程序进行操作。</p><p>这个做法大大改善了 CPU 的利用率，因为当调用了 I&#x2F;O 多路复用接口，如果没有事件发生，那么当前线程就会发生阻塞，这时 CPU 会切换其他线程执行任务，等内核发现有事件到来的时候，会唤醒阻塞在 I&#x2F;O 多路复用接口的线程，然后用户可以进行后续的事件处理。</p><p>整个流程要比阻塞 IO 要复杂，似乎也更浪费性能。但 <strong>I&#x2F;O 多路复用接口最大的优势在于，用户可以在一个线程内同时处理多个 socket 的 IO 请求</strong>。</p><p>用户可以注册多个 socket，然后不断地调用 I&#x2F;O 多路复用接口读取被激活的 socket，即可达到在同一个线程内同时处理多个 IO 请求的目的。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。</p><p>下图是使用 select I&#x2F;O 多路复用过程。注意，<code>read</code> 获取数据的过程（数据从内核态拷贝到用户态的过程），也是一个<strong>同步的过程</strong>，需要等待：</p><img src="/oranfish.github.io/posts/0/%E5%9F%BA%E4%BA%8E%E9%9D%9E%E9%98%BB%E5%A1%9E%20I_O%20%E7%9A%84%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.png" alt="I/O 多路复用" style="zoom:50%;"><p>实际上，无论是阻塞 I&#x2F;O、非阻塞 I&#x2F;O，还是基于非阻塞 I&#x2F;O 的多路复用<strong>都是同步调用。因为它们在 read 调用时，内核将数据从内核空间拷贝到应用程序空间，过程都是需要等待的，也就是说这个过程是同步的，如果内核实现的拷贝效率不高，read 调用就会在这个同步过程中等待比较长的时间。</strong></p><p>而真正的<strong>异步 I&#x2F;O</strong> 是「内核数据准备好」和「数据从内核态拷贝到用户态」这两个过程都不用等待。</p><p>当我们发起 <code>aio_read</code> 之后，就立即返回，内核自动将数据从内核空间拷贝到应用程序空间，这个拷贝过程同样是异步的，内核自动完成的，和前面的同步操作不一样，应用程序并不需要主动发起拷贝动作。过程如下图：</p><img src="/oranfish.github.io/posts/0/%E5%BC%82%E6%AD%A5%20I_O.png" alt="异步 I/O" style="zoom:50%;"><p>下面这张图，总结了以上几种 I&#x2F;O 模型：</p><img src="/oranfish.github.io/posts/0/%E5%90%8C%E6%AD%A5VS%E5%BC%82%E6%AD%A5IO.png" alt="img" style="zoom:50%;"><p>在前面我们知道了，I&#x2F;O 是分为两个过程的：</p><ol><li>数据准备的过程</li><li>数据从内核空间拷贝到用户进程缓冲区的过程</li></ol><p>阻塞 I&#x2F;O 会阻塞在「过程 1 」和「过程 2」，而非阻塞 I&#x2F;O 和基于非阻塞 I&#x2F;O 的多路复用只会阻塞在「过程 2」，所以这三个都可以认为是同步 I&#x2F;O。</p><p>异步 I&#x2F;O 则不同，「过程 1 」和「过程 2 」都不会阻塞。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>用故事去理解这几种 I&#x2F;O 模型</p><p>举个你去饭堂吃饭的例子，你好比用户程序，饭堂好比操作系统。</p><p>阻塞 I&#x2F;O 好比，你去饭堂吃饭，但是饭堂的菜还没做好，然后你就一直在那里等啊等，等了好长一段时间终于等到饭堂阿姨把菜端了出来（数据准备的过程），但是你还得继续等阿姨把菜（内核空间）打到你的饭盒里（用户空间），经历完这两个过程，你才可以离开。</p><p>非阻塞 I&#x2F;O 好比，你去了饭堂，问阿姨菜做好了没有，阿姨告诉你没，你就离开了，过几十分钟，你又来饭堂问阿姨，阿姨说做好了，于是阿姨帮你把菜打到你的饭盒里，这个过程你是得等待的。</p><p>基于非阻塞的 I&#x2F;O 多路复用好比，你去饭堂吃饭，发现有一排窗口，饭堂阿姨告诉你这些窗口都还没做好菜，等做好了再通知你，于是等啊等（<code>select</code> 调用中），过了一会阿姨通知你菜做好了，但是不知道哪个窗口的菜做好了，你自己看吧。于是你只能一个一个窗口去确认，后面发现 5 号窗口菜做好了，于是你让 5 号窗口的阿姨帮你打菜到饭盒里，这个打菜的过程你是要等待的，虽然时间不长。打完菜后，你自然就可以离开了。</p><p>异步 I&#x2F;O 好比，你让饭堂阿姨将菜做好并把菜打到饭盒里后，把饭盒送到你面前，整个过程你都不需要任何等待。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-调度算法</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-进程调度算法"><a href="#1-进程调度算法" class="headerlink" title="1.进程调度算法"></a>1.进程调度算法</h2><p>当 CPU 空闲时，操作系统就选择内存中的某个「就绪状态」的进程，并给其分配 CPU。</p><p>非抢占式的意思就是，当进程正在运行时，它就会一直运行，直到该进程完成或发生某个事件而被阻塞时，才会把 CPU 让给其他进程。</p><p>抢占式调度，顾名思义就是进程正在运行的时，可以被打断，使其把 CPU 让给其他进程。那抢占的原则一般有三种，分别是时间片原则、优先权原则、短作业优先原则。</p><p>什么时候会发生 CPU 调度呢？通常有以下情况：</p><ol><li>当进程从运行状态转到等待状态；</li><li>当进程从运行状态转到就绪状态；</li><li>当进程从等待状态转到就绪状态；</li><li>当进程从运行状态转到终止状态；</li></ol><p>其中发生在 1 和 4 两种情况下的调度称为「非抢占式调度」，2 和 3 两种情况下发生的调度称为「抢占式调度」。</p><h3 id="1-1-先来先服务算法FCFS"><a href="#1-1-先来先服务算法FCFS" class="headerlink" title="1.1 先来先服务算法FCFS"></a>1.1 先来先服务算法FCFS</h3><p>最简单的一个调度算法，就是非抢占式的<strong>先来先服务（*First Come First Severd, FCFS*）算法</strong>了。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/24-%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1.jpg" alt="FCFS 调度算法"></p><p>顾名思义，先来后到，<strong>每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。</strong></p><p>这似乎很公平，但是当一个长作业先运行了，那么后面的短作业等待的时间就会很长，不利于短作业。</p><p>FCFS 对长作业有利，适用于 CPU 繁忙型作业的系统，而不适用于 I&#x2F;O 繁忙型作业的系统。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604214844570.png" alt="image-20240604214844570"></p><h3 id="1-2-最短作业优先调度算法SJF-SPN"><a href="#1-2-最短作业优先调度算法SJF-SPN" class="headerlink" title="1.2 最短作业优先调度算法SJF&#x2F;SPN"></a>1.2 最短作业优先调度算法SJF&#x2F;SPN</h3><p><strong>最短作业优先（*Shortest Job First, SJF*）调度算法</strong>同样也是顾名思义，它会<strong>优先选择运行时间最短的进程来运行</strong>，这有助于提高系统的吞吐量。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/25-%E6%9C%80%E7%9F%AD%E4%BD%9C%E4%B8%9A%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95.jpg" alt="SJF 调度算法"></p><p>这显然对长作业不利，很容易造成一种极端现象。</p><p>比如，一个长作业在就绪队列等待运行，而这个就绪队列有非常多的短作业，那么就会使得长作业不断的往后推，周转时间变长，致使长作业长期不会被运行。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604215144143.png" alt="image-20240604215144143"></p><h3 id="1-3-高响应比优先调度算法HRRN"><a href="#1-3-高响应比优先调度算法HRRN" class="headerlink" title="1.3 高响应比优先调度算法HRRN"></a>1.3 高响应比优先调度算法HRRN</h3><p>前面的「先来先服务调度算法」和「最短作业优先调度算法」都没有很好的权衡短作业和长作业。</p><p>那么，<strong>高响应比优先 （*Highest Response Ratio Next, HRRN*）调度算法</strong>主要是权衡了短作业和长作业。</p><p><strong>每次进行进程调度时，先计算「响应比优先级」，然后把「响应比优先级」最高的进程投入运行</strong>，「响应比优先级」的计算公式：</p><img src="/oranfish.github.io/posts/0/26-%E5%93%8D%E5%BA%94%E6%AF%94%E5%85%AC%E5%BC%8F.jpg" alt="img" style="zoom:33%;"><p>从上面的公式，可以发现：</p><ul><li>如果两个进程的「等待时间」相同时，「要求的服务时间」越短，「响应比」就越高，这样短作业的进程容易被选中运行；</li><li>如果两个进程「要求的服务时间」相同时，「等待时间」越长，「响应比」就越高，这就兼顾到了长作业进程，因为进程的响应比可以随时间等待的增加而提高，当其等待时间足够长时，其响应比便可以升到很高，从而获得运行的机会；</li></ul><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604215832454.png" alt="image-20240604215832454"></p><h3 id="1-4-时间片轮转调度算法RR"><a href="#1-4-时间片轮转调度算法RR" class="headerlink" title="1.4 时间片轮转调度算法RR"></a>1.4 时间片轮转调度算法RR</h3><p>最古老、最简单、最公平且使用最广的算法就是<strong>时间片轮转（*Round Robin, RR*）调度算法</strong>。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/27-%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%AF%A2.jpg" alt="RR 调度算法"></p><p><strong>每个进程被分配一个时间段，称为时间片（*Quantum*），即允许该进程在该时间段中运行。</strong></p><ul><li>如果时间片用完，进程还在运行，那么将会把此进程从 CPU 释放出来，并把 CPU 分配另外一个进程；</li><li>如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换；</li></ul><p>另外，时间片的长度就是一个很关键的点：</p><ul><li>如果时间片设得太短会导致过多的进程上下文切换，降低了 CPU 效率；</li><li>如果设得太长又可能引起对短作业进程的响应时间变长。将</li></ul><p>通常时间片设为 <code>20ms~50ms</code> 通常是一个比较合理的折中值。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604215902991.png" alt="image-20240604215902991"></p><h3 id="1-5-最高优先级调度算法HPF"><a href="#1-5-最高优先级调度算法HPF" class="headerlink" title="1.5 最高优先级调度算法HPF"></a>1.5 最高优先级调度算法HPF</h3><p>前面的「时间片轮转算法」做了个假设，即让所有的进程同等重要，也不偏袒谁，大家的运行时间都一样。</p><p>但是，对于多用户计算机系统就有不同的看法了，它们希望调度是有优先级的，即希望调度程序能<strong>从就绪队列中选择最高优先级的进程进行运行，这称为最高优先级（*Highest Priority First，HPF*）调度算法</strong>。</p><p>进程的优先级可以分为，静态优先级或动态优先级：</p><ul><li>静态优先级：创建进程时候，就已经确定了优先级了，然后整个运行时间优先级都不会变化；</li><li>动态优先级：根据进程的动态变化调整优先级，比如如果进程运行时间增加，则降低其优先级，如果进程等待时间（就绪队列的等待时间）增加，则升高其优先级，也就是<strong>随着时间的推移增加等待进程的优先级</strong>。</li></ul><p>该算法也有两种处理优先级高的方法，非抢占式和抢占式：</p><ul><li>非抢占式：当就绪队列中出现优先级高的进程，运行完当前进程，再选择优先级高的进程。</li><li>抢占式：当就绪队列中出现优先级高的进程，当前进程挂起，调度优先级高的进程运行。</li></ul><p>但是依然有缺点，可能会导致低优先级的进程永远不会运行。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604215946468.png" alt="image-20240604215946468"></p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604215951887.png" alt="image-20240604215951887"></p><h3 id="1-6-多级反馈队列调度算法MFQ"><a href="#1-6-多级反馈队列调度算法MFQ" class="headerlink" title="1.6 多级反馈队列调度算法MFQ"></a>1.6 多级反馈队列调度算法MFQ</h3><p><strong>多级反馈队列（*Multilevel Feedback Queue*）调度算法</strong>是「时间片轮转算法」和「最高优先级算法」的综合和发展。</p><p>顾名思义：</p><ul><li>「多级」表示有多个队列，每个队列优先级从高到低，同时优先级越高时间片越短。</li><li>「反馈」表示如果有新的进程加入优先级高的队列时，立刻停止当前正在运行的进程，转而去运行优先级高的队列；</li></ul><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/28-%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97.jpg" alt="多级反馈队列"></p><p>来看看，它是如何工作的：</p><ul><li>设置了多个队列，赋予每个队列不同的优先级，每个<strong>队列优先级从高到低</strong>，同时<strong>优先级越高时间片越短</strong>；</li><li>新的进程会被放入到第一级队列的末尾，按先来先服务的原则排队等待被调度，如果在第一级队列规定的时间片没运行完成，则将其转入到第二级队列的末尾，以此类推，直至完成；</li><li>当较高优先级的队列为空，才调度较低优先级的队列中的进程运行。如果进程运行时，有新进程进入较高优先级的队列，则停止当前运行的进程并将其移入到原队列末尾，接着让较高优先级的进程运行；</li></ul><p>可以发现，对于短作业可能可以在第一级队列很快被处理完。对于长作业，如果在第一级队列处理不完，可以移入下次队列等待被执行，虽然等待的时间变长了，但是运行时间也会更长了，所以该算法很好的<strong>兼顾了长短作业，同时有较好的响应时间。</strong></p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604220004649.png" alt="image-20240604220004649"></p><h2 id="2-内存页面置换算法"><a href="#2-内存页面置换算法" class="headerlink" title="2.内存页面置换算法"></a>2.内存页面置换算法</h2><p><strong>缺页异常（缺页中断）</strong></p><p>当 CPU 访问的页面不在物理内存时，便会产生一个缺页中断，请求操作系统将所缺页调入到物理内存。那它与一般中断的主要区别在于：</p><ul><li>缺页中断在指令执行「期间」产生和处理中断信号，而一般中断在一条指令执行「完成」后检查和处理中断信号。</li><li>缺页中断返回到该指令的开始重新执行「该指令」，而一般中断返回回到该指令的「下一个指令」执行。</li></ul><p>我们来看一下缺页中断的处理流程，如下图：</p><img src="/oranfish.github.io/posts/0/%E7%BC%BA%E9%A1%B5%E5%BC%82%E5%B8%B8%E6%B5%81%E7%A8%8B.png" alt="缺页中断的处理流程" style="zoom:50%;"><p>找不到空闲页的话，就说明此时内存已满了，这时候，就需要「页面置换算法」选择一个物理页，如果该物理页有被修改过（脏页），则把它换出到磁盘，然后把该被置换出去的页表项的状态改成「无效的」，最后把正在访问的页面装入到这个物理页中。</p><p>这里提一下，页表项通常有如下图的字段：</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/%E9%A1%B5%E8%A1%A8%E9%A1%B9%E5%AD%97%E6%AE%B5.png" alt="img"></p><p>那其中：</p><ul><li><em>状态位</em>：用于表示该页是否有效，也就是说是否在物理内存中，供程序访问时参考。</li><li><em>访问字段</em>：用于记录该页在一段时间被访问的次数，供页面置换算法选择出页面时参考。</li><li><em>修改位</em>：表示该页在调入内存后是否有被修改过，由于内存中的每一页都在磁盘上保留一份副本，因此，如果没有修改，在置换该页时就不需要将该页写回到磁盘上，以减少系统的开销；如果已经被修改，则将该页重写到磁盘上，以保证磁盘中所保留的始终是最新的副本。</li><li><em>硬盘地址</em>：用于指出该页在硬盘上的地址，通常是物理块号，供调入该页时使用。</li></ul><p>虚拟内存的管理整个流程：</p><img src="/oranfish.github.io/posts/0/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="虚拟内存的流程" style="zoom:50%;"><p>所以，页面置换算法的功能是，<strong>当出现缺页异常，需调入新页面而内存已满时，选择被置换的物理页面</strong>，也就是说选择一个物理页面换出到磁盘，然后把需要访问的页面换入到物理页。</p><h3 id="2-1-最佳页面置换算法OPT"><a href="#2-1-最佳页面置换算法OPT" class="headerlink" title="2.1 最佳页面置换算法OPT"></a>2.1 最佳页面置换算法OPT</h3><p>最佳页面置换算法基本思路是，<strong>置换在「未来」最长时间不访问的页面</strong>。</p><p>所以，该算法实现需要计算内存中每个逻辑页面的「下一次」访问时间，然后比较，选择未来最长时间不访问的页面。</p><p>这很理想，但是实际系统中无法实现，因为程序访问页面时是动态的，我们是无法预知每个页面在「下一次」访问前的等待时间。</p><p>所以，最佳页面置换算法作用是为了衡量你的算法的效率，你的算法效率越接近该算法的效率，那么说明你的算法是高效的。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604220821278.png"></p><h3 id="2-2-先进先出置换算法FIFO"><a href="#2-2-先进先出置换算法FIFO" class="headerlink" title="2.2 先进先出置换算法FIFO"></a>2.2 先进先出置换算法FIFO</h3><p>既然我们无法预知页面在下一次访问前所需的等待时间，那我们可以<strong>选择在内存驻留时间很长的页面进行中置换</strong>，这个就是「先进先出置换」算法的思想。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604220858802.png" alt="image-20240604220858802"></p><h3 id="2-3-最近最久未使用的置换算法LRU"><a href="#2-3-最近最久未使用的置换算法LRU" class="headerlink" title="2.3 最近最久未使用的置换算法LRU"></a>2.3 最近最久未使用的置换算法LRU</h3><p>最近最久未使用（<em>LRU</em>）的置换算法的基本思路是，发生缺页时，<strong>选择最长时间没有被访问的页面进行置换</strong>，也就是说，该算法假设已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用。</p><p>这种算法近似最优置换算法，最优置换算法是通过「未来」的使用情况来推测要淘汰的页面，而 LRU 则是通过「历史」的使用情况来推测要淘汰的页面。</p><p>虽然 LRU 在理论上是可以实现的，但代价很高。为了完全实现 LRU，需要在内存中维护一个所有页面的链表，最近最多使用的页面在表头，最近最少使用的页面在表尾。</p><p>困难的是，在每次访问内存时都必须要更新「整个链表」。在链表中找到一个页面，删除它，然后把它移动到表头是一个非常费时的操作。</p><p>所以，LRU 虽然看上去不错，但是由于开销比较大，实际应用中比较少使用。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604221026860.png" alt="image-20240604221026860"></p><h3 id="2-4-时钟页面置换算法"><a href="#2-4-时钟页面置换算法" class="headerlink" title="2.4 时钟页面置换算法"></a>2.4 时钟页面置换算法</h3><p>时钟页面置换算法就可以两者兼得，它跟 LRU 近似，又是对 FIFO 的一种改进。</p><p>该算法的思路是，把所有的页面都保存在一个类似钟面的「环形链表」中，一个表针指向最老的页面。</p><p>当发生缺页中断时，算法首先检查表针指向的页面：</p><ul><li>如果它的访问位位是 0 就淘汰该页面，并把新的页面插入这个位置，然后把表针前移一个位置；</li><li>如果访问位是 1 就清除访问位，并把表针前移一个位置，重复这个过程直到找到了一个访问位为 0 的页面为止；</li></ul><p>我画了一副时钟页面置换算法的工作流程图，你可以在下方看到：</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/%E6%97%B6%E9%92%9F%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95.png" alt="时钟页面置换算法"></p><h3 id="2-5-最不常用算法LFU"><a href="#2-5-最不常用算法LFU" class="headerlink" title="2.5 最不常用算法LFU"></a>2.5 最不常用算法LFU</h3><p>最不常用（<em>LFU</em>）算法，这名字听起来很调皮，但是它的意思不是指这个算法不常用，而是<strong>当发生缺页中断时，选择「访问次数」最少的那个页面，并将其淘汰</strong>。</p><p>它的实现方式是，对每个页面设置一个「访问计数器」，每当一个页面被访问时，该页面的访问计数器就累加 1。在发生缺页中断时，淘汰计数器值最小的那个页面。</p><p>看起来很简单，每个页面加一个计数器就可以实现了，但是在操作系统中实现的时候，我们需要考虑效率和硬件成本的。</p><p>要增加一个计数器来实现，这个硬件成本是比较高的，另外如果要对这个计数器查找哪个页面访问次数最小，查找链表本身，如果链表长度很大，是非常耗时的，效率不高。</p><p>但还有个问题，LFU 算法只考虑了频率问题，没考虑时间的问题，比如有些页面在过去时间里访问的频率很高，但是现在已经没有访问了，而当前频繁访问的页面由于没有这些页面访问的次数高，在发生缺页中断时，就会可能会误伤当前刚开始频繁访问，但访问次数还不高的页面。</p><p>那这个问题的解决的办法还是有的，可以定期减少访问的次数，比如当发生时间中断时，把过去时间访问的页面的访问次数除以 2，也就说，随着时间的流失，以前的高访问次数的页面会慢慢减少，相当于加大了被置换的概率。</p><h2 id="3-磁盘调度算法"><a href="#3-磁盘调度算法" class="headerlink" title="3.磁盘调度算法"></a>3.磁盘调度算法</h2><p>磁盘调度算法的目的很简单，就是为了提高磁盘的访问性能，一般是通过优化磁盘的访问请求顺序来做到的。</p><p>寻道的时间是磁盘访问最耗时的部分，如果请求顺序优化的得当，必然可以节省一些不必要的寻道时间，从而提高磁盘的访问性能。</p><h3 id="3-1-先来先服务FCFS"><a href="#3-1-先来先服务FCFS" class="headerlink" title="3.1 先来先服务FCFS"></a>3.1 先来先服务FCFS</h3><p>先来先服务（<em>First-Come，First-Served，FCFS</em>），顾名思义，先到来的请求，先被服务。</p><p>这种算法，比较简单粗暴，但是如果大量进程竞争使用磁盘，请求访问的磁道可能会很分散，那先来先服务算法在性能上就会显得很差，因为寻道时间过长。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604221422590.png" alt="image-20240604221422590"></p><h3 id="3-2-最短寻道时间优先SSTF"><a href="#3-2-最短寻道时间优先SSTF" class="headerlink" title="3.2 最短寻道时间优先SSTF"></a>3.2 最短寻道时间优先SSTF</h3><p>最短寻道时间优先（<em>Shortest Seek First，SSF</em>）算法的工作方式是，优先选择从当前磁头位置所需寻道时间最短的请求</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604221429941.png" alt="image-20240604221429941"></p><p>但这个算法可能存在某些请求的<strong>饥饿</strong>，因为本次例子我们是静态的序列，看不出问题，假设是一个动态的请求，如果后续来的请求都是小于 183 磁道的，那么 183 磁道可能永远不会被响应，于是就产生了饥饿现象，这里<strong>产生饥饿的原因是磁头在一小块区域来回移动</strong>。</p><h3 id="3-3-扫描算法SCAN"><a href="#3-3-扫描算法SCAN" class="headerlink" title="3.3 扫描算法SCAN"></a>3.3 扫描算法SCAN</h3><p>最短寻道时间优先算法会产生饥饿的原因在于：磁头有可能再一个小区域内来回得移动。</p><p>为了防止这个问题，可以规定：<strong>磁头在一个方向上移动，访问所有未完成的请求，直到磁头到达该方向上的最后的磁道，才调换方向，这就是扫描（*Scan*）算法</strong>。</p><p>这种算法也叫做电梯算法，比如电梯保持按一个方向移动，直到在那个方向上没有请求为止，然后改变方向。</p><p>磁头先响应左边的请求，直到到达最左端（ 0 磁道）后，才开始反向移动，响应右边的请求。</p><p>扫描调度算法性能较好，不会产生饥饿现象，但是存在这样的问题，中间部分的磁道会比较占便宜，中间部分相比其他部分响应的频率会比较多，也就是说每个磁道的响应频率存在差异。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604221435618.png" alt="image-20240604221435618"></p><h3 id="3-4-循环扫描算法C-SCAN"><a href="#3-4-循环扫描算法C-SCAN" class="headerlink" title="3.4 循环扫描算法C-SCAN"></a>3.4 循环扫描算法C-SCAN</h3><p>扫描算法使得每个磁道响应的频率存在差异，那么要优化这个问题的话，可以总是按相同的方向进行扫描，使得每个磁道的响应频率基本一致。</p><p>循环扫描（<em>Circular Scan, CSCAN</em> ）规定：只有磁头朝某个特定方向移动时，才处理磁道访问请求，而返回时直接快速移动至最靠边缘的磁道，也就是复位磁头，这个过程是很快的，并且<strong>返回中途不处理任何请求</strong>，该算法的特点，就是<strong>磁道只响应一个方向上的请求</strong>。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/image-20240604221441463.png" alt="image-20240604221441463"></p><p>磁头先响应了右边的请求，直到碰到了最右端的磁道 199，就立即回到磁盘的开始处（磁道 0），但这个返回的途中是不响应任何请求的，直到到达最开始的磁道后，才继续顺序响应右边的请求。</p><p>循环扫描算法相比于扫描算法，对于各个位置磁道响应频率相对比较平均。</p><h3 id="3-5-LOOK和C-LOOK算法"><a href="#3-5-LOOK和C-LOOK算法" class="headerlink" title="3.5 LOOK和C-LOOK算法"></a>3.5 LOOK和C-LOOK算法</h3><p>我们前面说到的扫描算法和循环扫描算法，都是磁头移动到磁盘「最始端或最末端」才开始调换方向。</p><p>那这其实是可以优化的，优化的思路就是<strong>磁头在移动到「最远的请求」位置，然后立即反向移动。</strong></p><p>那针对 SCAN 算法的优化则叫 LOOK 算法，它的工作方式，磁头在每个方向上仅仅移动到最远的请求位置，然后立即反向移动，而不需要移动到磁盘的最始端或最末端，<strong>反向移动的途中会响应请求</strong>。</p><img src="/oranfish.github.io/posts/0/%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6-LOOK%E7%AE%97%E6%B3%95.png" alt="LOOK 算法" style="zoom:50%;"><p>而针 C-SCAN 算法的优化则叫 C-LOOK，它的工作方式，磁头在每个方向上仅仅移动到最远的请求位置，然后立即反向移动，而不需要移动到磁盘的最始端或最末端，<strong>反向移动的途中不会响应请求</strong>。</p><img src="/oranfish.github.io/posts/0/%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6-C-LOOK%E7%AE%97%E6%B3%95.png" alt="C-LOOK 算法" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-虚拟内存</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-虚拟内存"><a href="#1-虚拟内存" class="headerlink" title="1.虚拟内存"></a>1.虚拟内存</h2><h3 id="1-1-引入"><a href="#1-1-引入" class="headerlink" title="1.1 引入"></a>1.1 引入</h3><p><strong>单片机的CPU是直接操作内存的 [物理地址]</strong></p><p>此时不能同时在内存运行两个程序，如何解决？</p><h3 id="1-2-操作系统如何解决这个问题"><a href="#1-2-操作系统如何解决这个问题" class="headerlink" title="1.2 操作系统如何解决这个问题"></a>1.2 操作系统如何解决这个问题</h3><p>问题在于两个程序都引用了绝对物理地址，要避免。</p><p>因此操作系统把进程所使用的地址隔离开，为每个进程都分配独立的一套**[虚拟地址]**，互不干涉，每个进程都不能访问物理地址。</p><p><strong>操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。</strong></p><p>如果程序要访问虚拟地址的时候，由操作系统转换成不同的物理地址，这样不同的进程运行的时候，写入的是不同的物理地址，这样就不会冲突了。</p><p>于是，这里就引出了两种地址的概念：</p><ul><li>我们程序所使用的内存地址叫做<strong>虚拟内存地址</strong>（<em>Virtual Memory Address</em>）</li><li>实际存在硬件里面的空间地址叫<strong>物理内存地址</strong>（<em>Physical Memory Address</em>）。</li></ul><p>操作系统引入了虚拟内存，进程持有的虚拟地址会通过 CPU 芯片中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存，如下图所示：</p><img src="/oranfish.github.io/posts/0/72ab76ba697e470b8ceb14d5fc5688d9.png" alt="img" style="zoom:50%;"><h3 id="1-3-OS如何管理虚拟地址和物理地址之间的关系"><a href="#1-3-OS如何管理虚拟地址和物理地址之间的关系" class="headerlink" title="1.3 OS如何管理虚拟地址和物理地址之间的关系"></a>1.3 OS如何管理虚拟地址和物理地址之间的关系</h3><p>主要通过<strong>内存分段</strong>和<strong>内存分页</strong>来管理。</p><h2 id="2-内存分段"><a href="#2-内存分段" class="headerlink" title="2.内存分段"></a>2.内存分段</h2><p>程序是由若干个逻辑分段组成的，如可由代码分段、数据分段、栈段、堆段组成。<strong>不同的段是有不同的属性的，所以就用分段（*Segmentation*）的形式把这些段分离出来。</strong></p><h3 id="2-1-分段机制下，虚拟地址和物理地址如何映射"><a href="#2-1-分段机制下，虚拟地址和物理地址如何映射" class="headerlink" title="2.1 分段机制下，虚拟地址和物理地址如何映射"></a>2.1 分段机制下，虚拟地址和物理地址如何映射</h3><p>分段机制下的虚拟地址由两部分组成，<strong>段选择因子</strong>和<strong>段内偏移量</strong>。</p><img src="/oranfish.github.io/posts/0/a9ed979e2ed8414f9828767592aadc21.png" alt="img" style="zoom: 40%;"><p>段选择因子和段内偏移量：</p><ul><li><strong>段选择子</strong>就保存在段寄存器里面。段选择子里面最重要的是<strong>段号</strong>，用作段表的索引。<strong>段表</strong>里面保存的是这个<strong>段的基地址、段的界限和特权等级</strong>等。</li><li>虚拟地址中的<strong>段内偏移量</strong>应该位于 0 和段界限之间，如果段内偏移量是合法的，就将段基地址加上段内偏移量得到物理内存地址。</li></ul><p>在上面，知道了虚拟地址是通过<strong>段表</strong>与物理地址进行映射的，分段机制会把程序的虚拟地址分成 4 个段，每个段在段表中有一个项，在这一项找到段的基地址，再加上偏移量，于是就能找到物理内存中的地址。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/c5e2ab63e6ee4c8db575f3c7c9c85962.png" alt="img"></p><p>如果要访问段 3 中偏移量 500 的虚拟地址，我们可以计算出物理地址为，段 3 基地址 7000 + 偏移量 500 &#x3D; 7500。</p><p>分段的办法很好，解决了程序本身不需要关心具体的物理内存地址的问题，但它也有一些不足之处：</p><ul><li>第一个就是<strong>内存碎片</strong>的问题。</li><li>第二个就是<strong>内存交换的效率低</strong>的问题。</li></ul><h3 id="2-2-分段产生内存碎片问题"><a href="#2-2-分段产生内存碎片问题" class="headerlink" title="2.2 分段产生内存碎片问题"></a>2.2 分段产生内存碎片问题</h3><p>如图</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/6142bc3c917e4a6298bdb62936e0d332.png" alt="img"></p><h3 id="2-3-内存分段会出现内存碎片吗"><a href="#2-3-内存分段会出现内存碎片吗" class="headerlink" title="2.3 内存分段会出现内存碎片吗"></a>2.3 内存分段会出现内存碎片吗</h3><p>内存碎片主要分为，内部内存碎片和外部内存碎片。</p><p>内存分段管理可以做到段根据实际需求分配内存，所以有多少需求就分配多大的段，所以<strong>不会出现内部内存碎片</strong>。</p><p>但是由于每个段的长度不固定，所以多个段未必能恰好使用所有的内存空间，会产生了多个不连续的小物理内存，导致新的程序无法被装载，所以<strong>会出现外部内存碎片</strong>的问题。</p><p>解决「外部内存碎片」的问题就是<strong>内存交换</strong>。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>可以把音乐程序占用的那 256MB 内存写到硬盘上，然后再从硬盘上读回来到内存里。不过再读回的时候，我们不能装载回原来的位置，而是紧紧跟着那已经被占用了的 512MB 内存后面。这样就能空缺出连续的 256MB 空间，于是新的 200MB 程序就可以装载进来。</p><p>这个内存交换空间，在 Linux 系统里，也就是我们常看到的 Swap 空间，这块空间是从硬盘划分出来的，用于内存与硬盘的空间交换。</p></blockquote><h3 id="2-4-分段为什么导致内存交换效率低"><a href="#2-4-分段为什么导致内存交换效率低" class="headerlink" title="2.4 分段为什么导致内存交换效率低"></a>2.4 分段为什么导致内存交换效率低</h3><p>硬盘的访问速度要比内存慢太多了，每一次内存交换，我们都需要把一大段连续的内存数据写到硬盘上。</p><p><strong>如果内存交换的时候，交换的是一个占内存空间很大的程序，这样整个机器都会显得卡顿。</strong></p><p>为了解决内存分段的「外部内存碎片和内存交换效率低」的问题，就出现了内存分页。</p><h2 id="3-内存分页"><a href="#3-内存分页" class="headerlink" title="3.内存分页"></a>3.内存分页</h2><p>当需要进行内存交换的时候，让需要交换写入或者从磁盘装载的数据更少一点，这样就可以解决问题了。这个办法，也就是<strong>内存分页</strong>（<em>Paging</em>）。</p><p><strong>分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小</strong>。这样一个连续并且尺寸固定的内存空间，我们叫<strong>页</strong>（<em>Page</em>）。在 Linux 下，每一页的大小为 <code>4KB</code>。</p><p>虚拟地址与物理地址之间通过<strong>页表</strong>来映射，如下图：</p><img src="/oranfish.github.io/posts/0/08a8e315fedc4a858060db5cb4a654af.png" alt="img" style="zoom: 50%;"><p>页表是存储在内存里的，<strong>内存管理单元</strong> （<em>MMU</em>）就做将虚拟内存地址转换成物理地址的工作。</p><p>而当进程访问的虚拟地址在页表中查不到时，系统会产生一个<strong>缺页异常</strong>，进入系统内核空间分配物理内存、更新进程页表，最后再返回用户空间，恢复进程的运行。</p><h3 id="3-1-分页如何解决「外部内存碎片和内存交换效率低」的问题"><a href="#3-1-分页如何解决「外部内存碎片和内存交换效率低」的问题" class="headerlink" title="3.1 分页如何解决「外部内存碎片和内存交换效率低」的问题"></a>3.1 分页如何解决「外部内存碎片和内存交换效率低」的问题</h3><p>内存分页由于内存空间都是预先划分好的，也就不会像内存分段一样，在段与段之间会产生间隙非常小的内存，这正是分段会产生外部内存碎片的原因。而<strong>采用了分页，页与页之间是紧密排列的，所以不会有外部碎片。</strong></p><p>但是，因为内存分页机制分配内存的最小单位是一页，即使程序不足一页大小，我们最少只能分配一个页，所以页内会出现内存浪费，所以针对<strong>内存分页机制会有内部内存碎片</strong>的现象。</p><p>如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉，也就是暂时写在硬盘上，称为<strong>换出</strong>（<em>Swap Out</em>）。一旦需要的时候，再加载进来，称为<strong>换入</strong>（<em>Swap In</em>）。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，<strong>内存交换的效率就相对比较高。</strong></p><p><img src="/oranfish.github.io/posts/0/OS-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/388a29f45fe947e5a49240e4eff13538-20230309234651917.png" alt="img"></p><p>更进一步地，分页的方式使得我们在加载程序的时候，不再需要一次性都把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不真的把页加载到物理内存里，而是<strong>只有在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去。</strong></p><h3 id="3-2-分页机制下，虚拟地址和物理地址都是如何映射"><a href="#3-2-分页机制下，虚拟地址和物理地址都是如何映射" class="headerlink" title="3.2 分页机制下，虚拟地址和物理地址都是如何映射"></a>3.2 分页机制下，虚拟地址和物理地址都是如何映射</h3><p>在分页机制下，虚拟地址分为两部分，<strong>页号</strong>和<strong>页内偏移</strong>。页号作为页表的索引，<strong>页表</strong>包含物理页每页所在<strong>物理内存的基地址</strong>，这个基地址与页内偏移的组合就形成了物理内存地址，见下图。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/7884f4d8db4949f7a5bb4bbd0f452609.png" alt="img"></p><p>总结一下，对于一个内存地址转换，其实就是这样三个步骤：</p><ul><li>把虚拟内存地址，切分成页号和偏移量；</li><li>根据页号，从页表里面，查询对应的物理页号；</li><li>直接拿物理页号，加上前面的偏移量，就得到了物理内存地址。</li></ul><h3 id="3-3-简单分页的缺陷"><a href="#3-3-简单分页的缺陷" class="headerlink" title="3.3 简单分页的缺陷"></a>3.3 简单分页的缺陷</h3><p>有空间上的缺陷。</p><p>因为操作系统是可以同时运行非常多的进程的，那这不就意味着页表会非常的庞大。</p><h3 id="3-4-多级页表"><a href="#3-4-多级页表" class="headerlink" title="3.4 多级页表"></a>3.4 多级页表</h3><p>要解决上面的问题，就需要采用一种叫作<strong>多级页表</strong>（<em>Multi-Level Page Table</em>）的解决方案。</p><img src="/oranfish.github.io/posts/0/19296e249b2240c29f9c52be70f611d5.png" alt="img" style="zoom: 33%;"><p><strong>页表一定要覆盖全部虚拟地址空间，不分级的页表就需要有 100 多万个页表项来映射，而二级分页则只需要 1024 个页表项</strong>（此时一级页表覆盖到了全部虚拟地址空间，二级页表在需要时创建）。<strong>如果某个一级页表的页表项没有被用到，也就不需要创建这个页表项对应的二级页表了，即可以在需要时才创建二级页表</strong></p><p>把二级分页再推广到多级页表，就会发现页表占用的内存空间更少了，这一切都要归功于对局部性原理的充分应用。</p><p>对于 64 位的系统，两级分页肯定不够了，就变成了四级目录，分别是：</p><ul><li>全局页目录项 PGD（<em>Page Global Directory</em>）；</li><li>上层页目录项 PUD（<em>Page Upper Directory</em>）；</li><li>中间页目录项 PMD（<em>Page Middle Directory</em>）；</li><li>页表项 PTE（<em>Page Table Entry</em>）；</li></ul><img src="/oranfish.github.io/posts/0/%E5%9B%9B%E7%BA%A7%E5%88%86%E9%A1%B5.png" alt="img" style="zoom: 50%;"><h3 id="3-5-TLB"><a href="#3-5-TLB" class="headerlink" title="3.5 TLB"></a>3.5 TLB</h3><p>多级页表虽然解决了空间上的问题，但是虚拟地址到物理地址的转换就多了几道转换的工序，这显然就降低了这俩地址转换的速度，也就是带来了时间上的开销。</p><p>我们就可以利用这一特性，把最常访问的几个页表项存储到访问速度更快的硬件，于是计算机科学家们，就在 CPU 芯片中，加入了一个专门存放程序最常访问的页表项的 Cache，这个 Cache 就是 TLB（<em>Translation Lookaside Buffer</em>） ，通常称为页表缓存、转址旁路缓存、快表等。</p><p>在 CPU 芯片里面，封装了内存管理单元（<em>Memory Management Unit</em>）芯片，它用来完成地址转换和 TLB 的访问与交互。</p><p>有了 TLB 后，那么 CPU 在寻址时，会先查 TLB，如果没找到，才会继续查常规的页表。</p><p>TLB 的命中率其实是很高的，因为程序最常访问的页就那么几个。</p><h2 id="4-段页式内存管理"><a href="#4-段页式内存管理" class="headerlink" title="4.段页式内存管理"></a>4.段页式内存管理</h2><p>内存分段和内存分页并不是对立的，它们是可以组合起来在同一个系统中使用的，那么组合起来后，通常称为<strong>段页式内存管理</strong>。</p><p>段页式内存管理实现的方式：</p><ul><li>先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；</li><li>接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；</li></ul><p>这样，地址结构就由<strong>段号、段内页号和页内位移</strong>三部分组成。</p><p>用于段页式地址变换的数据结构是每一个程序一张段表，每个段又建立一张页表，段表中的地址是页表的起始地址，而页表中的地址则为某页的物理页号</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/8904fb89ae0c49c4b0f2f7b5a0a7b099.png" alt="img"></p><p>段页式地址变换中要得到物理地址须经过三次内存访问：</p><ul><li>第一次访问段表，得到页表起始地址；</li><li>第二次访问页表，得到物理页号；</li><li>第三次将物理页号与页内位移组合，得到物理地址。</li></ul><p>可用软、硬件相结合的方法实现段页式地址变换，这样虽然增加了硬件成本和系统开销，但提高了内存的利用率。</p><h2 id="5-Linux内存管理"><a href="#5-Linux内存管理" class="headerlink" title="5.Linux内存管理"></a>5.Linux内存管理</h2><p><strong>页式内存管理的作用是在由段式内存管理所映射而成的地址上再加上一层地址映射。</strong></p><p>由于此时由段式内存管理映射而成的地址不再是“物理地址”了，Intel 就称之为“线性地址”（也称虚拟地址）。于是，段式内存管理先将逻辑地址映射成线性地址，然后再由页式内存管理将线性地址映射成物理地址。</p><p><strong>Linux 内存主要采用的是页式内存管理，但同时也不可避免地涉及了段机制</strong>。</p><p><strong>Linux 系统中的每个段都是从 0 地址开始的整个 4GB 虚拟空间（32 位环境下），也就是所有的段的起始地址都是一样的。这意味着，Linux 系统中的代码，包括操作系统本身的代码和应用程序代码，所面对的地址空间都是线性地址空间（虚拟地址），这种做法相当于屏蔽了处理器中的逻辑地址概念，段只被用于访问控制和内存保护。</strong></p><p>在 Linux 操作系统中，虚拟地址空间的内部又被分为<strong>内核空间和用户空间</strong>两部分，不同位数的系统，地址空间的范围也不同。比如最常见的 32 位和 64 位系统，如下所示：</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/3a6cb4e3f27241d3b09b4766bb0b1124-20230309234553726.png" alt="img"></p><p>通过这里可以看出：</p><ul><li><code>32</code> 位系统的内核空间占用 <code>1G</code>，位于最高处，剩下的 <code>3G</code> 是用户空间；</li><li><code>64</code> 位系统的内核空间和用户空间都是 <code>128T</code>，分别占据整个内存空间的最高和最低处，剩下的中间部分是未定义的。</li></ul><p>再来说说，内核空间与用户空间的区别：</p><ul><li>进程在用户态时，只能访问用户空间内存；</li><li>只有进入内核态后，才可以访问内核空间的内存；</li></ul><p>虽然每个进程都各自有独立的虚拟内存，但是<strong>每个虚拟内存中的内核地址，其实关联的都是相同的物理内存</strong>。这样，进程切换到内核态后，就可以很方便地访问内核空间内存。</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/48403193b7354e618bf336892886bcff.png" alt="img"></p><p>接下来，进一步了解虚拟空间的划分情况，用户空间和内核空间划分的方式是不同的，内核空间的分布情况就不多说了。</p><p>我们看看用户空间分布的情况，以 32 位系统为例，我画了一张图来表示它们的关系：</p><p><img src="/oranfish.github.io/posts/0/OS-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/32%E4%BD%8D%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png" alt="虚拟内存空间划分"></p><p>通过这张图你可以看到，用户空间内存，从<strong>低到高</strong>分别是 6 种不同的内存段：</p><ul><li>代码段，包括二进制可执行代码；</li><li>数据段，包括已初始化的静态常量和全局变量；</li><li>BSS 段，包括未初始化的静态变量和全局变量；</li><li>堆段，包括动态分配的内存，从低地址开始向上增长；</li><li>文件映射段，包括动态库、共享内存等，从低地址开始向上增长（<a href="http://lishiwen4.github.io/linux/linux-process-memory-location">跟硬件和内核版本有关 (opens new window)</a>）；</li><li>栈段，包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 <code>8 MB</code>。当然系统也提供了参数，以便我们自定义大小；</li></ul><p>上图中的内存布局可以看到，代码段下面还有一段内存空间的（灰色部分），这一块区域是「保留区」，之所以要有保留区这是因为在大多数的系统里，我们认为比较小数值的地址不是一个合法地址，例如，我们通常在 C 的代码里会将无效的指针赋值为 NULL。因此，这里会出现一段不可访问的内存保留区，防止程序因为出现 bug，导致读或写了一些小内存地址的数据，而使得程序跑飞。</p><p>在这 7 个内存段中，堆和文件映射段的内存是动态分配的。比如说，使用 C 标准库的 <code>malloc()</code> 或者 <code>mmap()</code> ，就可以分别在堆和文件映射段动态分配内存。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>为了在多进程环境下，使得进程之间的内存地址不受影响，相互隔离，于是操作系统就为每个进程独立分配一套<strong>虚拟地址空间</strong>，每个程序只关心自己的虚拟地址就可以，实际上大家的虚拟地址都是一样的，但分布到物理地址内存是不一样的。作为程序，也不用关心物理地址的事情。</p><p>每个进程都有自己的虚拟空间，而物理内存只有一个，所以当启用了大量的进程，物理内存必然会很紧张，于是操作系统会通过<strong>内存交换</strong>技术，把不常使用的内存暂时存放到硬盘（换出），在需要的时候再装载回物理内存（换入）。</p><p>那既然有了虚拟地址空间，那必然要把虚拟地址「映射」到物理地址，这个事情通常由操作系统来维护。</p><p>那么对于虚拟地址与物理地址的映射关系，可以有<strong>分段</strong>和<strong>分页</strong>的方式，同时两者结合都是可以的。</p><p>内存分段是根据程序的逻辑角度，分成了栈段、堆段、数据段、代码段等，这样可以分离出不同属性的段，同时是一块连续的空间。但是每个段的大小都不是统一的，这就会导致外部内存碎片和内存交换效率低的问题。</p><p>于是，就出现了内存分页，把虚拟空间和物理空间分成大小固定的页，如在 Linux 系统中，每一页的大小为 <code>4KB</code>。由于分了页后，就不会产生细小的内存碎片，解决了内存分段的外部内存碎片问题。同时在内存交换的时候，写入硬盘也就一个页或几个页，这就大大提高了内存交换的效率。</p><p>再来，为了解决简单分页产生的页表过大的问题，就有了<strong>多级页表</strong>，它解决了空间上的问题，但这就会导致 CPU 在寻址的过程中，需要有很多层表参与，加大了时间上的开销。于是根据程序的<strong>局部性原理</strong>，在 CPU 芯片中加入了 <strong>TLB</strong>，负责缓存最近常被访问的页表项，大大提高了地址的转换速度。</p><p><strong>Linux 系统主要采用了分页管理，但是由于 Intel 处理器的发展史，Linux 系统无法避免分段管理</strong>。于是 Linux 就把所有段的基地址设为 <code>0</code>，也就意味着所有程序的地址空间都是线性地址空间（虚拟地址），相当于屏蔽了 CPU 逻辑地址的概念，所以段只被用于访问控制和内存保护。</p><p>另外，Linux 系统中虚拟空间分布可分为<strong>用户态</strong>和<strong>内核态</strong>两部分，其中用户态的分布：代码段、全局变量、BSS、函数栈、堆内存、映射区。</p><h3 id="6-1-虚拟内存有什么作用"><a href="#6-1-虚拟内存有什么作用" class="headerlink" title="6.1 虚拟内存有什么作用"></a>6.1 虚拟内存有什么作用</h3><ul><li>第一，虚拟内存可以使得进程对运行内存超过物理内存大小，因为程序运行符合局部性原理，CPU 访问内存会有很明显的重复访问的倾向性，对于那些没有被经常使用到的内存，我们可以把它换出到物理内存之外，比如硬盘上的 swap 区域。</li><li>第二，由于每个进程都有自己的页表，所以每个进程的虚拟内存空间就是相互独立的。进程也没有办法访问其他进程的页表，所以这些页表是私有的，这就解决了多进程之间地址冲突的问题。</li><li>第三，页表里的页表项中除了物理地址之外，还有一些标记属性的比特，比如控制一个页的读写权限，标记该页是否存在等。在内存访问方面，操作系统提供了更好的安全性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-课后作业题目总结</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>1.一台计算机包括高速缓存、内存和磁盘，如果要存取的字在高速缓存中，从高速缓存存取需要20ns；如果该字不在高速缓存中而在内存中，先把它从内存载入高速缓存需要60ns，然后再从高速缓存存取；如果该字不在内存中，则先需要花费12ms从磁盘中取到内存，接着从内存复制到高速缓存中，再从高速缓存存取。高速缓存的命中率为0.9，内存的命中率为0.6，则该系统中一个字的平均存取时间是多少ns？</p><p><strong>解答：</strong></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510194525002.png" alt="image-20240510194525002"></p><p>平均存取时间为：0.9×20 + 0.06×80 + 0.04×12000080 &#x3D; 480026 ns</p><p>2.假设系统中有两个程序A和B待执行，设以A、B的先后顺序运行，不能互相抢占CPU。程序A的访问流程是：处理器10秒，设备甲5秒，处理器5秒，设备乙10秒，处理器10秒；程序B的访问流程是：设备甲10秒，处理器10秒，设备乙5秒，处理器5秒，设备乙10秒。在单道程序环境下和多道程序环境下执行，处理器的利用率是分别是多少？</p><p><strong>解答：</strong></p><p>单道CPU利用率：(10+5+10+10+5)\80＝50％</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510200210127.png" alt="image-20240510200210127"></p><p>多道CPU利用率：(10+5+10+10+5)\45＝88.9％ </p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510200221681.png" alt="image-20240510200221681"></p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>1.假设在时间5时，系统资源只有处理器和内存被使用。考虑如下事件：<br>时间5：P1执行对磁盘单元3的读操作。<br>时间15：P5的时间片结束。<br>时间18：P7执行对磁盘单元3的写操作。<br>时间20：P3执行对磁盘单元2的读操作。<br>时间24：P5执行对磁盘单元3的写操作。<br>时间28：P5被换出。<br>时间33：P3读磁盘单元2操作完成，产生中断。<br>时间36：P1读磁盘单元3操作完成，产生中断。<br>时间38：P8结束。<br>时间40：P5写磁盘单元3操作完成，产生中断。<br>时间44：P5被调入。<br>时间48：P7写磁盘单元3操作完成，产生中断。<br>请分别写出时间22、37和47时每个进程的状态。如果一个进程在阻塞态，写出其等待的事件。</p><p><strong>解答：</strong></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510200509084.png" alt="image-20240510200509084"></p><p>注：47时刻，P1、P3、P5中有两个就绪，另一个运行</p><p>2.某分时系统中的进程可能出现如下图所示的状态变化，请把图中每个状态变化以及变化的可能原因填写在下表中。</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510200541844.png" alt="image-20240510200541844"></p><p><strong>解答：</strong></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510200626409.png" alt="image-20240510200626409"></p><p>3.写出信号量定义，semWait和semSignal原语，以及用信号量实现互斥的伪代码。</p><p><strong>解答：</strong></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510200657339.png" alt="image-20240510200657339"></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510200716334.png"></p><p>4.假设一个阅览室有100个座位，没有座位时读者在阅览室外等待；每个读者进入阅览室时都必须在阅览室门口的一个登记本上登记座位号和姓名，然后阅览，离开阅览室时要去掉登记项。每次只允许一个人登记或去掉登记。用信号量操作描述读者的行为。</p><p><strong>解答：</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">semaphore seatcount</span><span style="color: #89DDFF">=</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">  //空座位数</span></span><span class="line"><span style="color: #BABED8">semaphore mutex</span><span style="color: #89DDFF">=</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">            //互斥操作登记本</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">readeri</span><span style="color: #89DDFF">()&#123;</span><span style="color: #BABED8">                             </span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #89DDFF">(true)&#123;</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">semWait</span><span style="color: #89DDFF">(</span><span style="color: #F07178">seatcount</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">semWait</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #F07178">mutex</span><span style="color: #89DDFF">)</span><span style="color: #F07178">；</span></span><span class="line"><span style="color: #F07178">            登记；</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">semSignal</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #F07178">mutex</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">         进入阅览室坐下读书；</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">semWait</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #F07178">mutex</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">           取消登记；</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">semSignal</span><span style="color: #89DDFF">(</span><span style="color: #F07178">mutex</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">semSignal</span><span style="color: #89DDFF">(</span><span style="color: #F07178">seatcount</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #F07178">          离开阅览室；</span></span><span class="line"><span style="color: #89DDFF">&#125;&#125;</span></span></code></pre></div><p>5.6个进程：P0…P5；4种资源：A(15)、B(6)、C(9)、D(10)； T0时刻状态如图所示。问题：<br>（1）验证可用资源向量的正确性。<br>（2）计算需求矩阵。<br>（3）指出一个安全的进程序列来证明当前状态的安全性。同时指出每个进程结束时可用资源向量的变化情况。<br>（4）假设P5请求资源（3, 2, 3, 3），该请求应该被允许吗？请说明理由。</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510200846110.png" alt="image-20240510200846110"></p><p><strong>解答：</strong></p><ul><li>2+0+4+1+1+1+6&#x3D;15<br>0+1+1+0+1+0+3&#x3D;6<br>2+1+0+0+0+1+5&#x3D;9<br>1+1+2+1+0+1+4&#x3D;10<br>因此，可用资源向量正确。</li><li><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202217637.png" alt="image-20240510202217637"></li><li><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202228147.png" alt="image-20240510202228147"></li><li><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202240733.png" alt="image-20240510202240733"></li></ul><p>6.如下的代码涉及3个进程竞争6种资源（A~F）。<br>（1）使用资源分配图来指出这种实现中可能存在的死锁。<br>（2）改变某些请求的顺序来预防死锁。注意不能跨函数移动请求，只能在函数内部调整请求的顺序。</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202301498.png" alt="image-20240510202301498"></p><p><strong>解答：</strong></p><ul><li><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202323070.png" alt="image-20240510202323070"></li><li><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202330201.png" alt="image-20240510202330201"></li></ul><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>1.假设使用动态分区，下图是经过数次放置和换出操作后的内存格局。内存地址从左到右增长；灰色区域是分配给进程的内存块；白色区域是可用内存块。空闲块分配总是从左到右（从低地址端到高地址端）。最后一个放置的进程A大小为2MB，用X标记。此后仅换出了一个进程B。<br>（1）换出的进程B最大是多少？<br>（2）从一个空闲块K中，分配2MB给进程A，那么分配之前，这个空闲块K的大小是多少？<br>（3）下一个内存需求大小为3MB。在使用最佳适配&#x2F;首次适配&#x2F;下次适配&#x2F;最差适配的情况下，分别在图上标记出分配的内存区域。</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202611375.png" alt="image-20240510202611375"></p><p><strong>解答：</strong></p><p>（1）换出的最大进程大小是多少？<br>1M<br>（2）创建分区并分配给X之前，空闲块的大小是多少？<br>7M<br>（3）下一个内存需求大小为3MB。在使用最佳适配&#x2F;首次适配&#x2F;下次适配&#x2F;最差适配的情况下，分别在图上标记出分配的内存区域</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202627342.png" alt="image-20240510202627342"></p><p>2.一个1MB的内存块使用伙伴系统来分配内存。请画出类似图3.5的图来表示如下序列的结果：A:请求70；B:请求35；C:请求80；释放A；D:请求60；释放B；释放D；释放C。</p><p><strong>解答：</strong></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202718084.png" alt="image-20240510202718084"></p><p>3.在一个简单分段系统中，包含如下图所示段表，对下面的每一个逻辑地址，确定其对应的物理地址或者说明段错误是否会发生。<br>(1) 0,198      (2)  2,156      (3)  1,530      (4)  3,444      (5)  0,222</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202740875.png" alt="image-20240510202740875"></p><p><strong>解答：</strong></p><p>（1）660+198&#x3D;858<br>（2）222+156&#x3D;378<br>（3）段错误，因为530&gt;422<br>（4）996+444&#x3D;1440<br>（5）660+222&#x3D;882</p><p>4.页式存储管理系统中，某进程页表如下。已知页面大小为1024字节，问逻辑地址600，2700，4000所对应的物理地址各是多少？</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202802445.png" alt="image-20240510202802445"></p><p><strong>解答：</strong></p><p>600&#x2F;1024&#x3D;0…600    7<em>1024+600&#x3D;7768<br>2700&#x2F;1024&#x3D;2…652   5</em>1024+652&#x3D;5772<br>4000&#x2F;1024&#x3D;3…928   非法地址</p><p>5.考虑如下的页访问序列:7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2，请画图说明FIFO、LRU、最佳置换算法（假设后续页面访问序列 1, 2, 0, 1, 7, 0, 1）这三种算法的页框的分配情况（假设该进程分配三个物理块）；对每种情况计算缺页中断次数和缺页率。</p><p><strong>解答：</strong></p><p>FIFO算法：共缺页10次，缺页率 p&#x3D;10&#x2F;13&#x3D;76.9%</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202840753.png" alt="image-20240510202840753"></p><p> LRU算法：共缺页9次，缺页率 p&#x3D;9&#x2F;13&#x3D;69.2%</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202847953.png" alt="image-20240510202847953"></p><p> OPT算法：共缺页7次，缺页率 p&#x3D;7&#x2F;13&#x3D;53.8%</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510202854724.png" alt="image-20240510202854724"></p><p>6.考虑一个使用单级页表的分页系统。假设所需的页表总在内存中。（1）如果一次物理内存访问耗时200ns，那么一次逻辑内存访问耗时多少？</p><p>（2）现在添加一个MMU，对每次命中或缺页MMU造成20ns开销。假设85%的内存访问都命中MMU TLB。有效访问时间（EMAT）是多少？</p><p>（3）解释TLB命中率是如何影响EMAT的？</p><p><strong>解答：</strong></p><ul><li>200 * 2&#x3D;400（ns）</li><li>（20+200）* 85%+（20+200+200）* 15%&#x3D;250（ns）</li><li>TLB的命中率越大，有效访问时间越小。</li></ul><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>1.从A到E的5个进程同时到达计算中心，它们的估计运行时间分别为15、9、3、6和12分钟，优先级分别为6、3、7、9和4（值越小，表示的优先级越高），所有进程都完全是处理器密集型的。对下面的每种调度算法，确定所有作业的平均周转时间和平均带权周转时间（忽略进程切换的开销）。<br>（1）时间片为1分钟的轮转法。<br>（2）优先级调度。<br>（3）FCFS（按A到E的顺序）。<br>（4）最短进程优先。<br>（5）最高响应比优先。</p><p><strong>解答：</strong></p><ul><li><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203309331.png" alt="image-20240510203309331"></p></li><li><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203316409.png" alt="image-20240510203316409"></p></li><li><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203323347.png" alt="image-20240510203323347"></p></li><li><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203330097.png" alt="image-20240510203330097"></p></li><li><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203338250.png" alt="image-20240510203338250"></p></li></ul><p>2.在一个三道批处理系统中（N道批处理是指至多允许N个作业进入内存，内存中至多允许N个进程存在，不能进入内存的作业将在后备作业队列中等待），作业调度采用最短作业优先调度算法，进程调度采用以优先级为基础的抢占式调度算法。在下表所示的序列中，所有进程都完全是处理器密集型的，优先数表示进程优先级，此题中优先数越小则优先级越高。试填充表中空白部分。</p><p><strong>解答：</strong></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203407473.png" alt="image-20240510203407473"></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203854236.png" alt="image-20240510203854236"></p><p>3.考虑一组周期任务，执行简表如下，给出100个单位时间内，基于最早完成期限调度算法的调度图。</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203917246.png" alt="image-20240510203917246"></p><p><strong>解答：</strong></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203930051.png" alt="image-20240510203930051"></p><p>4.考虑5个非周期任务，执行简表如下，给出调度这5个任务，基于有自愿空闲时间的最早最后期限调度算法的调度图。</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203943082.png" alt="image-20240510203943082"></p><p><strong>解答：</strong></p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510203953447.png" alt="image-20240510203953447"></p><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><p>1.分析下列磁道请求序列：27，129，110，186，147，41，10，64，120。假设磁头当前定位在磁道100处。对以下两种移动方向，分别应用FCFS、SSTF、SCAN、C-SCAN算法，求磁道访问顺序及平均寻道长度。<br>（1）沿着磁道号减小的方向移动。<br>（2）沿着磁道号增大的方向移动。</p><p><strong>解答：</strong></p><p>FCFS平均寻道长度：556&#x2F;9&#x3D;61.8</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510204029076.png" alt="image-20240510204029076"></p><p>SSTF平均寻道长度：262&#x2F;9&#x3D;29.1</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510204033886.png" alt="image-20240510204033886"></p><p>小方向SCAN平均寻道长度：266&#x2F;9&#x3D;29.6</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510204041454.png" alt="image-20240510204041454"></p><p>小方向C-SCAN平均寻道长度：342&#x2F;9&#x3D;38</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510204046099.png" alt="image-20240510204046099"></p><p>大方向SCAN平均寻道长度：262&#x2F;9&#x3D;29.1</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510204050507.png" alt="image-20240510204050507"></p><p>大方向C-SCAN平均寻道长度：316&#x2F;9&#x3D;35.1</p><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510204055964.png" alt="image-20240510204055964"></p><p>2.现有一个RAID磁盘阵列，包含4个磁盘，每个磁盘大小都是200GB。请给出RAID级别分别是0、1、3、4、5、6时，该磁盘阵列的有效存储容量是多少。<br>RAID0：800GB；RAID1：400GB；RAID3：600GB；<br>RAID4：600GB；RAID5：600GB；RAID6：400GB。</p><p><strong>解答：</strong></p><ul><li>RAID0：4个盘均存储数据，4<em>200&#x3D;800；</em></li><li><em>RAID1：2个盘存储，2个盘备份，2</em>200&#x3D;400；</li><li>RAID3-5：3个盘存储，1个盘校验，3<em>200&#x3D;600；</em></li><li><em>RAID6：2个盘存储，2个盘校验，2</em>200&#x3D;400。</li></ul><p><img src="/oranfish.github.io/posts/0/OS%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A%E9%A2%98%E7%9B%AE/image-20240510204124736.png" alt="image-20240510204124736"></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-期末简答题复习</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="OS简答题"><a href="#OS简答题" class="headerlink" title="OS简答题"></a>OS简答题</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="3-简述中断技术工作原理"><a href="#3-简述中断技术工作原理" class="headerlink" title="3.简述中断技术工作原理"></a>3.简述中断技术工作原理</h3><ul><li><p>中断是指处理器对系统中发生的异步事件的响应。异步事件是指随机发生的、非预期的事件，处理器不能预知这些事件发生的时刻，但当这些事件发生时必须对事件及时处理。</p></li><li><p>在程序执行过程中，当发生异步事件时，处理器将收到一个中断请求信号，于是处理器将暂停当前程序的运行而转去处理该事件（执行相应的中断处理程序），处理完毕后又返回到原程序的断点继续执行或调度新的程序运行。</p></li></ul><h3 id="4-多中断的处理方案包括哪些"><a href="#4-多中断的处理方案包括哪些" class="headerlink" title="4.多中断的处理方案包括哪些"></a>4.多中断的处理方案包括哪些</h3><p>顺序处理多个中断</p><ul><li>当正在处理一个中断时，禁止中断，顺序处理所发生的各个中断。</li></ul><p>嵌套处理多个中断</p><ul><li>定义中断优先级，允许高优先级中断打断低优先级中断的处理过程。</li></ul><h3 id="6-简述高速缓存的工作原理"><a href="#6-简述高速缓存的工作原理" class="headerlink" title="6.简述高速缓存的工作原理"></a>6.简述高速缓存的工作原理</h3><ul><li>高速缓冲存储器是比主存小而快的存储器，用于解决CPU处理速率和主存访问速率差异过大的问题。CPU将内存中的数据读到高速缓存时，会根据局部性原理，除了读取本次要访问的数据，还会预取本次数据的周边数据到高速缓存里；如果CPU后续读取的数据已经在高速缓存，将会有效提升数据传输性能。</li></ul><h3 id="8-什么是多道程序设计"><a href="#8-什么是多道程序设计" class="headerlink" title="8.什么是多道程序设计"></a>8.什么是多道程序设计</h3><ul><li>多道批处理系统把多个作业同时放入内存，并允许它们在处理器上交替运行，共享系统中的各项硬件资源和软件资源。当某个作业因I&#x2F;O请求而暂停运行时，处理器便可以转向运行另外一个等待运行的作业，以提高处理器利用率。这种处理方式称为多道程序设计。</li></ul><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="1-简要定义五状态进程模型中的每种状态"><a href="#1-简要定义五状态进程模型中的每种状态" class="headerlink" title="1.简要定义五状态进程模型中的每种状态"></a>1.简要定义五状态进程模型中的每种状态</h3><ul><li><p>新建态：刚刚创建的进程。</p></li><li><p>就绪态：进程做好了准备，只要有机会就可执行。</p></li><li><p>运行态：正在执行。</p></li><li><p>阻塞态：进程在某些事件发生前不能执行。</p></li><li><p>退出态：操作系统从可执行进程组中释放出的进程，自身停止或者因为某种原因被取消。</p></li></ul><h3 id="3-模式切换和进程切换有何种区别"><a href="#3-模式切换和进程切换有何种区别" class="headerlink" title="3.模式切换和进程切换有何种区别"></a>3.模式切换和进程切换有何种区别</h3><ul><li><p>发生模式切换可以不改变正处于运行态的进程状态，这种情况下，保存上下文环境和以后恢复上下文环境只需要很少的开销。</p></li><li><p>发生进程切换时，正在运行的进程被转换到另一个状态（就绪或阻塞等），操作系统必须使其环境产生实质性的变化，比模式切换需要做更多的工作。</p></li></ul><h3 id="5-列出用户级线程相对于内核线程的三个优点"><a href="#5-列出用户级线程相对于内核线程的三个优点" class="headerlink" title="5.列出用户级线程相对于内核线程的三个优点"></a>5.列出用户级线程相对于内核线程的三个优点</h3><p>（1）线程切换不需要内核态特权，节省了两次状态转换的开销。</p><p>（2）调度可以是应用程序相关的。</p><p>（3）用户级线程可以在任何操作系统中运行，不需要对底层内核进行修改以支持用户级线程。</p><h3 id="6-列出用户级线程相对于内核线程的三个优点"><a href="#6-列出用户级线程相对于内核线程的三个优点" class="headerlink" title="6.列出用户级线程相对于内核线程的三个优点"></a>6.列出用户级线程相对于内核线程的三个优点</h3><p>（1）用户级线程执行一个系统调用时，进程中的所有线程都会被阻塞。</p><p>（2）不能利用多处理器结构。</p><h3 id="8-列出互斥的要求"><a href="#8-列出互斥的要求" class="headerlink" title="8.列出互斥的要求"></a>8.列出互斥的要求</h3><p>（1）必须强制实施互斥。在与相同资源或共享对象的临界区有关的所有进程中，一次只允许一个进程进入临界区。</p><p>（2）不允许出现需要访问临界区的进程被无限延迟的情况，即不会死锁或饥饿。</p><p>（3）当没有进程在临界区时，任何需要进入临界区的进程必须能够立即进入。</p><p>（4）一个进程驻留在临界区中的时间必须是有限的。</p><h3 id="9-产生死锁的四个条件是什么"><a href="#9-产生死锁的四个条件是什么" class="headerlink" title="9.产生死锁的四个条件是什么"></a>9.产生死锁的四个条件是什么</h3><ul><li><p>互斥</p></li><li><p>占有且等待</p></li><li><p>不可抢占</p></li><li><p>循环等待</p></li></ul><h3 id="10-死锁避免、检测和预防之间的区别是什么"><a href="#10-死锁避免、检测和预防之间的区别是什么" class="headerlink" title="10.死锁避免、检测和预防之间的区别是什么"></a>10.死锁避免、检测和预防之间的区别是什么</h3><p>死锁避免通过限制进程启动或资源分配，预防通过运用某种策略来消除产生死锁的四个条件之一，来保证不让死锁状态出现；而检测允许死锁出现，定期检测死锁的存在并从死锁中恢复出来。</p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="1-为什么需要重定位进程的能力"><a href="#1-为什么需要重定位进程的能力" class="headerlink" title="1.为什么需要重定位进程的能力"></a>1.为什么需要重定位进程的能力</h3><p>首先，程序员并不能事先知道在某个程序执行期间会有其他哪些程序驻留在内存中。其次，为了提高处理器的利用率，允许进程换入或换出内存，当被换出内存的进程下一次被换入时，没必要也很那做到放在换出前的位置。因此，需要重定位技术。</p><h3 id="2-页和页框之间有什么区别"><a href="#2-页和页框之间有什么区别" class="headerlink" title="2.页和页框之间有什么区别"></a>2.页和页框之间有什么区别</h3><p>内存被划分成大小固定相等的小块，称为页框，每个进程被分成同样大小的小块，称为页。因此，页是逻辑上的划分，而页框是物理内存的划分，一页匹配一个页框。</p><h3 id="3-解释什么是抖动"><a href="#3-解释什么是抖动" class="headerlink" title="3.解释什么是抖动"></a>3.解释什么是抖动</h3><p>抖动是虚存管理方案中可能出现的一种现象，处理器花费在交换上的时间多于执行指令的时间。</p><h3 id="4-转换检测缓冲区的目的是什么"><a href="#4-转换检测缓冲区的目的是什么" class="headerlink" title="4.转换检测缓冲区的目的是什么"></a>4.转换检测缓冲区的目的是什么</h3><p>TLB是一个缓冲，包含最近一段时间频繁用到的页表项，目的是减少数据访问需要的时间。</p><h3 id="5-驻留集和工作集有什么区别"><a href="#5-驻留集和工作集有什么区别" class="headerlink" title="5.驻留集和工作集有什么区别"></a>5.驻留集和工作集有什么区别</h3><p>驻留集是指进程当前在内存里的页面集合，而工作集是指进程最近被引用过的页面集合。</p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="1-简要描述三种类型的处理器调度"><a href="#1-简要描述三种类型的处理器调度" class="headerlink" title="1.简要描述三种类型的处理器调度"></a>1.简要描述三种类型的处理器调度</h3><ul><li><p>长程调度：其调度对象是作业，主要功能是决定将后备作业队列中的哪几个作业调入内存，为它们创建进程，并放入就绪进程队列。</p></li><li><p>中程调度：根据系统并发度的要求，完成外存和内存中的进程对换；</p></li><li><p>短程调度：其调度对象是进程，调度程序根据调度算法来选择一个新的就绪进程，使之占用处理器运行。</p></li></ul><h3 id="2-抢占式调度和非抢占式调度有何区别"><a href="#2-抢占式调度和非抢占式调度有何区别" class="headerlink" title="2.抢占式调度和非抢占式调度有何区别"></a>2.抢占式调度和非抢占式调度有何区别</h3><ul><li><p>非抢占式：一旦调度某个进程到处理器上执行，则当前进程将一直运行下去，直至其运行完毕或发生某事件而阻塞不能继续运行时，才再次调度并分配处理器。</p></li><li><p>抢占式：当前进程正在处理器上执行，操作系统中的调度器可以根据实际需求和既定原则，剥夺其处理器所有权并将其转换为就绪态，然后调度另外一个就绪进程到处理器上运行。</p></li></ul><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="1-说明中断驱动I-O方式与DMA方式有什么不同？控制方式及其主要优缺点。"><a href="#1-说明中断驱动I-O方式与DMA方式有什么不同？控制方式及其主要优缺点。" class="headerlink" title="1.说明中断驱动I&#x2F;O方式与DMA方式有什么不同？控制方式及其主要优缺点。"></a>1.说明中断驱动I&#x2F;O方式与DMA方式有什么不同？控制方式及其主要优缺点。</h3><p>在中断控制方式中，当外部设备准备好数据或发生错误后，主动向CPU发出中断请求；CPU调用相应的中断处理程序，完成CPU与外部设备之间的一次数据交换。</p><ul><li><strong>优缺点：</strong>CPU与外部设备可并行工作，仅当输入完一个数据时，才需要CPU花费极短的时间去做一次中断处理，这样可提高整个系统的资源利用率和吞吐率。但中断次数急剧增加时，CPU负担很重。</li></ul><p>DMA方式直接通过系统总线在DMA控制器的缓冲区和内存之间进行双向数据传送。</p><ul><li><strong>优缺点：</strong>在设备和内存之间直接传输数据块；一个数据块全部传送完毕后，才发出一次中断，大大减少了CPU进行中断处理的次数。提高了传输速率和CPU利用率。</li></ul><h3 id="5-缓冲技术有什么作用？"><a href="#5-缓冲技术有什么作用？" class="headerlink" title="5.缓冲技术有什么作用？"></a>5.缓冲技术有什么作用？</h3><p>缓和CPU与I&#x2F;O设备间速度不匹配的矛盾，提高CPU和I&#x2F;O设备间的并行性。协调逻辑记录和物理记录大小不一致的问题。减少I&#x2F;O中断次数，放宽对CPU中断响应时间的要求。</p><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="4-简单定义三种记录组块的方法。"><a href="#4-简单定义三种记录组块的方法。" class="headerlink" title="4.简单定义三种记录组块的方法。"></a>4.简单定义三种记录组块的方法。</h3><ul><li>固定组块：使用固定长度的记录，并且若干条完整的记录被保存在一个块中。在每个块的末尾可能会有一些未使用的空间，称为内部碎片。</li><li>可变长度跨越式组块：使用长度可变的记录，并且紧缩到块中，使得块中没有未使用空间。因此，某些记录可能会跨越两个块，通过一个指向后继块的指针连接。</li><li>可变长度非跨越式组块：使用可变长度的记录，但并不采用跨越的方式。如果下一条记录比块中剩余的未使用空间大，则无法使用这一部分，因此在大多数块中都会有未使用的空间。</li></ul><h3 id="5-简单定义三种文件分配方法。"><a href="#5-简单定义三种文件分配方法。" class="headerlink" title="5.简单定义三种文件分配方法。"></a>5.简单定义三种文件分配方法。</h3><ul><li>连续分配：是指在创建文件时，给文件分配一组连续的块。</li><li>链式分配：基于单个的块，链中的每一块都包含指向下一块的指针。</li><li>索引分配：每个文件在文件分配表中有一个一级索引，分配给该文件的每个分区在索引中都有一个表项。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础总结</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Linux入门"><a href="#1-Linux入门" class="headerlink" title="1.Linux入门"></a>1.Linux入门</h2><h3 id="1-1-操作系统概述"><a href="#1-1-操作系统概述" class="headerlink" title="1.1 操作系统概述"></a>1.1 操作系统概述</h3><p>操作系统是计算机软件的一种，它主要负责：</p><p>作为用户和计算机硬件之间的桥梁，调度和管理计算机硬件进行工作。</p><p>常见的操作系统：</p><p>PC端：Windows、Linux、MacOS</p><p>移动端：Android、IOS、鸿蒙系统</p><h3 id="1-2-初识Linux"><a href="#1-2-初识Linux" class="headerlink" title="1.2 初识Linux"></a>1.2 初识Linux</h3><p>Linux创始人: 林纳斯 托瓦兹     开发于1991年</p><p>Linux系统的组成：Linux系统内核+系统级应用程序</p><ul><li><p>内核：提供系统最核心的功能，如：调度CPU、调度内存、调度文件系统、调度网络通讯、调度IO等。</p></li><li><p>系统级应用程序：可以理解为出厂自带程序，可供用户快速上手操作系统，如：文件管理器、任务管理器、图片查看、音乐播放等。</p></li></ul><p>Linux内核是免费开源的，任何人都可以下载内核源码并查看且修改。</p><p>可以通过：<a href="https://www.kernel.org/">https://www.kernel.org</a>  去下载Linux内核</p><p>内核是免费、开源的，这也就代表了：</p><ul><li><p>任何人都可以获得并修改内核，并且自行集成系统级程序</p></li><li><p>提供了内核+系统级程序的完整封装，称之为Linux发行版</p></li></ul><p>任何人都可以封装Linux，目前市面上由非常多的Linux发行版，常用的、知名的如下：CentOS、Ubuntu等</p><h3 id="1-3-虚拟机介绍"><a href="#1-3-虚拟机介绍" class="headerlink" title="1.3 虚拟机介绍"></a>1.3 虚拟机介绍</h3><p>借助虚拟化技术，我们可以在系统中，通过软件：模拟计算机硬件，并给虚拟硬件安装真实的操作系统。</p><p>我们不能给自己电脑重装系统为Linux，所以通过虚拟机的形式，得到可以用的Linux系统环境，供后续学习使用。</p><h3 id="1-4-VMware安装Linux系统"><a href="#1-4-VMware安装Linux系统" class="headerlink" title="1.4 VMware安装Linux系统"></a>1.4 VMware安装Linux系统</h3><p>省略</p><h3 id="1-5-远程连接Linux系统"><a href="#1-5-远程连接Linux系统" class="headerlink" title="1.5 远程连接Linux系统"></a>1.5 远程连接Linux系统</h3><p>我们使用VMware可以得到Linux虚拟机，但是在VMware中操作Linux的命令行页面不太方便。可以通过第三方软件，FinalShell，远程连接到Linux操作系统。</p><p>FinalShell的下载地址为：</p><p>Windows: <a href="http://www.hostbuf.com/downloads/finalshell_install.exe">http://www.hostbuf.com/downloads/finalshell_install.exe</a></p><p>Mac: <a href="http://www.hostbuf.com/downloads/finalshell_install.pkg">http://www.hostbuf.com/downloads/finalshell_install.pkg</a></p><p>首先，先查询到Linux系统的IP地址</p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240423084753875.png" alt="image-20240423084753875"></p><p>打开Finshell软件，配置到Linux系统的连接 </p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240423084816063.png" alt="image-20240423084816063"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240423084822090.png" alt="image-20240423084822090"></p><p>打开连接管理器，双击刚刚配置好的连接，点击接受并保存</p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240423084859666.png" alt="image-20240423084859666"></p><h3 id="1-6-WSL"><a href="#1-6-WSL" class="headerlink" title="1.6 WSL"></a>1.6 WSL</h3><p>WSL：Windows Subsystem for Linux，是用于Windows系统之上的Linux子系统。</p><p>作用很简单，可以在Windows系统中获得Linux系统环境，并完全直连计算机硬件，无需通过虚拟机虚拟硬件。</p><p>WSL是Windows10自带功能，需要开启，无需下载，点击确定开启后会自动部署</p><p>打开Windows应用商店，选择Ubuntu并获取安装，然后点击启动</p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240423091114067.png" alt="image-20240423091114067"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240423091121578.png" alt="image-20240423091121578"></p><p>Ubuntu自带的终端窗口软件不太好用，我们可以使用微软推出的：Windows Terminal软件</p><h3 id="1-7-虚拟机快照的制作和还原"><a href="#1-7-虚拟机快照的制作和还原" class="headerlink" title="1.7 虚拟机快照的制作和还原"></a>1.7 虚拟机快照的制作和还原</h3><p>如果损坏了Linux系统的话，重新安装一个Linux操作系统就会十分麻烦。</p><p>VMware虚拟机（Workstation和Funsion）支持为虚拟机制作快照。</p><p>通过快照将当前虚拟机的状态保存下来，在以后可以通过快照恢复虚拟机到保存的状态。</p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240423091258988.png" alt="image-20240423091258988"></p><h2 id="2-Linux基础"><a href="#2-Linux基础" class="headerlink" title="2.Linux基础"></a>2.Linux基础</h2><h3 id="2-1-Linux的目录结构"><a href="#2-1-Linux的目录结构" class="headerlink" title="2.1 Linux的目录结构"></a>2.1 Linux的目录结构</h3><p>Linux的目录结构是一个树型结构</p><p>Linux没有盘符这个概念, 只有一个根目录 &#x2F;, 所有文件都在它下</p><p>在Linux系统中，路径之间的层级关系，使用：&#x2F; 来表示</p><h3 id="2-2-Linux命令入门"><a href="#2-2-Linux命令入门" class="headerlink" title="2.2 Linux命令入门"></a>2.2 Linux命令入门</h3><p>无论是什么命令，用于什么用途，在Linux中，命令有其通用的格式：</p><p>command： 命令本身</p><p>-options：[可选，非必填]命令的一些选项，可以通过选项控制命令的行为细节</p><p>parameter：[可选，非必填]命令的参数，多数用于命令的指向目标等</p><h3 id="2-3-ls命令"><a href="#2-3-ls命令" class="headerlink" title="2.3 ls命令"></a>2.3 ls命令</h3><p>ls命令的作用是列出目录下的内容，语法细节如下：</p><p><code>ls [-a -l -h] [Linux路径]</code></p><ul><li><p>-a -l -h 是可选的选项</p><ul><li>-a选项，表示：all的意思，即列出全部文件（包含隐藏的文件&#x2F;文件夹）</li><li>-l选项，表示：以列表（竖向排列）的形式展示内容，并展示更多信息</li><li>语法中的选项是可以组合使用的，比如学习的-a和-l可以组合应用</li><li>-h 表示以易于阅读的形式，列出文件大小，如K、M、G，必须要搭配 -l 一起使用</li></ul></li><li><p>Linux路径是此命令可选的参数</p></li></ul><p>当不使用选项和参数，直接使用ls命令本体，表示：以平铺形式，列出当前工作目录下的内容</p><h3 id="2-4-目录切换命令cd-pwd"><a href="#2-4-目录切换命令cd-pwd" class="headerlink" title="2.4 目录切换命令cd&#x2F;pwd"></a>2.4 目录切换命令cd&#x2F;pwd</h3><p><strong>cd：</strong></p><p>当Linux终端（命令行）打开的时候，会默认以用户的HOME目录作为当前的工作目录</p><p>我们可以通过cd命令，更改当前所在的工作目录。</p><p>cd命令来自英文：Change Directory</p><p>语法： <code>cd [Linux路径]</code></p><ul><li>cd命令无需选项，只有参数，表示要切换到哪个目录下</li><li>cd命令直接执行，不写参数，表示回到用户的HOME目录</li></ul><p><strong>pwd:</strong></p><p>通过ls来验证当前的工作目录，其实是不恰当的。</p><p>我们可以通过pwd命令，来查看当前所在的工作目录。</p><p>pwd命令来自：Print Work Directory</p><p>语法：<code>pwd</code></p><ul><li>pwd命令，无选项，无参数，直接输入pwd即可</li></ul><h3 id="2-5-相对、绝对路径和特殊路径符"><a href="#2-5-相对、绝对路径和特殊路径符" class="headerlink" title="2.5 相对、绝对路径和特殊路径符"></a>2.5 相对、绝对路径和特殊路径符</h3><p><strong>绝对路径：</strong>以根目录为起点，描述路径的一种写法，路径描述以&#x2F;开头</p><p><strong>相对路径：</strong>以当前目录为起点，描述路径的一种写法，路径描述无需以&#x2F;开头</p><p><strong>特殊路径符：</strong></p><ul><li>表示<strong>当前</strong>目录，比如<code>cd ./Desktop</code>表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致</li><li>表示<strong>上一级</strong>目录，比如：<code>cd .. </code> 即可切换到上一级目录，cd ..&#x2F;.. 切换到上二级的目录</li><li>表示<strong>HOME</strong>目录，比如：<code>cd ~ </code> 即可切换到HOME目录或cd ~&#x2F;Desktop，切换到HOME内的Desktop目录</li></ul><h3 id="2-6-创建目录命令mkdir"><a href="#2-6-创建目录命令mkdir" class="headerlink" title="2.6 创建目录命令mkdir"></a>2.6 创建目录命令mkdir</h3><p>通过mkdir命令可以创建新的目录（文件夹）</p><p>mkdir来自英文：Make Directory</p><p>语法：<code>mkdir [-p] Linux路径</code></p><ul><li>参数必填，表示Linux路径，即要创建的文件夹的路径，相对路径或绝对路径均可（路径所写的即是包名）</li><li>-p选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录</li></ul><h3 id="2-7-文件操作命令"><a href="#2-7-文件操作命令" class="headerlink" title="2.7 文件操作命令"></a>2.7 文件操作命令</h3><p><strong>touch：</strong></p><p>可以通过touch命令创建文件</p><p>语法：<code>touch Linux路径</code></p><ul><li>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</li></ul><p><strong>cat：</strong></p><p>准备好文件内容后，可以通过cat查看内容。</p><p>语法：<code>cat Linux路径</code></p><ul><li>cat同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><p><strong>more：</strong></p><p>more命令同样可以查看文件内容，同cat不同的是：</p><ul><li>cat是直接将内容全部显示出来</li><li>more支持翻页，如果文件内容过多，可以一页页的展示</li></ul><p>语法：<code>more Linux路径</code></p><ul><li>同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li><li>在查看的过程中，通过空格翻页</li><li>通过q退出查看</li></ul><p><strong>cp：</strong></p><p>cp命令可以用于复制文件\文件夹，cp命令来自英文单词：copy</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>-r选项，可选，用于复制文件夹使用，表示递归</li><li>参数1，Linux路径，表示被复制的文件或文件夹</li><li>参数2，Linux路径，表示要复制去的地方</li><li>复制文件夹，必须使用-r选项，否则不会生效</li></ul><p><strong>mv：</strong></p><p>mv命令可以用于移动文件\文件夹，mv命令来自英文单词：move</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1，Linux路径，表示被移动的文件或文件夹</li><li>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</li></ul><p><strong>rm：</strong></p><p>rm命令可用于删除文件、文件夹</p><p>rm命令来自英文单词：remove</p><p>语法：<code>rm [-r -f] 参数1 参数2 ...... 参数N</code></p><ul><li>同cp命令一样，-r选项用于删除文件夹</li><li>-f表示force，强制删除（不会弹出提示确认信息）<ul><li>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</li><li>所以一般普通用户用不到-f选项</li></ul></li><li>参数1、参数2、……、参数N 表示要删除的文件或文件夹路径，按照空格隔开</li><li>rm命令支持通配符 *，用来做模糊匹配</li></ul><p><strong>rm是一个危险的命令，特别是在处于root（超级管理员）用户的时候。请谨慎使用。</strong></p><p><strong>如下命令，请千万千万不要在root管理员用户下执行：</strong></p><p><code>rm -rf /</code></p><p><code>rm -rf /*</code></p><p><strong>效果等同于在Windows上执行C盘格式化。</strong></p><h3 id="2-8-查找命令which-find"><a href="#2-8-查找命令which-find" class="headerlink" title="2.8 查找命令which&#x2F;find"></a>2.8 查找命令which&#x2F;find</h3><p><strong>which：</strong></p><p>通过which命令，查看所使用的一系列命令的程序文件存放在哪里</p><p>语法：<code>which 要查找的命令</code></p><p><strong>find：</strong></p><p>通过find命令去搜索指定的文件。</p><p>语法：<code>find 起始路径 -name &quot;被查找文件名&quot;</code></p><ul><li>被查找文件名，支持使用通配符 * 来做模糊查询。</li></ul><p>语法：<code>find 起始路径 -size +|=n[kMG]</code></p><ul><li>+、- 表示大于和小于</li><li>n表示大小数字</li><li>kMG表示大小单位，k(小写字母)表示kb，M表示MB，G表示GB</li></ul><h3 id="2-9-grep、wc和管道符"><a href="#2-9-grep、wc和管道符" class="headerlink" title="2.9 grep、wc和管道符"></a>2.9 grep、wc和管道符</h3><p><strong>grep：</strong></p><p>可以通过grep命令，从文件中通过关键字过滤文件行。</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><p><strong>wc：</strong></p><p>可以通过wc命令统计文件的行数、单词数量等</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li></ul><p>参数，文件路径，被统计的文件，可作为内容输入端口</p><p><strong>管道符：</strong></p><p>管道符：|</p><p>管道符的含义是：将管道符左边命令的结果，作为右边命令的输入</p><h3 id="2-10-echo、tail和重定向符"><a href="#2-10-echo、tail和重定向符" class="headerlink" title="2.10 echo、tail和重定向符"></a>2.10 echo、tail和重定向符</h3><p><strong>echo：</strong></p><p>可以使用echo命令在命令行内输出指定内容</p><p>语法：<code>echo 输出的内容</code></p><ul><li>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用””包围</li></ul><p><strong>反引号：</strong></p><p>看一下如下命令：echo pwd</p><p>本意是想，输出当前的工作路径，但是pwd被作为普通字符输出了。</p><p>我们可以通过将命令用反引号（通常也称之为飘号）&#96;将其包围</p><p>被&#96;包围的内容，会被作为命令执行，而非普通字符</p><p><strong>重定向符：</strong></p><p>重定向符：&gt;和&gt;&gt;</p><ul><li><code>&gt;</code>，将左侧命令的结果，覆盖写入到符号右侧指定的文件中</li><li><code>&gt;&gt;</code>，将左侧命令的结果，追加写入到符号右侧指定的文件中</li></ul><p><strong>tail：</strong></p><p>使用tail命令，可以查看文件尾部内容，跟踪文件的最新更改。</p><p>语法如下：<code>tail [-f -num] Linux路径</code></p><ul><li><p>参数，Linux路径，表示被跟踪的文件路径</p></li><li><p>选项，-f，可以持续跟踪文件更改</p></li><li><p>选项, -num，表示，查看尾部多少行，不填默认10行</p></li></ul><h3 id="2-11-vi编辑器"><a href="#2-11-vi编辑器" class="headerlink" title="2.11 vi编辑器"></a>2.11 vi编辑器</h3><p>vi\vim是visual interface的简称, 是Linux中最经典的文本编辑器</p><p>同图形化界面中的 文本编辑器一样，vi是命令行下对文本文件进行编辑的绝佳选择。</p><p>vim 是 vi 的加强版本，兼容 vi 的所有指令，不仅能编辑文本，而且还具有 shell 程序编辑的功能，可以不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性。</p><ul><li><p>命令模式（Command mode）</p><ul><li>命令模式下，所敲的按键编辑器都理解为命令，以命令驱动执行不同的功能。</li><li>此模型下，不能自由进行文本编辑。</li></ul></li><li><p>输入模式（Insert mode）</p><ul><li>也就是所谓的编辑模式、插入模式。</li><li>此模式下，可以对文件内容进行自由编辑。</li></ul></li><li><p>底线命令模式（Last line mode）</p><ul><li>以：开始，通常用于文件的保存、退出。</li></ul></li></ul><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240504231420959.png" alt="image-20240504231420959"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240504231427729.png" alt="image-20240504231427729"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240504231440701.png" alt="image-20240504231440701"></p><h3 id="2-12-其他"><a href="#2-12-其他" class="headerlink" title="2.12 其他"></a>2.12 其他</h3><p>任何命令都支持：–help 选项， 可以通过这个选项，查看命令的帮助。</p><p>如果想要查看命令的详细手册，可以通过man（manual， 手册）命令查看。</p><p>大多数手册都是全英文的，如果阅读吃力，可以通过重定向符：man ls &gt; ls-man.txt，输出手册到文件，然后通过翻译软件翻译内容查看。</p><h2 id="3-Linux用户和权限"><a href="#3-Linux用户和权限" class="headerlink" title="3.Linux用户和权限"></a>3.Linux用户和权限</h2><h3 id="3-1-root用户"><a href="#3-1-root用户" class="headerlink" title="3.1 root用户"></a>3.1 root用户</h3><p>无论是Windows、MacOS、Linux均采用多用户的管理模式进行权限管理。</p><ul><li>在Linux系统中，拥有最大权限的账户名为：root（超级管理员）</li></ul><p>root用户拥有最大的系统操作权限，而普通用户在许多地方的权限是受限的。</p><ul><li><p>普通用户的权限，一般在其HOME目录内是不受限的</p></li><li><p>一旦出了HOME目录，大多数地方，普通用户仅有只读和执行权限，无修改权限</p></li></ul><h3 id="3-2-su和exit命令"><a href="#3-2-su和exit命令" class="headerlink" title="3.2 su和exit命令"></a>3.2 su和exit命令</h3><p>su命令就是用于账户切换的系统命令，其来源英文单词：Switch User</p><p>语法：<code>su [-] [用户名]</code></p><ul><li><p>符号是可选的，表示是否在切换用户后加载环境变量（后续讲解），建议带上</p></li><li><p>参数：用户名，表示要切换的用户，用户名也可以省略，省略表示切换到root</p></li><li><p>切换用户后，可以通过<strong>exit</strong>命令退回上一个用户，也可以使用快捷键：ctrl + d</p></li><li><p>使用普通用户，切换到其它用户需要输入密码，如切换到root用户</p></li><li><p>使用root用户切换到其它用户，无需密码，可以直接切换</p></li></ul><h3 id="3-3-sudo命令"><a href="#3-3-sudo命令" class="headerlink" title="3.3 sudo命令"></a>3.3 sudo命令</h3><p>我们可以使用sudo命令，为普通的命令授权，临时以root身份执行。</p><p>语法：<code>sudo 其他命令</code></p><ul><li>在其它命令之前，带上sudo，即可为这一条命令临时赋予root授权</li><li>但是并不是所有的用户，都有权利使用sudo，我们需要为普通用户配置sudo认证</li></ul><p><strong>为普通用户配置sudo：</strong></p><ul><li>切换到root用户，执行visudo命令，会自动通过vi编辑器打开：&#x2F;etc&#x2F;sudoers</li></ul><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507121836233.png" alt="image-20240507121836233"></p><ul><li>最后通过 wq 保存</li></ul><h3 id="3-4-用户管理"><a href="#3-4-用户管理" class="headerlink" title="3.4 用户管理"></a>3.4 用户管理</h3><p>Linux系统中可以：</p><ul><li>配置多个用户</li><li>配置多个用户组</li><li>用户可以加入多个用户组中</li></ul><p>Linux中关于权限的管控级别有2个级别，分别是：</p><ul><li>针对用户的权限控制</li><li>针对用户组的权限控制</li></ul><p>比如，针对某文件，可以控制用户的权限，也可以控制用户组的权限。</p><p>以下命令需root用户执行：</p><ul><li><strong>创建用户</strong></li></ul><p><code>useradd [-g -d] 用户名</code></p><ul><li><p>选项：-g指定用户的组，不指定-g，会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g</p></li><li><p>选项：-d指定用户HOME路径，不指定，HOME目录默认在：&#x2F;home&#x2F;用户名</p></li><li><p><strong>删除用户</strong></p></li></ul><p><code>userdel [-r] 用户名</code></p><ul><li><p>选项：-r，删除用户的HOME目录，不使用-r，删除用户时，HOME目录保留</p></li><li><p><strong>查看用户所属组</strong></p></li></ul><p><code>id [用户名]</code></p><ul><li><p>参数：用户名，被查看的用户，如果不提供则查看自身</p></li><li><p><strong>修改用户所属组</strong></p></li></ul><p><code>usermod -aG 用户组 用户名</code></p><ul><li>将指定用户加入指定用户组</li></ul><h3 id="3-5-用户组管理"><a href="#3-5-用户组管理" class="headerlink" title="3.5 用户组管理"></a>3.5 用户组管理</h3><p>以下命令需root用户执行</p><ul><li>创建用户组</li></ul><p><code>groupadd 用户组名</code></p><ul><li>删除用户组</li></ul><p><code>groupdel 用户组名</code></p><h3 id="3-6-getent命令"><a href="#3-6-getent命令" class="headerlink" title="3.6 getent命令"></a>3.6 getent命令</h3><p>使用getent命令，可以查看当前系统中有哪些用户</p><p>语法： <code>getent passwd</code></p><p>使用getent命令，同样可以查看当前系统中有哪些用户组</p><p>语法：<code>getent group</code></p><h3 id="3-7-查看权限控制"><a href="#3-7-查看权限控制" class="headerlink" title="3.7 查看权限控制"></a>3.7 查看权限控制</h3><p>通过ls -l 可以以列表形式查看内容，并显示权限细节</p><ul><li>序号1，表示文件、文件夹的权限控制信息</li><li>序号2，表示文件、文件夹所属用户</li><li>序号3，表示文件、文件夹所属用户组</li></ul><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507122423522.png" alt="image-20240507122423522"></p><p>权限细节总共分为10个槽位</p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507122436135.png" alt="image-20240507122436135"></p><p><strong>rwx：</strong></p><ul><li>r表示读权限</li><li>w表示写权限</li><li>x表示执行权限</li></ul><p>针对文件、文件夹的不同，rwx的含义有细微差别</p><ul><li><p>r，针对文件可以查看文件内容</p><ul><li>针对文件夹，可以查看文件夹内容，如ls命令</li></ul></li><li><p>w，针对文件表示可以修改此文件</p><ul><li>针对文件夹，可以在文件夹内：创建、删除、改名等操作</li></ul></li><li><p>x，针对文件表示可以将文件作为程序执行</p><ul><li>针对文件夹，表示可以更改工作目录到此文件夹，即cd进入</li></ul></li></ul><h3 id="3-8-修改权限控制chmod"><a href="#3-8-修改权限控制chmod" class="headerlink" title="3.8 修改权限控制chmod"></a>3.8 修改权限控制chmod</h3><p>我们可以使用chmod命令，修改文件、文件夹的权限信息。</p><p><strong>注意，只有文件、文件夹的所属用户或root用户可以修改。</strong></p><p>语法：<code>chmod [-R] 权限 文件或文件夹</code></p><ul><li>选项：-R，对文件夹内的全部内容应用同样的操作</li></ul><p>权限可以用3位数字来代表，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其它用户权限。</p><p>数字的细节如下：r记为4，w记为2，x记为1，可以有：</p><ul><li>0：无任何权限， 即 —</li><li>1：仅有x权限， 即 –x</li><li>2：仅有w权限 即 -w-</li><li>3：有w和x权限 即 -wx</li><li>4：仅有r权限 即 r–</li><li>5：有r和x权限 即 r-x</li><li>6：有r和w权限 即 rw-</li><li>7：有全部权限 即 rwx</li></ul><h3 id="3-9-修改权限控制chown"><a href="#3-9-修改权限控制chown" class="headerlink" title="3.9 修改权限控制chown"></a>3.9 修改权限控制chown</h3><p>使用chown命令，可以修改文件、文件夹的所属用户和用户组</p><p>普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户执行</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><ul><li>选项，-R，同chmod，对文件夹内全部内容应用相同规则</li><li>选项，用户，修改所属用户</li><li>选项，用户组，修改所属用户组</li><li>用于分隔用户和用户组</li></ul><h2 id="4-Linux实用操作"><a href="#4-Linux实用操作" class="headerlink" title="4.Linux实用操作"></a>4.Linux实用操作</h2><h3 id="4-1-各类技巧快捷键"><a href="#4-1-各类技巧快捷键" class="headerlink" title="4.1 各类技巧快捷键"></a>4.1 各类技巧快捷键</h3><ul><li><p>Linux某些程序的运行，如果想要强制停止它，可以使用快捷键<strong>ctrl + c</strong></p></li><li><p>可以通过快捷键：<strong>ctrl + d</strong>，退出账户的登录</p><ul><li>或者退出某些特定程序的专属页面</li><li><strong>不能用于退出vi&#x2F;vim</strong></li></ul></li><li><p>可以通过<strong>history</strong>命令，查看历史输入过的命令</p></li><li><p>可以通过：**!**命令前缀，自动执行上一次匹配前缀的命令</p></li><li><p>可以通过快捷键：<strong>ctrl + r</strong>，输入内容去匹配历史命令</p><ul><li><p>如果搜索到的内容是你需要的，那么：</p><ul><li><p>回车键可以直接执行</p></li><li><p>键盘左右键，可以得到此命令（不执行）</p></li></ul></li></ul></li><li><p><strong>ctrl + a</strong>，跳到命令开头</p></li><li><p><strong>ctrl + e</strong>，跳到命令结尾</p></li><li><p><strong>ctrl + 键盘左键</strong>，向左跳一个单词</p></li><li><p><strong>ctrl + 键盘右键</strong>，向右跳一个单词</p></li><li><p>通过快捷键<strong>ctrl + l</strong>，可以清空终端内容</p></li><li><p>或通过命令<strong>clear</strong>得到同样效果</p></li></ul><h3 id="4-2-软件安装"><a href="#4-2-软件安装" class="headerlink" title="4.2 软件安装"></a>4.2 软件安装</h3><p><strong>yum命令：（CentOS）</strong></p><p>RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。</p><p>语法：<code>yum [-y] [install | remove | search] 软件名称</code></p><ul><li>选项：-y，自动确认，无需手动确认安装或卸载过程</li><li>install：安装</li><li>remove：卸载</li><li>search：搜索</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p> yum命令需要root权限哦，可以su切换到root，或使用sudo提权。</p><p>yum命令需要联网</p></blockquote><p><strong>apt命令：（Ubuntu）</strong></p><p>CentOS使用yum管理器，Ubuntu使用apt管理器</p><p>通过前面学习的WSL环境，我们可以得到Ubuntu运行环境。</p><p>语法：<code>apt [-y] [install | remove | search] 软件名称</code></p><p>用法和yum一致，同样需要root权限</p><h3 id="4-3-systemctl"><a href="#4-3-systemctl" class="headerlink" title="4.3 systemctl"></a>4.3 systemctl</h3><p>Linux系统很多软件（内置或第三方）均支持使用<code>systemctl</code>命令控制：启动、停止、开机自启</p><p>能够被<code>systemctl</code>管理的软件，一般也称之为：服务</p><p>语法：<code>systemctl start| stop | status | enable | disable 服务名</code></p><ul><li>start 启动 stop关闭 status查看状态 enable 开启开机自启 disable 关闭开机自启</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>系统内置的服务比较多，比如：</p><p>NetworkManager，主网络服务</p><p>network，副网络服务</p><p>firewalld，防火墙服务</p><p>sshd，ssh服务（FinalShell远程登录Linux使用的就是这个服务）</p></blockquote><p>除了内置的服务以外，部分第三方软件安装后也可以以<code>systemctl</code>进行控制。</p><p><code>yum install -y ntp</code>，安装ntp软件，可以通过ntpd服务名，配合systemctl进行控制。</p><p><code>yum install -y httpd</code>，安装apache服务器软件，可以通过httpd服务名，配合systemctl进行控制。</p><p>部分软件安装后没有自动集成到systemctl中，我们可以手动添加。</p><h3 id="4-4-软连接ln"><a href="#4-4-软连接ln" class="headerlink" title="4.4 软连接ln"></a>4.4 软连接ln</h3><p>在系统中创建软链接，可以将文件、文件夹链接到其它位置。</p><p>类似Windows系统中的《快捷方式》</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>-s选项，创建软连接</li><li>参数1：被链接的文件或文件夹</li><li>参数2：要链接去的目的地</li></ul><h3 id="4-5-日期、时区"><a href="#4-5-日期、时区" class="headerlink" title="4.5 日期、时区"></a>4.5 日期、时区</h3><p><strong>date：</strong></p><p>通过date命令可以在命令行中查看系统的时间</p><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li>-d 按照给定的字符串显示日期，一般用于日期计算</li><li>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</li></ul><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507145843447.png" alt="image-20240507145843447"></p><p><strong>修改Linux时区：</strong></p><p>系统默认时区非中国的东八区。使用root权限，执行如下命令，修改时区为东八区时区</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">rm</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-f</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/etc/localtime</span></span><span class="line"><span style="color: #FFCB6B">sudo</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ln</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-s</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/usr/share/zoneinfo/Asia/Shanghai</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/etc/localtime</span></span></code></pre></div><p>将系统自带的localtime文件删除，并将<code>/usr/share/zoneinfo/Asia/Shanghai</code>文件链接为localtime文件即可</p><p><strong>ntp：</strong></p><p>我们可以通过ntp程序自动校准系统时间</p><p><code>安装ntp：yum -y install ntp</code></p><p>启动并设置开机自启：</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">start</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ntpd</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">enable</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ntpd</span></span></code></pre></div><p>当ntpd启动后会定期的帮助我们联网校准系统的时间</p><p>也可以手动校准（需root权限）：<code>ntpdate -u ntp.aliyun.com</code></p><p>通过阿里云提供的服务网址配合ntpdate（安装ntp后会附带这个命令）命令自动校准。</p><h3 id="4-6-IP地址、主机名"><a href="#4-6-IP地址、主机名" class="headerlink" title="4.6 IP地址、主机名"></a>4.6 IP地址、主机名</h3><p><strong>IP地址：</strong></p><p>每一台联网的电脑都会有一个地址，用于和其它计算机进行通讯</p><p>IP地址主要有2个版本，V4版本和V6版本（V6很少用，课程暂不涉及）</p><p>IPv4版本的地址格式是：a.b.c.d，其中abcd表示0~255的数字，如192.168.88.101就是一个标准的IP地址</p><p>可以通过命令：<code>ifconfig</code>，查看本机的ip地址</p><p>如无法使用<code>ifconfig</code>命令，可以安装：<code>yum -y install net-tools</code></p><p><strong>特殊IP地址：</strong></p><p>除了标准的IP地址以外，还有几个特殊的IP地址需要我们了解：</p><ul><li><p>127.0.0.1，这个IP地址用于指代本机</p></li><li><p>0.0.0.0，用于指代本机</p><ul><li><p>可以在端口绑定中用来确定绑定关系（后续讲解）</p></li><li><p>在一些IP地址限制中，表示所有IP的意思，如放行规则设置为0.0.0.0，表示允许任意IP访问</p></li></ul></li></ul><p><strong>主机名：</strong></p><p>每一台电脑除了对外联络地址（IP地址）以外，也可以有一个名字，称之为主机名</p><p>无论是Windows或Linux系统，都可以给系统设置主机名</p><ul><li>可以使用命令：<code>hostname</code>查看主机名</li><li>可以使用命令：<code>hostnamectl set-hostname 主机名</code>，修改主机名（需root）</li></ul><p><strong>域名解析：</strong></p><p>可以通过主机名找到对应计算机的IP地址，这就是主机名映射（域名解析）</p><p>先通过系统本地的记录去查找，如果找不到就联网去公开DNS服务器去查找</p><p><strong>配置主机名映射：</strong></p><p>在Windows系统的：C:\Windows\System32\drivers\etc\hosts文件中配置记录即可</p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507152156835.png" alt="image-20240507152156835"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507152208340.png" alt="image-20240507152208340"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507152214997.png" alt="image-20240507152214997"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507152219815.png" alt="image-20240507152219815"></p><h3 id="4-7-虚拟机配置固定IP"><a href="#4-7-虚拟机配置固定IP" class="headerlink" title="4.7 虚拟机配置固定IP"></a>4.7 虚拟机配置固定IP</h3><p><strong>为什么需要固定IP：</strong></p><p>当前我们虚拟机的Linux操作系统，其IP地址是通过DHCP服务获取的。</p><p>DHCP：动态获取IP地址，即每次重启设备后都会获取一次，可能导致IP地址频繁变更</p><p>原因1：办公电脑IP地址变化无所谓，但是我们要远程连接到Linux系统，如果IP地址经常变化我们就要频繁修改适配很麻烦</p><p>原因2：在刚刚我们配置了虚拟机IP地址和主机名的映射，如果IP频繁更改，我们也需要频繁更新映射关系</p><p><strong>在VMware Workstation中配置固定IP：</strong></p><p>配置固定IP需要2个大步骤：</p><p>1.在VMware Workstation（或Fusion）中配置IP地址网关和网段（IP地址的范围）</p><p>2.在Linux系统中手动修改配置文件，固定IP</p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507152742988.png" alt="image-20240507152742988"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507152706080.png" alt="image-20240507152706080"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507152714112.png" alt="image-20240507152714112"></p><p>现在进行第二步，在Linux系统中修改固定IP</p><ul><li>使用vim编辑&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33文件，填入如下内容</li><li>执行：systemctl restart network 重启网卡，执行ifconfig即可看到ip地址固定为192.168.88.130了</li></ul><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507152821798.png" alt="image-20240507152821798"></p><h3 id="4-8-网络传输ping-wget-curl"><a href="#4-8-网络传输ping-wget-curl" class="headerlink" title="4.8 网络传输ping&#x2F;wget&#x2F;curl"></a>4.8 网络传输ping&#x2F;wget&#x2F;curl</h3><p><strong>ping命令：</strong></p><p>可以通过ping命令，检查指定的网络服务器是否是可联通状态</p><p>语法：<code>ping [-c num] ip或主机名</code></p><ul><li>选项：-c，检查的次数，不使用-c选项，将无限次数持续检查</li><li>参数：ip或主机名，被检查的服务器的ip地址或主机名地址</li></ul><p><strong>wget命令：</strong></p><p>wget是非交互式的文件下载器，可以在命令行内下载网络文件</p><p>语法：<code>wget [-b] url</code></p><ul><li>选项：-b，可选，后台下载，会将日志写入到当前工作目录的wget-log文件</li><li>参数：url，下载链接</li></ul><p><strong>curl命令：</strong></p><p>curl可以发送http网络请求，可用于：下载文件、获取信息等</p><p>语法：<code>curl [-O] url</code></p><ul><li>选项：-O，用于下载文件，当url是下载链接时，可以使用此选项保存文件</li><li>参数：url，要发起请求的网络地址</li></ul><h3 id="4-9-端口"><a href="#4-9-端口" class="headerlink" title="4.9 端口"></a>4.9 端口</h3><p>端口，是设备与外界通讯交流的出入口。端口可以分为：物理端口和虚拟端口两类</p><ul><li>物理端口：又可称之为接口，是可见的端口，如USB接口，RJ45网口，HDMI端口等</li><li>虚拟端口：是指计算机内部的端口，是不可见的，是用来操作系统和外部进行交互使用的</li></ul><p>虚拟端口：计算机程序之间的通讯，通过IP只能锁定计算机，但是无法锁定具体的程序。通过端口可以锁定计算机上具体的程序，确保程序之间进行沟通。</p><p>Linux系统是一个超大号小区，可以支持65535个端口，这6万多个端口分为3类进行使用：</p><ul><li><p>公认端口：1~1023，通常用于一些系统内置或知名程序的预留使用，如SSH服务的22端口，HTTPS服务的443端口</p><ul><li>非特殊需要，不要占用这个范围的端口</li></ul></li><li><p>注册端口：1024~49151，通常可以随意使用，用于松散的绑定一些程序\服务</p></li><li><p>动态端口：49152~65535，通常不会固定绑定程序，而是当程序对外进行网络链接时，用于临时使用。</p></li></ul><p>可以通过Linux命令去查看端口的占用情况</p><p>使用nmap命令，安装nmap：<code>yum -y install nmap</code></p><p>语法：<code>nmap 被查看的IP地址</code></p><p>可以通过netstat命令，查看指定端口的占用情况</p><p>安装netstat：<code>yum -y install net-tools</code></p><p>语法：<code>netstat -anp | grep 端口号</code></p><h3 id="4-10-进程管理"><a href="#4-10-进程管理" class="headerlink" title="4.10 进程管理"></a>4.10 进程管理</h3><p><strong>进程：</strong></p><p>程序运行在操作系统中，是被操作系统所管理的。</p><p>为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个：进程</p><p>并会为每一个进程都分配一个独有的：进程ID（进程号）</p><p><strong>查看进程：</strong></p><p>可以通过ps命令查看Linux系统中的进程信息</p><p>语法：<code>ps [-e -f]</code></p><p>选项：-e，显示出全部的进程</p><p>选项：-f，以完全格式化的形式展示信息（展示全部信息）</p><p>一般来说，固定用法就是： ps -ef 列出全部进程的全部信息</p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507154611271.png" alt="image-20240507154611271"></p><p><strong>查看指定进程：</strong></p><p>使用管道符配合grep来进行过滤，如：</p><p><code>ps -ef | grep tail</code>，即可准确的找到tail命令的信息</p><p>过滤不仅仅过滤名称，进程号，用户ID等等，都可以被grep过滤</p><p><strong>关闭进程：</strong></p><p>在Linux中，可以通过kill命令关闭进程。</p><p>语法：<code>kill [-9] 进程ID</code></p><p>选项：-9，表示强制关闭进程。不使用此选项会向进程发送信号要求其关闭，但是否关闭看进程自身的处理机制。</p><h3 id="4-11-主机状态"><a href="#4-11-主机状态" class="headerlink" title="4.11 主机状态"></a>4.11 主机状态</h3><p><strong>查看系统资源占用：</strong></p><p>可以通过top命令查看CPU、内存使用情况，类似Windows的任务管理器</p><ul><li>默认每5秒刷新一次，语法：<strong>直接输入top即可，按q或ctrl + c退出</strong></li></ul><p><strong>top命令内容详解：</strong></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507163503441.png" alt="image-20240507163503441"></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507163519910.png" alt="image-20240507163519910"></p><p><strong>top命令也支持选项：</strong></p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507163548055.png" alt="image-20240507163548055"></p><p><strong>top交互式选项：</strong></p><p>当top以交互式运行（非-b选项启动），可以用以下交互式命令进行控制</p><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507164630502.png" alt="image-20240507164630502"></p><p><strong>磁盘信息监控：</strong></p><p>使用df命令，可以查看硬盘的使用情况</p><p>语法：<code>df [-h]</code></p><ul><li>选项：-h，以更加人性化的单位显示</li></ul><p>可以使用iostat查看CPU、磁盘的相关信息</p><p>语法：<code>iostat [-x] [num1] [num2]</code></p><ul><li>选项：-x，显示更多信息</li><li>num1：数字，刷新间隔，num2：数字，刷新几次</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>tps：该设备每秒的传输次数（Indicate the number of transfers per second that were issued to the device.）。”一次传输”意思是”一次I&#x2F;O请求”。多个逻辑请求可能会被合并为”一次I&#x2F;O请求”。”一次传输”请求的大小是未知的。</p></blockquote><ul><li>使用iostat的-x选项，可以显示更多信息</li></ul><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507164816911.png" alt="image-20240507164816911"></p><p><strong>网络状态监控：</strong></p><p>可以使用sar命令查看网络的相关统计（sar命令非常复杂，这里仅简单用于统计网络）</p><p>语法：<code>sar -n DEV num1 num2</code></p><ul><li>选项：-n，查看网络，DEV表示查看网络接口</li><li>num1：刷新间隔（不填就查看一次结束），num2：查看次数（不填无限次数）</li></ul><p><img src="/oranfish.github.io/posts/0/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/image-20240507165001548.png" alt="image-20240507165001548"></p><h3 id="4-12-环境变量"><a href="#4-12-环境变量" class="headerlink" title="4.12 环境变量"></a>4.12 环境变量</h3><p>环境变量是操作系统（Windows、Linux、Mac）在运行的时候，记录的一些关键性信息，用以辅助系统运行。</p><p>在Linux系统中执行：env命令即可查看当前系统中记录的环境变量</p><p>环境变量是一种KeyValue型结构，即名称和值</p><p><strong>环境变量：PATH</strong></p><p>在前面提出的问题中，我们说无论当前工作目录是什么，都能执行&#x2F;usr&#x2F;bin&#x2F;cd这个程序，这个就是借助环境变量中：PATH这个项目的值来做到的。</p><p>PATH记录了系统执行任何命令的搜索路径。当执行任何命令，都会按照顺序，从上述路径中搜索要执行的程序的本体。</p><p><strong>$符号：</strong></p><p>在Linux系统中，$符号被用于取”变量”的值。</p><p>环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也可以使用。</p><p>取得环境变量的值就可以通过语法：**$环境变量名** 来取得</p><p><strong>自行设置环境变量：</strong></p><p>Linux环境变量可以用户自行设置，其中分为：</p><ul><li>临时设置，语法：export 变量名&#x3D;变量值</li><li>永久生效<ul><li>针对当前用户生效，配置在当前用户的： ~&#x2F;.bashrc文件中</li><li>针对所有用户生效，配置在系统的： &#x2F;etc&#x2F;profile文件中</li><li>并通过语法：<strong>source 配置文件</strong>，进行立刻生效，或重新登录FinalShell生效</li></ul></li></ul><p><strong>自定义环境变量PATH：</strong></p><p>环境变量PATH这个项目里面记录了系统执行命令的搜索路径。</p><p>这些搜索路径我们也可以自行添加到PATH中去。</p><h3 id="4-13-上传、下载"><a href="#4-13-上传、下载" class="headerlink" title="4.13 上传、下载"></a>4.13 上传、下载</h3><p>我们可以通过FinalShell工具，方便的和虚拟机进行数据交换。</p><p>在FinalShell软件的下方窗体中，提供了Linux的文件系统视图，可以方便的：</p><ul><li><p>浏览文件系统，找到合适的文件，右键点击下载，即可传输到本地电脑</p></li><li><p>浏览文件系统，找到合适的目录，将本地电脑的文件拓展进入，即可方便的上传数据到Linux中</p></li></ul><p><strong>rz、sz命令：</strong></p><p>可以通过rz、sz命令进行文件传输。</p><p>rz、sz命令需要安装，可以通过：<code>yum -y install lrzsz</code>，即可安装。</p><ul><li>rz命令，进行上传，语法：直接输入rz即可</li><li>sz命令进行下载，语法：sz 要下载的文件</li></ul><h3 id="4-14-压缩、解压"><a href="#4-14-压缩、解压" class="headerlink" title="4.14 压缩、解压"></a>4.14 压缩、解压</h3><p><strong>tar命令：</strong></p><p>Linux和Mac系统常用有2种压缩格式，后缀名分别是：</p><ul><li><p>.tar，称之为tarball，归档文件，即简单的将文件组装到一个.tar的文件内，并没有太多文件体积的减少，仅仅是简单的封装</p></li><li><p>.gz，也常见为.tar.gz，gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积</p></li></ul><p>针对这两种格式，使用tar命令均可以进行压缩和解压缩的操作</p><p>语法：<code>tar [-c -v -x -f -z -C] </code></p><ul><li>-c，创建压缩文件，用于压缩模式</li><li>-v，显示压缩、解压过程，用于查看进度</li><li>-x，解压模式</li><li>-f，要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</li><li>-z，gzip模式，不使用-z就是普通的tarball格式</li><li>-C，选择解压的目的地，用于解压模式</li></ul><p><strong>tar命令压缩：</strong></p><p>tar的常用组合为：</p><ul><li>tar -cvf test.tar 1.txt 2.txt 3.txt</li></ul><p>将1.txt 2.txt 3.txt 压缩到test.tar文件内</p><ul><li>tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</li></ul><p>将1.txt 2.txt 3.txt 压缩到test.tar.gz文件内，使用gzip模式</p><p>注意：</p><ul><li>-z选项如果使用的话，一般处于选项位第一个</li><li>-f选项，必须在选项位最后一个</li></ul><p><strong>tar解压：</strong></p><p>常用的tar解压组合有</p><ul><li>tar -xvf test.tar</li></ul><p>解压test.tar，将文件解压至当前目录</p><ul><li>tar -xvf test.tar -C &#x2F;home&#x2F;itheima</li></ul><p>解压test.tar，将文件解压至指定目录（&#x2F;home&#x2F;itheima）</p><ul><li>tar -zxvf test.tar.gz -C &#x2F;home&#x2F;itheima</li></ul><p>以Gzip模式解压test.tar.gz，将文件解压至指定目录（&#x2F;home&#x2F;itheima）</p><p>注意：</p><ul><li>-f选项，必须在选项组合体的最后一位</li><li>-z选项，建议在开头位置</li><li>-C选项单独使用，和解压所需的其它参数分开</li></ul><p><strong>zip命令压缩文件：</strong></p><p>可以使用zip命令，压缩文件为zip压缩包</p><p>语法：<code>zip [-r] 参数1 参数2 ... 参数N</code></p><ul><li>-r，被压缩的包含文件夹的时候，需要使用-r选项，和rm、cp等命令的-r效果一致</li></ul><p><strong>unzip命令解压文件：</strong></p><p>使用unzip命令，可以方便的解压zip压缩包</p><p>语法：<code>unzip [-d] 参数</code></p><ul><li>-d，指定要解压去的位置，同tar的-C选项</li><li>参数，被解压的zip压缩包文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言指令</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-通用寄存器简单指令"><a href="#1-通用寄存器简单指令" class="headerlink" title="1.通用寄存器简单指令"></a>1.通用寄存器简单指令</h2><h3 id="1-1-简单传送指令"><a href="#1-1-简单传送指令" class="headerlink" title="1.1 简单传送指令"></a>1.1 简单传送指令</h3><h4 id="1-1-1-传送指令MOV"><a href="#1-1-1-传送指令MOV" class="headerlink" title="1.1.1 传送指令MOV"></a>1.1.1 传送指令MOV</h4><p>MOV  DEST,SRC</p><p>将源操作数SRC送至目的操作数DEST，即：</p><p>DEST &lt;&#x3D; SRC</p><h4 id="1-1-2-交换指令XCHG"><a href="#1-1-2-交换指令XCHG" class="headerlink" title="1.1.2 交换指令XCHG"></a>1.1.2 交换指令XCHG</h4><p>XCHG   OPRD1,OPRD2</p><p>将操作数OPRD1的内容与操作数OPRD2的内容交换，即：</p><p>OPRD1 &lt;&#x3D;&gt; OPRD2</p><h4 id="1-1-3-取地址LEA"><a href="#1-1-3-取地址LEA" class="headerlink" title="1.1.3 取地址LEA"></a>1.1.3 取地址LEA</h4><p>LEA   OPRD1,OPRD2</p><p>取地址至寄存器</p><h3 id="1-2-简单加减指令"><a href="#1-2-简单加减指令" class="headerlink" title="1.2  简单加减指令"></a>1.2  简单加减指令</h3><h4 id="1-2-1-加法指令ADD"><a href="#1-2-1-加法指令ADD" class="headerlink" title="1.2.1 加法指令ADD"></a>1.2.1 加法指令ADD</h4><p> ADD   DEST,SRC</p><p>此指令完成两个操作数相加，结果送到目的操作数DEST，即：</p><p>DEST &lt;&#x3D; DEST + SRC</p><h4 id="1-2-2-减法指令SUB"><a href="#1-2-2-减法指令SUB" class="headerlink" title="1.2.2 减法指令SUB"></a>1.2.2 减法指令SUB</h4><p>SUB   DEST,SRC</p><p>此指令完成两个操作数相减，结果送到目的操作数DEST，即：</p><p>DEST &lt;&#x3D; DEST - SRC</p><h4 id="1-2-3-加1指令INC"><a href="#1-2-3-加1指令INC" class="headerlink" title="1.2.3 加1指令INC"></a>1.2.3 加1指令INC</h4><p>INC   DEST</p><p>此指令完成对操作数DEST加1，然后把结果送回DEST，即：<br>DEST &lt;&#x3D; DEST + 1</p><h4 id="1-2-4-减1指令DEC"><a href="#1-2-4-减1指令DEC" class="headerlink" title="1.2.4 减1指令DEC"></a>1.2.4 减1指令DEC</h4><p>DEC  DEST</p><p>此指令完成对操作数DEST减1，然后把结果送回DEST，即：<br>DEST &lt;&#x3D; DEST - 1</p><h4 id="1-2-5-取补指令NEG"><a href="#1-2-5-取补指令NEG" class="headerlink" title="1.2.5 取补指令NEG"></a>1.2.5 取补指令NEG</h4><p>NEG  OPRD</p><p>此指令对操作数取补，就是用0减去操作数OPRD，再把结果送回OPRD，即：<br>OPRD &lt;&#x3D; 0 - OPRD</p><h2 id="2-标志寄存器的标志及指令"><a href="#2-标志寄存器的标志及指令" class="headerlink" title="2.标志寄存器的标志及指令"></a>2.标志寄存器的标志及指令</h2><h3 id="2-1-状态标志"><a href="#2-1-状态标志" class="headerlink" title="2.1 状态标志"></a>2.1 状态标志</h3><h4 id="2-1-1-进位标志CF"><a href="#2-1-1-进位标志CF" class="headerlink" title="2.1.1 进位标志CF"></a>2.1.1 进位标志CF</h4><p>进位标志主要反映算数运算是否产生进位或借位。</p><p>如果运算结果的最高位产生一个进位或借位，则CF被置1，否则CF被清0。</p><h4 id="2-1-2-零标志ZF"><a href="#2-1-2-零标志ZF" class="headerlink" title="2.1.2 零标志ZF"></a>2.1.2 零标志ZF</h4><p>零标志反映运算结果是否为0。</p><p>如果运算结果为0，则ZF被置1，否则ZF被清零。</p><h4 id="2-1-3-符号标志SF"><a href="#2-1-3-符号标志SF" class="headerlink" title="2.1.3 符号标志SF"></a>2.1.3 符号标志SF</h4><p>符号标志反映运算结果的符号位。</p><p>SF与运算结果的最高位相同，如果运算结果最高位为1，则SF被置1，否则SF被清0。</p><h4 id="2-1-4-溢出标志OF"><a href="#2-1-4-溢出标志OF" class="headerlink" title="2.1.4 溢出标志OF"></a>2.1.4 溢出标志OF</h4><p>溢出标志反映有符号数加减运算是否引起溢出。</p><p>如果运算结果超出了8位、16位或32位有符号数的表示范围，则OF被置1，否则OF被清0。</p><h4 id="2-1-5-奇偶标志PF"><a href="#2-1-5-奇偶标志PF" class="headerlink" title="2.1.5 奇偶标志PF"></a>2.1.5 奇偶标志PF</h4><p>奇偶标志反映运算结果的最低字节中含有“1”的位数是偶数还是奇数。</p><p>如果“1”的位数是偶数，则PF被置1，否则PF被清0。</p><h4 id="2-1-6-辅助进位标志AF"><a href="#2-1-6-辅助进位标志AF" class="headerlink" title="2.1.6 辅助进位标志AF"></a>2.1.6 辅助进位标志AF</h4><p>辅助进位标志反映算术运算中第3位是否产生进位或借位，或者最低的4位是否有进位或借位。</p><p>如果产生进位或借位，则AF被置1，否则AF被清0。</p><h3 id="2-2-状态标志操作指令"><a href="#2-2-状态标志操作指令" class="headerlink" title="2.2 状态标志操作指令"></a>2.2 状态标志操作指令</h3><h4 id="2-2-1-清进位标志指令CLC"><a href="#2-2-1-清进位标志指令CLC" class="headerlink" title="2.2.1 清进位标志指令CLC"></a>2.2.1 清进位标志指令CLC</h4><p>这条指令使进位标志CF为0。</p><h4 id="2-2-2-置进位标志指令STR"><a href="#2-2-2-置进位标志指令STR" class="headerlink" title="2.2.2 置进位标志指令STR"></a>2.2.2 置进位标志指令STR</h4><p>这条指令使进位标志CF为1。</p><h4 id="2-2-3-进位标志取反指令CMC"><a href="#2-2-3-进位标志取反指令CMC" class="headerlink" title="2.2.3 进位标志取反指令CMC"></a>2.2.3 进位标志取反指令CMC</h4><p>这条指令使进位标志CF取反。</p><p>如CF为1，则使CF为0；如CF为0，则使CF为1。</p><p>上述 3 条进位标志操作指令仅影响CF，对其他标志没有影响。</p><h4 id="2-2-4-获取状态标志操作指令LAHF"><a href="#2-2-4-获取状态标志操作指令LAHF" class="headerlink" title="2.2.4 获取状态标志操作指令LAHF"></a>2.2.4 获取状态标志操作指令LAHF</h4><p>这条指令把标志寄存器的低8位，送到通用寄存器AH中。</p><h4 id="2-2-5-设置状态标志操作指令SAHF"><a href="#2-2-5-设置状态标志操作指令SAHF" class="headerlink" title="2.2.5 设置状态标志操作指令SAHF"></a>2.2.5 设置状态标志操作指令SAHF</h4><p>这条指令对标志寄存器中低8位的状态标志产生影响，使得状态标志SF、ZF、AF、PF和CF分别成为来自寄存器AH中对应位的值，但保留位不受影响。</p><h3 id="2-3-带进位加减指令"><a href="#2-3-带进位加减指令" class="headerlink" title="2.3 带进位加减指令"></a>2.3 带进位加减指令</h3><h4 id="2-3-1-带进位加法指令ADC"><a href="#2-3-1-带进位加法指令ADC" class="headerlink" title="2.3.1 带进位加法指令ADC"></a>2.3.1 带进位加法指令ADC</h4><p>ADC  DEST,SRC</p><p>这条指令与ADD指令类似，完成两个操作数相加，但还要把进位标志CF的当前值加上，把结果送至目的操作数DEST，即：</p><p>DEST &lt;&#x3D; DEST + SRC <strong>+ CF</strong></p><h4 id="2-3-2-带借位减法指令SBB"><a href="#2-3-2-带借位减法指令SBB" class="headerlink" title="2.3.2 带借位减法指令SBB"></a>2.3.2 带借位减法指令SBB</h4><p>SBB  DEST,SRC</p><p>这条指令与SUB指令类似，完成两个操作数相减，但还要把借位标志CF的当前值减去，把结果送至目的操作数DEST，即：</p><p>DEST &lt;&#x3D; DEST - SRC <strong>- CF</strong></p><h2 id="3-堆栈和堆栈操作"><a href="#3-堆栈和堆栈操作" class="headerlink" title="3.堆栈和堆栈操作"></a>3.堆栈和堆栈操作</h2><h3 id="3-1-堆栈操作指令"><a href="#3-1-堆栈操作指令" class="headerlink" title="3.1 堆栈操作指令"></a>3.1 堆栈操作指令</h3><h4 id="3-1-1-进栈指令PUSH"><a href="#3-1-1-进栈指令PUSH" class="headerlink" title="3.1.1 进栈指令PUSH"></a>3.1.1 进栈指令PUSH</h4><p>PUSH  SRC</p><p>该指令把源操作数SRC压入堆栈。</p><h4 id="3-1-2-出栈指令POP"><a href="#3-1-2-出栈指令POP" class="headerlink" title="3.1.2 出栈指令POP"></a>3.1.2 出栈指令POP</h4><p>POP  DEST</p><p>该指令从栈顶弹出一个双字或者字数据到目的操作数DEST。</p><p><em>注意：出栈指令的操作数不同于进栈指令，它不能是立即数和代码段寄存器CS！</em></p><h3 id="3-2-通用寄存器全进栈指令和全出栈指令"><a href="#3-2-通用寄存器全进栈指令和全出栈指令" class="headerlink" title="3.2 通用寄存器全进栈指令和全出栈指令"></a>3.2 通用寄存器全进栈指令和全出栈指令</h3><h4 id="3-2-1-16位通用寄存器全进栈和全出栈指令"><a href="#3-2-1-16位通用寄存器全进栈和全出栈指令" class="headerlink" title="3.2.1 16位通用寄存器全进栈和全出栈指令"></a>3.2.1 16位通用寄存器全进栈和全出栈指令</h4><ul><li><strong>PUSHA</strong></li></ul><p>将8个16位通用寄存器的内容压入堆栈，压入顺序为AX，CX，DX，BX，SP，BP，SI，DI，然后堆栈指针寄存器SP的值减16。</p><ul><li><strong>POPA</strong></li></ul><p>从堆栈弹出内容，以PUSHA相反的顺序送到这些通用寄存器，从而恢复PUSHA之前的寄存器内容。然后SP的值通过增加16来恢复。</p><h4 id="3-2-2-32位通用寄存器全进栈和全出栈指令"><a href="#3-2-2-32位通用寄存器全进栈和全出栈指令" class="headerlink" title="3.2.2 32位通用寄存器全进栈和全出栈指令"></a>3.2.2 32位通用寄存器全进栈和全出栈指令</h4><ul><li><strong>PUSHAD</strong></li></ul><p>将8个32位通用寄存器的内容压入堆栈，压入顺序为EAX，ECX，EDX，EBX，ESP，EBP，ESI，EDI，然后堆栈指针寄存器SP的值减32。</p><ul><li><strong>POPAD</strong></li></ul><p>从堆栈弹出内容，以PUSHAD相反的顺序送到这些通用寄存器，从而恢复PUSHAD之前的寄存器内容。然后SP的值通过增加32来恢复。</p><h3 id="3-3-子程序"><a href="#3-3-子程序" class="headerlink" title="3.3 子程序"></a>3.3 子程序</h3><h4 id="3-3-1-过程调用指令CALL"><a href="#3-3-1-过程调用指令CALL" class="headerlink" title="3.3.1 过程调用指令CALL"></a>3.3.1 过程调用指令CALL</h4><p>CALL   LABEL（标号 LABEL 可以是程序中的一个标号，也可以是一个过程名）</p><p>此指令是段内直接调用指令，此指令的具体操作是：先把返回地址偏移压入堆栈，使得EIP的内容为目标地址偏移，从而实现转移。</p><h4 id="3-3-2-过程返回指令RET"><a href="#3-3-2-过程返回指令RET" class="headerlink" title="3.3.2 过程返回指令RET"></a>3.3.2 过程返回指令RET</h4><p>RET</p><p>该指令从堆栈弹出地址偏移，送到指令指针寄存器EIP。</p><h2 id="4-算数逻辑运算指令"><a href="#4-算数逻辑运算指令" class="headerlink" title="4.算数逻辑运算指令"></a>4.算数逻辑运算指令</h2><h3 id="4-1-乘除运算指令"><a href="#4-1-乘除运算指令" class="headerlink" title="4.1 乘除运算指令"></a>4.1 乘除运算指令</h3><h4 id="4-1-1-无符号数乘法指令MUL"><a href="#4-1-1-无符号数乘法指令MUL" class="headerlink" title="4.1.1 无符号数乘法指令MUL"></a>4.1.1 无符号数乘法指令MUL</h4><p>MUL   OPRD</p><p>此指令实现两个无符号操作数的乘法运算。</p><p>指令看似只有一个操作数OPRD，实际上，另一个操作数是隐含的，位于寄存器AL、AX或者EAX中（这取决于OPRD的尺寸）：</p><ul><li>如果OPRD是字节操作数（8位），则把AL中的无符号数与OPRD相乘，16位结果送到AX中。</li><li>如果OPRD是字操作数（16位）则把AX中的无符号数与OPRD相乘，32位结果送到寄存器对DX：AX中，DX含高 16 位，AX含低 16 位。</li><li>如果OPRD是双字操作数（32位），则把EAX中的无符号数与OPRD相乘，64位结果送到寄存器对EDX：EAX中，EDX含高 32 位，EAX含低 32 位。</li></ul><h4 id="4-1-2-有符号数乘法指令IMUL"><a href="#4-1-2-有符号数乘法指令IMUL" class="headerlink" title="4.1.2 有符号数乘法指令IMUL"></a>4.1.2 有符号数乘法指令IMUL</h4><p>IMUL   OPRD</p><p>单操作数形式。单操作数乘法指令实际上有一个隐含的操作数，位于寄存器AL、AX或者EAX中（这取决于操作数OPRD的尺寸）。</p><p>IMUL   DEST,SRC</p><p>双操作数形式。即：DEST &lt;&#x3D; DEST * SRC</p><p>IMUL   DEST,SRC1,SRC2</p><p>三操作数形式。即：DEST &lt;&#x3D; SRC1 * SRC2</p><h4 id="4-1-3-无符号数除法指令DIV"><a href="#4-1-3-无符号数除法指令DIV" class="headerlink" title="4.1.3 无符号数除法指令DIV"></a>4.1.3 无符号数除法指令DIV</h4><p>DIV   OPRD</p><p>此指令实行两个无符号操作数的除法运算。指令看似只有一个操作数OPRD（作为除数），实际上，另一个操作数（作为被除数）是隐含的，位于寄存器AX、寄存器对DX：AX或者寄存器对EDX：EAX中（DX含有被除数的高16位，或者EDX含有被除数的高32位）。</p><ul><li>如果OPRD是字节操作数（8位），则把AX中的无符号数除以OPRD，所得商送到AL中，余数送到AH中；</li><li>如果OPRD是字操作数（16位），则把寄存器对DX：AX中的无符号数除以OPRD，所得商送到AX，余数送到DX中；</li><li>如果OPRD是双字操作数（32位），则把寄存器对EDX：EAX中的无符号数除以OPRD，所得商送到EAX中，余数送到EDX中。</li></ul><h4 id="4-1-4-有符号数除法指令IDIV"><a href="#4-1-4-有符号数除法指令IDIV" class="headerlink" title="4.1.4 有符号数除法指令IDIV"></a>4.1.4 有符号数除法指令IDIV</h4><p>IDIV   OPRD</p><p>此指令实现两个有符号操作数的除法运算。指令看似只有一个作为除数的操作数OPRD，实际上，作为被除数的另一个操作数是隐含的，位于寄存器AX、寄存器对DX：AX或者寄存器对EDX：EAX中（取决于操作数OPRD的尺寸）。</p><h4 id="4-1-5-符号扩展指令"><a href="#4-1-5-符号扩展指令" class="headerlink" title="4.1.5 符号扩展指令"></a>4.1.5 符号扩展指令</h4><ul><li><p><strong>字节转换字指令（CBW）</strong><br>CBW<br>此指令把寄存器AL中的符号拓展到寄存器AH。</p></li><li><p><strong>字转换为双字指令（CWD）</strong><br>CWD<br>此指令把寄存器AX中的符号扩展到寄存器DX。</p></li><li><p><strong>双字转换为四字指令（CDQ）</strong><br>CDQ<br>此指令把寄存器EAX中的符号扩展到寄存器EDX。</p></li><li><p><strong>另一条字转换为双字指令（CWDE）</strong><br>CWDX<br>此指令把寄存器AX中的符号扩展到寄存器EAX的高16位。</p></li></ul><h4 id="4-1-6-扩展传送指令"><a href="#4-1-6-扩展传送指令" class="headerlink" title="4.1.6 扩展传送指令"></a>4.1.6 扩展传送指令</h4><ul><li><strong>符号扩展传送指令（MOVSX）</strong><br>MOVSX    DEST，SRC<br>此指令把源操作数SRC符号扩展后送至目的操作数DEST。</li><li><strong>零扩展传送指令（MOVZX）</strong><br>MOVZX    DEST，SRC<br>此指令把源操作数SRC零扩展后送至目的操作数DEST。</li></ul><h3 id="4-2-逻辑运算指令"><a href="#4-2-逻辑运算指令" class="headerlink" title="4.2 逻辑运算指令"></a>4.2 逻辑运算指令</h3><h4 id="4-2-1-否运算指令NOT"><a href="#4-2-1-否运算指令NOT" class="headerlink" title="4.2.1 否运算指令NOT"></a>4.2.1 否运算指令NOT</h4><p>NOT   OPRD</p><p>此指令把操作数OPRD按位“取反”，然后送回OPRD；<br>按位“取反”是指把为 0 的位设置为 1，把为 1 的位清为 0。</p><h4 id="4-2-2-与运算指令AND"><a href="#4-2-2-与运算指令AND" class="headerlink" title="4.2.2 与运算指令AND"></a>4.2.2 与运算指令AND</h4><p>AND   DEST,SRC</p><p>此指令对两个操作数进行按位的逻辑“与”运算，结果送到目的操作数DEST。按位“与”是指当两个操作数对应位都为 1 时，把结果的对应位设置成 1 ，否则清成 0。</p><h4 id="4-2-3-或运算指令OR"><a href="#4-2-3-或运算指令OR" class="headerlink" title="4.2.3 或运算指令OR"></a>4.2.3 或运算指令OR</h4><p>OR   DEST,SRC</p><p>此指令对两个操作数进行按位的逻辑“或”运算，结果送到目的操作数DEST。</p><h4 id="4-2-4-异或运算指令XOR"><a href="#4-2-4-异或运算指令XOR" class="headerlink" title="4.2.4 异或运算指令XOR"></a>4.2.4 异或运算指令XOR</h4><p>XOR   DEST,SRC</p><p>此指令对两个操作数进行按位的逻辑“异或”运算，结果送到目的操作数DEST。</p><h4 id="4-2-5-测试指令TEST"><a href="#4-2-5-测试指令TEST" class="headerlink" title="4.2.5 测试指令TEST"></a>4.2.5 测试指令TEST</h4><p>TEST   DEST,SRC</p><p>此指令和AND指令类似，也是把两个操作数进行按位“与”，但结果不送回目的操作数DEST，仅仅影响状态标志。该指令执行后，标志ZF、PF和SF反映运算结果，标志CF和OF被清为0。</p><h3 id="4-3-移位指令"><a href="#4-3-移位指令" class="headerlink" title="4.3 移位指令"></a>4.3 移位指令</h3><h4 id="4-3-1-移位指令"><a href="#4-3-1-移位指令" class="headerlink" title="4.3.1 移位指令"></a>4.3.1 移位指令</h4><ul><li><p><strong>算数左移指令（同逻辑左移指令）SAL（SHL）</strong></p><p>SAL   OPRD,COUNT</p><p>SHL   OPRD,COUNT</p></li><li><p><strong>算数右移指令SAR</strong></p><p>SAR   OPRD,COUNT</p></li><li><p><strong>逻辑右移指令SHR</strong></p><p>SHR   OPRD,COUNT</p></li></ul><h4 id="4-3-2-循环移位指令"><a href="#4-3-2-循环移位指令" class="headerlink" title="4.3.2 循环移位指令"></a>4.3.2 循环移位指令</h4><ul><li><p><strong>左循环移位指令ROL</strong></p><p>ROL   OPRD,COUNT</p></li><li><p><strong>右循环移位指令ROR</strong></p><p>ROR   OPRD,COUNT</p></li><li><p><strong>带进位左循环移位指令RCL</strong></p><p>RCL   OPRD,COUNT</p></li><li><p><strong>带进位右循环移位指令RCR</strong></p><p>RCR  OPRD,COUNT</p></li></ul><h4 id="4-3-3-双精度移位指令"><a href="#4-3-3-双精度移位指令" class="headerlink" title="4.3.3 双精度移位指令"></a>4.3.3 双精度移位指令</h4><ul><li><p><strong>双精度左移指令SHLD</strong></p><p>SHLD   OPRD1,OPRD2,COUNT</p></li><li><p><strong>双精度右移指令SHRD</strong></p><p>SHRD  OPRD1,OPRD2,COUNT</p></li></ul><h2 id="5-转移指令"><a href="#5-转移指令" class="headerlink" title="5.转移指令"></a>5.转移指令</h2><h3 id="5-1-条件转移指令"><a href="#5-1-条件转移指令" class="headerlink" title="5.1 条件转移指令"></a>5.1 条件转移指令</h3><table><thead><tr><th><strong>大于（G）</strong></th><th><strong>等于（E）</strong></th><th><strong>小于（L）</strong></th></tr></thead><tbody><tr><td><strong>高于（A）</strong></td><td><strong>等于（E）</strong></td><td><strong>低于（B）</strong></td></tr></tbody></table><p><img src="/oranfish.github.io/posts/0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%8C%87%E4%BB%A4/image-20240426145005533.png" alt="image-20240426145005533"></p><h3 id="5-2-无条件转移指令"><a href="#5-2-无条件转移指令" class="headerlink" title="5.2 无条件转移指令"></a>5.2 无条件转移指令</h3><h4 id="5-2-1-无条件段内直接转移指令"><a href="#5-2-1-无条件段内直接转移指令" class="headerlink" title="5.2.1 无条件段内直接转移指令"></a>5.2.1 无条件段内直接转移指令</h4><p>JMP   LABEL</p><p>标号 LABEL 用于表示转移的目标位置，或者说转移目的地。</p><h4 id="5-2-2-无条件段内间接转移指令"><a href="#5-2-2-无条件段内间接转移指令" class="headerlink" title="5.2.2 无条件段内间接转移指令"></a>5.2.2 无条件段内间接转移指令</h4><p>JMP  OPRD</p><p>此指令使控制无条件转移到操作数 OPRD 的内容给定的目标地址处。</p><h2 id="6-循环指令"><a href="#6-循环指令" class="headerlink" title="6.循环指令"></a>6.循环指令</h2><h3 id="6-1-循环指令"><a href="#6-1-循环指令" class="headerlink" title="6.1 循环指令"></a>6.1 循环指令</h3><h4 id="6-1-1-计数循环指令LOOP"><a href="#6-1-1-计数循环指令LOOP" class="headerlink" title="6.1.1 计数循环指令LOOP"></a>6.1.1 计数循环指令LOOP</h4><p>LOOP   LABEL</p><p>此指令使寄存器ECX的值减 1，如果结果不等于 0，则转移到标号 LABEL 处，否则顺序执行LOOP指令后的指令。</p><h4 id="6-1-2-等于-全零循环指令LOOPE-LOOPZ"><a href="#6-1-2-等于-全零循环指令LOOPE-LOOPZ" class="headerlink" title="6.1.2 等于&#x2F;全零循环指令LOOPE&#x2F;LOOPZ"></a>6.1.2 等于&#x2F;全零循环指令LOOPE&#x2F;LOOPZ</h4><p>LOOPE   LABEL</p><p>LOOPZ   LABEL</p><p>此指令使寄存器 ECX 的值减 1，如果结果不等于 0，并且零标志 ZF 等于 1（表示相等），那么就转移到标号 LABEL 处，否则顺序执行。</p><h4 id="6-1-3-不等于-非零循环指令LOOPNE-LOOPNZ"><a href="#6-1-3-不等于-非零循环指令LOOPNE-LOOPNZ" class="headerlink" title="6.1.3 不等于&#x2F;非零循环指令LOOPNE&#x2F;LOOPNZ"></a>6.1.3 不等于&#x2F;非零循环指令LOOPNE&#x2F;LOOPNZ</h4><p>LOOPEN    JABEL</p><p>LOOPNZ    JABEL</p><p>此指令使寄存器 ECX 的值减 1，如果结果不等于 0，并且零标志 ZF 等于 0（表示不相等），那么就转移到标号 LABEL 处，否则顺序执行。</p><h3 id="6-2-计数器转移指令"><a href="#6-2-计数器转移指令" class="headerlink" title="6.2 计数器转移指令"></a>6.2 计数器转移指令</h3><h4 id="6-2-1-计数器转移指令JECXZ"><a href="#6-2-1-计数器转移指令JECXZ" class="headerlink" title="6.2.1 计数器转移指令JECXZ"></a>6.2.1 计数器转移指令JECXZ</h4><p>JECXZ   LABEL</p><p>此指令实现当寄存器 ECX 的值等于 0 时转移到标号 LABEL 处，否则顺序执行。</p><h2 id="7-字符串操作"><a href="#7-字符串操作" class="headerlink" title="7.字符串操作"></a>7.字符串操作</h2><h3 id="7-1-串操作指令"><a href="#7-1-串操作指令" class="headerlink" title="7.1 串操作指令"></a>7.1 串操作指令</h3><p>字符串操作的方向由标志寄存器中的方向标志 DF 控制。</p><ul><li>清方向标志 DF 的指令（CLD）</li><li>设置方向标志 DF 的指令（STD）</li></ul><p>利用这两条指令可以根据需要调整字符串操作指令处理字符串的方向。</p><h4 id="7-1-1-字符串装入指令LOAD"><a href="#7-1-1-字符串装入指令LOAD" class="headerlink" title="7.1.1 字符串装入指令LOAD"></a>7.1.1 字符串装入指令LOAD</h4><ul><li>LODSB    ；装入字节    </li><li>LODSW    ；装入字</li><li>LODSD    ；装入双字</li></ul><h4 id="7-1-2-字符串存储指令STO"><a href="#7-1-2-字符串存储指令STO" class="headerlink" title="7.1.2 字符串存储指令STO"></a>7.1.2 字符串存储指令STO</h4><ul><li>STOSB    ；存储字节    </li><li>STOSW    ；存储字</li><li>STOSD    ；存储双字</li></ul><h4 id="7-1-3-字符串传送指令MOV"><a href="#7-1-3-字符串传送指令MOV" class="headerlink" title="7.1.3 字符串传送指令MOV"></a>7.1.3 字符串传送指令MOV</h4><ul><li>MOVSB    ；字节传送   </li><li>MOVSW    ；字传送</li><li>MOVSD    ；双字传送</li></ul><h4 id="7-1-4-字符串扫描指令SCA"><a href="#7-1-4-字符串扫描指令SCA" class="headerlink" title="7.1.4 字符串扫描指令SCA"></a>7.1.4 字符串扫描指令SCA</h4><ul><li>SCASB    ；串字节扫描    </li><li>SCASW    ；串字扫描</li><li>SCASD    ；串双字扫描</li></ul><h4 id="7-1-5-字符串比较指令CMP"><a href="#7-1-5-字符串比较指令CMP" class="headerlink" title="7.1.5 字符串比较指令CMP"></a>7.1.5 字符串比较指令CMP</h4><ul><li>CMPSB    ；串字节比较 </li><li>CMPSW    ；串字比较</li><li>CMPSD    ；串双字比较</li></ul><h3 id="7-2-重复操作前缀"><a href="#7-2-重复操作前缀" class="headerlink" title="7.2 重复操作前缀"></a>7.2 重复操作前缀</h3><h4 id="7-2-1-重复前缀REP"><a href="#7-2-1-重复前缀REP" class="headerlink" title="7.2.1 重复前缀REP"></a>7.2.1 重复前缀REP</h4><p>它重复其后的串操作指令动作；<br>每一次重复都先判断寄存器 ECX 是否为 0，如果为 0 就结束重复，否则 ECX 的值减 1，重复其后的串操作指令。</p><p>（它类似于 LOOP 指令，但 LOOP 指令使先把 ECX 的值减 1 后再判断是否为 0）</p><h4 id="7-2-2-重复前缀REPE-REPZ"><a href="#7-2-2-重复前缀REPE-REPZ" class="headerlink" title="7.2.2 重复前缀REPE&#x2F;REPZ"></a>7.2.2 重复前缀REPE&#x2F;REPZ</h4><p>REPE 和 REPZ 是一个前缀的两个助记符，下面以 REPE 为代表进行说明。<br>REPE 重复其后的串操作指令动作。每重复一次，ECX 的值减 1，重复一直进行到 ECX 为 0 或串操作指令使零标志 ZF 为 0 时为止。</p><h4 id="7-2-3-重复前缀REPNE-REPNZ"><a href="#7-2-3-重复前缀REPNE-REPNZ" class="headerlink" title="7.2.3 重复前缀REPNE&#x2F;REPNZ"></a>7.2.3 重复前缀REPNE&#x2F;REPNZ</h4><p>REPNE 和 REPNZ 是一个前缀的两个助记符，下面以 REPNE 为代表进行说明。</p><p>REPNE 与 REPE 类似，所不同的是重复一直进行到 ECX 为 0 或串操作指令使零标志 ZF 为 1 时止。</p><h2 id="8-位操作"><a href="#8-位操作" class="headerlink" title="8.位操作"></a>8.位操作</h2><h3 id="8-1-位操作指令"><a href="#8-1-位操作指令" class="headerlink" title="8.1 位操作指令"></a>8.1 位操作指令</h3><h4 id="8-1-1-位测试及设置指令组"><a href="#8-1-1-位测试及设置指令组" class="headerlink" title="8.1.1 位测试及设置指令组"></a>8.1.1 位测试及设置指令组</h4><ul><li><strong>位测试指令BT</strong><br>BT        OPRD1，OPRD2</li></ul><p>功能是把被测试位的值送到进位标志 CF。</p><ul><li><strong>位测试并取反指令BTC</strong><br>BTC        OPRD1，OPRD2</li></ul><p>功能是把被测试位的值送到进位标志 CF，并且把被测试位取反。</p><ul><li><strong>位测试并复位指令BTR</strong><br> BTR        OPRD1，OPRD2</li></ul><p>功能是把被测试位的值送到进位标志 CF，并且把被测试位复位，即清 0。</p><ul><li><strong>位测试并置位指令BTS</strong><br>BTS        OPRD1，OPRD2</li></ul><p>功能是把被测试位的值送到进位标志 CF，并且把被测试位置位，即置 1。</p><h4 id="8-1-2-位扫描指令组"><a href="#8-1-2-位扫描指令组" class="headerlink" title="8.1.2 位扫描指令组"></a>8.1.2 位扫描指令组</h4><ul><li><strong>顺向位扫描指令BSF</strong><br>BSF        OPRD1,OPRD2</li></ul><p>功能是从右往左（位 0 至位 15 或位 31）扫描字或者双字操作数 OPRD2 中的第一个含“1”的位，并把扫描到的第一个含“1”的位的位号送至操作数 OPRD1。</p><ul><li><strong>逆向位扫描指令BSR</strong><br>BSR        OPRD1,OPRD2</li></ul><p>功能是从左往右（位 15 至位 31 或位 0）扫描字或者双字操作数 OPRD2 中的第一个含“1”的位，并把扫描到的第一个含“1”的位的位号送至操作数 OPRD1。</p><h3 id="8-2-条件设置字节指令"><a href="#8-2-条件设置字节指令" class="headerlink" title="8.2 条件设置字节指令"></a>8.2 条件设置字节指令</h3><p>SET</p><p><img src="/oranfish.github.io/posts/0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%8C%87%E4%BB%A4/image-20240426151112006.png" alt="image-20240426151112006"></p><h2 id="9-常用DOS功能"><a href="#9-常用DOS功能" class="headerlink" title="9.常用DOS功能"></a>9.常用DOS功能</h2><h3 id="9-1-键盘输入单字符"><a href="#9-1-键盘输入单字符" class="headerlink" title="9.1 键盘输入单字符"></a>9.1 键盘输入单字符</h3><p><strong>功能号1，输入字符以ASCII码的形式存放在累加器AL中同时显示出来。</strong></p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">MOV</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">AH</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">01</span></span><span class="line"><span style="color: #FFCB6B">INT</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">21</span><span style="color: #C3E88D">H</span></span></code></pre></div><h3 id="9-2-屏幕显示单字符"><a href="#9-2-屏幕显示单字符" class="headerlink" title="9.2 屏幕显示单字符"></a>9.2 屏幕显示单字符</h3><p><strong>功能号2，屏幕显示存放在DL寄存器中的字符。</strong></p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">MOV</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">AH</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">02</span></span><span class="line"><span style="color: #FFCB6B">MOV</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">DL</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">待显示字符</span></span><span class="line"><span style="color: #FFCB6B">INT</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">21</span><span style="color: #C3E88D">H</span></span></code></pre></div><h3 id="9-3-屏幕显示字符串"><a href="#9-3-屏幕显示字符串" class="headerlink" title="9.3 屏幕显示字符串"></a>9.3 屏幕显示字符串</h3><p><strong>功能号9，用于在显示器上显示一个存放在寄存器DX中的字符串，被显示的字符串必须以’$’作为结束符。</strong></p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">MOV</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">AH</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">09</span></span><span class="line"><span style="color: #FFCB6B">MOV</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">DX</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">待显示字符串首地址</span></span><span class="line"><span style="color: #FFCB6B">INT</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">21</span><span style="color: #C3E88D">H</span></span></code></pre></div><h3 id="9-4-退出"><a href="#9-4-退出" class="headerlink" title="9.4 退出"></a>9.4 退出</h3><p><strong>一个程序执行完成后使得程序正常退出并返回DOS的功能，功能号为4CH。</strong></p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">MOV</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">AH</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4</span><span style="color: #C3E88D">CH</span></span><span class="line"><span style="color: #FFCB6B">INT</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">21</span><span style="color: #C3E88D">H</span></span></code></pre></div><h2 id="10-其他"><a href="#10-其他" class="headerlink" title="10.其他"></a>10.其他</h2><p>数据长度：8086CPU指令中，可以处理两种尺寸的数据，byte和word。</p><p>通过寄存器名指明要处理的数据的尺寸。</p><p>在没有寄存器名存在的情况下，用操作符X PTR指明内存单元的长度，X在汇编语言中可以为WORD或者BYTE。例如 MOV WORD PTR ds:[0] , 1</p><p>有些指令默认了访问的是字单元还是字节单元，比如PUSH指令只进行字操作。</p><p>除数：有8位和16位两种，在一个reg或者内存单元中。</p><p>被除数：默认放在AX或DX和AX中，如果除数为8位，被除数为16位，默认在AX中存放；如果除数为16位，被除数为32位，在DX和AX中存放，DX存放高16位，AX存放低16位。</p><p>结果：如果除数为8位，则AL存储除法操作的商，AH存储除法操作的余数；如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数。</p><p>伪指令dd：DB（define byte）定义字节型数据，DW（define word）定义字型数据，DD（double word双字）定义双字型数据。</p><p>dup是一个操作符，在汇编语言中通db、dw、dd一样，也是由编译器是被处理的符号。它是和db、dw、dd等数据定义伪指令配合使用的，用来进行数据的重复。</p><ul><li>db 3 dup (0)       定义了3个字节，它们的值都是0，相当于db 0   0   0</li><li>db 3 dup(0,1,2)  定义了9个字节，它们是0、1、2、0、1、2、0、1、2，相当于db 0,1,2,0,1,2,0,1,2</li><li>dup的使用格式如下：<br>DB 重复的次数  DUP  （重复的字节型数据）<br>DW 重复的次数  DUP  （重复 的字型数据）<br>DD 重复的次数  DUP （重复 的双字型数据）</li></ul><p>push指令的执行步骤:①SP&#x3D;SP-2:②向SS:SP指向的字单元中送入数据。</p><p>pop指令的执行步骤:①从SS:SP指向的字单元中读取数据;②SP&#x3D;SP+2。</p><p>用栈来暂存以后需要恢复的寄存器的内容时,寄存器出栈的顺序要和入栈的顺序相反。</p><p>OFFSET是保留字，表示取出后面变量的偏移地址</p><p><strong>间接寻址寄存器只能是BX BP SI DI中的一个</strong>。如果没有另外说明，那么使用BX、SI和DI时自动以DS中的内容作为段基址，使用BP时自动使用SS的值作为段基址。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用学习</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Docker安装"><a href="#1-Docker安装" class="headerlink" title="1.Docker安装"></a>1.Docker安装</h2><p>前置条件：配置好本地虚拟机或者云端虚拟机并安装好CentOS7版本的Linux系统。</p><h3 id="1-1-卸载旧版"><a href="#1-1-卸载旧版" class="headerlink" title="1.1 卸载旧版"></a>1.1 卸载旧版</h3><p>首先如果系统中已经存在旧的Docker，则先卸载：</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">yum</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">remove</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C3E88D">docker-client</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C3E88D">docker-client-latest</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C3E88D">docker-common</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C3E88D">docker-latest</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C3E88D">docker-latest-logrotate</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C3E88D">docker-logrotate</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C3E88D">docker-engine</span></span></code></pre></div><h3 id="1-2-配置Docker的yum库"><a href="#1-2-配置Docker的yum库" class="headerlink" title="1.2 配置Docker的yum库"></a>1.2 配置Docker的yum库</h3><p>首先要安装一个yum工具</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">yum</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">install</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-y</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">yum-utils</span></span></code></pre></div><p>安装成功后，执行命令，配置Docker的yum源：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">yum-config-manager</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--add-repo</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">https://download.docker.com/linux/centos/docker-ce.repo</span></span></code></pre></div><h3 id="1-3-安装Docker"><a href="#1-3-安装Docker" class="headerlink" title="1.3 安装Docker"></a>1.3 安装Docker</h3><p>最后，执行命令，安装Docker</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">yum</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">install</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-y</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker-ce</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker-ce-cli</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">containerd.io</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker-buildx-plugin</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker-compose-plugin</span></span></code></pre></div><h3 id="1-4-启动和校验"><a href="#1-4-启动和校验" class="headerlink" title="1.4 启动和校验"></a>1.4 启动和校验</h3><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 启动Docker</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">start</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 停止Docker</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">stop</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 重启</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">restart</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 设置开机自启</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">enable</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ps</span></span></code></pre></div><h3 id="1-5-配置镜像加速"><a href="#1-5-配置镜像加速" class="headerlink" title="1.5 配置镜像加速"></a>1.5 配置镜像加速</h3><p>这里以阿里云镜像加速为例。</p><h4 id="1-5-1-注册阿里云账号"><a href="#1-5-1-注册阿里云账号" class="headerlink" title="1.5.1 注册阿里云账号"></a>1.5.1 注册阿里云账号</h4><p>首先访问阿里云网站:</p><p><a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p><p>注册一个账号。</p><h4 id="1-5-2-开通镜像服务"><a href="#1-5-2-开通镜像服务" class="headerlink" title="1.5.2 开通镜像服务"></a>1.5.2 开通镜像服务</h4><p>在首页的产品中，找到阿里云的<strong>容器镜像服务</strong>：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17125060534832.png" alt="img"></p><p>点击后进入控制台：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17125060534831.png" alt="img"></p><p>首次可能需要选择立刻开通，然后进入控制台。</p><h4 id="1-5-3-配置镜像加速"><a href="#1-5-3-配置镜像加速" class="headerlink" title="1.5.3 配置镜像加速"></a>1.5.3 配置镜像加速</h4><p>找到<strong>镜像工具</strong>下的<strong>镜像加速器</strong>：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17125060846805.png" alt="img"></p><p>页面向下滚动，即可找到配置的文档说明：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17125060846806.png" alt="img"></p><p>具体命令如下：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 创建目录</span></span><span class="line"><span style="color: #FFCB6B">mkdir</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-p</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/etc/docker</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 复制内容，注意把其中的镜像加速地址改成你自己的</span></span><span class="line"><span style="color: #FFCB6B">tee</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/etc/docker/daemon.json</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;-</span><span style="color: #BABED8">&#39;</span><span style="color: #89DDFF">EOF</span><span style="color: #BABED8">&#39;</span></span><span class="line"><span style="color: #C3E88D">&#123;</span></span><span class="line"><span style="color: #C3E88D">  &quot;registry-mirrors&quot;: [&quot;https://xxxx.mirror.aliyuncs.com&quot;]</span></span><span class="line"><span style="color: #C3E88D">&#125;</span></span><span class="line"><span style="color: #89DDFF">EOF</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 重新加载配置</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">daemon-reload</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 重启Docker</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">restart</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注：遇到多行命令的时候可以使用反斜杠进行换行，然后继续输入命令。</p><p>若要结束命令则可以输入EOF或者done终止多行</p></blockquote><h2 id="2-Docker快速入门"><a href="#2-Docker快速入门" class="headerlink" title="2.Docker快速入门"></a>2.Docker快速入门</h2><h3 id="2-1-Docker引入"><a href="#2-1-Docker引入" class="headerlink" title="2.1 Docker引入"></a>2.1 Docker引入</h3><p>Linux原生安装环境缺点核心体现在三点：</p><ul><li>命令太多了，记不住</li><li>软件安装包名字复杂，不知道去哪里找</li><li>安装和部署步骤复杂，容易出错</li></ul><p>其实上述问题不仅仅是新手，即便是运维在安装、部署的时候一样会觉得麻烦、容易出错。</p><p>特别是我们即将进入微服务阶段学习，微服务项目动辄就是几十台、上百台服务需要部署，有些大型项目甚至达到数万台服务。而<strong>由于每台服务器的运行环境不同，你写好的安装流程、部署脚本并不一定在每个服务器都能正常运行</strong>，经常会出错。这就给系统的部署运维带来了很多困难。</p><p>那么，有没有一种技术能够避免部署对服务器环境的依赖，减少复杂的部署流程呢？</p><p>答案是肯定的，这就是<strong>Docker</strong>技术。你会发现，有了Docker以后项目的部署如丝般顺滑，大大减少了运维工作量。</p><p>即便你对Linux不熟悉，你也能<strong>轻松部署各种常见软件、Java项目</strong>。</p><h3 id="2-2-部署MySQL例"><a href="#2-2-部署MySQL例" class="headerlink" title="2.2 部署MySQL例"></a>2.2 部署MySQL例</h3><p>首先，我们利用Docker来安装一个MySQL软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。</p><p>如果是利用传统方式部署MySQL，大概的步骤有：</p><ul><li>搜索并下载MySQL安装包</li><li>上传至Linux环境</li><li>编译和配置环境</li><li>安装</li></ul><p>而使用Docker安装，仅仅需要一步即可，在命令行输入下面的命令：</p><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">docker run </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">d \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">--</span><span style="color: #BABED8">name mysql \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">p </span><span style="color: #F78C6C">3306</span><span style="color: #BABED8">:</span><span style="color: #F78C6C">3306</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">e TZ</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">Asia</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">Shanghai \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">e MYSQL_ROOT_PASSWORD</span><span style="color: #89DDFF">=</span><span style="color: #F78C6C">123</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  mysql</span></span></code></pre></div><p>运行效果如图：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17125063447639.png" alt="img"></p><p>MySQL安装完毕，通过任意客户端工具即可连接到MySQL.</p><p>我们执行命令后，Docker做的第一件事情，是去自动搜索并下载了MySQL，然后会自动运行MySQL</p><p>这种安装方式你完全不用考虑运行的操作系统环境，它不仅仅在CentOS系统是这样，在Ubuntu系统、macOS系统、甚至是装了WSL的Windows下，都可以使用这条命令来安装MySQL。</p><p>要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！</p><p>而使用Docker，这些完全不用考虑。就是因为Docker会自动搜索并下载MySQL。注意：这里下载的不是安装包，而是<strong>镜像。</strong>镜像中不仅包含了MySQL本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为<strong>容器</strong>。</p><p>说明：</p><ul><li>镜像：英文是image</li><li>容器：英文是container</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>因此，Docker安装软件的过程，就是自动搜索下载镜像，然后创建并运行容器的过程。</p></blockquote><p>Docker官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了Docker镜像交流的社区：</p><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>基本上我们常用的各种软件都能在这个网站上找到，我们甚至可以自己制作镜像上传上去。</p><p>像这种提供存储、管理Docker镜像的服务器，被称为DockerRegistry，可以翻译为镜像仓库。DockerHub网站是官方仓库，阿里云、华为云会提供一些第三方仓库，我们也可以自己搭建私有的镜像仓库。</p><p>官方仓库在国外，下载速度较慢，一般我们都会使用第三方仓库提供的镜像加速功能，提高下载速度。而企业内部的机密项目，往往会采用私有镜像仓库。</p><p>总之，镜像的来源有两种：</p><ul><li>基于官方基础镜像自己制作</li><li>直接去DockerRegistry下载</li></ul><p><strong>总结</strong>：</p><p>Docker本身包含一个后台服务，我们可以利用Docker命令告诉Docker服务，帮助我们快速部署指定的应用。Docker服务部署应用时，首先要去搜索并下载应用对应的镜像，然后根据镜像创建并允许容器，应用就部署完成了。</p><p>用一幅图标示如下：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/image-20240408001353403.png" alt="image-20240408001353403"></p><h3 id="2-3-命令解读"><a href="#2-3-命令解读" class="headerlink" title="2.3 命令解读"></a>2.3 命令解读</h3><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">docker run </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">d \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">--</span><span style="color: #BABED8">name mysql \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">p </span><span style="color: #F78C6C">3306</span><span style="color: #BABED8">:</span><span style="color: #F78C6C">3306</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">e TZ</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">Asia</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">Shanghai \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">e MYSQL_ROOT_PASSWORD</span><span style="color: #89DDFF">=</span><span style="color: #F78C6C">123</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  mysql</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>解读：</p><ul><li><code>docker run -d</code> ：创建并运行一个容器，<code>-d</code>则是让容器以后台进程运行</li><li><code>--name mysql </code> : 给容器起个名字叫<code>mysql</code>，你可以叫别的</li><li><code>-p 3306:3306</code> : 设置端口映射。<ul><li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将<strong><strong>宿主机</strong></strong>端口****映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li><li>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li><li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的3306映射到容器内的3306端口</li></ul></li><li><code>-e TZ=Asia/Shanghai</code> : 配置容器内进程运行时的一些参数<ul><li>格式：<code>-e KEY=VALUE</code>，KEY和VALUE都由容器内进程决定</li><li>案例中，<code>TZ=Asia/Shanghai</code>是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code>是设置MySQL默认密码</li></ul></li><li><code>mysql</code> : 设置<strong>镜像</strong>名称，Docker会根据这个名字搜索并下载镜像<ul><li>格式：<code>REPOSITORY:TAG</code>，例如<code>mysql:8.0</code>，其中<code>REPOSITORY</code>可以理解为镜像名，<code>TAG</code>是版本号</li><li>在未指定<code>TAG</code>的情况下，默认是最新版本，也就是<code>mysql:latest</code></li></ul></li></ul></blockquote><p>镜像的名称不是随意的，而是要到DockerRegistry中寻找，镜像运行时的配置也不是随意的，要参考镜像的帮助文档，这些在DockerHub网站或者软件的官方网站中都能找到。</p><p>如果我们要安装其它软件，也可以到DockerRegistry中寻找对应的镜像名称和版本，阅读相关配置即可。</p><h2 id="3-Docker基础"><a href="#3-Docker基础" class="headerlink" title="3.Docker基础"></a>3.Docker基础</h2><h3 id="3-1-常见命令"><a href="#3-1-常见命令" class="headerlink" title="3.1 常见命令"></a>3.1 常见命令</h3><p>可以参考官方文档：</p><p><a href="https://docs.docker.com/engine/reference/commandline/cli/">https://docs.docker.com/engine/reference/commandline/cli/</a></p><h4 id="3-1-1-命令介绍"><a href="#3-1-1-命令介绍" class="headerlink" title="3.1.1 命令介绍"></a>3.1.1 命令介绍</h4><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="left">docker pull</td><td align="left">拉取镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td></tr><tr><td align="left">docker push</td><td align="left">推送镜像到DockerRegistry</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td></tr><tr><td align="left">docker images</td><td align="left">查看本地镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td></tr><tr><td align="left">docker rmi</td><td align="left">删除本地镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td></tr><tr><td align="left">docker run</td><td align="left">创建并运行容器（不能重复创建）</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td></tr><tr><td align="left">docker stop</td><td align="left">停止指定容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td></tr><tr><td align="left">docker start</td><td align="left">启动指定容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td></tr><tr><td align="left">docker restart</td><td align="left">重新启动容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td></tr><tr><td align="left">docker rm</td><td align="left">删除指定容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td></tr><tr><td align="left">docker ps</td><td align="left">查看容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td></tr><tr><td align="left">docker logs</td><td align="left">查看容器运行日志</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td></tr><tr><td align="left">docker exec</td><td align="left">进入容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td></tr><tr><td align="left">docker save</td><td align="left">保存镜像到本地压缩文件</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td></tr><tr><td align="left">docker load</td><td align="left">加载本地压缩文件到镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td></tr><tr><td align="left">docker inspect</td><td align="left">查看容器详细信息</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td></tr></tbody></table><p>用一副图来表示这些命令的关系：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/image-20240408122232444.png" alt="image-20240408122232444"></p><p><strong>注：</strong><code>docker run</code>每次执行都会创建一个新的容器，如果我们原本就已经执行过创建了一个容器，然后在下次启动的时候直接使用<code>docker start</code>就能够启动容器，在关闭的时候使用<code>docker stop</code>即可停止，无需再输入<code>docker run</code>来启动容器，否则每次都会创建新容器，导致内存占用等一系列问题。</p><p>补充：</p><p>默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># Docker开机自启</span></span><span class="line"><span style="color: #BABED8">systemctl enable docker</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># Docker容器开机自启</span></span><span class="line"><span style="color: #BABED8">docker update </span><span style="color: #89DDFF">--</span><span style="color: #BABED8">restart</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">always </span><span style="color: #89DDFF">[</span><span style="color: #C792EA">容器名</span><span style="color: #89DDFF">/</span><span style="color: #C792EA">容器id</span><span style="color: #89DDFF">]</span></span></code></pre></div><h4 id="3-1-2-演示"><a href="#3-1-2-演示" class="headerlink" title="3.1.2 演示"></a>3.1.2 演示</h4><p>教学环节说明：我们以Nginx为例给大家演示上述命令。</p><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第2步，拉取Nginx镜像</span></span><span class="line"><span style="color: #BABED8">docker pull nginx</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第3步，查看镜像</span></span><span class="line"><span style="color: #BABED8">docker images</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果如下：</span></span><span class="line"><span style="color: #BABED8">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span></span><span class="line"><span style="color: #BABED8">nginx        latest    605c77e624dd   </span><span style="color: #F78C6C">16</span><span style="color: #BABED8"> months ago   </span><span style="color: #F78C6C">141MB</span></span><span class="line"><span style="color: #BABED8">mysql        latest    3218b38490ce   </span><span style="color: #F78C6C">17</span><span style="color: #BABED8"> months ago   </span><span style="color: #F78C6C">516MB</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第4步，创建并允许Nginx容器</span></span><span class="line"><span style="color: #BABED8">docker run </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">d </span><span style="color: #89DDFF">--</span><span style="color: #BABED8">name nginx </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">p </span><span style="color: #F78C6C">80</span><span style="color: #BABED8">:</span><span style="color: #F78C6C">80</span><span style="color: #BABED8"> nginx</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第5步，查看运行中容器</span></span><span class="line"><span style="color: #BABED8">docker ps</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 也可以加格式化方式访问，格式会更加清爽</span></span><span class="line"><span style="color: #BABED8">docker ps </span><span style="color: #89DDFF">--</span><span style="color: #BABED8">format </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;</span><span style="color: #89DDFF">&quot;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第6步，访问网页，地址：http://虚拟机地址</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第7步，停止容器</span></span><span class="line"><span style="color: #BABED8">docker stop nginx</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第8步，查看所有容器</span></span><span class="line"><span style="color: #BABED8">docker ps </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">a </span><span style="color: #89DDFF">--</span><span style="color: #BABED8">format </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;</span><span style="color: #89DDFF">&quot;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第9步，再次启动nginx容器</span></span><span class="line"><span style="color: #BABED8">docker start nginx</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第10步，再次查看容器</span></span><span class="line"><span style="color: #BABED8">docker ps </span><span style="color: #89DDFF">--</span><span style="color: #BABED8">format </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;</span><span style="color: #89DDFF">&quot;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第11步，查看容器详细信息</span></span><span class="line"><span style="color: #BABED8">docker inspect nginx</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第12步，进入容器,查看容器内目录</span></span><span class="line"><span style="color: #BABED8">docker exec </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">it nginx bash</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 或者，可以进入MySQL</span></span><span class="line"><span style="color: #BABED8">docker exec </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">it mysql mysql </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">uroot </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">p</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 第13步，删除容器</span></span><span class="line"><span style="color: #BABED8">docker rm nginx</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 发现无法删除，因为容器运行中，强制删除容器</span></span><span class="line"><span style="color: #BABED8">docker rm </span><span style="color: #89DDFF">-f</span><span style="color: #BABED8"> nginx</span></span></code></pre></div><h4 id="3-1-3-命令别名"><a href="#3-1-3-命令别名" class="headerlink" title="3.1.3 命令别名"></a>3.1.3 命令别名</h4><p>给常用Docker命令起别名，方便我们访问：</p><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 修改/root/.bashrc文件</span></span><span class="line"><span style="color: #BABED8">vi </span><span style="color: #89DDFF">/</span><span style="color: #BABED8">root</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">.bashrc</span></span><span class="line"><span style="color: #BABED8">内容如下：</span></span><span class="line"><span style="color: #676E95; font-style: italic"># .bashrc</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># User specific aliases and functions</span></span><span class="line"><span style="color: #89DDFF">//</span><span style="color: #BABED8">在此处添加别名代表的命令</span></span><span class="line"><span style="color: #BABED8">alias rm</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">rm -i</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8">alias cp</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">cp -i</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8">alias mv</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">mv -i</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8">alias dps</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8">alias dis</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">docker images</span><span style="color: #89DDFF">&#39;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># Source global definitions</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">[</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">-f</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">/</span><span style="color: #C792EA">etc</span><span style="color: #89DDFF">/</span><span style="color: #C792EA">bashrc</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">];</span><span style="color: #BABED8"> then</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">/</span><span style="color: #BABED8">etc</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">bashrc</span></span><span class="line"><span style="color: #BABED8">fi</span></span></code></pre></div><p>然后，执行命令使别名生效</p><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">source </span><span style="color: #89DDFF">/</span><span style="color: #BABED8">root</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">.bashrc</span></span><span class="line"><span style="color: #BABED8">或 source ~</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">.bashrc</span></span></code></pre></div><h3 id="3-2-数据卷"><a href="#3-2-数据卷" class="headerlink" title="3.2 数据卷"></a>3.2 数据卷</h3><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：</p><ul><li>如果要升级MySQL版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li><li>MySQL、Nginx容器运行后，如果我要修改其中的某些配置该怎么办？</li><li>我想要让Nginx代理我的静态资源怎么办？</li></ul><p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器解耦</strong>。</p><h4 id="3-2-1-什么是数据卷"><a href="#3-2-1-什么是数据卷" class="headerlink" title="3.2.1 什么是数据卷"></a>3.2.1 什么是数据卷</h4><p><strong>数据卷（volume）</strong>是一个虚拟目录，是<strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁。</p><p>以Nginx为例，我们知道Nginx中有两个关键的目录： </p><ul><li><code>html</code>：放置一些静态资源</li><li><code>conf</code>：放置配置文件</li></ul><p>如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件。</p><p>但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/image-20240408221048065.png" alt="image-20240408221048065"></p><p>在上图中：</p><ul><li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li><li>Nginx容器内部的<code>conf</code>目录和<code>html</code>目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的<code>/var/lib/docker/volumes/conf/_data</code>目录和<code>/var/lib/docker/volumes/html/_data</code>目录</li></ul><p>这样以来，容器内的<code>conf</code>和<code>html</code>目录就 与宿主机的<code>conf</code>和<code>html</code>目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的<code>/var/lib/docker/volumes/html/_data</code>就是在操作容器内的<code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>小提示</strong>：</p><p><code>/var/lib/docker/volumes</code>这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为<code>/数据卷名/_data</code>。</p><p><strong>为什么不让容器目录直接指向宿主机目录呢</strong>？</p><ul><li>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</li><li>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</li></ul><p>不过，我们通过由于数据卷目录比较深，不好寻找，通常我们也**允许让容器直接与宿主机目录挂载而不使用数据卷。</p></blockquote><h4 id="3-2-2-数据卷命令"><a href="#3-2-2-数据卷命令" class="headerlink" title="3.2.2 数据卷命令"></a>3.2.2 数据卷命令</h4><p>数据卷的相关命令有：</p><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="left">docker volume create</td><td align="left">创建数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td></tr><tr><td align="left">docker volume ls</td><td align="left">查看所有数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docs.docker.com</a></td></tr><tr><td align="left">docker volume rm</td><td align="left">删除指定数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docs.docker.com</a></td></tr><tr><td align="left">docker volume inspect</td><td align="left">查看某个数据卷的详情</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docs.docker.com</a></td></tr><tr><td align="left">docker volume prune</td><td align="left">清除数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td></tr></tbody></table><p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中如果挂载了数据卷且数据卷不存在，数据卷会自动创建</strong>。</p><p>在<code>docker run命令</code>的时候，使用**<code>-v数据卷：容器内</code>**目录可以完成挂载</p><p>演示nginx的html目录挂载</p><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span></span><span class="line"><span style="color: #BABED8">docker run </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">d </span><span style="color: #89DDFF">--</span><span style="color: #BABED8">name nginx </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">p </span><span style="color: #F78C6C">80</span><span style="color: #BABED8">:</span><span style="color: #F78C6C">80</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">v html:</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">usr</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">share</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">nginx</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">html nginx</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 2.然后查看数据卷</span></span><span class="line"><span style="color: #BABED8">docker volume ls</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果</span></span><span class="line"><span style="color: #BABED8">DRIVER    VOLUME NAME</span></span><span class="line"><span style="color: #BABED8">local     29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</span></span><span class="line"><span style="color: #BABED8">local     html</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 3.查看数据卷详情</span></span><span class="line"><span style="color: #BABED8">docker volume inspect html</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果</span></span><span class="line"><span style="color: #89DDFF">[</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">CreatedAt</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">: </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">2024-05-17T19:57:08+08:00</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Driver</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">: </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">local</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Labels</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">: null</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Mountpoint</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">: </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/var/lib/docker/volumes/html/_data</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Name</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">: </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">html</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Options</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">: null</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Scope</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">: </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">local</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">]</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 4.查看/var/lib/docker/volumes/html/_data目录</span></span><span class="line"><span style="color: #BABED8">ll </span><span style="color: #89DDFF">/</span><span style="color: #89DDFF; font-style: italic">var</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">lib</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">docker</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">volumes</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">html</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">_data</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 可以看到与nginx的html目录内容一样，结果如下：</span></span><span class="line"><span style="color: #BABED8">总用量 </span><span style="color: #F78C6C">8</span></span><span class="line"><span style="color: #89DDFF">-</span><span style="color: #BABED8">rw</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">r</span><span style="color: #89DDFF">--</span><span style="color: #BABED8">r</span><span style="color: #89DDFF">--.</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8"> root root </span><span style="color: #F78C6C">497</span><span style="color: #BABED8"> 12月 </span><span style="color: #F78C6C">28</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2021</span><span style="color: #BABED8"> 50x.html</span></span><span class="line"><span style="color: #89DDFF">-</span><span style="color: #BABED8">rw</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">r</span><span style="color: #89DDFF">--</span><span style="color: #BABED8">r</span><span style="color: #89DDFF">--.</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8"> root root </span><span style="color: #F78C6C">615</span><span style="color: #BABED8"> 12月 </span><span style="color: #F78C6C">28</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2021</span><span style="color: #BABED8"> index.html</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 5.进入该目录，并随意修改index.html内容</span></span><span class="line"><span style="color: #BABED8">cd </span><span style="color: #89DDFF">/</span><span style="color: #89DDFF; font-style: italic">var</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">lib</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">docker</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">volumes</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">html</span><span style="color: #89DDFF">/</span><span style="color: #BABED8">_data</span></span><span class="line"><span style="color: #BABED8">vi index.html</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 6.打开页面，查看效果</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span></span><span class="line"><span style="color: #BABED8">docker exec </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">it nginx bash</span></span></code></pre></div><p>演示MySQL的匿名数据卷</p><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 1.查看MySQL容器详细信息</span></span><span class="line"><span style="color: #BABED8">docker inspect mysql</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 关注其中.Config.Volumes部分和.Mounts部分</span></span></code></pre></div><p>我们关注两部分内容，第一是<code>.Config.Volumes</code>部分：</p><div class="language-json"><button title="Copy code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">Config</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">// ... 略</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #FFCB6B">Volumes</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">&quot;</span><span style="color: #F78C6C">/var/lib/mysql</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">// ... 略</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。</p><p>然后，我们再看结果中的<code>.Mounts</code>部分：</p><div class="language-json"><button title="Copy code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">Mounts</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">[</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">&quot;</span><span style="color: #FFCB6B">Type</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">volume</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">&quot;</span><span style="color: #FFCB6B">Name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">&quot;</span><span style="color: #FFCB6B">Source</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">&quot;</span><span style="color: #FFCB6B">Destination</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/var/lib/mysql</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">&quot;</span><span style="color: #FFCB6B">Driver</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">local</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">]</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>可以发现，其中有几个关键属性：</p><ul><li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串hash值。</li><li>Source：宿主机目录</li><li>Destination : 容器内的目录</li></ul><p>上述配置是将容器内的<code>/var/lib/mysql</code>这个目录，与数据卷<code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code>挂载。于是在宿主机中就有了<code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code>这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p><p>接下来，可以查看该目录下的MySQL的data文件：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">ls</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-l</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</span></span></code></pre></div><p>注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考DockerHub对应的页面</p><h4 id="3-2-3-挂载本地目录或文件"><a href="#3-2-3-挂载本地目录或文件" class="headerlink" title="3.2.3 挂载本地目录或文件"></a>3.2.3 挂载本地目录或文件</h4><p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 挂载本地目录</span></span><span class="line"><span style="color: #FFCB6B">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">本地目录:容器内目录</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 挂载本地文件</span></span><span class="line"><span style="color: #FFCB6B">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">本地文件:容器内文件</span></span></code></pre></div><p><strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p><p>例如：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql:/var/lib/mysql</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span><span class="line"><span style="color: #FFCB6B">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">./mysql:/var/lib/mysql</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span></code></pre></div><p><strong>演示</strong>，删除并重新创建mysql容器，并完成本地目录挂载：</p><ul><li>挂载<code>/root/mysql/data</code>到容器内的<code>/var/lib/mysql</code>目录</li><li>挂载<code>/root/mysql/init</code>到容器内的<code>/docker-entrypoint-initdb.d</code>目录（初始化的SQL脚本目录）</li><li>挂载<code>/root/mysql/conf</code>到容器内的<code>/etc/mysql/conf.d</code>目录（这个是MySQL配置文件目录）</li></ul><p>mysql的<code>init</code>目录和<code>conf</code>目录：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17127609020924.png" alt="img"></p><p>以及对应的初始化SQL脚本和配置文件：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17127609020921.png" alt="img"></p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17127609020922.png" alt="img"></p><p>其中，hm.cnf主要是配置了MySQL的默认编码，改为utf8mb4；而hmall.sql是初始化SQL脚本。</p><p>我们直接将整个mysql目录上传至虚拟机的<code>/root</code>目录下：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17127609020923.png" alt="img"></p><p>接下来，我们演示本地目录挂载：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 1.删除原来的MySQL容器</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">rm</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-f</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 2.进入root目录</span></span><span class="line"><span style="color: #82AAFF">cd</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">~</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 3.创建并运行新mysql容器，挂载本地目录</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">run</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-d</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">--name</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-p</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3306</span><span style="color: #C3E88D">:3306</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-e</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">TZ=Asia/Shanghai</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-e</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">MYSQL_ROOT_PASSWORD=</span><span style="color: #F78C6C">123</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">./mysql/data:/var/lib/mysql</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">./mysql/conf:/etc/mysql/conf.d</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">./mysql/init:/docker-entrypoint-initdb.d</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">mysql</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span></span><span class="line"><span style="color: #FFCB6B">ls</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-l</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果：</span></span><span class="line"><span style="color: #FFCB6B">总用量</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4</span></span><span class="line"><span style="color: #FFCB6B">drwxr-xr-x.</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">root</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">root</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">20</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">5</span><span style="color: #C3E88D">月</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">19</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">15</span><span style="color: #C3E88D">:11</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">conf</span></span><span class="line"><span style="color: #FFCB6B">drwxr-xr-x.</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">7</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">polkitd</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">root</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4096</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">5</span><span style="color: #C3E88D">月</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">19</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">15</span><span style="color: #C3E88D">:11</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">data</span></span><span class="line"><span style="color: #FFCB6B">drwxr-xr-x.</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">root</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">root</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">23</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">5</span><span style="color: #C3E88D">月</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">19</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">15</span><span style="color: #C3E88D">:11</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">init</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span></span><span class="line"><span style="color: #FFCB6B">ls</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-l</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">data</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 5.查看MySQL容器内数据</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 5.1.进入MySQL</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">exec</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-it</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-uroot</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-p123</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 5.2.查看编码表</span></span><span class="line"><span style="color: #FFCB6B">show</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">variables</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">like</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">%char%</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 5.3.结果，发现编码是utf8mb4没有问题</span></span><span class="line"><span style="color: #FFCB6B">+--------------------------+--------------------------------+</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Variable_name</span><span style="color: #BABED8">            </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Value</span><span style="color: #BABED8">                          </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #FFCB6B">+--------------------------+--------------------------------+</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">character_set_client</span><span style="color: #BABED8">     </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">utf8mb4</span><span style="color: #BABED8">                        </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">character_set_connection</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">utf8mb4</span><span style="color: #BABED8">                        </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">character_set_database</span><span style="color: #BABED8">   </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">utf8mb4</span><span style="color: #BABED8">                        </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">character_set_filesystem</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">binary</span><span style="color: #BABED8">                         </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">character_set_results</span><span style="color: #BABED8">    </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">utf8mb4</span><span style="color: #BABED8">                        </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">character_set_server</span><span style="color: #BABED8">     </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">utf8mb4</span><span style="color: #BABED8">                        </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">character_set_system</span><span style="color: #BABED8">     </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">utf8mb3</span><span style="color: #BABED8">                        </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">character_sets_dir</span><span style="color: #BABED8">       </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">/usr/share/mysql-8.0/charsets/</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #FFCB6B">+--------------------------+--------------------------------+</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 6.查看数据</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 6.1.查看数据库</span></span><span class="line"><span style="color: #FFCB6B">show</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">databases</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果，hmall是黑马商城数据库</span></span><span class="line"><span style="color: #FFCB6B">+--------------------+</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Database</span><span style="color: #BABED8">           </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #FFCB6B">+--------------------+</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">hmall</span><span style="color: #BABED8">              </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">information_schema</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">mysql</span><span style="color: #BABED8">              </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">performance_schema</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">sys</span><span style="color: #BABED8">                </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #FFCB6B">+--------------------+</span></span><span class="line"><span style="color: #FFCB6B">5</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">rows</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">in</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">set</span><span style="color: #BABED8"> (0.00 </span><span style="color: #C3E88D">sec</span><span style="color: #BABED8">)</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 6.2.切换到hmall数据库</span></span><span class="line"><span style="color: #FFCB6B">use</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 6.3.查看表</span></span><span class="line"><span style="color: #FFCB6B">show</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">tables</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果：</span></span><span class="line"><span style="color: #FFCB6B">+-----------------+</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Tables_in_hmall</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #FFCB6B">+-----------------+</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">address</span><span style="color: #BABED8">         </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">cart</span><span style="color: #BABED8">            </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">item</span><span style="color: #BABED8">            </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">order</span><span style="color: #BABED8">           </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">order_detail</span><span style="color: #BABED8">    </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">order_logistics</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">pay_order</span><span style="color: #BABED8">       </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">user</span><span style="color: #BABED8">            </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #FFCB6B">+-----------------+</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 6.4.查看address表数据</span></span><span class="line"><span style="color: #FFCB6B">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">id</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">user_id</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">province</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">city</span><span style="color: #BABED8">   </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">town</span><span style="color: #BABED8">     </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">mobile</span><span style="color: #BABED8">      </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">street</span><span style="color: #BABED8">        </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">contact</span><span style="color: #BABED8">   </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">is_default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">notes</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #FFCB6B">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">59</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8">       </span><span style="color: #FFCB6B">1</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">北京</span><span style="color: #BABED8">     </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">北京</span><span style="color: #BABED8">   </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">朝阳区</span><span style="color: #BABED8">    </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">13900112222</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">金燕龙办公楼</span><span style="color: #BABED8">   </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">李佳诚</span><span style="color: #BABED8">    </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">0</span><span style="color: #BABED8">          </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">NULL</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">60</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8">       </span><span style="color: #FFCB6B">1</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">北京</span><span style="color: #BABED8">     </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">北京</span><span style="color: #BABED8">   </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">朝阳区</span><span style="color: #BABED8">    </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">13700221122</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">修正大厦</span><span style="color: #BABED8">       </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">李佳红</span><span style="color: #BABED8">    </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">0</span><span style="color: #BABED8">          </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">NULL</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">61</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8">       </span><span style="color: #FFCB6B">1</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">上海</span><span style="color: #BABED8">     </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">上海</span><span style="color: #BABED8">   </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">浦东新区</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">13301212233</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">航头镇航头路</span><span style="color: #BABED8">   </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">李佳星</span><span style="color: #BABED8">    </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">1</span><span style="color: #BABED8">          </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">NULL</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">63</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8">       </span><span style="color: #FFCB6B">1</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">广东</span><span style="color: #BABED8">     </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">佛山</span><span style="color: #BABED8">   </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">永春</span><span style="color: #BABED8">      </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">13301212233</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">永春武馆</span><span style="color: #BABED8">       </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">李晓龙</span><span style="color: #BABED8">    </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">0</span><span style="color: #BABED8">          </span><span style="color: #89DDFF">|</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">NULL</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">|</span></span><span class="line"><span style="color: #FFCB6B">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span></span><span class="line"><span style="color: #FFCB6B">4</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">rows</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">in</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">set</span><span style="color: #BABED8"> (0.00 </span><span style="color: #C3E88D">sec</span><span style="color: #BABED8">)</span></span></code></pre></div><h3 id="3-3-镜像"><a href="#3-3-镜像" class="headerlink" title="3.3 镜像"></a>3.3 镜像</h3><p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个Java项目，把它打包为一个镜像该怎么做呢？</p><h4 id="3-3-1-镜像结构"><a href="#3-3-1-镜像结构" class="headerlink" title="3.3.1 镜像结构"></a>3.3.1 镜像结构</h4><p>镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p><p>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p><p>我们要从0部署一个Java应用，大概流程是这样：</p><ul><li>准备一个linux服务（CentOS或者Ubuntu均可）</li><li>安装并配置JDK</li><li>上传Jar包</li><li>运行jar包</li></ul><p>我们打包镜像也是分成这么几步：</p><ul><li>准备Linux运行环境（java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置JDK</li><li>拷贝jar包</li><li>配置启动脚本</li></ul><p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p><p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一id，称为<strong>Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p><p>例如，第一步中需要的Linux运行环境，通用性就很强，所以Docker官方就制作了这样的只包含Linux运行环境的镜像。我们在制作java镜像时，就无需重复制作，直接使用Docker官方提供的CentOS或Ubuntu镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个Java项目的镜像结构如图所示：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/image-20240411230441304.png" alt="image-20240411230441304"></p><h4 id="3-3-2-Dockerfile"><a href="#3-3-2-Dockerfile" class="headerlink" title="3.3.2 Dockerfile"></a>3.3.2 Dockerfile</h4><p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以Docker就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给Docker去执行即可。</p><p>而这种记录镜像结构的文件就称为<strong>Dockerfile</strong>，其对应的语法可以参考官方文档：</p><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p>其中的语法比较多，比较常用的有：</p><table><thead><tr><th align="left"><strong>指令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>示例</strong></th></tr></thead><tbody><tr><td align="left"><strong>FROM</strong></td><td align="left">指定基础镜像</td><td align="left"><code>FROM centos:6</code></td></tr><tr><td align="left"><strong>ENV</strong></td><td align="left">设置环境变量，可在后面指令使用</td><td align="left"><code>ENV key value</code></td></tr><tr><td align="left"><strong>COPY</strong></td><td align="left">拷贝本地文件到镜像的指定目录</td><td align="left"><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td align="left"><strong>RUN</strong></td><td align="left">执行Linux的shell命令，一般是安装过程的命令</td><td align="left"><code>RUN yum install gcc</code></td></tr><tr><td align="left"><strong>EXPOSE</strong></td><td align="left">指定容器运行时监听的端口，是给镜像使用者看的</td><td align="left">EXPOSE 8080</td></tr><tr><td align="left"><strong>ENTRYPOINT</strong></td><td align="left">镜像中应用的启动命令，容器运行时调用</td><td align="left">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>例如，要基于Ubuntu镜像来构建一个Java应用，其Dockerfile内容如下：</p><div class="language-dockerfile"><button title="Copy code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 指定基础镜像</span></span><span class="line"><span style="color: #F78C6C">FROM</span><span style="color: #BABED8"> ubuntu:16.04</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 配置环境变量，JDK的安装目录、容器内时区</span></span><span class="line"><span style="color: #F78C6C">ENV</span><span style="color: #BABED8"> JAVA_DIR=/usr/local</span></span><span class="line"><span style="color: #F78C6C">ENV</span><span style="color: #BABED8"> TZ=Asia/Shanghai</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 拷贝jdk和java项目的包</span></span><span class="line"><span style="color: #F78C6C">COPY</span><span style="color: #BABED8"> ./jdk8.tar.gz $JAVA_DIR/</span></span><span class="line"><span style="color: #F78C6C">COPY</span><span style="color: #BABED8"> ./docker-demo.jar /tmp/app.jar</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 设定时区</span></span><span class="line"><span style="color: #F78C6C">RUN</span><span style="color: #BABED8"> ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 安装JDK</span></span><span class="line"><span style="color: #F78C6C">RUN</span><span style="color: #BABED8"> cd $JAVA_DIR \</span></span><span class="line"><span style="color: #BABED8"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><span class="line"><span style="color: #BABED8"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 配置环境变量</span></span><span class="line"><span style="color: #F78C6C">ENV</span><span style="color: #BABED8"> JAVA_HOME=$JAVA_DIR/java8</span></span><span class="line"><span style="color: #F78C6C">ENV</span><span style="color: #BABED8"> PATH=$PATH:$JAVA_HOME/bin</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 指定项目监听的端口</span></span><span class="line"><span style="color: #F78C6C">EXPOSE</span><span style="color: #BABED8"> 8080</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 入口，java项目的启动命令</span></span><span class="line"><span style="color: #F78C6C">ENTRYPOINT</span><span style="color: #BABED8"> [</span><span style="color: #C3E88D">&quot;java&quot;</span><span style="color: #BABED8">, </span><span style="color: #C3E88D">&quot;-jar&quot;</span><span style="color: #BABED8">, </span><span style="color: #C3E88D">&quot;/app.jar&quot;</span><span style="color: #BABED8">]</span></span></code></pre></div><p>会有很多java项目需要打包为镜像，他们都需要Linux系统环境、JDK环境这两层，只有上面的3层不同（因为jar包不同）。如果每次制作java镜像都重复制作前两层镜像会很麻烦。 </p><p>所以，就有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像，就可以省去JDK的配置了：</p><div class="language-dockerfile"><button title="Copy code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 基础镜像</span></span><span class="line"><span style="color: #F78C6C">FROM</span><span style="color: #BABED8"> openjdk:11.0-jre-buster</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 设定时区</span></span><span class="line"><span style="color: #F78C6C">ENV</span><span style="color: #BABED8"> TZ=Asia/Shanghai</span></span><span class="line"><span style="color: #F78C6C">RUN</span><span style="color: #BABED8"> ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 拷贝jar包</span></span><span class="line"><span style="color: #F78C6C">COPY</span><span style="color: #BABED8"> docker-demo.jar /app.jar</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 入口</span></span><span class="line"><span style="color: #F78C6C">ENTRYPOINT</span><span style="color: #BABED8"> [</span><span style="color: #C3E88D">&quot;java&quot;</span><span style="color: #BABED8">, </span><span style="color: #C3E88D">&quot;-jar&quot;</span><span style="color: #BABED8">, </span><span style="color: #C3E88D">&quot;/app.jar&quot;</span><span style="color: #BABED8">]</span></span></code></pre></div><h4 id="3-3-3-构建镜像"><a href="#3-3-3-构建镜像" class="headerlink" title="3.3.3 构建镜像"></a>3.3.3 构建镜像</h4><p>当Dockerfile文件写好以后，就可以利用命令来构建镜像了。</p><p>首先，将<code>docker-demo.jar</code>包以及<code>Dockerfile</code>拷贝到虚拟机的<code>/root/demo</code>目录：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17128483986701.png" alt="img"></p><p>然后，执行命令，构建镜像：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 进入镜像目录</span></span><span class="line"><span style="color: #82AAFF">cd</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/root/demo</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 开始构建</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">build</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-t</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker-demo:1.0</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">.</span></span></code></pre></div><p>命令说明：</p><ul><li><code>docker build </code>: 就是构建一个docker镜像</li><li><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称（<code>repository</code>和<code>tag</code>）</li><li><code>.</code> : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是<code>.</code>代表当前目录，也可以直接指定Dockerfile目录：<ul><li><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 直接指定Dockerfile目录</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">build</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-t</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker-demo:1.0</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/root/demo</span></span></code></pre></div></li></ul></li></ul><p>结果：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17128483986712.png" alt="img"></p><p>查看镜像列表：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 查看镜像列表：</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">images</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果</span></span><span class="line"><span style="color: #FFCB6B">REPOSITORY</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">TAG</span><span style="color: #BABED8">       </span><span style="color: #C3E88D">IMAGE</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ID</span><span style="color: #BABED8">       </span><span style="color: #C3E88D">CREATED</span><span style="color: #BABED8">          </span><span style="color: #C3E88D">SIZE</span></span><span class="line"><span style="color: #FFCB6B">docker-demo</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">1.0</span><span style="color: #BABED8">       </span><span style="color: #C3E88D">d6ab0b9e64b9</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">27</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">minutes</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">327</span><span style="color: #C3E88D">MB</span></span><span class="line"><span style="color: #FFCB6B">nginx</span><span style="color: #BABED8">         </span><span style="color: #C3E88D">latest</span><span style="color: #BABED8">    </span><span style="color: #F78C6C">605</span><span style="color: #C3E88D">c77e624dd</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">16</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">months</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">    </span><span style="color: #F78C6C">141</span><span style="color: #C3E88D">MB</span></span><span class="line"><span style="color: #FFCB6B">mysql</span><span style="color: #BABED8">         </span><span style="color: #C3E88D">latest</span><span style="color: #BABED8">    </span><span style="color: #F78C6C">3218</span><span style="color: #C3E88D">b38490ce</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">17</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">months</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">    </span><span style="color: #F78C6C">516</span><span style="color: #C3E88D">MB</span></span></code></pre></div><p>然后尝试运行该镜像：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 1.创建并运行容器</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">run</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-d</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--name</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dd</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-p</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8080</span><span style="color: #C3E88D">:8080</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker-demo:1.0</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 2.查看容器</span></span><span class="line"><span style="color: #FFCB6B">dps</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果</span></span><span class="line"><span style="color: #FFCB6B">CONTAINER</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ID</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">IMAGE</span><span style="color: #BABED8">             </span><span style="color: #C3E88D">PORTS</span><span style="color: #BABED8">                                                  </span><span style="color: #C3E88D">STATUS</span><span style="color: #BABED8">         </span><span style="color: #C3E88D">NAMES</span></span><span class="line"><span style="color: #FFCB6B">78a000447b49</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">docker-demo:1.0</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">.0.0:8080</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">8080/tcp,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">:::8090</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">8090/tcp</span><span style="color: #BABED8">              </span><span style="color: #C3E88D">Up</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">seconds</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">dd</span></span><span class="line"><span style="color: #FFCB6B">f63cfead8502</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8">             </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">.0.0:3306</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">3306/tcp,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">:::3306</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">3306/tcp,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">33060</span><span style="color: #C3E88D">/tcp</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">Up</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hours</span><span style="color: #BABED8">     </span><span style="color: #C3E88D">mysql</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 3.访问</span></span><span class="line"><span style="color: #FFCB6B">curl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">localhost:8080/hello/count</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果：</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">h</span><span style="color: #89DDFF">5&gt;</span><span style="color: #BABED8">欢迎访问黑马商城, 这是您第1次访问</span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">h</span><span style="color: #89DDFF">5&gt;</span></span></code></pre></div><h3 id="3-4-网络"><a href="#3-4-网络" class="headerlink" title="3.4 网络"></a>3.4 网络</h3><p>上我们创建了一个Java项目的容器，而Java项目往往需要访问其它各种中间件，例如MySQL、Redis等。现在，我们的容器之间能否互相访问？我们来测试一下</p><p>首先，我们查看下MySQL容器的详细信息，重点关注其中的网络IP地址：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">inspect</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 也可以使用format过滤结果</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">inspect</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--format=</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 得到IP地址如下：</span></span><span class="line"><span style="color: #FFCB6B">172.17.0.2</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 2.然后通过命令进入dd容器</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">exec</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-it</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dd</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">bash</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 3.在容器内，通过ping命令测试网络</span></span><span class="line"><span style="color: #FFCB6B">ping</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">172.17</span><span style="color: #C3E88D">.0.2</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果</span></span><span class="line"><span style="color: #FFCB6B">PING</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">172.17</span><span style="color: #C3E88D">.0.2</span><span style="color: #BABED8"> (172.17.0.2) 56</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">84</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> bytes of data.</span></span><span class="line"><span style="color: #FFCB6B">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">bytes</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">from</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">172.17</span><span style="color: #C3E88D">.0.2:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">icmp_seq=</span><span style="color: #F78C6C">1</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ttl=</span><span style="color: #F78C6C">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">time=</span><span style="color: #F78C6C">0.053</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ms</span></span><span class="line"><span style="color: #FFCB6B">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">bytes</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">from</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">172.17</span><span style="color: #C3E88D">.0.2:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">icmp_seq=</span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ttl=</span><span style="color: #F78C6C">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">time=</span><span style="color: #F78C6C">0.059</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ms</span></span><span class="line"><span style="color: #FFCB6B">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">bytes</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">from</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">172.17</span><span style="color: #C3E88D">.0.2:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">icmp_seq=</span><span style="color: #F78C6C">3</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ttl=</span><span style="color: #F78C6C">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">time=</span><span style="color: #F78C6C">0.058</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ms</span></span></code></pre></div><p>发现可以互联，没有问题。</p><p>但是，容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时很可能MySQL容器的IP会发生变化，连接会失败。</p><p>所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：</p><p><a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/</a></p><p>常见命令有：</p><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="left">docker network create</td><td align="left">创建一个网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td align="left">docker network ls</td><td align="left">查看所有网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td></tr><tr><td align="left">docker network rm</td><td align="left">删除指定网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td></tr><tr><td align="left">docker network prune</td><td align="left">清除未使用的网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td></tr><tr><td align="left">docker network connect</td><td align="left">使指定容器连接加入某网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td></tr><tr><td align="left">docker network disconnect</td><td align="left">使指定容器连接离开某网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td align="left">docker network inspect</td><td align="left">查看网络详细信息</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table><p>演示：自定义网络</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 1.首先通过命令创建一个网络</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">network</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">create</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 2.然后查看网络</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">network</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ls</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果：</span></span><span class="line"><span style="color: #FFCB6B">NETWORK</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ID</span><span style="color: #BABED8">     </span><span style="color: #C3E88D">NAME</span><span style="color: #BABED8">      </span><span style="color: #C3E88D">DRIVER</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">SCOPE</span></span><span class="line"><span style="color: #FFCB6B">639bc44d0a87</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">bridge</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">bridge</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">local</span></span><span class="line"><span style="color: #FFCB6B">403f16ec62a2</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8">     </span><span style="color: #C3E88D">bridge</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">local</span></span><span class="line"><span style="color: #FFCB6B">0dc0f72a0fbb</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">host</span><span style="color: #BABED8">      </span><span style="color: #C3E88D">host</span><span style="color: #BABED8">      </span><span style="color: #C3E88D">local</span></span><span class="line"><span style="color: #FFCB6B">cd8d3e8df47b</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">none</span><span style="color: #BABED8">      </span><span style="color: #C3E88D">null</span><span style="color: #BABED8">      </span><span style="color: #C3E88D">local</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 其中，除了hmall以外，其它都是默认的网络</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 这样该网络内的其它容器可以用别名互相访问！</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">network</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">connect</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--alias</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">db</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 3.2.db容器，也就是我们的java项目</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">network</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">connect</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dd</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 4.进入dd容器，尝试利用别名访问db</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 4.1.进入容器</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">exec</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-it</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dd</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">bash</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 4.2.用db别名访问</span></span><span class="line"><span style="color: #FFCB6B">ping</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">db</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果</span></span><span class="line"><span style="color: #FFCB6B">PING</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">db</span><span style="color: #BABED8"> (172.18.0.2) 56</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">84</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> bytes of data.</span></span><span class="line"><span style="color: #FFCB6B">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">bytes</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">from</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql.hmall</span><span style="color: #BABED8"> (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms</span></span><span class="line"><span style="color: #FFCB6B">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">bytes</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">from</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql.hmall</span><span style="color: #BABED8"> (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 4.3.用容器名访问</span></span><span class="line"><span style="color: #FFCB6B">ping</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果：</span></span><span class="line"><span style="color: #FFCB6B">PING</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8"> (172.18.0.2) 56</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">84</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> bytes of data.</span></span><span class="line"><span style="color: #FFCB6B">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">bytes</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">from</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql.hmall</span><span style="color: #BABED8"> (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms</span></span><span class="line"><span style="color: #FFCB6B">64</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">bytes</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">from</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql.hmall</span><span style="color: #BABED8"> (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span></span></code></pre></div><p>现在无需记住IP地址也可以实现容器互联了。</p><p><strong>总结</strong>：</p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问</li></ul><h2 id="4-项目部署演示"><a href="#4-项目部署演示" class="headerlink" title="4.项目部署演示"></a>4.项目部署演示</h2><p>好了，我们已经熟悉了Docker的基本用法，接下来可以尝试部署项目了。</p><p>演示项目说明：</p><ul><li>hmall：商城的后端代码</li><li>hmall-portal：商城用户端的前端代码</li><li>hmall-admin：商城管理端的前端代码</li></ul><p>部署的容器及端口说明：</p><table><thead><tr><th align="left"><strong>项目</strong></th><th align="left"><strong>容器名</strong></th><th align="left"><strong>端口</strong></th><th align="left"><strong>备注</strong></th></tr></thead><tbody><tr><td align="left">hmall</td><td align="left">hmall</td><td align="left">8080</td><td align="left">商城后端API入口</td></tr><tr><td align="left">hmall-portal</td><td align="left">nginx</td><td align="left">18080</td><td align="left">商城用户端入口</td></tr><tr><td align="left">hmall-admin</td><td align="left">18081</td><td align="left">商城管理端入口</td><td align="left"></td></tr><tr><td align="left">mysql</td><td align="left">mysql</td><td align="left">3306</td><td align="left">数据库</td></tr></tbody></table><p>在正式部署前，我们先删除之前的nginx、dd两个容器：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">rm</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-f</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">nginx</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dd</span></span></code></pre></div><p>mysql容器中已经准备好了商城的数据，所以就不再删除了。</p><h3 id="4-1-部署Java项目"><a href="#4-1-部署Java项目" class="headerlink" title="4.1 部署Java项目"></a>4.1 部署Java项目</h3><p><code>hmall</code>项目是一个maven聚合项目，使用IDEA打开<code>hmall</code>项目，查看项目结构如图：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17128890022917.png" alt="img"></p><p>我们要部署的就是其中的<code>hm-service</code>，其中的配置文件采用了多环境的方式：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17128890022901.png" alt="img"></p><p>其中的<code>application-dev.yaml</code>是部署到开发环境的配置，<code>application-local.yaml</code>是本地运行时的配置。</p><p>查看application.yaml，你会发现其中的JDBC地址并未写死，而是读取变量：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17128890022902.png" alt="img"></p><p>这两个变量在<code>application-dev.yaml</code>和<code>application-local.yaml</code>中并不相同：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17128890022903.png" alt="img"></p><p>在dev开发环境（也就是Docker部署时）采用了mysql作为地址，刚好是我们的mysql容器名，只要两者在一个网络，就一定能互相访问。</p><p>我们将项目打包：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17128890022904.png" alt="img"></p><p>结果：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17128890022905.png" alt="img"></p><p>将<code>hm-service</code>目录下的<code>Dockerfile</code>和<code>hm-service/target</code>目录下的<code>hm-service.jar</code>一起上传到虚拟机的<code>root</code>目录：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-17128890022906.png" alt="img"></p><p>部署项目：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 1.构建项目镜像，不指定tag，则默认为latest</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">build</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-t</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">.</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 2.查看镜像</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">images</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果</span></span><span class="line"><span style="color: #FFCB6B">REPOSITORY</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">TAG</span><span style="color: #BABED8">       </span><span style="color: #C3E88D">IMAGE</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ID</span><span style="color: #BABED8">       </span><span style="color: #C3E88D">CREATED</span><span style="color: #BABED8">          </span><span style="color: #C3E88D">SIZE</span></span><span class="line"><span style="color: #FFCB6B">hmall</span><span style="color: #BABED8">         </span><span style="color: #C3E88D">latest</span><span style="color: #BABED8">    </span><span style="color: #F78C6C">0</span><span style="color: #C3E88D">bb07b2c34b9</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">43</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">seconds</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">362</span><span style="color: #C3E88D">MB</span></span><span class="line"><span style="color: #FFCB6B">docker-demo</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">1.0</span><span style="color: #BABED8">       </span><span style="color: #F78C6C">49743484</span><span style="color: #C3E88D">da68</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">24</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hours</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">     </span><span style="color: #F78C6C">327</span><span style="color: #C3E88D">MB</span></span><span class="line"><span style="color: #FFCB6B">nginx</span><span style="color: #BABED8">         </span><span style="color: #C3E88D">latest</span><span style="color: #BABED8">    </span><span style="color: #F78C6C">605</span><span style="color: #C3E88D">c77e624dd</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">16</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">months</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">    </span><span style="color: #F78C6C">141</span><span style="color: #C3E88D">MB</span></span><span class="line"><span style="color: #FFCB6B">mysql</span><span style="color: #BABED8">         </span><span style="color: #C3E88D">latest</span><span style="color: #BABED8">    </span><span style="color: #F78C6C">3218</span><span style="color: #C3E88D">b38490ce</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">17</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">months</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">    </span><span style="color: #F78C6C">516</span><span style="color: #C3E88D">MB</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">run</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-d</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--name</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--network</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-p</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8080</span><span style="color: #C3E88D">:8080</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span></span></code></pre></div><p>测试，通过浏览器访问：http:&#x2F;&#x2F;你的虚拟机地址:8080&#x2F;search&#x2F;list</p><h3 id="4-2-部署前端"><a href="#4-2-部署前端" class="headerlink" title="4.2 部署前端"></a>4.2 部署前端</h3><p><code>hmall-portal</code>和<code>hmall-admin</code>是前端代码，需要基于nginx部署。nginx的部署目录：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-171288903523015.png" alt="img"></p><p>其中：</p><ul><li><code>html</code>是静态资源目录，我们需要把<code>hmall-portal</code>以及<code>hmall-admin</code>都复制进去</li><li><code>nginx.conf</code>是nginx的配置文件，主要是完成对<code>html</code>下的两个静态资源目录做代理，注意api的修改容器名称的对应。</li></ul><p>把整个nginx目录上传到虚拟机的<code>/root</code>目录下：</p><p><img src="/oranfish.github.io/posts/0/Docker%E6%80%BB%E7%BB%93/-171288903523016.png" alt="img"></p><p>然后创建nginx容器并完成两个挂载：</p><ul><li>把<code>/root/nginx/nginx.conf</code>挂载到<code>/etc/nginx/nginx.conf</code></li><li>把<code>/root/nginx/html</code>挂载到<code>/usr/share/nginx/html</code></li></ul><p>由于需要让nginx同时代理hmall-portal和hmall-admin两套前端资源，因此我们需要暴露两个端口：</p><ul><li>18080：对应hmall-portal</li><li>18081：对应hmall-admin</li></ul><p>命令如下：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">run</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-d</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">--name</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">nginx</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-p</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">18080</span><span style="color: #C3E88D">:18080</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-p</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">18081</span><span style="color: #C3E88D">:18081</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/root/nginx/html:/usr/share/nginx/html</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/root/nginx/nginx.conf:/etc/nginx/nginx.conf</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">--network</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">nginx</span></span></code></pre></div><p>测试，通过浏览器访问：http:&#x2F;&#x2F;你的虚拟机ip:18080</p><h3 id="4-3-DockerCompose"><a href="#4-3-DockerCompose" class="headerlink" title="4.3 DockerCompose"></a>4.3 DockerCompose</h3><p>大家可以看到，我们部署一个简单的java项目，其中包含3个容器：</p><ul><li>MySQL</li><li>Nginx</li><li>Java项目</li></ul><p>而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止3个。如果还像之前那样手动的逐一部署，就太麻烦了。</p><p>而Docker Compose就可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p><h4 id="4-3-1-基本语法"><a href="#4-3-1-基本语法" class="headerlink" title="4.3.1 基本语法"></a>4.3.1 基本语法</h4><p>docker-compose.yml文件的基本语法可以参考官方文档：</p><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><p>docker-compose文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于service就是在定义某个应用的运行时参数，因此与<code>docker run</code>参数非常相似。</p><p>举例来说，用docker run部署MySQL的命令如下：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">run</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-d</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">--name</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-p</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3306</span><span style="color: #C3E88D">:3306</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-e</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">TZ=Asia/Shanghai</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-e</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">MYSQL_ROOT_PASSWORD=</span><span style="color: #F78C6C">123</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">./mysql/data:/var/lib/mysql</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">./mysql/conf:/etc/mysql/conf.d</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">-v</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">./mysql/init:/docker-entrypoint-initdb.d</span><span style="color: #BABED8"> \</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #C3E88D">--network</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #FFCB6B">mysql</span></span></code></pre></div><p>如果用<code>docker-compose.yml</code>文件来定义，就是这样：</p><div class="language-yaml"><button title="Copy code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">version</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">3.8</span><span style="color: #89DDFF">&quot;</span></span><span class="line"></span><span class="line"><span style="color: #F07178">services</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">mysql</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">image</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">container_name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">ports</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">3306:3306</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">environment</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F07178">TZ</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Asia/Shanghai</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F07178">MYSQL_ROOT_PASSWORD</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">123</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">volumes</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./mysql/conf:/etc/mysql/conf.d</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./mysql/data:/var/lib/mysql</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">networks</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">new</span></span><span class="line"><span style="color: #F07178">networks</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">new</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span></span></code></pre></div><p>对比如下：</p><table><thead><tr><th align="left"><strong>docker run 参数</strong></th><th align="left"><strong>docker compose 指令</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">–name</td><td align="left">container_name</td><td align="left">容器名称</td></tr><tr><td align="left">-p</td><td align="left">ports</td><td align="left">端口映射</td></tr><tr><td align="left">-e</td><td align="left">environment</td><td align="left">环境变量</td></tr><tr><td align="left">-v</td><td align="left">volumes</td><td align="left">数据卷配置</td></tr><tr><td align="left">–network</td><td align="left">networks</td><td align="left">网络</td></tr></tbody></table><p>明白了其中的对应关系，相信编写<code>docker-compose</code>文件应该难不倒大家。</p><p>演示商城部署文件：</p><div class="language-yaml"><button title="Copy code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">version</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">3.8</span><span style="color: #89DDFF">&quot;</span></span><span class="line"></span><span class="line"><span style="color: #F07178">services</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">mysql</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">image</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">container_name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">ports</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">3306:3306</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">environment</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F07178">TZ</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Asia/Shanghai</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F07178">MYSQL_ROOT_PASSWORD</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">123</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">volumes</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./mysql/conf:/etc/mysql/conf.d</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./mysql/data:/var/lib/mysql</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./mysql/init:/docker-entrypoint-initdb.d</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">networks</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hm-net</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">hmall</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">build</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F07178">context</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">.</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F07178">dockerfile</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Dockerfile</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">container_name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">ports</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">8080:8080</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">networks</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hm-net</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">depends_on</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">nginx</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">image</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">nginx</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">container_name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">nginx</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">ports</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">18080:18080</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">18081:18081</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">volumes</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./nginx/nginx.conf:/etc/nginx/nginx.conf</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./nginx/html:/usr/share/nginx/html</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">depends_on</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">networks</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hm-net</span></span><span class="line"><span style="color: #F07178">networks</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">hm-net</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span></span></code></pre></div><h4 id="4-3-2-基础命令"><a href="#4-3-2-基础命令" class="headerlink" title="4.3.2 基础命令"></a>4.3.2 基础命令</h4><p>编写好docker-compose.yml文件，就可以部署项目了。常见的命令：</p><p><a href="https://docs.docker.com/compose/reference/">https://docs.docker.com/compose/reference/</a></p><p>基本语法如下：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">compose</span><span style="color: #BABED8"> [OPTIONS] </span><span style="color: #89DDFF">[</span><span style="color: #BABED8">COMMAND</span><span style="color: #89DDFF">]</span></span></code></pre></div><p>其中，OPTIONS和COMMAND都是可选参数，比较常见的有：</p><table><thead><tr><th align="left"><strong>类型</strong></th><th align="left"><strong>参数或指令</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">Options</td><td align="left">-f</td><td align="left">指定compose文件的路径和名称</td></tr><tr><td align="left">-p</td><td align="left">指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td><td align="left"></td></tr><tr><td align="left">Commands</td><td align="left">up</td><td align="left">创建并启动所有service容器</td></tr><tr><td align="left">down</td><td align="left">停止并移除所有容器、网络</td><td align="left"></td></tr><tr><td align="left">ps</td><td align="left">列出所有启动的容器</td><td align="left"></td></tr><tr><td align="left">logs</td><td align="left">查看指定容器的日志</td><td align="left"></td></tr><tr><td align="left">stop</td><td align="left">停止容器</td><td align="left"></td></tr><tr><td align="left">start</td><td align="left">启动容器</td><td align="left"></td></tr><tr><td align="left">restart</td><td align="left">重启容器</td><td align="left"></td></tr><tr><td align="left">top</td><td align="left">查看运行的进程</td><td align="left"></td></tr><tr><td align="left">exec</td><td align="left">在指定的运行中容器中执行命令</td><td align="left"></td></tr></tbody></table><p>教学演示：</p><div class="language-bash"><button title="Copy code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 1.进入root目录</span></span><span class="line"><span style="color: #82AAFF">cd</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/root</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 2.删除旧容器</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">rm</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-f</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">$(</span><span style="color: #FFCB6B">docker</span><span style="color: #C3E88D"> ps -qa</span><span style="color: #89DDFF">)</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 3.删除hmall镜像</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">rmi</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 4.清空MySQL数据</span></span><span class="line"><span style="color: #FFCB6B">rm</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-rf</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql/data</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 5.启动所有, -d 参数是后台启动</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">compose</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">up</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-d</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果：</span></span><span class="line"><span style="color: #89DDFF">[</span><span style="color: #BABED8">+</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> Building 15.5s </span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">8/8</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> FINISHED</span></span><span class="line"><span style="color: #BABED8"> =&gt; [internal] load build definition from Dockerfile                                    0.0s</span></span><span class="line"><span style="color: #BABED8"> =&gt; =</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">transferring</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dockerfile:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">358</span><span style="color: #C3E88D">B</span><span style="color: #BABED8">                                                    </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> =&gt; [internal] load .dockerignore                                                       0.0s</span></span><span class="line"><span style="color: #BABED8"> =&gt; =</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">transferring</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">context:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #C3E88D">B</span><span style="color: #BABED8">                                                         </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> =&gt; [internal] load metadata </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> docker.io/library/openjdk:11.0-jre-buster             15.4s</span></span><span class="line"><span style="color: #BABED8"> =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s</span></span><span class="line"><span style="color: #BABED8"> =&gt; [internal] load build context                                                       0.0s</span></span><span class="line"><span style="color: #BABED8"> =&gt; =</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">transferring</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">context:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">98</span><span style="color: #C3E88D">B</span><span style="color: #BABED8">                                                        </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> =&gt; </span><span style="color: #C3E88D">CACHED</span><span style="color: #BABED8"> [2/3] RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">echo</span><span style="color: #BABED8">   </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> =&gt; </span><span style="color: #C3E88D">CACHED</span><span style="color: #BABED8"> [3/3] COPY hm-service.jar /app.jar                                           0.0s</span></span><span class="line"><span style="color: #BABED8"> =&gt; </span><span style="color: #C3E88D">exporting</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">to</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">image</span><span style="color: #BABED8">                                                                  </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> =&gt; =</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">exporting</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">layers</span><span style="color: #BABED8">                                                                 </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> =&gt; =</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">writing</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">image</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> =&gt; =</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">naming</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">to</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">docker.io/library/root-hmall</span><span style="color: #BABED8">                                           </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #89DDFF">[</span><span style="color: #BABED8">+</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> Running 4/4</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">✔</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Network</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">Created</span><span style="color: #BABED8">                                                             </span><span style="color: #F78C6C">0.2</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">✔</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Container</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">Started</span><span style="color: #BABED8">                                                             </span><span style="color: #F78C6C">0.5</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">✔</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Container</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">Started</span><span style="color: #BABED8">                                                             </span><span style="color: #F78C6C">0.9</span><span style="color: #C3E88D">s</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">✔</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Container</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">nginx</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">Started</span><span style="color: #BABED8">                                                             </span><span style="color: #F78C6C">1.5</span><span style="color: #C3E88D">s</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 6.查看镜像</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">compose</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">images</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果</span></span><span class="line"><span style="color: #FFCB6B">CONTAINER</span><span style="color: #BABED8">           </span><span style="color: #C3E88D">REPOSITORY</span><span style="color: #BABED8">          </span><span style="color: #C3E88D">TAG</span><span style="color: #BABED8">                 </span><span style="color: #C3E88D">IMAGE</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ID</span><span style="color: #BABED8">            </span><span style="color: #C3E88D">SIZE</span></span><span class="line"><span style="color: #FFCB6B">hmall</span><span style="color: #BABED8">               </span><span style="color: #C3E88D">root-hmall</span><span style="color: #BABED8">          </span><span style="color: #C3E88D">latest</span><span style="color: #BABED8">              </span><span style="color: #F78C6C">32</span><span style="color: #C3E88D">eebee16acd</span><span style="color: #BABED8">        </span><span style="color: #F78C6C">362</span><span style="color: #C3E88D">MB</span></span><span class="line"><span style="color: #FFCB6B">mysql</span><span style="color: #BABED8">               </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8">               </span><span style="color: #C3E88D">latest</span><span style="color: #BABED8">              </span><span style="color: #F78C6C">3218</span><span style="color: #C3E88D">b38490ce</span><span style="color: #BABED8">        </span><span style="color: #F78C6C">516</span><span style="color: #C3E88D">MB</span></span><span class="line"><span style="color: #FFCB6B">nginx</span><span style="color: #BABED8">               </span><span style="color: #C3E88D">nginx</span><span style="color: #BABED8">               </span><span style="color: #C3E88D">latest</span><span style="color: #BABED8">              </span><span style="color: #F78C6C">605</span><span style="color: #C3E88D">c77e624dd</span><span style="color: #BABED8">        </span><span style="color: #F78C6C">141</span><span style="color: #C3E88D">MB</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic"># 7.查看容器</span></span><span class="line"><span style="color: #FFCB6B">docker</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">compose</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ps</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 结果</span></span><span class="line"><span style="color: #FFCB6B">NAME</span><span style="color: #BABED8">                </span><span style="color: #C3E88D">IMAGE</span><span style="color: #BABED8">               </span><span style="color: #C3E88D">COMMAND</span><span style="color: #BABED8">                  </span><span style="color: #C3E88D">SERVICE</span><span style="color: #BABED8">             </span><span style="color: #C3E88D">CREATED</span><span style="color: #BABED8">             </span><span style="color: #C3E88D">STATUS</span><span style="color: #BABED8">              </span><span style="color: #C3E88D">PORTS</span></span><span class="line"><span style="color: #FFCB6B">hmall</span><span style="color: #BABED8">               </span><span style="color: #C3E88D">root-hmall</span><span style="color: #BABED8">          </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">java -jar /app.jar</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">     </span><span style="color: #C3E88D">hmall</span><span style="color: #BABED8">               </span><span style="color: #F78C6C">54</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">seconds</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">      </span><span style="color: #C3E88D">Up</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">52</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">seconds</span><span style="color: #BABED8">       </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">.0.0:8080</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">8080/tcp,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">:::8080</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">8080/tcp</span></span><span class="line"><span style="color: #FFCB6B">mysql</span><span style="color: #BABED8">               </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8">               </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">docker-entrypoint.s…</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">mysql</span><span style="color: #BABED8">               </span><span style="color: #F78C6C">54</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">seconds</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">      </span><span style="color: #C3E88D">Up</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">53</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">seconds</span><span style="color: #BABED8">       </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">.0.0:3306</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">3306/tcp,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">:::3306</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">3306/tcp,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">33060</span><span style="color: #C3E88D">/tcp</span></span><span class="line"><span style="color: #FFCB6B">nginx</span><span style="color: #BABED8">               </span><span style="color: #C3E88D">nginx</span><span style="color: #BABED8">               </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/docker-entrypoint.…</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">   </span><span style="color: #C3E88D">nginx</span><span style="color: #BABED8">               </span><span style="color: #F78C6C">54</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">seconds</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">ago</span><span style="color: #BABED8">      </span><span style="color: #C3E88D">Up</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">52</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">seconds</span><span style="color: #BABED8">       </span><span style="color: #F78C6C">80</span><span style="color: #C3E88D">/tcp,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0.0</span><span style="color: #C3E88D">.0.0:18080-18081</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">18080-18081/tcp,</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">:::18080-18081</span><span style="color: #BABED8">-</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">18080-18081/tcp</span></span></code></pre></div><p>打开浏览器，访问：<a href="http://yourip:8080/">http://yourIp:8080</a></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware部署Redis</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-VMware安装CentOS7"><a href="#1-VMware安装CentOS7" class="headerlink" title="1.VMware安装CentOS7"></a>1.VMware安装CentOS7</h2><h3 id="1-1-CentOS7的下载"><a href="#1-1-CentOS7的下载" class="headerlink" title="1.1 CentOS7的下载"></a>1.1 CentOS7的下载</h3><p>官网下载地址：<a href="https://www.centos.org/download/">Download</a>。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405221218628.png" alt="image-20240405221218628"></p><p>点进去后选择阿里云镜像源下载</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405221337221.png" alt="image-20240405221337221"></p><p>选择iso镜像文件下载</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405221420096.png" alt="image-20240405221420096"></p><h3 id="1-2-CentOS7的配置"><a href="#1-2-CentOS7的配置" class="headerlink" title="1.2 CentOS7的配置"></a>1.2 CentOS7的配置</h3><h4 id="1-2-1-VMware安装"><a href="#1-2-1-VMware安装" class="headerlink" title="1.2.1 VMware安装"></a>1.2.1 VMware安装</h4><p>vmware官网下载：<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">vmware官网</a></p><p>下载文件：安装之后是这样的界面</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405221847279.png" alt="image-20240405221847279"></p><p>如果你点击下一步出现了这个页面的话，那就证明你电脑里面已经有vmware了，就可以直接用了，如果你想重新安装，直接删除就好，再重新打开安装程序继续安装。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405221856952.png" alt="image-20240405221856952"></p><p>到选择位置的时候可以更改一下安装位置，防止c盘爆掉…</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405221901781.png" alt="image-20240405221901781"></p><p>继续点击下一步</p><p>到下面图片中的这一个步骤，可以点击许可证，输入密钥就可以使用了，</p><p>密钥可以去某度或者其他地方搜索一个拿来用就好！！</p><p>如果直接点击完成的话，可以有试用的时间，也可以使用</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405221940534.png" alt="image-20240405221940534"></p><h4 id="1-2-2-新建虚拟机"><a href="#1-2-2-新建虚拟机" class="headerlink" title="1.2.2 新建虚拟机"></a>1.2.2 新建虚拟机</h4><p>打开“VMware Workstation”软件，选择“创建新的虚拟机”。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405222032964.png" alt="image-20240405222032964"></p><p>点击下一步选择稍后安装操作系统。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405222057878.png" alt="image-20240405222057878"></p><p>选择Linux，版本为CentOS 7 64位。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405222120666.png" alt="image-20240405222120666"></p><p>选择虚拟机安装的位置，也可以更改虚拟机名称。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405222152162.png" alt="image-20240405222152162"></p><p>磁盘大小默认即可，虚拟磁盘存储为单个文件。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405222251234.png" alt="image-20240405222251234"></p><p>点击下一步后选择自定义硬件，找到镜像文件。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405222331582.png" alt="image-20240405222331582"></p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405222342301.png" alt="image-20240405222342301"></p><p>返回点击完成后即可成功创建虚拟机。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405222400813.png" alt="image-20240405222400813"></p><h4 id="1-2-3-CentOS7安装"><a href="#1-2-3-CentOS7安装" class="headerlink" title="1.2.3 CentOS7安装"></a>1.2.3 CentOS7安装</h4><p>选中刚刚配置的CentOS7，然后点击“开启此虚拟机”。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405231450429.png" alt="image-20240405231450429"></p><p>虚拟机启动之后会出现如下界面（白色表示选中），默认选中的是Test this media &amp; install CentOS 7。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405231504696.png" alt="image-20240405231504696"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意： 在虚拟机中的操作，鼠标必须要移入到虚拟机中，否则虚拟机感应不到，无法对其进行操作。</p><p>​       鼠标移动到虚拟机内部单击或者按下Ctrl + G，鼠标即可移入到虚拟机中。</p><p>​       按下Ctrl + Alt，鼠标即可移出虚拟机。</p></blockquote><p>按下Enter进行安装，等待系统加载完成</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405231539321.png" alt="image-20240405231539321"></p><p>选择使用哪种语言，推荐使用英文。 在这里我选择中文安装</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405231608999.png" alt="image-20240405231608999"></p><p>【本地化】只配置日期和时间，键盘和语言支持没有特殊情况默认就好。中国范围内都选择为上海（因为只有上海可选），并选择为24小时制，设置完成后单击完成按钮。</p><p>【软件】中只配置软件选择，安装源系统会自动识别，所以不用。</p><p>若出现感叹号则需要点击进入设置后再点击一次完成即可自动配置好。</p><p>然后我们选择安装的系统是否含有界面，界面一般对于我们来说用处不大，而且CentOS的界面不好操作，所以这里选择最小安装。</p><p>【系统】中只配置安装位置，指的是系统如何分区，其它的都默认就好。</p><p>分区选择自动分区即可，如需手动配置分区请网络搜索教程。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405231742939.png" alt="image-20240405231742939"></p><p>回到界面，点击开始安装。</p><p>接下来配置用户设置。</p><p>设置管理员ROOT密码，这是最高权限root用户的密码（默认账号为root，密码为现在要设置的）。在实际中root密码越复杂越好，因为这里只是演示，所以密码就没有那么复杂了。</p><p>提示：这个密码非常重要，请务必牢记！！！</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405231859545.png" alt="image-20240405231859545"></p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405231904369.png" alt="image-20240405231904369"></p><p>创建用户可以随意创建，密码可以随意</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405231909152.png" alt="image-20240405231909152"></p><p>用户设置好了之后，等待CentOS安装完成，然后点击完成配置，然后点击重启。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405231941333.png" alt="image-20240405231941333"></p><p>CentOS的启动之后的界面如下，登录CentOS，使用默认账号为root，密码为你在前面安装时设置的root密码。</p><p><strong>注意：在输入密码时，linux为了安全起见，是看不到你输入的密码。并且输入密码的时候光标不会移动，确保输入完密码后点击enter键就会进入系统。同时，如果是使用的是键盘右边的数字键盘输入密码的话，建议查看一下num lock键是否开启。</strong></p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405232013880.png" alt="image-20240405232013880"></p><p>至此，CentOS7的安装全部完成了。</p><h4 id="1-2-4-CentOS7网络配置"><a href="#1-2-4-CentOS7网络配置" class="headerlink" title="1.2.4 CentOS7网络配置"></a>1.2.4 CentOS7网络配置</h4><p>因为前面在设置CentOS7的网络适配器的时候，设置是NAT模式。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405232219960.png" alt="image-20240405232219960"></p><p>在VMware界面（管理员方式启动）点击“编辑”里面的“虚拟网络编辑器”，然后勾选DHCP服务将IP地址分配给虚拟机，并设置子网IP(默认就好)。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405232538402.png" alt="image-20240405232538402"></p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405232545281.png" alt="image-20240405232545281"></p><p>点击NAT模式旁边的“NAT设置”，然后修改与子网IP同网段下的网关IP，就是前三位必须相同， 即192.168.30要相同，最后一位数不相同即可（其实已经自动设置好了，默认），最后点击“确认”保存设置。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405232559300.png" alt="image-20240405232559300"></p><p>然后启动虚拟机，进入网络配置文件目录：cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;，并且用 ls 命令查看是否有ifcfg-xxx名称的配置文件（ifcfg-lo除外），如果没有则说明网卡没有被识别，这种只能重装或者换个CentOS的版本。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405232612360.png" alt="image-20240405232612360"></p><p>编辑ifcfg-ens33文件：vi ifcfg-ens33。按 i 进入insert编辑模式，</p><p>将BOOTPROTO设为dhcp，将ONBOOT设为yes，</p><p>按下Esc进入命令模式输入:wq保存并退出，如果没有反应则shift+q后输入wq保存并退出。</p><p>配置完成之后输入：service network restart，重启网卡让网卡设置生效，之后就可以上网了。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405232823918.png" alt="image-20240405232823918"></p><p>输入ip addr检查一下动态分配的IP，可以发现分配的动态IP为192.168.30.128。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405232836630.png" alt="image-20240405232836630"></p><p>最后验证是否可以访问外网。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405232845324.png" alt="image-20240405232845324"></p><p><strong>重点：以上方式配置后可能仍然不能联网，请看下文</strong></p><p>若不能联网则修改NAT模式为桥接模式，设置虚拟机为桥接模式，以及虚拟网络设置也改为桥接模式，并且选择自己电脑相对应的网卡进行桥接。</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405233048573.png" alt="image-20240405233048573"></p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405233017088.png" alt="image-20240405233017088"></p><h2 id="2-Redis配置"><a href="#2-Redis配置" class="headerlink" title="2.Redis配置"></a>2.Redis配置</h2><h3 id="2-1-安装wget"><a href="#2-1-安装wget" class="headerlink" title="2.1 安装wget"></a>2.1 安装wget</h3><p>CentOS系统:</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">yum install wget -y</span></span></code></pre></div><h3 id="2-2-安装gcc"><a href="#2-2-安装gcc" class="headerlink" title="2.2 安装gcc"></a>2.2 安装gcc</h3><p>进入到<code>/usr/local</code>目录下</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">cd /usr/local</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405233527059.png" alt="image-20240405233527059"></p><p>redis是c语言开发，安装redis需要先将官网下载的源码进行编译，<strong>编译依赖gcc环境</strong></p><p>输入命令进行安装</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">yum install gcc-c++</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405233827029.png" alt="image-20240405233827029"></p><p>询问则回答y直至安装完成显示Complete</p><h3 id="2-3-下载Redis"><a href="#2-3-下载Redis" class="headerlink" title="2.3 下载Redis"></a>2.3 下载Redis</h3><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">wget http://download.redis.io/releases/redis-4.0.2.tar.gz</span></span></code></pre></div><p>下载时如果遇到卡住进度下不动了，首先用 <code>ctrl+z</code> 结束下载,注意不要用 <code>ctrl+c</code>.如果用了<code>ctrl+c</code>就是直接结束，因为wget是单线程的。用 <code>wget -c url</code> 重新下载</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234004774.png" alt="image-20240405234004774"></p><p>下载完成。输入<code>ll</code>查看是否有redis压缩包</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234100964.png" alt="image-20240405234100964"></p><p><strong>解压</strong></p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">tar -zxvf redis-4.0.2.tar.gz</span></span></code></pre></div><p>解压后再次输入ll查看是否有解压好的redis</p><h3 id="2-4-安装Redis"><a href="#2-4-安装Redis" class="headerlink" title="2.4 安装Redis"></a>2.4 安装Redis</h3><p>进入redis目录并执行make命令编译</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">cd redis-4.0.2</span></span><span class="line"><span style="color: #BABED8">make</span></span></code></pre></div><p>编译完成出现以下内容</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234236309.png" alt="image-20240405234236309"></p><p>执行安装命令</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">make PREFIX=/usr/local/redis install</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234301997.png" alt="image-20240405234301997"></p><p>安装完成后进入<code>/usr/local/redis/bin</code>目录 <em><strong>这个redis目录(redis的安装目录)是上一步命令安装自动创建的（不是redis-4.0.2目录(reids解压后的文件目录)）</strong></em></p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">cd ../redis/bin</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234332055.png" alt="image-20240405234332055"></p><p>可以看到有一些可执行文件。<br><strong>redis-server</strong> 是redis服务器<br><strong>redis-cli</strong> 是redis客户端<br>返回<code>/usr/local</code>目录后进入<code>redis-4.0.2</code></p><p>此目录下有个<strong>redis.conf</strong>文件</p><p>将该文件移动到<code>/usr/local/redis/bin</code>目录下</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">cp ./redis.conf /usr/local/redis/bin/</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234424194.png" alt="image-20240405234424194"></p><p>进入<code>/usr/local/redis/bin</code>目录</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">cd /usr/local/redis/bin</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234448181.png" alt="image-20240405234448181"></p><p>可以看到<strong>redis.conf</strong>已经移动到<code>/usr/local/redis/bin</code>目录下</p><h2 id="3-Redis启动"><a href="#3-Redis启动" class="headerlink" title="3.Redis启动"></a>3.Redis启动</h2><h3 id="3-1-启动服务器"><a href="#3-1-启动服务器" class="headerlink" title="3.1 启动服务器"></a>3.1 启动服务器</h3><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">./redis.server redis.conf</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234530719.png" alt="image-20240405234530719"></p><p>出现这个表示服务器启动成功</p><p>按下ctrl+alt+F1&#x2F;F2&#x2F;F3切换一个新命令行窗口，登录后进入&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">cd /usr/local/redis/bin</span></span></code></pre></div><h3 id="3-2-启动Redis客户端"><a href="#3-2-启动Redis客户端" class="headerlink" title="3.2 启动Redis客户端"></a>3.2 启动Redis客户端</h3><p>输入命令</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">./redis-cli</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234736381.png" alt="image-20240405234736381"></p><p>连接客户端成功<br>进行简单测试</p><p><img src="/oranfish.github.io/posts/0/VMware%E9%83%A8%E7%BD%B2Redis/image-20240405234746031.png" alt="image-20240405234746031"></p><p>至此，Redis已经安装完成了。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-初始Redis"><a href="#1-初始Redis" class="headerlink" title="1.初始Redis"></a>1.初始Redis</h2><p>Redis是一种键值型的NoSql数据库，这里有两个关键字：</p><ul><li><p>键值型</p></li><li><p>NoSql</p></li></ul><p>其中<strong>键值型</strong>，是指Redis中存储的数据都是以key、value对的形式存储，而value的形式多种多样，可以是字符串、数值、甚至json：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/6U1Rhxo.png" alt="image-20220502190959608"></p><p>而NoSql则是相对于传统关系型数据库而言，有很大差异的一种数据库。</p><h3 id="1-1-认识NoSQL"><a href="#1-1-认识NoSQL" class="headerlink" title="1.1 认识NoSQL"></a>1.1 认识NoSQL</h3><p><strong>NoSql</strong>可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为<strong>非关系型数据库</strong>。</p><h4 id="1-1-1-结构化和非结构化"><a href="#1-1-1-结构化和非结构化" class="headerlink" title="1.1.1 结构化和非结构化"></a>1.1.1 结构化和非结构化</h4><p>传统关系型数据库是结构化数据，每一张表都有严格的约束信息：字段名、字段数据类型、字段约束等等信息，插入的数据必须遵守这些约束。</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/4tUgFo6-17122364582671.png"></p><p>而NoSql则对数据库格式没有严格约束，往往形式松散，自由。</p><p>可以是键值型：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/GdqOSsj.png"></p><p>也可以是文档型：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/zBBQfcc.png"></p><p>甚至可以是图格式：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/zBnKxWf.png"></p><h4 id="1-1-2-关联和非关联"><a href="#1-1-2-关联和非关联" class="headerlink" title="1.1.2 关联和非关联"></a>1.1.2 关联和非关联</h4><p>传统数据库的表与表之间往往存在关联，例如外键。</p><p>而非关系型数据库不存在关联关系，要维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合：</p><div class="language-json"><button title="Copy code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">  id</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">  name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">张三</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">  orders</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">[</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">       id</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">       item</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">     id</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> title</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">荣耀6</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> price</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4999</span></span><span class="line"><span style="color: #BABED8">       </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">       id</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">       item</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">     id</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">20</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> title</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">小米11</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> price</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3999</span></span><span class="line"><span style="color: #BABED8">       </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">]</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h4 id="1-1-3-查询方式"><a href="#1-1-3-查询方式" class="headerlink" title="1.1.3 查询方式"></a>1.1.3 查询方式</h4><p>传统关系型数据库会基于Sql语句做查询，语法有统一标准；</p><p>而不同的非关系数据库查询语法差异极大，五花八门各种各样。</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/AzaHOTF.png"></p><h4 id="1-1-4-事务"><a href="#1-1-4-事务" class="headerlink" title="1.1.4 事务"></a>1.1.4 事务</h4><p>传统关系型数据库能满足事务ACID的原则。</p><p>而非关系型数据库往往不支持事务，或者不能严格保证ACID的特性，只能实现基本的一致性。</p><h4 id="1-1-5-总结"><a href="#1-1-5-总结" class="headerlink" title="1.1.5 总结"></a>1.1.5 总结</h4><p>除了上述四点以外，在存储方式、扩展性、查询性能上关系型与非关系型也都有着显著差异，总结如下：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/kZP40dQ.png"></p><ul><li>存储方式<ul><li>关系型数据库基于磁盘进行存储，会有大量的磁盘IO，对性能有一定影响</li><li>非关系型数据库，他们的操作更多的是依赖于内存来操作，内存的读写速度会非常快，性能自然会好一些</li></ul></li></ul><ul><li>扩展性<ul><li>关系型数据库集群模式一般是主从，主从数据一致，起到数据备份的作用，称为垂直扩展。</li><li>非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题。称为水平扩展。</li><li>关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li></ul></li></ul><h3 id="1-2-认识Redis"><a href="#1-2-认识Redis" class="headerlink" title="1.2 认识Redis"></a>1.2 认识Redis</h3><p>Redis诞生于2009年全称是<strong>Re</strong>mote  <strong>D</strong>ictionary <strong>S</strong>erver 远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p><p><strong>特征</strong>：</p><ul><li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><h3 id="1-3-安装Redis"><a href="#1-3-安装Redis" class="headerlink" title="1.3 安装Redis"></a>1.3 安装Redis</h3><p>ps：可看VMware部署Redis文档学习以下内容。</p><p>本安装教程基于Linux系统来安装Redis，此处选择的Linux版本为CentOS 7。</p><h4 id="1-3-1-依赖库"><a href="#1-3-1-依赖库" class="headerlink" title="1.3.1 依赖库"></a>1.3.1 依赖库</h4><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">yum</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">install</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-y</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">gcc</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">tcl</span></span></code></pre></div><h4 id="1-3-2-上传安装包并解压"><a href="#1-3-2-上传安装包并解压" class="headerlink" title="1.3.2 上传安装包并解压"></a>1.3.2 上传安装包并解压</h4><p>ps：此处需学习使用Xftp进行虚拟机上传Redis安装包</p><p>然后将课前资料提供的Redis安装包上传到虚拟机的任意目录：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/SyjanS5-17122372233342.png"></p><p>例如，我放到了&#x2F;usr&#x2F;local&#x2F;src 目录：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/01DTNCf-17122372233344.png"></p><p>解压缩：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">tar</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-xzf</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">redis-6.2.6.tar.gz</span></span></code></pre></div><p>解压后：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/8V6zvCD-17122372233343.png" alt="image-20211211080339076"></p><p>进入redis目录：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">cd</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">redis-6.2.6</span></span></code></pre></div><p>运行编译命令：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">make</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">make</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">install</span></span></code></pre></div><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下</p><p>该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h4 id="1-3-3-启动"><a href="#1-3-3-启动" class="headerlink" title="1.3.3 启动"></a>1.3.3 启动</h4><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h4 id="1-3-4-默认启动"><a href="#1-3-4-默认启动" class="headerlink" title="1.3.4 默认启动"></a>1.3.4 默认启动</h4><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">redis-server</span></span></code></pre></div><p>如图：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/v7xWsqC.png"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h4 id="1-3-5-指定配置启动"><a href="#1-3-5-指定配置启动" class="headerlink" title="1.3.5 指定配置启动"></a>1.3.5 指定配置启动</h4><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/image-20211211082225509.png" alt="image-20211211082225509"></p><p>我们先将这个配置文件备份一份：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">cp redis.conf redis.conf.bckas</span></span></code></pre></div><p>然后修改redis.conf文件中的一些配置：</p><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><span class="line"><span style="color: #BABED8">bind 0.0.0.0</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 守护进程，修改为yes后即可后台运行</span></span><span class="line"><span style="color: #BABED8">daemonize yes </span></span><span class="line"><span style="color: #676E95; font-style: italic"># 密码，设置后访问Redis必须输入密码</span></span><span class="line"><span style="color: #BABED8">requirepass 123321</span></span></code></pre></div><p>Redis的其它常见配置：</p><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 监听的端口</span></span><span class="line"><span style="color: #BABED8">port 6379</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><span class="line"><span style="color: #BABED8">dir .</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><span class="line"><span style="color: #BABED8">databases 1</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 设置redis能够使用的最大内存</span></span><span class="line"><span style="color: #BABED8">maxmemory 512mb</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><span class="line"><span style="color: #BABED8">logfile </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">redis.log</span><span style="color: #89DDFF">&quot;</span></span></code></pre></div><p>启动Redis：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 进入redis安装目录 </span></span><span class="line"><span style="color: #82AAFF">cd</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/usr/local/src/redis-6.2.6</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 启动</span></span><span class="line"><span style="color: #FFCB6B">redis-server</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">redis.conf</span></span></code></pre></div><p>停止服务：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><span class="line"><span style="color: #FFCB6B">redis-cli</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-u</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">123321</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">shutdown</span></span></code></pre></div><h4 id="1-3-6-开机自启"><a href="#1-3-6-开机自启" class="headerlink" title="1.3.6 开机自启"></a>1.3.6 开机自启</h4><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">vi</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">/etc/systemd/system/redis.service</span></span></code></pre></div><p>内容如下：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">[Unit]</span></span><span class="line"><span style="color: #babed8">Description=redis-server</span></span><span class="line"><span style="color: #babed8">After=network.target</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">[Service]</span></span><span class="line"><span style="color: #babed8">Type=forking</span></span><span class="line"><span style="color: #babed8">ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span></span><span class="line"><span style="color: #babed8">PrivateTmp=true</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">[Install]</span></span><span class="line"><span style="color: #babed8">WantedBy=multi-user.target</span></span></code></pre></div><p>然后重载系统服务：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">daemon-reload</span></span></code></pre></div><p>现在，我们可以用下面这组命令来操作redis了：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 启动</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">start</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">redis</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 停止</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">stop</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">redis</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 重启</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">restart</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">redis</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 查看状态</span></span><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">status</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">redis</span></span></code></pre></div><p>执行下面的命令，可以让redis开机自启：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">systemctl</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">enable</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">redis</span></span></code></pre></div><h3 id="1-4-Redis桌面客户端"><a href="#1-4-Redis桌面客户端" class="headerlink" title="1.4 Redis桌面客户端"></a>1.4 Redis桌面客户端</h3><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h4 id="1-4-1-Redis命令行客户端"><a href="#1-4-1-Redis命令行客户端" class="headerlink" title="1.4.1 Redis命令行客户端"></a>1.4.1 Redis命令行客户端</h4><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">redis-cli</span><span style="color: #BABED8"> [options] </span><span style="color: #89DDFF">[</span><span style="color: #BABED8">commonds</span><span style="color: #89DDFF">]</span></span></code></pre></div><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/OYYWPNo.png"></p><h4 id="1-4-2-图形化桌面客户端"><a href="#1-4-2-图形化桌面客户端" class="headerlink" title="1.4.2 图形化桌面客户端"></a>1.4.2 图形化桌面客户端</h4><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><p>请灵活搜索。</p><h4 id="1-4-3-安装"><a href="#1-4-3-安装" class="headerlink" title="1.4.3 安装"></a>1.4.3 安装</h4><p>解压缩后，运行安装程序即可安装：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/hguGHbX.png"></p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/hwK5LQ8.png"></p><p>双击即可运行：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/6hUqslY.png"></p><h4 id="1-4-4-建立连接"><a href="#1-4-4-建立连接" class="headerlink" title="1.4.4 建立连接"></a>1.4.4 建立连接</h4><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/9qTGyoN.png"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/DshNnKC.png"></p><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/A2cOm7Q.png"></p><p>点击即可建立连接了。</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/ja8Fd9s.png"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 选择 0号库</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">select</span><span style="color: #BABED8"> 0</span></span></code></pre></div><h2 id="2-Redis常见命令"><a href="#2-Redis常见命令" class="headerlink" title="2.Redis常见命令"></a>2.Redis常见命令</h2><p>Redis是典型的key-value数据库，key一般是字符串，而value包含很多不同的数据类型：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/8tli2o9.png"></p><p>Redis为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ <a href="https://redis.io/commands">https://redis.io/commands </a>）可以查看到不同的命令。</p><p>不同类型的命令称为一个group，我们也可以通过help命令来查看各种不同group的命令：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/suevOIR.png"></p><h3 id="2-1-Redis通用命令"><a href="#2-1-Redis通用命令" class="headerlink" title="2.1 Redis通用命令"></a>2.1 Redis通用命令</h3><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li></ul><p>通过help [command] 可以查看一个命令的具体用法，例如：</p><div class="language-sh"><button title="Copy code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 查看keys命令的帮助信息：</span></span><span class="line"><span style="color: #FFCB6B">127.0.0.1:6379&gt;</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">help</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">keys</span></span><span class="line"></span><span class="line"><span style="color: #FFCB6B">KEYS</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">pattern</span></span><span class="line"><span style="color: #FFCB6B">summary:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">Find</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">all</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">keys</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">matching</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">the</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">given</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">pattern</span></span><span class="line"><span style="color: #FFCB6B">since:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1.0</span><span style="color: #C3E88D">.0</span></span><span class="line"><span style="color: #FFCB6B">group:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">generic</span></span></code></pre></div><h3 id="2-2-String类型"><a href="#2-2-String类型" class="headerlink" title="2.2 String类型"></a>2.2 String类型</h3><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增、自减操作</li><li>float：浮点类型，可以做自增、自减操作</li></ul><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/VZqpv73.png"></p><h4 id="2-2-1-String的常见命令"><a href="#2-2-1-String的常见命令" class="headerlink" title="2.2.1 String的常见命令"></a>2.2.1 String的常见命令</h4><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><h4 id="2-2-2-Key结构"><a href="#2-2-2-Key结构" class="headerlink" title="2.2.2 Key结构"></a>2.2.2 Key结构</h4><p>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</p><p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">    项目名:业务名:类型:id</span></span></code></pre></div><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。这样以来，我们就可以把不同类型的数据区分开了。从而避免了key的冲突问题。</p><p>例如我们的项目名称叫 heima，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li><p>user相关的key：<strong>heima:user:1</strong></p></li><li><p>product相关的key：<strong>heima:product:1</strong></p></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>heima:user:1</td><td>{“id”:1,  “name”: “Jack”, “age”: 21}</td></tr><tr><td>heima:product:1</td><td>{“id”:1,  “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><p>并且，在Redis的桌面客户端中，还会以相同前缀作为层级结构，让数据看起来层次分明，关系清晰：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/InWMfeD.png"></p><h3 id="2-3-Hash类型"><a href="#2-3-Hash类型" class="headerlink" title="2.3 Hash类型"></a>2.3 Hash类型</h3><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/x2zDBjf.png"></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/VF2EPt0.png"></p><p>Hash的常见命令有：</p><ul><li><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li><p>HGET key field：获取一个hash类型key的field的值</p></li><li><p>HMSET：批量添加多个hash类型key的field的值</p></li><li><p>HMGET：批量获取多个hash类型key的field的值</p></li><li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><h3 id="2-4-List类型"><a href="#2-4-List类型" class="headerlink" title="2.4 List类型"></a>2.4 List类型</h3><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p>List的常见命令有：</p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><h3 id="2-5-Set类型"><a href="#2-5-Set类型" class="headerlink" title="2.5 Set类型"></a>2.5 Set类型</h3><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li><p>无序</p></li><li><p>元素不可重复</p></li><li><p>查找快</p></li><li><p>支持交集、并集、差集等功能</p></li></ul><p>Set的常见命令有：</p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li><li>SDIFF key1 key2 … ：求key1与key2的不同</li></ul><h3 id="2-6-SortedSet类型"><a href="#2-6-SortedSet类型" class="headerlink" title="2.6 SortedSet类型"></a>2.6 SortedSet类型</h3><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><p><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</p></li><li><p><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</p></li></ul></blockquote><h2 id="3-Redis的Java客户端"><a href="#3-Redis的Java客户端" class="headerlink" title="3.Redis的Java客户端"></a>3.Redis的Java客户端</h2><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a></p><p>标记为*的就是推荐使用的java客户端，包括：</p><ul><li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</li><li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map、Queue等，而且支持跨进程的同步机制：Lock、Semaphore等待，比较适合用来实现特殊的功能需求。</li></ul><h3 id="3-1-Jedis客户端"><a href="#3-1-Jedis客户端" class="headerlink" title="3.1 Jedis客户端"></a>3.1 Jedis客户端</h3><p>Jedis的官网地址： <a href="https://github.com/redis/jedis">https://github.com/redis/jedis</a></p><h4 id="3-1-1-快速入门"><a href="#3-1-1-快速入门" class="headerlink" title="3.1.1 快速入门"></a>3.1.1 快速入门</h4><p>1）引入依赖：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">&lt;!--jedis--&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">redis.clients</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">jedis</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">3.7.0</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #676E95; font-style: italic">&lt;!--单元测试--&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.junit.jupiter</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">junit-jupiter</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">5.7.0</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">scope</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">test</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">scope</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>2）建立连接</p><p>新建一个单元测试类，内容如下：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Jedis</span><span style="color: #BABED8"> jedis</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">BeforeEach</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setUp</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 1.建立连接</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// jedis = new Jedis(&quot;192.168.150.101&quot;, 6379);</span></span><span class="line"><span style="color: #BABED8">    jedis </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> JedisConnectionFactory</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getJedis</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 2.设置密码</span></span><span class="line"><span style="color: #BABED8">    jedis</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">auth</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">123321</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 3.选择库</span></span><span class="line"><span style="color: #BABED8">    jedis</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">select</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>3）测试：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testString</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 存入数据</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> jedis</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">虎哥</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">result = </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> result</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 获取数据</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> jedis</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name = </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testHash</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 插入hash数据</span></span><span class="line"><span style="color: #BABED8">    jedis</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hset</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">user:1</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Jack</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    jedis</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hset</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">user:1</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">21</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 获取</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">Map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> map </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> jedis</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hgetAll</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">user:1</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">map</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>4）释放资源</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">AfterEach</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">tearDown</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">jedis </span><span style="color: #89DDFF">!=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        jedis</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">close</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h4 id="3-1-2-连接池"><a href="#3-1-2-连接池" class="headerlink" title="3.1.2 连接池"></a>3.1.2 连接池</h4><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">package</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">heima</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">jedis</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">util</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">redis</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">clients</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">jedis</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">*</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">JedisConnectionFactory</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">JedisPool</span><span style="color: #BABED8"> jedisPool</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 配置连接池</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">JedisPoolConfig</span><span style="color: #BABED8"> poolConfig </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">JedisPoolConfig</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        poolConfig</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setMaxTotal</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        poolConfig</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setMaxIdle</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        poolConfig</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setMinIdle</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        poolConfig</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setMaxWaitMillis</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 创建连接池对象，参数：连接池配置、服务端ip、服务端端口、超时时间、密码</span></span><span class="line"><span style="color: #BABED8">        jedisPool </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">JedisPool</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">poolConfig</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">192.168.150.101</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">6379</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">123321</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Jedis</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getJedis</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> jedisPool</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getResource</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h3 id="3-2-SpringDataRedis客户端"><a href="#3-2-SpringDataRedis客户端" class="headerlink" title="3.2 SpringDataRedis客户端"></a>3.2 SpringDataRedis客户端</h3><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/UFlNIV0.png"></p><h4 id="3-2-1-快速入门"><a href="#3-2-1-快速入门" class="headerlink" title="3.2.1 快速入门"></a>3.2.1 快速入门</h4><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单。</p><p>首先，新建一个maven项目，然后按照下面步骤执行：</p><p>1）引入依赖</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;?</span><span style="color: #F07178">xml</span><span style="color: #C792EA"> version</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA"> encoding</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">UTF-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">?&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">project</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">xmlns</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">http://maven.apache.org/POM/4.0.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">xmlns</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">xsi</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">http://www.w3.org/2001/XMLSchema-instance</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #89DDFF">         </span><span style="color: #C792EA">xsi</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">schemaLocation</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">modelVersion</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">4.0.0</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">modelVersion</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.springframework.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">spring-boot-starter-parent</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">2.5.7</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">/&gt;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">&lt;!-- lookup parent from repository --&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.heima</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">redis-demo</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">0.0.1-SNAPSHOT</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">name</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">redis-demo</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">name</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">description</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">Demo project for Spring Boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">description</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">properties</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">java.version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.8</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">java.version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">properties</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #676E95; font-style: italic">&lt;!--redis依赖--&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.springframework.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">spring-boot-starter-data-redis</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #676E95; font-style: italic">&lt;!--common-pool--&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.apache.commons</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">commons-pool2</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #676E95; font-style: italic">&lt;!--Jackson依赖--&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.fasterxml.jackson.core</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">jackson-databind</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.projectlombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">lombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">optional</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">true</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">optional</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.springframework.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">spring-boot-starter-test</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">scope</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">test</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">scope</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">build</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">plugins</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">plugin</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.springframework.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">spring-boot-maven-plugin</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">configuration</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">excludes</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">exclude</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.projectlombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">lombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">exclude</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">excludes</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">configuration</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">plugin</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">plugins</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">build</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">project</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>2）配置Redis</p><div class="language-yaml"><button title="Copy code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">spring</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">redis</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">host</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">192.168.150.101</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">6379</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">password</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">123321</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">lettuce</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F07178">pool</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #F07178">max-active</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #F07178">max-idle</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #F07178">min-idle</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #F07178">max-wait</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">100ms</span></span></code></pre></div><p>3）注入RedisTemplate</p><p>因为有了SpringBoot的自动装配，我们可以拿来就用：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RedisStringTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">RedisTemplate</span><span style="color: #BABED8"> redisTemplate</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>4）编写测试</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RedisStringTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">RedisTemplate</span><span style="color: #BABED8"> edisTemplate</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testString</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 写入一条String数据</span></span><span class="line"><span style="color: #BABED8">        redisTemplate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">opsForValue</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">set</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">虎哥</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 获取string数据</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> name </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> stringRedisTemplate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">opsForValue</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name = </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h4 id="3-2-2-自定义序列化"><a href="#3-2-2-自定义序列化" class="headerlink" title="3.2.2 自定义序列化"></a>3.2.2 自定义序列化</h4><p>RedisTemplate可以接收任意Object作为值写入Redis：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/OEMcbuu.png"></p><p>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/5FjtWk5.png"></p><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RedisConfig</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">RedisTemplate</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">redisTemplate</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">RedisConnectionFactory</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">connectionFactory</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 创建RedisTemplate对象</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">RedisTemplate</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> template </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #C792EA">RedisTemplate</span><span style="color: #89DDFF">&lt;&gt;();</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 设置连接工厂</span></span><span class="line"><span style="color: #BABED8">        template</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setConnectionFactory</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">connectionFactory</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 创建JSON序列化工具</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">GenericJackson2JsonRedisSerializer</span><span style="color: #BABED8"> jsonRedisSerializer </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">                                        </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">GenericJackson2JsonRedisSerializer</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 设置Key的序列化</span></span><span class="line"><span style="color: #BABED8">        template</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setKeySerializer</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">RedisSerializer</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">string</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        template</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setHashKeySerializer</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">RedisSerializer</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">string</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 设置Value的序列化</span></span><span class="line"><span style="color: #BABED8">        template</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setValueSerializer</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">jsonRedisSerializer</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        template</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setHashValueSerializer</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">jsonRedisSerializer</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 返回</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> template</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>这里采用了JSON序列化来代替默认的JDK序列化方式。最终结果如图：</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/XOAq3cN.png"></p><p>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</p><h4 id="3-2-3-StringRedisTemplate"><a href="#3-2-3-StringRedisTemplate" class="headerlink" title="3.2.3 StringRedisTemplate"></a>3.2.3 StringRedisTemplate</h4><p>为了节省内存空间，我们可以不使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/Ip9TKSY.png"></p><p>因为存入和读取时的序列化及反序列化都是我们自己实现的，SpringDataRedis就不会将class信息写入Redis了。</p><p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p><p><img src="/oranfish.github.io/posts/0/Redis%E5%85%A5%E9%97%A8/zXH6Qn6.png"></p><p>省去了我们自定义RedisTemplate的序列化方式的步骤，而是直接使用：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">StringRedisTemplate</span><span style="color: #BABED8"> stringRedisTemplate</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #676E95; font-style: italic">// JSON序列化工具</span></span><span class="line"><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">final</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ObjectMapper</span><span style="color: #BABED8"> mapper </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">ObjectMapper</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testSaveUser</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> throws JsonProcessingException </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 创建对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">User</span><span style="color: #BABED8"> user </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">User</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">虎哥</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">21</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 手动序列化</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> json </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> mapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">writeValueAsString</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">user</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 写入数据</span></span><span class="line"><span style="color: #BABED8">    stringRedisTemplate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">opsForValue</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">set</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">user:200</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> json</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 获取数据</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> jsonUser </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> stringRedisTemplate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">opsForValue</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">user:200</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 手动反序列化</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">User</span><span style="color: #BABED8"> user1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> mapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">readValue</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">jsonUser</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> User</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">user1 = </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> user1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>RedisTemplate的两种序列化实践方案：</p><ul><li><p>方案一：</p><ul><li>自定义RedisTemplate</li><li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ul></li><li><p>方案二：</p><ul><li>使用StringRedisTemplate</li><li>写入Redis时，手动把对象序列化为JSON</li><li>读取Redis时，手动把读取到的JSON反序列化为对象</li></ul></li></ul><h4 id="3-2-4-Hash结构操作"><a href="#3-2-4-Hash结构操作" class="headerlink" title="3.2.4 Hash结构操作"></a>3.2.4 Hash结构操作</h4><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RedisStringTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">StringRedisTemplate</span><span style="color: #BABED8"> stringRedisTemplate</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testHash</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        stringRedisTemplate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">opsForHash</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">put</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">user:400</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">虎哥</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        stringRedisTemplate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">opsForHash</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">put</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">user:400</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">21</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Object</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> entries </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> stringRedisTemplate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">opsForHash</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">entries</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">user:400</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">entries = </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> entries</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算竞常用STL</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>**C++ 标准模板库 (STL, Standard Template Library)**：包含一些常用数据结构与算法的模板的 C++ 软件库。其包含四个组件——算法 (Algorithms)、容器 (Containers)、仿函数 (Functors)、迭代器 (Iterators).</p><span id="more"></span><p>示例：</p><ul><li>算法：<code>sort(a.begin(), a.end())</code></li><li>容器：<code>priority_queue&lt;int&gt; pque</code></li><li>仿函数：<code>greater&lt;int&gt;()</code></li><li>迭代器：<code>vector&lt;int&gt;::iterator it = a.begin()</code></li></ul><p>STL 作为一个封装良好，性能合格的 C++ 标准库，在算法竞赛中运用极其常见。灵活且正确使用 STL 可以节省非常多解题时间，这一点不仅是由于可以直接调用，还是因为它封装良好，可以让代码的可读性变高，解题思路更清晰，调试过程 <del>往往</del> 更顺利。</p><p>不过 STL 毕竟使用了很多复杂的结构来实现丰富的功能，它的效率往往是比不上自己手搓针对特定题目的数据结构与算法的。因此，STL 的使用相当于使用更长的运行时间换取更高的编程效率。因此，在实际比赛中要权衡 STL 的利弊，不过这一点就得靠经验了。</p><p>接下来，我会分享在算法竞赛中常用的 STL 容器和算法，对于函数和迭代器，就不着重展开讲了。</p><h1 id="2-常用容器"><a href="#2-常用容器" class="headerlink" title="2 常用容器"></a>2 常用容器</h1><h2 id="2-1-内容总览"><a href="#2-1-内容总览" class="headerlink" title="2.1 内容总览"></a>2.1 内容总览</h2><p>打勾的是本次将会详细讲解的，加粗的是算法竞赛中有必要学习的。</p><ul><li><p>顺序容器</p><ul><li><p><input disabled type="checkbox"> <strong>array</strong></p></li><li><p><input checked disabled type="checkbox"> <strong>vector</strong></p></li><li><p><input disabled type="checkbox"> <strong>deque</strong></p></li><li><p><input disabled type="checkbox"> forward_list</p></li><li><p><input disabled type="checkbox"> <strong>list</strong></p></li></ul></li><li><p>关联容器</p><ul><li><input checked disabled type="checkbox"> <strong>set</strong></li><li><input checked disabled type="checkbox"> <strong>map</strong></li><li><input disabled type="checkbox"> <strong>multiset</strong></li><li><input disabled type="checkbox"> <strong>multimap</strong></li></ul></li><li><p>无序关联容器</p><ul><li><input disabled type="checkbox"> <strong>unordered_set</strong></li><li><input disabled type="checkbox"> <strong>unordered_map</strong></li><li><input disabled type="checkbox"> <strong>unordered_multiset</strong></li><li><input disabled type="checkbox"> <strong>unordered_multimap</strong></li></ul></li><li><p>容器适配器</p><ul><li><input checked disabled type="checkbox"> <strong>stack</strong></li><li><input checked disabled type="checkbox"> <strong>queue</strong></li><li><input checked disabled type="checkbox"> <strong>priority_queue</strong></li><li><input disabled type="checkbox"> flat_set</li><li><input disabled type="checkbox"> flat_map</li><li><input disabled type="checkbox"> flat_multiset</li><li><input disabled type="checkbox"> flat_multimap</li></ul></li><li><p>字符串</p><ul><li><input checked disabled type="checkbox"> <strong>string</strong> (basic_string&lt;char&gt;)</li></ul></li><li><p>对与元组</p><ul><li><input checked disabled type="checkbox"> <strong>pair</strong></li><li><input disabled type="checkbox"> <strong>tuple</strong></li></ul></li></ul><h2 id="2-2-向量-vector"><a href="#2-2-向量-vector" class="headerlink" title="2.2 向量 vector"></a>2.2 向量 <a href="https://zh.cppreference.com/w/cpp/container/vector">vector</a></h2><p><strong><code>#include &lt;vector&gt;</code></strong></p><p>连续的顺序的储存结构（和数组一样的类别），但是有长度可变的特性。</p><h3 id="2-2-1-常用方法"><a href="#2-2-1-常用方法" class="headerlink" title="2.2.1 常用方法"></a>2.2.1 常用方法</h3><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><p><strong><code>vector&lt;类型&gt; arr(长度, [初值])</code></strong></p><p>时间复杂度：$O(n)$</p><p>常用的一维和二维数组构造示例，高维也是一样的（就是会有点长）.</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">         // 构造int数组</span></span><span class="line"><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">arr</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">    // 构造初始长100的int数组</span></span><span class="line"><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">arr</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic"> // 构造初始长100的int数组，初值为1</span></span><span class="line"></span><span class="line"><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">mat</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">());</span><span style="color: #676E95; font-style: italic">       // 构造初始100行，不指定列数的二维数组</span></span><span class="line"><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">mat</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">666</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">))</span><span style="color: #676E95; font-style: italic"> // 构造初始100行，初始666列的二维数组，初值为-1</span></span></code></pre></div><p>构造二维数组的奇葩写法，千万别用：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">];</span><span style="color: #676E95; font-style: italic">         // 正确，构造初始100行，不指定列数的二维数组，可用于链式前向星存图</span></span><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">](</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic"> // 语法错误！</span></span><span class="line"><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">arr</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)[</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">];</span><span style="color: #676E95; font-style: italic"> // 语法错误！</span></span><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;!--</span><span style="color: #BABED8">swig￼</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">--&gt;;</span><span style="color: #676E95; font-style: italic"> // 正确但奇葩，使用列表初始化</span></span></code></pre></div><h4 id="尾接-尾删"><a href="#尾接-尾删" class="headerlink" title="尾接 &amp; 尾删"></a>尾接 &amp; 尾删</h4><ul><li>**<code>.push_back(元素)</code>**：在 vector 尾接一个元素，数组长度 $+1$.</li><li>**<code>.pop_back()</code>**：删除 vector 尾部的一个元素，数组长度 $-1$</li></ul><p>时间复杂度：均摊 $O(1)$</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">// init: arr = []</span></span><span class="line"><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push_back</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #676E95; font-style: italic">// after: arr = [1]</span></span><span class="line"><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push_back</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #676E95; font-style: italic">// after: arr = [1, 2]</span></span><span class="line"><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop_back</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #676E95; font-style: italic">// after: arr = [1]</span></span><span class="line"><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop_back</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #676E95; font-style: italic">// after: arr = []</span></span></code></pre></div><h4 id="中括号运算符"><a href="#中括号运算符" class="headerlink" title="中括号运算符"></a>中括号运算符</h4><p>和一般数组一样的作用</p><p>时间复杂度：$O(1)$</p><h4 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h4><p><strong><code>.size()</code></strong></p><p>获取当前 vector 的长度</p><p>时间复杂度：$O(1)$</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">size</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">i</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><h4 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h4><p><strong><code>.clear()</code></strong></p><p>清空 vector</p><p>时间复杂度：$O(n)$</p><h4 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h4><p><strong><code>.empty()</code></strong></p><p>如果是空返回 <code>true</code> 反之返回 <code>false</code>.</p><p>时间复杂度：$O(1)$</p><h4 id="改变长度"><a href="#改变长度" class="headerlink" title="改变长度"></a>改变长度</h4><p><strong><code>.resize(新长度, [默认值])</code></strong></p><p>修改 vector 的长度</p><ul><li>如果是缩短，则删除多余的值</li><li>如果是扩大，且指定了默认值，则新元素均为默认值<strong>（旧元素不变）</strong></li></ul><p>时间复杂度：$O(n)$</p><h3 id="2-2-2-适用情形"><a href="#2-2-2-适用情形" class="headerlink" title="2.2.2 适用情形"></a>2.2.2 适用情形</h3><p>一般情况 <code>vector</code> 可以替换掉普通数组，除非该题卡常。</p><p>有些情况普通数组没法解决：$n\times m$ 的矩阵，$1\leq n,m\leq 10^6$ 且 $n\times m \leq 10^6$</p><ul><li>如果用普通数组 <code>int mat[1000010][1000010]</code>，浪费内存，会导致 MLE。</li><li>如果使用 <code>vector&lt;vector&lt;int&gt;&gt; mat(n + 10, vector&lt;int&gt; (m + 10))</code>，完美解决该问题。</li></ul><p>另外，<code>vector</code> 的数据储存在堆空间中，不会爆栈。</p><h3 id="2-2-3-注意事项"><a href="#2-2-3-注意事项" class="headerlink" title="2.2.3 注意事项"></a>2.2.3 注意事项</h3><h4 id="提前指定长度"><a href="#提前指定长度" class="headerlink" title="提前指定长度"></a>提前指定长度</h4><p>如果长度已经确定，那么应当直接在构造函数指定长度，而不是一个一个 <code>.push_back()</code>. 因为 <code>vector</code> 额外内存耗尽后的重分配是有时间开销的，直接指定长度就不会出现重分配了。</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">// 优化前: 522ms</span></span><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1e8</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span></span><span class="line"><span style="color: #BABED8">    a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push_back</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">i</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #676E95; font-style: italic">// 优化后: 259ms</span></span><span class="line"><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">a</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1e8</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">size</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span></span><span class="line"><span style="color: #BABED8">    a</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">i</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">;</span></span></code></pre></div><h4 id="当心-size-t-溢出"><a href="#当心-size-t-溢出" class="headerlink" title="当心 size_t 溢出"></a>当心 size_t 溢出</h4><p>vector 获取长度的方法 <code>.size()</code> 返回值类型为 <code>size_t</code>，通常 OJ 平台使用的是 32 位编译器（有些平台例如 cf 可选 64 位），那么该类型范围为 $[0,2^{32})$.</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">a</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">65536</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #C792EA">long</span><span style="color: #BABED8"> </span><span style="color: #C792EA">long</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">size</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">size</span><span style="color: #89DDFF">();</span><span style="color: #676E95; font-style: italic"> // 直接溢出变成0了</span></span></code></pre></div><h2 id="2-3-栈-stack"><a href="#2-3-栈-stack" class="headerlink" title="2.3 栈 stack"></a>2.3 栈 <a href="https://zh.cppreference.com/w/cpp/container/stack">stack</a></h2><p><strong><code>#include &lt;stack&gt;</code></strong></p><p>通过二次封装双端队列 (deque) 容器，实现先进后出的栈数据结构。</p><h3 id="2-3-1-常用方法"><a href="#2-3-1-常用方法" class="headerlink" title="2.3.1 常用方法"></a>2.3.1 常用方法</h3><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>构造</td><td><code>stack&lt;类型&gt; stk</code></td><td><code>stack&lt;int&gt; stk;</code></td></tr><tr><td>进栈</td><td><code>.push(元素)</code></td><td><code>stk.push(1);</code></td></tr><tr><td>出栈</td><td><code>.pop()</code></td><td><code>stk.pop();</code></td></tr><tr><td>取栈顶</td><td><code>.top()</code></td><td><code>int a = stk.top();</code></td></tr><tr><td>查看大小 &#x2F; 清空 &#x2F; 判空</td><td>略</td><td>略</td></tr></tbody></table><h3 id="2-3-2-适用情形"><a href="#2-3-2-适用情形" class="headerlink" title="2.3.2 适用情形"></a>2.3.2 适用情形</h3><p>如果不卡常的话，就可以直接用它而不需要手写栈了。</p><p>另外，vector 也可以当栈用，vector 的 <code>.back()</code> 取尾部元素，就相当于取栈顶，<code>.push_back()</code> 相当于进栈，<code>.pop_back()</code> 相当于出栈。</p><h3 id="2-3-3-注意事项"><a href="#2-3-3-注意事项" class="headerlink" title="2.3.3 注意事项"></a>2.3.3 注意事项</h3><p>不可访问内部元素！<strong>下面都是错误用法</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> stk</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">size</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> stk</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">i</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">auto</span><span style="color: #BABED8"> ele </span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> stk</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> stk </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><h2 id="2-4-队列-queue"><a href="#2-4-队列-queue" class="headerlink" title="2.4 队列 queue"></a>2.4 队列 <a href="https://zh.cppreference.com/w/cpp/container/queue">queue</a></h2><p><strong><code>#include &lt;queue&gt;</code></strong></p><p>通过二次封装双端队列 (deque) 容器，实现先进先出的队列数据结构。</p><h3 id="2-4-1-常用方法"><a href="#2-4-1-常用方法" class="headerlink" title="2.4.1 常用方法"></a>2.4.1 常用方法</h3><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>构造</td><td><code>queue&lt;类型&gt; que</code></td><td><code>queue&lt;int&gt; que;</code></td></tr><tr><td>进队</td><td><code>.push(元素)</code></td><td><code>que.push(1);</code></td></tr><tr><td>出队</td><td><code>.pop()</code></td><td><code>que.pop();</code></td></tr><tr><td>取队首</td><td><code>.front()</code></td><td><code>int a = que.front();</code></td></tr><tr><td>取队尾</td><td><code>.back()</code></td><td><code>int a = que.back();</code></td></tr><tr><td>查看大小 &#x2F; 清空 &#x2F; 判空</td><td>略</td><td>略</td></tr></tbody></table><h3 id="2-4-2-适用情形"><a href="#2-4-2-适用情形" class="headerlink" title="2.4.2 适用情形"></a>2.4.2 适用情形</h3><p>如果不卡常的话，就可以直接用它而不需要手写队列了。</p><h3 id="2-4-3-注意事项"><a href="#2-4-3-注意事项" class="headerlink" title="2.4.3 注意事项"></a>2.4.3 注意事项</h3><p>不可访问内部元素！<strong>下面都是错误用法</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> que</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">size</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> que</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">i</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">auto</span><span style="color: #BABED8"> ele </span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> que</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> ele </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><h2 id="2-5-优先队列-priority-queue"><a href="#2-5-优先队列-priority-queue" class="headerlink" title="2.5 优先队列 priority_queue"></a>2.5 优先队列 <a href="https://zh.cppreference.com/w/cpp/container/priority_queue">priority_queue</a></h2><p><strong><code>#include &lt;queue&gt;</code></strong></p><p>提供常数时间的最大元素查找，对数时间的插入与提取，底层原理是二叉堆。</p><h3 id="2-5-1-常用方法"><a href="#2-5-1-常用方法" class="headerlink" title="2.5.1 常用方法"></a>2.5.1 常用方法</h3><h4 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h4><p><strong><code>priority_queue&lt;类型, 容器, 比较器&gt; pque</code></strong></p><ul><li>类型：要储存的数据类型</li><li>容器：储存数据的底层容器，默认为 <code>vector&lt;类型&gt;</code>，竞赛中保持默认即可</li><li>比较器：比较大小使用的比较器，默认为 <code>less&lt;类型&gt;</code>，可自定义</li></ul><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">priority_queue</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> pque1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">                            // 储存int的大顶堆</span></span><span class="line"><span style="color: #BABED8">priority_queue</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;,</span><span style="color: #BABED8"> greater</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;&gt;</span><span style="color: #BABED8"> pque2</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic"> // 储存int的小顶堆</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 &#x2F; lambda 表达式），在此就不展开讲了。如果想要了解，可以查阅 cppreference 中的代码示例。</p></blockquote><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>进堆</td><td><code>.push(元素)</code></td><td><code>que.push(1);</code></td></tr><tr><td>出堆</td><td><code>.pop()</code></td><td><code>que.pop();</code></td></tr><tr><td>取堆顶</td><td><code>.top()</code></td><td><code>int a = que.top();</code></td></tr><tr><td>查看大小 &#x2F; 判空</td><td>略</td><td>略</td></tr></tbody></table><p>进出队复杂度 $O(\log n)$，取堆顶 $O(1)$.</p><h3 id="2-5-2-适用情形"><a href="#2-5-2-适用情形" class="headerlink" title="2.5.2 适用情形"></a>2.5.2 适用情形</h3><p>持续维护元素的有序性：每次向队列插入大小不定的元素，或者每次从队列里取出大小最小&#x2F;最大的元素，元素数量 $n$，插入操作数量 $k$.</p><ul><li>每次插入后进行快速排序：$k\cdot n\log n$</li><li>使用优先队列维护：$k\cdot\log n$</li></ul><h3 id="2-5-3-注意事项"><a href="#2-5-3-注意事项" class="headerlink" title="2.5.3 注意事项"></a>2.5.3 注意事项</h3><h4 id="仅堆顶可读"><a href="#仅堆顶可读" class="headerlink" title="仅堆顶可读"></a>仅堆顶可读</h4><p>只可访问堆顶，其他元素都无法读取到。<strong>下面是错误用法：</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> pque</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><h4 id="所有元素不可写"><a href="#所有元素不可写" class="headerlink" title="所有元素不可写"></a>所有元素不可写</h4><p>堆中所有元素是不可修改的。<strong>下面是错误用法：</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">pque</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">pque</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">top</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span></code></pre></div><p>如果你恰好要修改的是堆顶元素，那么是可以完成的：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> tp </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> pque</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">top</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">pque</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">pque</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">tp </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span></code></pre></div><h2 id="2-6-集合-set"><a href="#2-6-集合-set" class="headerlink" title="2.6 集合 set"></a>2.6 集合 <a href="https://zh.cppreference.com/w/cpp/container/set">set</a></h2><p><strong><code>#include &lt;set&gt;</code></strong></p><p>提供对数时间的插入、删除、查找的集合数据结构。底层原理是红黑树。</p><table><thead><tr><th>集合三要素</th><th>解释</th><th>set</th><th>multiset</th><th>unordered_set</th></tr></thead><tbody><tr><td>确定性</td><td>一个元素要么在集合中，要么不在</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td>互异性</td><td>一个元素仅可以在集合中出现一次</td><td>✔</td><td>❌（任意次）</td><td>✔</td></tr><tr><td>无序性</td><td>集合中的元素是没有顺序的</td><td>❌（从小到大）</td><td>❌（从小到大）</td><td>✔</td></tr></tbody></table><h3 id="2-6-1-常用方法"><a href="#2-6-1-常用方法" class="headerlink" title="2.6.1 常用方法"></a>2.6.1 常用方法</h3><h4 id="构造-2"><a href="#构造-2" class="headerlink" title="构造"></a>构造</h4><p><strong><code>set&lt;类型, 比较器&gt; st</code></strong></p><ul><li>类型：要储存的数据类型</li><li>比较器：比较大小使用的比较器，默认为 <code>less&lt;类型&gt;</code>，可自定义</li></ul><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">set</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> st1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">               // 储存int的集合（从小到大）</span></span><span class="line"><span style="color: #BABED8">set</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> greater</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;&gt;</span><span style="color: #BABED8"> st2</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic"> // 储存int的集合（从大到小）</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 &#x2F; lambda 表达式），在此就不展开讲了。</p></blockquote><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>可使用迭代器进行遍历：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">set</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;::</span><span style="color: #BABED8">iterator it </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> st</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">!=</span><span style="color: #BABED8"> st</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">++</span><span style="color: #BABED8">it</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8">it </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><p>基于范围的循环（C++ 11）：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">auto</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&amp;</span><span style="color: #BABED8">ele </span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> st</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> ele </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>插入元素</td><td><code>.insert(元素)</code></td><td><code>st.insert(1);</code></td></tr><tr><td>删除元素</td><td><code>.erase(元素)</code></td><td><code>st.erase(2);</code></td></tr><tr><td>查找元素</td><td><code>.find(元素)</code></td><td><code>auto it = st.find(1);</code></td></tr><tr><td>判断元素是否存在</td><td><code>.count(元素)</code></td><td><code>st.count(3);</code></td></tr><tr><td>查看大小 &#x2F; 清空 &#x2F; 判空</td><td>略</td><td>略</td></tr></tbody></table><p>增删查时间复杂度均为 $O(\log n)$</p><h3 id="2-6-2-适用情形"><a href="#2-6-2-适用情形" class="headerlink" title="2.6.2 适用情形"></a>2.6.2 适用情形</h3><ul><li>元素去重：$[1,1,3,2,4,4]\to[1,2,3,4]$</li><li>维护顺序：$[1,5,3,7,9]\to[1,3,5,7,9]$</li><li>元素是否出现过：元素大小 $[-10^{18},10^{18}]$，元素数量 $10^6$，vis 数组无法实现，通过 set 可以完成。</li></ul><h3 id="2-6-3-注意事项"><a href="#2-6-3-注意事项" class="headerlink" title="2.6.3 注意事项"></a>2.6.3 注意事项</h3><h4 id="不存在下标索引"><a href="#不存在下标索引" class="headerlink" title="不存在下标索引"></a>不存在下标索引</h4><p>set 虽说可遍历，但仅可使用迭代器进行遍历，它不存在下标这一概念，无法通过下标访问到数据。<strong>下面是错误用法：</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> st</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><h4 id="元素只读"><a href="#元素只读" class="headerlink" title="元素只读"></a>元素只读</h4><p>set 的迭代器取到的元素是只读的（因为是 const 迭代器），不可修改其值。如果要改，需要先 erase 再 insert. <strong>下面是错误用法：</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8">st</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic"> // 正确。可读。</span></span><span class="line"><span style="color: #89DDFF">*</span><span style="color: #BABED8">st</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">             // 错误！不可写！</span></span></code></pre></div><h4 id="不可用迭代器计算下标"><a href="#不可用迭代器计算下标" class="headerlink" title="不可用迭代器计算下标"></a>不可用迭代器计算下标</h4><p>set 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">auto</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> st</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">find</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">      // 正确，返回2所在位置的迭代器。</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> idx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> st</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #676E95; font-style: italic"> // 错误！不可相减得到下标。</span></span></code></pre></div><h2 id="2-7-映射-map"><a href="#2-7-映射-map" class="headerlink" title="2.7 映射 map"></a>2.7 映射 <a href="https://zh.cppreference.com/w/cpp/container/map">map</a></h2><p><strong><code>#include &lt;map&gt;</code></strong></p><p>提供对数时间的有序键值对结构。底层原理是红黑树。</p><p>映射：<br>$$<br>\begin{matrix}<br>1&amp;\to&amp;2\<br>2&amp;\to&amp;2\<br>3&amp;\to&amp;1\<br>4&amp;\to&amp;5\<br>&amp;\vdots<br>\end{matrix}<br>$$</p><table><thead><tr><th>性质</th><th>解释</th><th>map</th><th>multimap</th><th>unordered_map</th></tr></thead><tbody><tr><td>互异性</td><td>一个键仅可以在映射中出现一次</td><td>✔</td><td>❌（任意次）</td><td>✔</td></tr><tr><td>无序性</td><td>键是没有顺序的</td><td>❌（从小到大）</td><td>❌（从小到大）</td><td>✔</td></tr></tbody></table><h3 id="2-7-1-常用方法"><a href="#2-7-1-常用方法" class="headerlink" title="2.7.1 常用方法"></a>2.7.1 常用方法</h3><h4 id="构造-3"><a href="#构造-3" class="headerlink" title="构造"></a>构造</h4><p><strong><code>map&lt;键类型, 值类型, 比较器&gt; mp</code></strong></p><ul><li>键类型：要储存键的数据类型</li><li>值类型：要储存值的数据类型</li><li>比较器：键比较大小使用的比较器，默认为 <code>less&lt;类型&gt;</code>，可自定义</li></ul><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> mp1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">               // int-&gt;int 的映射（键从小到大）</span></span><span class="line"><span style="color: #BABED8">map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> greater</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;&gt;</span><span style="color: #BABED8"> st2</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic"> // int-&gt;int 的映射（键从大到小）</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 &#x2F; lambda 表达式），在此就不展开讲了。</p></blockquote><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><p>可使用迭代器进行遍历：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;::</span><span style="color: #BABED8">iterator it </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">!=</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">++</span><span style="color: #BABED8">it</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> it</span><span style="color: #89DDFF">-&gt;</span><span style="color: #BABED8">first </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> it</span><span style="color: #89DDFF">-&gt;</span><span style="color: #BABED8">second </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><p>基于范围的循环（C++ 11）：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">auto</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&amp;</span><span style="color: #BABED8">pr </span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> pr</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">first </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> pr</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">second </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><p>结构化绑定 + 基于范围的循环（C++17）：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">auto</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&amp;[</span><span style="color: #BABED8">key</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> val</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> key </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> val </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><h4 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h4><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>增 &#x2F; 改 &#x2F; 查元素</td><td>中括号</td><td><code>mp[1] = 2;</code></td></tr><tr><td>查元素（返回迭代器）</td><td><code>.find(元素)</code></td><td><code>auto it = mp.find(1);</code></td></tr><tr><td>删除元素</td><td><code>.erase(元素)</code></td><td><code>mp.erase(2);</code></td></tr><tr><td>判断元素是否存在</td><td><code>.count(元素)</code></td><td><code>mp.count(3);</code></td></tr><tr><td>查看大小 &#x2F; 清空 &#x2F; 判空</td><td>略</td><td>略</td></tr></tbody></table><p>增删改查时间复杂度均为 $O(\log n)$</p><h3 id="2-7-2-适用情形"><a href="#2-7-2-适用情形" class="headerlink" title="2.7.2 适用情形"></a>2.7.2 适用情形</h3><p>需要维护映射的场景可以使用：输入若干字符串，统计每种字符串的出现次数。(<code>map&lt;string, int&gt; mp</code>)</p><h3 id="2-7-3-注意事项"><a href="#2-7-3-注意事项" class="headerlink" title="2.7.3 注意事项"></a>2.7.3 注意事项</h3><h4 id="中括号访问时默认值"><a href="#中括号访问时默认值" class="headerlink" title="中括号访问时默认值"></a>中括号访问时默认值</h4><p>如果使用中括号访问 map 时对应的键不存在，那么会新增这个键，并且值为默认值，因此中括号会影响键的存在性。</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">char</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">count</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic"> // 0</span></span><span class="line"><span style="color: #BABED8">mp</span><span style="color: #89DDFF">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">];</span><span style="color: #676E95; font-style: italic">                       // 即使什么都没做，此时mp[&#39;a&#39;]=0已经插入了</span></span><span class="line"><span style="color: #BABED8">cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">count</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic"> // 1</span></span><span class="line"><span style="color: #BABED8">cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">       // 0</span></span></code></pre></div><h4 id="不可用迭代器计算下标-1"><a href="#不可用迭代器计算下标-1" class="headerlink" title="不可用迭代器计算下标"></a>不可用迭代器计算下标</h4><p>map 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">auto</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">find</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">      // 正确，返回2所在位置的迭代器。</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> idx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> mp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #676E95; font-style: italic">   // 错误！不可相减得到下标。</span></span></code></pre></div><h2 id="2-8-字符串-string"><a href="#2-8-字符串-string" class="headerlink" title="2.8 字符串 string"></a>2.8 字符串 <a href="https://zh.cppreference.com/w/cpp/string">string</a></h2><p><strong><code>#include &lt;string&gt;</code></strong></p><p>顾名思义，就是储存字符串的。</p><h3 id="2-8-1-常用方法"><a href="#2-8-1-常用方法" class="headerlink" title="2.8.1 常用方法"></a>2.8.1 常用方法</h3><h4 id="构造-4"><a href="#构造-4" class="headerlink" title="构造"></a>构造</h4><p>构造函数：<code>string(长度, 初值)</code></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">string s1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">           // 构造字符串，为空</span></span><span class="line"><span style="color: #BABED8">string s2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">awa!</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">  // 构造字符串，并赋值awa!</span></span><span class="line"><span style="color: #FFCB6B">string</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">s3</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">6</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">  // 构造字符串，通过构造函数构造为6666666666</span></span></code></pre></div><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>C++</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">string s</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">cin </span><span style="color: #89DDFF">&gt;&gt;</span><span style="color: #BABED8"> s</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> s</span><span style="color: #89DDFF">;</span></span></code></pre></div><p>C</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">string s</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #C792EA">char</span><span style="color: #BABED8"> buf</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">100</span><span style="color: #89DDFF">];</span></span><span class="line"><span style="color: #82AAFF">scanf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">%s</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&amp;</span><span style="color: #BABED8">buf</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">s </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> buf</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #82AAFF">printf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">%s</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> s</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">c_str</span><span style="color: #89DDFF">());</span></span></code></pre></div><h4 id="其他-3"><a href="#其他-3" class="headerlink" title="其他"></a>其他</h4><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>修改、查询指定下标字符</td><td><code>[]</code></td><td><code>s[1] = &#39;a&#39;;</code></td></tr><tr><td>是否相同</td><td><code>==</code></td><td><code>if (s1 == s2) ...</code></td></tr><tr><td>字符串连接</td><td><code>+</code></td><td><code>string s = s1 + s2;</code></td></tr><tr><td>尾接字符串</td><td><code>+=</code></td><td><code>s += &quot;awa&quot;;</code></td></tr><tr><td>取子串</td><td><code>.substr(起始下标, 子串长度)</code></td><td><code>string sub = s.substr(2, 10);</code></td></tr><tr><td>查找字符串</td><td><code>.find(字符串, 起始下标)</code></td><td><code>int pos = s.find(&quot;awa&quot;);</code></td></tr></tbody></table><h4 id="数值与字符串互转（C-11）"><a href="#数值与字符串互转（C-11）" class="headerlink" title="数值与字符串互转（C++11）"></a>数值与字符串互转（C++11）</h4><table><thead><tr><th>源</th><th>目的</th><th>函数</th></tr></thead><tbody><tr><td>int &#x2F; long long &#x2F; float &#x2F; double &#x2F; long double</td><td>string</td><td>to_string()</td></tr><tr><td>string</td><td>int</td><td>stoi()</td></tr><tr><td>string</td><td>long long</td><td>stoll()</td></tr><tr><td>string</td><td>float</td><td>stof()</td></tr><tr><td>string</td><td>double</td><td>stod()</td></tr><tr><td>string</td><td>long double</td><td>stold()</td></tr></tbody></table><h3 id="2-8-2-适用情形"><a href="#2-8-2-适用情形" class="headerlink" title="2.8.2 适用情形"></a>2.8.2 适用情形</h3><p>非常好用！<del>建议直接把字符数组扔了，赶快投入 string 的怀抱。</del></p><h3 id="2-8-3-注意事项"><a href="#2-8-3-注意事项" class="headerlink" title="2.8.3 注意事项"></a>2.8.3 注意事项</h3><h4 id="尾接字符串一定要用"><a href="#尾接字符串一定要用" class="headerlink" title="尾接字符串一定要用 +="></a>尾接字符串一定要用 <code>+=</code></h4><p>string 的 +&#x3D; 运算符，将会在原字符串原地尾接字符串。而 + 了再 &#x3D; 赋值，会先生成一个临时变量，在复制给 string.</p><p>通常字符串长度可以很长，如果使用 + 字符串很容易就 TLE 了。</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">// 优化前: 15139ms</span></span><span class="line"><span style="color: #BABED8">string s</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">5e5</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span></span><span class="line"><span style="color: #BABED8">    s </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> s </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">// 优化后: &lt; 1ms (计时器显示0)</span></span><span class="line"><span style="color: #BABED8">string s</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">5e5</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span></span><span class="line"><span style="color: #BABED8">    s </span><span style="color: #89DDFF">+=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span></code></pre></div><h4 id="substr-方法的奇葩参数"><a href="#substr-方法的奇葩参数" class="headerlink" title=".substr() 方法的奇葩参数"></a><code>.substr()</code> 方法的奇葩参数</h4><p>一定要注意，C++ string 的取子串的第一个参数是<strong>子串起点下标</strong>，第二个参数是<strong>子串长度</strong>。</p><p>第二个参数不是子串终点！不是子串终点！要与 java 等其他语言区分开来。</p><h4 id="find-方法的复杂度"><a href="#find-方法的复杂度" class="headerlink" title=".find() 方法的复杂度"></a><code>.find()</code> 方法的复杂度</h4><p>该方法实现为暴力实现，时间复杂度为 $O(n^2)$.</p><p><del>不要幻想 STL 内置了个 $O(n)$ 的 KMP 算法</del></p><h2 id="2-9-二元组-pair"><a href="#2-9-二元组-pair" class="headerlink" title="2.9 二元组 pair"></a>2.9 二元组 <a href="https://zh.cppreference.com/w/cpp/utility/pair">pair</a></h2><p><strong><code>#include &lt;utility&gt;</code></strong></p><p>顾名思义，就是储存二元组的。</p><h3 id="2-9-1-常用方法"><a href="#2-9-1-常用方法" class="headerlink" title="2.9.1 常用方法"></a>2.9.1 常用方法</h3><h4 id="构造-5"><a href="#构造-5" class="headerlink" title="构造"></a>构造</h4><p><strong><code>pair&lt;第一个值类型, 第二个值类型&gt; pr</code></strong></p><ul><li>第一个值类型：要储存的第一个值的数据类型</li><li>第二个值类型：要储存的第二个值的数据类型</li></ul><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> p1</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">long</span><span style="color: #BABED8"> </span><span style="color: #C792EA">long</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> p2</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">char</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> p3</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #676E95; font-style: italic">// ...</span></span></code></pre></div><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>老式</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">char</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> pr </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">make_pair</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">);</span></span></code></pre></div><p>列表构造 C++11</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">char</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> pr </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">&#125;;</span></span></code></pre></div><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><p>直接取值</p><ul><li>取第一个值：<code>.first</code></li><li>取第二个值：<code>.second</code></li></ul><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">char</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> pr </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> awa </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> pr</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">first</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #C792EA">char</span><span style="color: #BABED8"> bwb </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> pr</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">second</span><span style="color: #89DDFF">;</span></span></code></pre></div><p>结构化绑定 C++17</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">char</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> pr </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #C792EA">auto</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&amp;[</span><span style="color: #BABED8">awa</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> bwb</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> pr</span><span style="color: #89DDFF">;</span></span></code></pre></div><h4 id="判同"><a href="#判同" class="headerlink" title="判同"></a>判同</h4><p>直接用 <code>==</code> 运算符</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> p1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> p2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">p1 </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> p2</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #F07178"> ... </span><span style="color: #89DDFF">&#125;</span><span style="color: #676E95; font-style: italic"> // false</span></span></code></pre></div><h3 id="2-9-2-适用场景"><a href="#2-9-2-适用场景" class="headerlink" title="2.9.2 适用场景"></a>2.9.2 适用场景</h3><p>所有需要二元组的场景均可使用，效率和自己定义结构体差不多。</p><h3 id="2-9-3-注意事项"><a href="#2-9-3-注意事项" class="headerlink" title="2.9.3 注意事项"></a>2.9.3 注意事项</h3><p>无</p><h1 id="3-迭代器简介"><a href="#3-迭代器简介" class="headerlink" title="3 迭代器简介"></a>3 迭代器简介</h1><h2 id="3-1-迭代器是什么？"><a href="#3-1-迭代器是什么？" class="headerlink" title="3.1 迭代器是什么？"></a>3.1 迭代器是什么？</h2><p>不搞抽象，直接举例。</p><p>对于一个 vector，我们可以用下标遍历：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">size</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">[</span><span style="color: #BABED8">i</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><p>我们同时也可以用迭代器来遍历：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;::</span><span style="color: #BABED8">iterator it </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">!=</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">++</span><span style="color: #BABED8">it</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8">it </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><ul><li><code>a.begin()</code> 是一个迭代器，指向的是第一个元素</li><li><code>a.end()</code> 是一个迭代器，指向的是最后一个元素<strong>再后面一位</strong></li><li>上述迭代器具有自增运算符，自增则迭代器向下一个元素移动</li><li>迭代器与指针相似，如果对它使用解引用运算符，即 <code>*it</code>，就能取到对应值了</li></ul><h2 id="3-2-为何需要迭代器？"><a href="#3-2-为何需要迭代器？" class="headerlink" title="3.2 为何需要迭代器？"></a>3.2 为何需要迭代器？</h2><p>很多数据结构并不是线性的（例如红黑树），对于非线性数据结构，下标是无意义的。无法使用下标来遍历整个数据结构。</p><p>迭代器的作用就是定义某个数据结构的遍历方式，通过迭代器的增减，代表遍历到的位置，通过迭代器便能成功遍历非线性结构了。</p><p>例如，set 的实现是红黑树，我们是没法用下标来访问元素的。但是通过迭代器，我们就能遍历 set 中的元素了：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">set</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;::</span><span style="color: #BABED8">iterator it </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> st</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">!=</span><span style="color: #BABED8"> st</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">++</span><span style="color: #BABED8">it</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    cout </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8">it </span><span style="color: #89DDFF">&lt;&lt;</span><span style="color: #BABED8"> endl</span><span style="color: #89DDFF">;</span></span></code></pre></div><h2 id="3-3-迭代器用法"><a href="#3-3-迭代器用法" class="headerlink" title="3.3 迭代器用法"></a>3.3 迭代器用法</h2><p>对于 vector 容器，它的迭代器功能比较完整，以它举例：</p><ul><li><code>.begin()</code>：头迭代器</li><li><code>.end()</code>：尾迭代器</li><li><code>.rbegin()</code>：反向头迭代器</li><li><code>.rend()</code>：反向尾迭代器</li><li>迭代器 <code>+</code> 整型：将迭代器向后移动</li><li>迭代器 <code>-</code> 整型：将迭代器向前移动</li><li>迭代器 <code>++</code>：将迭代器向后移动 1 位</li><li>迭代器 <code>--</code>：将迭代器向前移动 1 位</li><li>迭代器 <code>-</code> 迭代器：两个迭代器的距离</li><li><code>prev(it)</code>：返回 it 的前一个迭代器</li><li><code>next(it)</code>：返回 it 的后一个迭代器</li></ul><p>对于其他容器，由于其结构特性，上面的功能不一定都有（例如 set 的迭代器是不能相减求距离的）</p><h2 id="3-4-常见问题"><a href="#3-4-常见问题" class="headerlink" title="3.4 常见问题"></a>3.4 常见问题</h2><p><strong><code>.end()</code> 和 <code>.rend()</code> 指向的位置是无意义的值</strong></p><p>对于一个长度为 10 的数组：<code>for (int i = 0; i &lt; 10; i++)</code>，第 10 位是不可访问的</p><p>对于一个长度为 10 的容器：<code>for (auto it = a.begin(); it != a.end(); ++it)</code>，.end 是不可访问的</p><p><strong>不同容器的迭代器功能可能不一样</strong></p><p>迭代器细化的话有正向、反向、双向，每个容器的迭代器支持的运算符也可能不同，因此不同容器的迭代器细节很有可能是不一样的。</p><p><strong>删除操作时需要警惕</strong></p><p>为什么 3 没删掉？</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">auto</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">!=</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">++</span><span style="color: #BABED8">it</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(*</span><span style="color: #BABED8">it </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">||</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8">it </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">        a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">erase</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">it</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #676E95; font-style: italic">// a = [1, 3, 4]</span></span></code></pre></div><p>为啥 RE 了？</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">auto</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">!=</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">++</span><span style="color: #BABED8">it</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(*</span><span style="color: #BABED8">it </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">        a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">erase</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">it</span><span style="color: #89DDFF">);</span></span></code></pre></div><center><b>建议：如无必要，别用迭代器操作容器。（遍历与访问没关系）</b></center><h1 id="4-常用算法"><a href="#4-常用算法" class="headerlink" title="4 常用算法"></a>4 常用算法</h1><h2 id="4-1-内容总览"><a href="#4-1-内容总览" class="headerlink" title="4.1 内容总览"></a>4.1 内容总览</h2><p>打勾的是本次将会详细讲解的，其他的是算法竞赛中建议学习的，不在下表列出的在比赛中基本用不到。</p><p>（很多函数的功能很简单，自己都能快速写出来，但是使用函数可以让代码可读性变得更高，这在比赛中是至关紧要的）</p><ul><li><p>算法库 Algorithm</p><ul><li><input disabled type="checkbox"> <code>count()</code></li><li><input disabled type="checkbox"> <code>find()</code></li><li><input disabled type="checkbox"> <code>fill()</code></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/algorithm/swap"><code>swap()</code></a></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/algorithm/reverse"><code>reverse()</code></a></li><li><input disabled type="checkbox"> <code>shuffle()</code> C++11</li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/algorithm/unique"><code>unique()</code></a></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/algorithm/sort"><code>sort()</code></a></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/algorithm/lower_bound"><code>lower_bound()</code></a> &#x2F; <a href="https://zh.cppreference.com/w/cpp/algorithm/upper_bound"><code>upper_bound()</code></a></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/algorithm/max"><code>max()</code></a> &#x2F; <a href="https://zh.cppreference.com/w/cpp/algorithm/min"><code>min()</code></a></li><li><input disabled type="checkbox"> <code>max_element()</code> &#x2F; <code>min_element()</code></li><li><input disabled type="checkbox"> <code>prev_permutation()</code> &#x2F; <code>next_permutation()</code></li></ul></li><li><p>数学函数 cmath</p><ul><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/numeric/math/fabs"><code>abs()</code></a></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/numeric/math/exp"><code>exp()</code></a></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/numeric/math/log"><code>log()</code></a> &#x2F; <code>log10()</code> &#x2F; <code>log2()</code></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/numeric/math/pow"><code>pow()</code></a></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/numeric/math/sqrt"><code>sqrt()</code></a></li><li><input disabled type="checkbox"> <code>sin()</code> &#x2F; <code>cos()</code> &#x2F; <code>tan()</code></li><li><input disabled type="checkbox"> <code>asin()</code> &#x2F; <code>acos()</code> &#x2F; <code>atan()</code></li><li><input disabled type="checkbox"> <code>sinh()</code> &#x2F; <code>cosh()</code> &#x2F; <code>tanh()</code></li><li><input disabled type="checkbox"> <code>asinh()</code> &#x2F; <code>acosh()</code> &#x2F; <code>atanh()</code> C++11</li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/numeric/math/ceil"><code>ceil()</code></a> &#x2F; <a href="https://zh.cppreference.com/w/cpp/numeric/math/floor"><code>floor()</code></a></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/numeric/math/round"><code>round()</code></a> C++11</li></ul></li><li><p>数值算法 numeric</p><ul><li><input disabled type="checkbox"> <code>iota()</code> C++11</li><li><input disabled type="checkbox"> <code>accumulate()</code></li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/numeric/gcd"><code>gcd()</code></a> C++17</li><li><input checked disabled type="checkbox"> <a href="https://zh.cppreference.com/w/cpp/numeric/lcm"><code>lcm()</code></a> C++17</li></ul></li><li><p>伪随机数生成 random</p><ul><li><input disabled type="checkbox"> <code>mt19937</code></li><li><input disabled type="checkbox"> <code>random_device()</code></li></ul></li></ul><h2 id="4-2-swap"><a href="#4-2-swap" class="headerlink" title="4.2 swap()"></a>4.2 <code>swap()</code></h2><p>交换两个变量的值</p><p><strong>用法示例</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">template</span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">T</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">swap</span><span style="color: #89DDFF">(</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">T</span><span style="color: #C792EA">&amp;</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">T</span><span style="color: #C792EA">&amp;</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">b</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">);</span></span></code></pre></div><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> b </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #82AAFF">swap</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">a</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> b</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #676E95; font-style: italic">// now a = 1, b = 0</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">5</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">6</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">7</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #82AAFF">swap</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">],</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">6</span><span style="color: #89DDFF">]);</span></span><span class="line"><span style="color: #676E95; font-style: italic">// now arr = &#123;0, 1, 2, 3, 6, 5, 4, 7, 8, 9&#125;</span></span></code></pre></div><p><strong>注意事项</strong></p><p>这个 swap 参数是引用的，不需要像 C 语言一样取地址。</p><h2 id="4-3-sort"><a href="#4-3-sort" class="headerlink" title="4.3 sort()"></a>4.3 <code>sort()</code></h2><p>使用快速排序给一个可迭代对象排序</p><p><strong>用法示例</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">template</span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RandomIt</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Compare</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">sort</span><span style="color: #89DDFF">(</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RandomIt</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">first</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RandomIt</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">last</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Compare</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">comp</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">);</span></span></code></pre></div><p>默认排序从小到大</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #82AAFF">sort</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #676E95; font-style: italic">// arr = [0, 1, 1, 1, 8, 9, 9]</span></span></code></pre></div><p>如果要从大到小，则需要传比较器进去。</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #82AAFF">sort</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">greater</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;());</span></span><span class="line"><span style="color: #676E95; font-style: italic">// arr = [9, 9, 8, 1, 1, 1, 0]</span></span></code></pre></div><p>如果需要完成特殊比较，则需要手写比较器。</p><p>比较器函数返回值是 bool 类型，传参是需要比较的两个元素。记我们定义的该比较操作为 $\star$：</p><ul><li>若 $a\star b$，则比较器函数应当返回 <code>true</code></li><li>若 $a\not\star b$，则比较器函数应当返回 <code>false</code></li></ul><p><strong>注意：</strong>如果 $a&#x3D;b$，比较器函数必须返回 <code>false</code></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">bool</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">cmp</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">b</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">a</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">second </span><span style="color: #89DDFF">!=</span><span style="color: #BABED8"> b</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">second</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">second </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> b</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">second</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">first </span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> b</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">first</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">()</span></span><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">pair</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">&lt;!--</span><span style="color: #BABED8">swig￼</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">--&gt;;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #82AAFF">sort</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> cmp</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #676E95; font-style: italic">    // arr = [(0, 0), (8, 1), (2, 9), (1, 9)]</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h2 id="4-4-lower-bound-upper-bound"><a href="#4-4-lower-bound-upper-bound" class="headerlink" title="4.4 lower_bound() &#x2F; upper_bound()"></a>4.4 <code>lower_bound()</code> &#x2F; <code>upper_bound()</code></h2><p>在<strong>已升序排序</strong>的元素中，应用二分查找检索指定元素，返回对应元素迭代器位置。<strong>找不到则返回尾迭代器。</strong></p><ul><li><code>lower_bound()</code>: 寻找 $\geq x$ 的第一个元素的位置</li><li><code>upper_bound()</code>: 寻找 $&gt;x$ 的第一个元素的位置</li></ul><p>怎么找 $\leq x$ &#x2F; $&lt; x$ 的第一个元素呢？</p><ul><li>$&gt;x$ 的第一个元素的前一个元素（如果有）便是 $\leq x$ 的第一个元素</li><li>$\geq x$ 的第一个元素的前一个元素（如果有）便是 $&lt;x$ 的第一个元素</li></ul><p>返回的是迭代器，如何转成下标索引呢？减去头迭代器即可。</p><p><strong>用法示例</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">template</span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">ForwardIt</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">T</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #FFCB6B">ForwardIt</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">lower_bound</span><span style="color: #89DDFF">(</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">ForwardIt</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">first</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">ForwardIt</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">last</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">const</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">T</span><span style="color: #C792EA">&amp;</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">value</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">);</span></span></code></pre></div><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;::</span><span style="color: #BABED8">iterator it </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">lower_bound</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">7</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> idx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> it </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #676E95; font-style: italic">// idx = 4</span></span></code></pre></div><p>我们通常写成一行：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #BABED8">idx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">lower_bound</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">7</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #676E95; font-style: italic"> // 4</span></span><span class="line"><span style="color: #BABED8">idx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">lower_bound</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #676E95; font-style: italic"> // 4</span></span><span class="line"><span style="color: #BABED8">idx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">upper_bound</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">7</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #676E95; font-style: italic"> // 4</span></span><span class="line"><span style="color: #BABED8">idx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">upper_bound</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">();</span><span style="color: #676E95; font-style: italic"> // 5</span></span></code></pre></div><h2 id="4-5-reverse"><a href="#4-5-reverse" class="headerlink" title="4.5 reverse()"></a>4.5 <code>reverse()</code></h2><p>反转一个可迭代对象的元素顺序</p><p><strong>用法示例</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">template</span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">BidirIt</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">reverse</span><span style="color: #89DDFF">(</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">BidirIt</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">first</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">BidirIt</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">last</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">);</span></span></code></pre></div><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">arr</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #82AAFF">iota</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #676E95; font-style: italic">// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</span></span><span class="line"><span style="color: #82AAFF">reverse</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #676E95; font-style: italic">// 10, 9, 8, 7, 6, 5, 4, 3, 2, 1</span></span></code></pre></div><h2 id="4-6-max-min"><a href="#4-6-max-min" class="headerlink" title="4.6 max() &#x2F; min()"></a>4.6 <code>max()</code> &#x2F; <code>min()</code></h2><p>返回最大值 &#x2F; 最小值的<strong>数值</strong></p><p><strong>用法示例</strong></p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> mx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic"> // 2</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> mn </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">min</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic"> // 1</span></span></code></pre></div><p>在 C++11 之后，可以使用列表构造语法传入一个列表，这样就能一次性给多个元素找最大值而不用套娃了：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">// Before C++11</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> mx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">),</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">));</span><span style="color: #676E95; font-style: italic"> // 4</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> mn </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">min</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">min</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">),</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">min</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">));</span><span style="color: #676E95; font-style: italic"> // 1</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">// After C++11</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> mx </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4</span><span style="color: #BABED8">&#125;</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic"> // 4</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> mn </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">min</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">4</span><span style="color: #BABED8">&#125;</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic"> // 1</span></span></code></pre></div><h2 id="4-7-unique"><a href="#4-7-unique" class="headerlink" title="4.7 unique()"></a>4.7 <code>unique()</code></h2><p>消除数组的重复<strong>相邻</strong>元素，数组长度不变，但是有效数据缩短，返回的是有效数据位置的结尾迭代器。</p><p>例如：$[1,1,4,5,1,4]\to[1,4,5,1,4,\underline?]$，下划线位置为返回的迭代器指向。</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">template</span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">ForwardIt</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #FFCB6B">ForwardIt</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">unique</span><span style="color: #89DDFF">(</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">ForwardIt</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">first</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">ForwardIt</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">last</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">);</span></span></code></pre></div><p><strong>用法示例</strong></p><p>单独使用 unique 并不能达成去重效果，因为它只消除<strong>相邻</strong>的重复元素。但是如果序列有序，那么它就能去重了。</p><p>但是它去重后，序列尾部会产生一些无效数据：$[1,1,2,4,4,4,5]\to[1,2,4,5,\underline?,?,?]$，为了删掉这些无效数据，我们需要结合 erase.</p><p>最终，给 vector 去重的写法便是：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">vector</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">int</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">&#123;</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">5</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #82AAFF">sort</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">erase</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">unique</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">begin</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">()),</span><span style="color: #BABED8"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #89DDFF">());</span></span></code></pre></div><h2 id="4-8-数学函数"><a href="#4-8-数学函数" class="headerlink" title="4.8 数学函数"></a>4.8 数学函数</h2><p>所有函数参数均支持 <code>int</code> &#x2F; <code>long long</code> &#x2F; <code>float</code> &#x2F; <code>double</code> &#x2F; <code>long double</code></p><table><thead><tr><th>公式</th><th>示例</th></tr></thead><tbody><tr><td>$f(x)&#x3D;\lvert x\rvert$</td><td><code>abs(-1.0)</code></td></tr><tr><td>$f(x)&#x3D;e^x$</td><td><code>exp(2)</code></td></tr><tr><td>$f(x)&#x3D;\ln x$</td><td><code>log(3)</code></td></tr><tr><td>$f(x,y)&#x3D;x^y$</td><td><code>pow(2, 3)</code></td></tr><tr><td>$f(x)&#x3D;\sqrt x$</td><td><code>sqrt(2)</code></td></tr><tr><td>$f(x)&#x3D;\lceil x\rceil$</td><td><code>ceil(2.1)</code></td></tr><tr><td>$f(x)&#x3D;\lfloor x\rfloor$</td><td><code>floor(2.1)</code></td></tr><tr><td>$f(x)&#x3D;\left&lt;x\right&gt;$</td><td><code>rount(2.1)</code></td></tr></tbody></table><p><strong>注意事项</strong></p><p>由于浮点误差，有些的数学函数的行为可能与预期不符，导致 WA。如果你的操作数都是整型，那么用下面的写法会更稳妥。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>原文地址：<a href="https://codeforces.com/blog/entry/107717">https://codeforces.com/blog/entry/107717</a></p></blockquote><ul><li>$\lfloor\frac{a}{b}\rfloor$<ul><li>别用：<code>floor(1.0 * a / b)</code></li><li>要用：<code>a / b</code></li></ul></li><li>$\lceil\frac{a}{b}\rceil$<ul><li>别用：<code>ceil(1.0 * a / b)</code></li><li>要用：<code>(a + b - 1) / b</code>  （$\lceil\frac{a}{b}\rceil&#x3D;\lfloor\frac{a+b-1}{b}\rfloor$）</li></ul></li><li>$\lfloor\sqrt a\rfloor$<ul><li>别用：<code>(int) sqrt(a)</code></li><li>要用：二分查找 <a href="https://io.zouht.com/7.html">https://io.zouht.com/7.html</a></li></ul></li><li>$a^b$<ul><li>别用：<code>pow(a, b)</code></li><li>要用：快速幂 <a href="https://io.zouht.com/18.html">https://io.zouht.com/18.html</a></li></ul></li><li>$\lfloor\log_2 a\rfloor$<ul><li>别用：<code>log2(a)</code></li><li>要用：<code>__lg</code> （不规范，但是这是竞赛）&#x2F; <code>bit_width</code>（C++20 可用）</li></ul></li></ul><h2 id="4-9-gcd-lcm"><a href="#4-9-gcd-lcm" class="headerlink" title="4.9 gcd() &#x2F; lcm()"></a>4.9 <code>gcd()</code> &#x2F; <code>lcm()</code></h2><p>（C++17）返回最大公因数 &#x2F; 最小公倍数</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> x </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">gcd</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">12</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic"> // 4</span></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> y </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">lcm</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">12</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic"> // 24</span></span></code></pre></div><p>如果不是 C++17，但是是 GNU 编译器（g++），那么可以用内置函数 <code>__gcd()</code>.</p><p>当然，<code>gcd</code> &#x2F; <code>lcm</code> 函数也挺好写，直接写也行（欧几里得算法）：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">gcd</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">b</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(!</span><span style="color: #BABED8">b</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> a</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">gcd</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">b</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">%</span><span style="color: #BABED8"> b</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">lcm</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">b</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">/</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">gcd</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">a</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> b</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> b</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot知识点总结（三）</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="11-事务管理"><a href="#11-事务管理" class="headerlink" title="11.事务管理"></a>11.事务管理</h2><h3 id="11-1-事务回顾"><a href="#11-1-事务回顾" class="headerlink" title="11.1 事务回顾"></a>11.1 事务回顾</h3><p>在数据库阶段我们已学习过事务了，我们讲到：</p><p><strong>事务</strong>是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体，一起向数据库提交或者是撤销操作请求。所以这组操作要么同时成功，要么同时失败。</p><p>怎么样来控制这组操作，让这组操作同时成功或同时失败呢？此时就要涉及到事务的具体操作了。</p><p>事务的操作主要有三步：</p><ol><li>开启事务（一组操作开始前，开启事务）：start transaction &#x2F; begin ;</li><li>提交事务（这组操作全部成功后，提交事务）：commit ;</li><li>回滚事务（中间任何一个操作出现异常，回滚事务）：rollback ;</li></ol><h3 id="11-2-Spring事务管理"><a href="#11-2-Spring事务管理" class="headerlink" title="11.2 Spring事务管理"></a>11.2 Spring事务管理</h3><p>简单的回顾了事务的概念以及事务的基本操作之后，接下来我们看一个事务管理案例：解散部门 （解散部门就是删除部门）</p><p>需求：当部门解散了不仅需要把部门信息删除了，还需要把该部门下的员工数据也删除了。</p><p>步骤：</p><ul><li>根据ID删除部门数据</li><li>根据部门ID删除该部门下的员工</li></ul><p>重启SpringBoot服务，使用postman测试部门删除：</p><p>代码正常情况下，dept表和Em表中的数据已删除</p><p>修改DeptServiceImpl类中代码，添加可能出现异常的代码：</p><p>重启SpringBoot服务，使用postman测试部门删除：</p><p>查看数据库表：</p><ul><li><p>删除了2号部门</p></li><li><p>2号部门下的员工数据没有删除</p></li></ul><p><strong>以上程序出现的问题：即使程序运行抛出了异常，部门依然删除了，但是部门下的员工却没有删除，造成了数据的不一致。</strong></p><p>原因：</p><ul><li>先执行根据id删除部门的操作，这步执行完毕，数据库表 dept 中的数据就已经删除了。</li><li>执行 1&#x2F;0 操作，抛出异常</li><li>抛出异常之前，下面所有的代码都不会执行了，根据部门ID删除该部门下的员工，这个操作也不会执行 。</li></ul><p>此时就出现问题了，部门删除了，部门下的员工还在，业务操作前后数据不一致。</p><p>而要想保证操作前后，数据的一致性，就需要让解散部门中涉及到的两个业务操作，要么全部成功，要么全部失败 。 那我们如何，让这两个操作要么全部成功，要么全部失败呢 ？</p><p>那就可以通过事务来实现，因为一个事务中的多个业务操作，要么全部成功，要么全部失败。</p><p>此时，我们就需要在delete删除业务功能中添加事务。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230107141652636.png" alt="image-20230107141652636"></p><p>在方法运行之前，开启事务，如果方法成功执行，就提交事务，如果方法执行的过程当中出现异常了，就回滚事务。</p><p>思考：开发中所有的业务操作，一旦我们要进行控制事务，是不是都是这样的套路？</p><p>答案：是的。</p><p>所以在spring框架当中就已经把事务控制的代码都已经封装好了，并不需要我们手动实现。我们使用了spring框架，我们只需要通过一个简单的注解@Transactional就搞定了。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>@Transactional作用：就是在当前这个方法执行开始之前来开启事务，方法执行完毕之后提交事务。如果在这个方法执行的过程当中出现了异常，就会进行事务的回滚操作。</p><p>@Transactional注解：我们一般会在业务层当中来控制事务，因为在业务层当中，一个业务功能可能会包含多个数据访问的操作。在业务层来控制事务，我们就可以将多个数据访问操作控制在一个事务范围内。</p></blockquote><p>@Transactional注解书写位置：</p><ul><li>方法<ul><li>当前方法交给spring进行事务管理</li></ul></li><li>类<ul><li>当前类中所有的方法都交由spring进行事务管理</li></ul></li><li>接口<ul><li>接口下所有的实现类当中所有的方法都交给spring 进行事务管理</li></ul></li></ul><p>接下来，我们就可以在业务方法delete上加上 @Transactional 来控制事务 。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Service</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptServiceImpl</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptMapper</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EmpMapper</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Transactional</span><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic">//当前方法添加了事务管理</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//根据部门id删除部门信息</span></span><span class="line"><span style="color: #BABED8">        deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteById</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//模拟：异常发生</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">/</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//删除部门下的所有员工信息</span></span><span class="line"><span style="color: #BABED8">        empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteByDeptId</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span><span style="color: #BABED8">   </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>在业务功能上添加@Transactional注解进行事务管理后，我们重启SpringBoot服务，使用postman测试：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230107143339917.png" alt="image-20230107143339917"></p><p>添加Spring事务管理后，由于服务端程序引发了异常，所以事务进行回滚。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230107144312892.png" alt="image-20230107144312892"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230107143720961.png" alt="image-20230107143720961"></p><p>说明：可以在application.yml配置文件中开启事务管理日志，这样就可以在控制看到和事务相关的日志信息了</p><div class="language-yaml"><button title="Copy code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#spring事务管理日志</span></span><span class="line"><span style="color: #F07178">logging</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">level</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">org.springframework.jdbc.support.JdbcTransactionManager</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">debug</span></span></code></pre></div><h3 id="11-3-事务进阶"><a href="#11-3-事务进阶" class="headerlink" title="11.3 事务进阶"></a>11.3 事务进阶</h3><p>前面我们通过spring事务管理注解@Transactional已经控制了业务层方法的事务。接下来我们要来详细的介绍一下@Transactional事务管理注解的使用细节。我们这里主要介绍@Transactional注解当中的两个常见的属性：</p><ol><li>异常回滚的属性：rollbackFor </li><li>事务传播行为：propagation</li></ol><p>我们先来学习下rollbackFor属性。</p><h4 id="11-3-1-rollbackFor"><a href="#11-3-1-rollbackFor" class="headerlink" title="11.3.1 rollbackFor"></a>11.3.1 rollbackFor</h4><p>我们在之前编写的业务方法上添加了@Transactional注解，来实现事务管理。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Transactional</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> id</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//根据部门id删除部门信息</span></span><span class="line"><span style="color: #BABED8">        deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteById</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//模拟：异常发生</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">/</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//删除部门下的所有员工信息</span></span><span class="line"><span style="color: #BABED8">        empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteByDeptId</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span><span style="color: #BABED8">   </span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>以上业务功能delete()方法在运行时，会引发除0的算数运算异常(运行时异常)，出现异常之后，由于我们在方法上加了@Transactional注解进行事务管理，所以发生异常会执行rollback回滚操作，从而保证事务操作前后数据是一致的。</p><p>下面我们在做一个测试，我们修改业务功能代码，在模拟异常的位置上直接抛出Exception异常（编译时异常）</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Transactional</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> id</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> throws Exception </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//根据部门id删除部门信息</span></span><span class="line"><span style="color: #BABED8">        deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteById</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//模拟：异常发生</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #89DDFF">(true)&#123;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Exception</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">出现异常了~~~</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//删除部门下的所有员工信息</span></span><span class="line"><span style="color: #BABED8">        empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteByDeptId</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span><span style="color: #BABED8">   </span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>说明：在service中向上抛出一个Exception编译时异常之后，由于是controller调用service，所以在controller中要有异常处理代码，此时我们选择在controller中继续把异常向上抛。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">DeleteMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/depts/&#123;id&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">PathVariable</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> id</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> throws Exception </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">//日志记录</span></span><span class="line"><span style="color: #BABED8">  log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">根据id删除部门</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">//调用service层功能</span></span><span class="line"><span style="color: #BABED8">  deptService</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">//响应</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></blockquote><p>重新启动服务后测试：</p><p>抛出异常之后事务会不会回滚</p><blockquote><p>现有表中数据：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230107140726701.png" alt="image-20230107140726701"></p></blockquote><p>使用postman测试，删除5号部门</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230108142359592.png" alt="image-20230108142359592"></p><p>发生了Exception异常，但事务依然提交了</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230108142555310.png" alt="image-20230108142555310"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>dept表中数据：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230108142707351.png" alt="image-20230108142707351"></p></blockquote><p>通过以上测试可以得出一个结论：默认情况下，只有出现RuntimeException(运行时异常)才会回滚事务。</p><p>假如我们想让所有的异常都回滚，需要来配置@Transactional注解当中的rollbackFor属性，通过rollbackFor这个属性可以指定出现何种异常类型回滚事务。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Service</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptServiceImpl</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptMapper</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EmpMapper</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Transactional</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">rollbackFor</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">Exception</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//根据部门id删除部门信息</span></span><span class="line"><span style="color: #BABED8">        deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteById</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//模拟：异常发生</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> num </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> id</span><span style="color: #89DDFF">/</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//删除部门下的所有员工信息</span></span><span class="line"><span style="color: #BABED8">        empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteByDeptId</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span><span style="color: #BABED8">   </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>接下来我们重新启动服务，测试删除部门的操作：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230108184912155.png" alt="image-20230108184912155"></p><p>控制台日志：执行了删除3号部门的操作， 因为异常又进行了事务回滚</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230108185432083.png" alt="image-20230108185432083"></p><p>数据表：3号部门没有删除</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230107143720961-17076416775471.png" alt="image-20230107143720961"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>结论：</p><ul><li>在Spring的事务管理中，默认只有运行时异常 RuntimeException才会回滚。</li><li>如果还需要回滚指定类型的异常，可以通过rollbackFor属性来指定。</li></ul></blockquote><h4 id="11-3-2-propagation"><a href="#11-3-2-propagation" class="headerlink" title="11.3.2 propagation"></a>11.3.2 propagation</h4><p>我们接着继续学习@Transactional注解当中的第二个属性propagation，这个属性是用来配置事务的传播行为的。</p><p>什么是事务的传播行为呢？</p><ul><li>就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。</li></ul><p>例如：两个事务方法，一个A方法，一个B方法。在这两个方法上都添加了@Transactional注解，就代表这两个方法都具有事务，而在A方法当中又去调用了B方法。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230112152543953.png" alt="image-20230112152543953"> </p><p>所谓事务的传播行为，指的就是在A方法运行的时候，首先会开启一个事务，在A方法当中又调用了B方法， B方法自身也具有事务，那么B方法在运行的时候，到底是加入到A方法的事务当中来，还是B方法在运行的时候新建一个事务？这个就涉及到了事务的传播行为。</p><p>我们要想控制事务的传播行为，在@Transactional注解的后面指定一个属性propagation，通过 propagation 属性来指定传播行为。接下来我们就来介绍一下常见的事务传播行为。</p><table><thead><tr><th><strong>属性值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>REQUIRED</td><td>【默认值】需要事务，有则加入，无则创建新事务</td></tr><tr><td>REQUIRES_NEW</td><td>需要新事务，无论有无，总是创建新事务</td></tr><tr><td>SUPPORTS</td><td>支持事务，有则加入，无则在无事务状态中运行</td></tr><tr><td>NOT_SUPPORTED</td><td>不支持事务，在无事务状态下运行,如果当前存在已有事务,则挂起当前事务</td></tr><tr><td>MANDATORY</td><td>必须有事务，否则抛异常</td></tr><tr><td>NEVER</td><td>必须没事务，否则抛异常</td></tr><tr><td>…</td><td></td></tr></tbody></table><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>对于这些事务传播行为，我们只需要关注以下两个就可以了：</p><ol><li>REQUIRED（默认值）</li><li>REQUIRES_NEW</li></ol></blockquote><p>接下来我们就通过一个案例来演示下事务传播行为propagation属性的使用。</p><p><strong>需求：</strong>解散部门时需要记录操作日志</p><p>​由于解散部门是一个非常重要而且非常危险的操作，所以在业务当中要求每一次执行解散部门的操作都需要留下痕迹，就是要记录操作日志。而且还要求无论是执行成功了还是执行失败了，都需要留下痕迹。</p><p><strong>步骤：</strong></p><ol><li>执行解散部门的业务：先删除部门，再删除部门下的员工（前面已实现）</li><li>记录解散部门的日志，到日志表（未实现）</li></ol><p><strong>准备工作：</strong></p><ol><li>创建数据库表 dept_log 日志表：</li></ol><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">create table dept_log(</span></span><span class="line"><span style="color: #babed8">       id int auto_increment comment &#39;主键ID&#39; primary key,</span></span><span class="line"><span style="color: #babed8">    create_time datetime null comment &#39;操作时间&#39;,</span></span><span class="line"><span style="color: #babed8">    description varchar(300) null comment &#39;操作描述&#39;</span></span><span class="line"><span style="color: #babed8">)comment &#39;部门操作日志表&#39;;</span></span></code></pre></div><ol start="2"><li>引入资料中提供的实体类：DeptLog</li></ol><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Data</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">NoArgsConstructor</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">AllArgsConstructor</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptLog</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> id</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LocalDateTime</span><span style="color: #BABED8"> createTime</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> description</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ol start="3"><li>引入资料中提供的Mapper接口：DeptLogMapper</li></ol><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptLogMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Insert</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">insert into dept_log(create_time,description) values(#&#123;createTime&#125;,#&#123;description&#125;)</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">DeptLog</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">log</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ol start="4"><li>引入资料中提供的业务接口：DeptLogService</li></ol><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptLogService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">DeptLog</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">deptLog</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ol start="5"><li>引入资料中提供的业务实现类：DeptLogServiceImpl</li></ol><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Service</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptLogServiceImpl</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptLogService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptLogMapper</span><span style="color: #BABED8"> deptLogMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Transactional</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//事务传播行为：有事务就加入、没有事务就新建事务</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">DeptLog</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">deptLog</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        deptLogMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">deptLog</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p><strong>代码实现:</strong></p><p>业务实现类：DeptServiceImpl</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Service</span></span><span class="line"><span style="color: #676E95; font-style: italic">//@Transactional //当前业务实现类中的所有的方法，都添加了spring事务管理机制</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptServiceImpl</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptMapper</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EmpMapper</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptLogService</span><span style="color: #BABED8"> deptLogService</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//根据部门id，删除部门信息及部门下的所有员工</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Log</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Transactional</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">rollbackFor</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Exception</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//根据部门id删除部门信息</span></span><span class="line"><span style="color: #BABED8">            deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteById</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//模拟：异常</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #89DDFF">(true)&#123;</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Exception</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">出现异常了~~~</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//删除部门下的所有员工信息</span></span><span class="line"><span style="color: #BABED8">            empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteByDeptId</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span><span style="color: #89DDFF; font-style: italic">finally</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//不论是否有异常，最终都要执行的代码：记录日志</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">DeptLog</span><span style="color: #BABED8"> deptLog </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">DeptLog</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">            deptLog</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setCreateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">            deptLog</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setDescription</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">执行了解散部门的操作，此时解散的是</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">+</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">+</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">号部门</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//调用其他业务类中的方法</span></span><span class="line"><span style="color: #BABED8">            deptLogService</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">deptLog</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p><strong>测试:</strong></p><p>重新启动SpringBoot服务，测试删除3号部门后会发生什么？</p><ul><li>执行了删除3号部门操作</li><li>执行了插入部门日志操作</li><li>程序发生Exception异常</li><li>执行事务回滚（删除、插入操作因为在一个事务范围内，两个操作都会被回滚）</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230109154025262.png" alt="image-20230109154025262"></p><p>然后在dept_log表中没有记录日志数据</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230109154344393.png" alt="image-20230109154344393"> </p><p><strong>原因分析:</strong></p><p>接下来我们就需要来分析一下具体是什么原因导致的日志没有成功的记录。</p><ul><li><p>在执行delete操作时开启了一个事务</p></li><li><p>当执行insert操作时，insert设置的事务传播行是默认值REQUIRED，表示有事务就加入，没有则新建事务</p></li><li><p>此时：delete和insert操作使用了同一个事务，同一个事务中的多个操作，要么同时成功，要么同时失败，所以当异常发生时进行事务回滚，就会回滚delete和insert操作</p></li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230109162420479.png" alt="image-20230109162420479"></p><p><strong>解决方案：</strong></p><p>在DeptLogServiceImpl类中insert方法上，添加@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Propagation.REQUIRES_NEW  ：不论是否有事务，都创建新事务  ，运行在一个独立的事务中。</p></blockquote><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Service</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptLogServiceImpl</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptLogService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptLogMapper</span><span style="color: #BABED8"> deptLogMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Transactional</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">propagation</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Propagation</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">REQUIRES_NEW</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//事务传播行为：不论是否有事务，都新建事务</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">DeptLog</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">deptLog</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        deptLogMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">deptLog</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重启SpringBoot服务，再次测试删除3号部门：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230109170002879.png" alt="image-20230109170002879"></p><p>那此时，DeptServiceImpl中的delete方法运行时，会开启一个事务。 当调用  deptLogService.insert(deptLog)  时，也会创建一个新的事务，那此时，当insert方法运行完毕之后，事务就已经提交了。 即使外部的事务出现异常，内部已经提交的事务，也不会回滚了，因为是两个独立的事务。</p><p>到此事务传播行为已演示完成，事务的传播行为我们只需要掌握两个：REQUIRED、REQUIRES_NEW。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li><p>REQUIRED ：大部分情况下都是用该传播行为即可。</p></li><li><p>REQUIRES_NEW ：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与否，都需要保证日志记录能够记录成功。</p></li></ul></blockquote><h2 id="12-AOP基础"><a href="#12-AOP基础" class="headerlink" title="12.AOP基础"></a>12.AOP基础</h2><h3 id="12-1-AOP概述"><a href="#12-1-AOP概述" class="headerlink" title="12.1 AOP概述"></a>12.1 AOP概述</h3><p>什么是AOP？</p><ul><li>AOP英文全称：Aspect Oriented Programming（面向切面编程、面向方面编程），其实说白了，面向切面编程就是面向特定方法编程。</li></ul><p>那什么又是面向方法编程呢，为什么又需要面向方法编程呢？来我们举个例子做一个说明：</p><p>比如，我们这里有一个项目，项目中开发了很多的业务功能。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230112154547523.png" alt="image-20230112154547523"> </p><p>然而有一些业务功能执行效率比较低，执行耗时较长，我们需要针对于这些业务方法进行优化。 那首先第一步就需要定位出执行耗时比较长的业务方法，再针对于业务方法再来进行优化。</p><p>此时我们就需要统计当前这个项目当中每一个业务方法的执行耗时。那么统计每一个业务方法的执行耗时该怎么实现？</p><p>可能多数人首先想到的就是在每一个业务方法运行之前，记录这个方法运行的开始时间。在这个方法运行完毕之后，再来记录这个方法运行的结束时间。拿结束时间减去开始时间，不就是这个方法的执行耗时吗？</p><img src="/oranfish.github.io/posts/0/image-20230112154605206.png" alt="image-20230112154605206" style="zoom:80%;"> <p>以上分析的实现方式是可以解决需求问题的。但是对于一个项目来讲，里面会包含很多的业务模块，每个业务模块又包含很多增删改查的方法，如果我们要在每一个模块下的业务方法中，添加记录开始时间、结束时间、计算执行耗时的代码，就会让程序员的工作变得非常繁琐。</p><img src="/oranfish.github.io/posts/0/image-20230112154627546.png" alt="image-20230112154627546" style="zoom:80%;"> <p>而AOP面向方法编程，就可以做到在不改动这些原始方法的基础上，针对特定的方法进行功能的增强。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>AOP的作用：在程序运行期间在不修改源代码的基础上对已有方法进行增强（无侵入性: 解耦）</p></blockquote><p>我们要想完成统计各个业务方法执行耗时的需求，我们只需要定义一个模板方法，将记录方法执行耗时这一部分公共的逻辑代码，定义在模板方法当中，在这个方法开始运行之前，来记录这个方法运行的开始时间，在方法结束运行的时候，再来记录方法运行的结束时间，中间就来运行原始的业务方法。</p><img src="/oranfish.github.io/posts/0/image-20230112154530101.png" alt="image-20230112154530101" style="zoom:80%;"> <p>而中间运行的原始业务方法，可能是其中的一个业务方法，比如：我们只想通过 部门管理的 list 方法的执行耗时，那就只有这一个方法是原始业务方法。  而如果，我们是先想统计所有部门管理的业务方法执行耗时，那此时，所有的部门管理的业务方法都是 原始业务方法。 <strong>那面向这样的指定的一个或多个方法进行编程，我们就称之为 面向切面编程。</strong></p><p>那此时，当我们再调用部门管理的 list 业务方法时啊，并不会直接执行 list 方法的逻辑，而是会执行我们所定义的 模板方法 ， 然后再模板方法中：</p><ul><li>记录方法运行开始时间</li><li>运行原始的业务方法（那此时原始的业务方法，就是 list 方法）</li><li>记录方法运行结束时间，计算方法执行耗时</li></ul><img src="/oranfish.github.io/posts/0/image-20230112155813944.png" alt="image-20230112155813944" style="zoom:80%;"> <p>不论，我们运行的是那个业务方法，最后其实运行的就是我们定义的模板方法，而在模板方法中，就完成了原始方法执行耗时的统计操作 。(那这样呢，我们就通过一个模板方法就完成了指定的一个或多个业务方法执行耗时的统计)</p><p>而大家会发现，这个流程，我们是不是似曾相识啊？ </p><p>对了，就是和我们之前所学习的动态代理技术是非常类似的。 我们所说的模板方法，其实就是代理对象中所定义的方法，那代理对象中的方法以及根据对应的业务需要， 完成了对应的业务功能，当运行原始业务方法时，就会运行代理对象中的方法，从而实现统计业务方法执行耗时的操作。</p><p>其实，AOP面向切面编程和OOP面向对象编程一样，它们都仅仅是一种编程思想，而动态代理技术是这种思想最主流的实现方式。而Spring的AOP是Spring框架的高级技术，旨在管理bean对象的过程中底层使用动态代理机制，对特定的方法进行编程(功能增强)。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>AOP的优势：</p><ol><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ol></blockquote><h3 id="12-2-AOP快速入门"><a href="#12-2-AOP快速入门" class="headerlink" title="12.2 AOP快速入门"></a>12.2 AOP快速入门</h3><p>在了解了什么是AOP后，我们下面通过一个快速入门程序，体验下AOP的开发，并掌握Spring中AOP的开发步骤。</p><p><strong>需求：</strong>统计各个业务层方法执行耗时。</p><p><strong>实现步骤：</strong></p><ol><li>导入依赖：在pom.xml中导入AOP的依赖</li><li>编写AOP程序：针对于特定方法根据业务需要进行编程</li></ol><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>为演示方便，可以自建新项目或导入提供的<code>springboot-aop-quickstart</code>项目工程</p></blockquote><p><strong>pom.xml</strong></p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.springframework.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">spring-boot-starter-aop</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p><strong>AOP程序：TimeAspect</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//当前类为切面类</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">TimeAspect</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Around</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">recordTime</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ProceedingJoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">pjp</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Throwable</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//记录方法执行开始时间</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">long</span><span style="color: #BABED8"> begin </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> System</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">currentTimeMillis</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//执行原始方法</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> pjp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">proceed</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//记录方法执行结束时间</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">long</span><span style="color: #BABED8"> end </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> System</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">currentTimeMillis</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//计算方法执行耗时</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">pjp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getSignature</span><span style="color: #89DDFF">()+</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">执行耗时: &#123;&#125;毫秒</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">end</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">begin</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> result</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重新启动SpringBoot服务测试程序：</p><ul><li>查询3号部门信息</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110143404792.png" alt="image-20230110143404792"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110143611669.png" alt="image-20230110143611669"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我们可以再测试下：查询所有部门信息（同样执行AOP程序）</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110143815479.png" alt="image-20230110143815479"></p></blockquote><p>我们通过AOP入门程序完成了业务方法执行耗时的统计，那其实AOP的功能远不止于此，常见的应用场景如下：</p><ul><li>记录系统的操作日志</li><li>权限控制</li><li>事务管理：我们前面所讲解的Spring事务管理，底层其实也是通过AOP来实现的，只要添加@Transactional注解之后，AOP程序自动会在原始方法运行前先来开启事务，在原始方法运行完毕之后提交或回滚事务</li></ul><p>这些都是AOP应用的典型场景。</p><p>通过入门程序，我们也应该感受到了AOP面向切面编程的一些优势：</p><ul><li><p>代码无侵入：没有修改原始的业务方法，就已经对原始的业务方法进行了功能的增强或者是功能的改变</p></li><li><p>减少了重复代码</p></li><li><p>提高开发效率</p></li><li><p>维护方便</p></li></ul><h3 id="12-3-AOP核心概念"><a href="#12-3-AOP核心概念" class="headerlink" title="12.3 AOP核心概念"></a>12.3 AOP核心概念</h3><p>通过SpringAOP的快速入门，感受了一下AOP面向切面编程的开发方式。下面我们再来学习AOP当中涉及到的一些核心概念。</p><p><strong>1. 连接点：JoinPoint</strong>，可以被AOP控制的方法（暗含方法执行时的相关信息）</p><p>​连接点指的是可以被aop控制的方法。例如：入门程序当中所有的业务方法都是可以被aop控制的方法。</p><p>​<img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230112160708474.png" alt="image-20230112160708474"> </p><p>​在SpringAOP提供的JoinPoint当中，封装了连接点方法在执行时的相关信息。（后面会有具体的讲解）</p><p><strong>2. 通知：Advice</strong>，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）</p><p>​在入门程序中是需要统计各个业务方法的执行耗时的，此时我们就需要在这些业务方法运行开始之前，先记录这个方法运行的开始时间，在每一个业务方法运行结束的时候，再来记录这个方法运行的结束时间。</p><p>​但是在AOP面向切面编程当中，我们只需要将这部分重复的代码逻辑抽取出来单独定义。抽取出来的这一部分重复的逻辑，也就是共性的功能。</p><p>​<img src="/oranfish.github.io/posts/0/image-20230112160852883.png" alt="image-20230112160852883" style="zoom:80%;"> </p><p>​</p><p><strong>3. 切入点：PointCut</strong>，匹配连接点的条件，通知仅会在切入点方法执行时被应用</p><p>​在通知当中，我们所定义的共性功能到底要应用在哪些方法上？此时就涉及到了切入点pointcut概念。切入点指的是匹配连接点的条件。通知仅会在切入点方法运行时才会被应用。</p><p>​在aop的开发当中，我们通常会通过一个切入点表达式来描述切入点(后面会有详解)。</p><p>​<img src="/oranfish.github.io/posts/0/image-20230112161131937.png" alt="image-20230112161131937" style="zoom:80%;"> </p><p>​假如：切入点表达式改为DeptServiceImpl.list()，此时就代表仅仅只有list这一个方法是切入点。只有list()方法在运行的时候才会应用通知。</p><p>​</p><p><strong>4. 切面：Aspect</strong>，描述通知与切入点的对应关系（通知+切入点）</p><p>​当通知和切入点结合在一起，就形成了一个切面。通过切面就能够描述当前aop程序需要针对于哪个原始方法，在什么时候执行什么样的操作。</p><p>​<img src="/oranfish.github.io/posts/0/image-20230112161335186.png" alt="image-20230112161335186" style="zoom:80%;"> </p><p>​切面所在的类，我们一般称为<strong>切面类</strong>（被@Aspect注解标识的类）</p><p>​</p><p><strong>5. 目标对象：Target</strong>，通知所应用的对象</p><p>​目标对象指的就是通知所应用的对象，我们就称之为目标对象。</p><p>​<img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230112161657667.png" alt="image-20230112161657667"> </p><p>AOP的核心概念我们介绍完毕之后，接下来我们再来分析一下我们所定义的通知是如何与目标对象结合在一起，对目标对象当中的方法进行功能增强的。</p><img src="/oranfish.github.io/posts/0/image-20230112161821401.png" alt="image-20230112161821401" style="zoom:80%;"> <p>Spring的AOP底层是基于动态代理技术来实现的，也就是说在程序运行的时候，会自动的基于动态代理技术为目标对象生成一个对应的代理对象。在代理对象当中就会对目标对象当中的原始方法进行功能的增强。</p><h2 id="13-AOP进阶"><a href="#13-AOP进阶" class="headerlink" title="13.AOP进阶"></a>13.AOP进阶</h2><p>AOP的基础知识学习完之后，下面我们对AOP当中的各个细节进行详细的学习。主要分为4个部分：</p><ol><li>通知类型</li><li>通知顺序</li><li>切入点表达式</li><li>连接点</li></ol><p>我们先来学习第一部分通知类型。</p><h3 id="13-1-通知顺序"><a href="#13-1-通知顺序" class="headerlink" title="13.1 通知顺序"></a>13.1 通知顺序</h3><p>在入门程序当中，我们已经使用了一种功能最为强大的通知类型：Around环绕通知。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Around</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">recordTime</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ProceedingJoinPoint</span><span style="color: #BABED8"> pjp</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> throws Throwable </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//记录方法执行开始时间</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">long</span><span style="color: #BABED8"> begin </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> System</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">currentTimeMillis</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//执行原始方法</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> pjp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">proceed</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//记录方法执行结束时间</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">long</span><span style="color: #BABED8"> end </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> System</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">currentTimeMillis</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//计算方法执行耗时</span></span><span class="line"><span style="color: #BABED8">    log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">pjp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getSignature</span><span style="color: #89DDFF">()+</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">执行耗时: &#123;&#125;毫秒</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">end</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">begin</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> result</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>只要我们在通知方法上加上了@Around注解，就代表当前通知是一个环绕通知。</p></blockquote><p>Spring中AOP的通知类型：</p><ul><li>@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li><li>@After ：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li><li>@AfterReturning ： 返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li><li>@AfterThrowing ： 异常后通知，此注解标注的通知方法发生异常后执行</li></ul><p>下面我们通过代码演示，来加深对于不同通知类型的理解：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect1</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">JoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">joinPoint</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//环绕通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Around</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">around</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ProceedingJoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">proceedingJoinPoint</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Throwable</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">around before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//调用目标对象的原始方法执行</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> proceedingJoinPoint</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">proceed</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//原始方法如果执行时有异常，环绕通知中的后置代码不会在执行了</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">around after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> result</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//后置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">after</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">JoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">joinPoint</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">AfterReturning</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">afterReturning</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">JoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">joinPoint</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">afterReturning ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//异常通知（程序在出现异常的情况下，执行的后置通知）</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">AfterThrowing</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">afterThrowing</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">JoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">joinPoint</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">afterThrowing ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>重新启动SpringBoot服务，进行测试：</p><p><strong>1. 没有异常情况下：</strong></p><ul><li>使用postman测试查询所有部门数据</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110165514461.png" alt="image-20230110165514461"></p><ul><li>查看idea中控制台日志输出</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110165806934.png" alt="image-20230110165806934"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>程序没有发生异常的情况下，@AfterThrowing标识的通知方法不会执行。</p></blockquote><p><strong>2. 出现异常情况下：</strong></p><p>修改DeptServiceImpl业务实现类中的代码： 添加异常</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Service</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptServiceImpl</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptMapper</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Dept</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Dept</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> deptList </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//模拟异常</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> num </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">/</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> deptList</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重新启动SpringBoot服务，测试发生异常情况下通知的执行：</p><ul><li>查看idea中控制台日志输出</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110171006874.png" alt="image-20230110171006874"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>程序发生异常的情况下：</p><ul><li><p>@AfterReturning标识的通知方法不会执行，@AfterThrowing标识的通知方法执行了</p></li><li><p>@Around环绕通知中原始方法调用时有异常，通知中的环绕后的代码逻辑也不会在执行了 （因为原始方法调用已经出异常了）</p></li></ul></blockquote><p>在使用通知时的注意事项：</p><ul><li>@Around环绕通知需要自己调用 ProceedingJoinPoint.proceed() 来让原始方法执行，其他通知不需要考虑目标方法执行</li><li>@Around环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值，否则原始方法执行完毕，是获取不到返回值的。</li></ul><p>五种常见的通知类型，我们已经测试完毕了，此时我们再来看一下刚才所编写的代码，有什么问题吗？</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//前置通知</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">//环绕通知</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Around</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #676E95; font-style: italic">//后置通知</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">AfterReturning</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">//异常通知（程序在出现异常的情况下，执行的后置通知）</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">AfterThrowing</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span></code></pre></div><p>我们发现啊，每一个注解里面都指定了切入点表达式，而且这些切入点表达式都一模一样。此时我们的代码当中就存在了大量的重复性的切入点表达式，假如此时切入点表达式需要变动，就需要将所有的切入点表达式一个一个的来改动，就变得非常繁琐了。</p><p>怎么来解决这个切入点表达式重复的问题？ 答案就是：<strong>抽取</strong></p><p>Spring提供了@PointCut注解，该注解的作用是将公共的切入点表达式抽取出来，需要用到时引用该切入点表达式即可。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect1</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//切入点方法（公共的切入点表达式）</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Pointcut</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">pt</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置通知（引用切入点）</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">pt()</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">JoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">joinPoint</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//环绕通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Around</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">pt()</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">around</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ProceedingJoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">proceedingJoinPoint</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Throwable</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">around before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//调用目标对象的原始方法执行</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> proceedingJoinPoint</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">proceed</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//原始方法在执行时：发生异常</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//后续代码不在执行</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">around after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> result</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//后置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">pt()</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">after</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">JoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">joinPoint</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">AfterReturning</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">pt()</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">afterReturning</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">JoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">joinPoint</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">afterReturning ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//异常通知（程序在出现异常的情况下，执行的后置通知）</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">AfterThrowing</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">pt()</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">afterThrowing</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">JoinPoint</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">joinPoint</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">afterThrowing ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>需要注意的是：当切入点方法使用private修饰时，仅能在当前切面类中引用该表达式， 当外部其他切面类中也要引用当前类中的切入点表达式，就需要把private改为public，而在引用的时候，具体的语法为：</p><p>全类名.方法名()，具体形式如下：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect2</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//引用MyAspect1切面类中的切入点表达式</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima.aspect.MyAspect1.pt()</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect2 -&gt; before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h3 id="13-2-通知顺序"><a href="#13-2-通知顺序" class="headerlink" title="13.2 通知顺序"></a>13.2 通知顺序</h3><p>讲解完了Spring中AOP所支持的5种通知类型之后，接下来我们再来研究通知的执行顺序。</p><p>当在项目开发当中，我们定义了多个切面类，而多个切面类中多个切入点都匹配到了同一个目标方法。此时当目标方法在运行的时候，这多个切面类当中的这些通知方法都会运行。</p><p>此时我们就有一个疑问，这多个通知方法到底哪个先运行，哪个后运行？ 下面我们通过程序来验证（这里呢，我们就定义两种类型的通知进行测试，一种是前置通知@Before，一种是后置通知@After）</p><p>定义多个切面类：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect2</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect2 -&gt; before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//后置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">after</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect2 -&gt; after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect3</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect3 -&gt; before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//后置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">after</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect3 -&gt;  after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect4</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect4 -&gt; before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//后置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">after</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect4 -&gt; after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>重新启动SpringBoot服务，测试通知的执行顺序：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>备注：</p><ol><li><p>把DeptServiceImpl实现类中模拟异常的代码删除或注释掉。</p></li><li><p>注释掉其他切面类(把@Aspect注释即可)，仅保留MyAspect2、MyAspect3、MyAspect4 ，这样就可以清晰看到执行的结果，而不被其他切面类干扰。</p></li></ol></blockquote><ul><li>使用postman测试查询所有部门数据</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110165514461-17076437996792.png" alt="image-20230110165514461"></p><ul><li>查看idea中控制台日志输出</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110211208549.png" alt="image-20230110211208549"></p><p>通过以上程序运行可以看出在不同切面类中，默认按照切面类的类名字母排序：</p><ul><li>目标方法前的通知方法：字母排名靠前的先执行</li><li>目标方法后的通知方法：字母排名靠前的后执行</li></ul><p>如果我们想控制通知的执行顺序有两种方式：</p><ol><li>修改切面类的类名（这种方式非常繁琐、而且不便管理）</li><li>使用Spring提供的@Order注解</li></ol><p>使用@Order注解，控制通知的执行顺序：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Order</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">)</span><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect2</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect2 -&gt; before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//后置通知 </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">after</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect2 -&gt; after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Order</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">)</span><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect3</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect3 -&gt; before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//后置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">after</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect3 -&gt;  after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Order</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect4</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect4 -&gt; before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//后置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(* com.itheima.service.*.*(..))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">after</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect4 -&gt; after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重新启动SpringBoot服务，测试通知执行顺序：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110212523787.png" alt="image-20230110212523787"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>通知的执行顺序大家主要知道两点即可：</p><ol><li>不同的切面类当中，默认情况下通知的执行顺序是与切面类的类名字母排序是有关系的</li><li>可以在切面类上面加上@Order注解，来控制不同的切面类通知的执行顺序</li></ol></blockquote><h3 id="13-3-切入点表示式"><a href="#13-3-切入点表示式" class="headerlink" title="13.3 切入点表示式"></a>13.3 切入点表示式</h3><p>从AOP的入门程序到现在，我们一直都在使用切入点表达式来描述切入点。下面我们就来详细的介绍一下切入点表达式的具体写法。</p><p>切入点表达式：</p><ul><li><p>描述切入点方法的一种表达式</p></li><li><p>作用：主要用来决定项目中的哪些方法需要加入通知</p></li><li><p>常见形式：</p><ol><li>execution(……)：根据方法的签名来匹配</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110214150215.png" alt="image-20230110214150215"></p><ol start="2"><li>@annotation(……) ：根据注解匹配</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110214242083.png" alt="image-20230110214242083"></p></li></ul><p>首先我们先学习第一种最为常见的execution切入点表达式。</p><h4 id="13-3-1-execution"><a href="#13-3-1-execution" class="headerlink" title="13.3.1 execution"></a>13.3.1 execution</h4><p>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">execution(访问修饰符?  返回值  包名.类名.?方法名(方法参数) throws 异常?)</span></span></code></pre></div><p>其中带<code>?</code>的表示可以省略的部分</p><ul><li><p>访问修饰符：可省略（比如: public、protected）</p></li><li><p>包名.类名： 可省略</p></li><li><p>throws 异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）</p></li></ul><p>示例：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">execution(void com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span></code></pre></div><p>可以使用通配符描述切入点</p><ul><li><p><code>*</code> ：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</p></li><li><p><code>..</code> ：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</p></li></ul><p>切入点表达式的语法规则：</p><ol><li>方法的访问修饰符可以省略</li><li>返回值可以使用<code>*</code>号代替（任意返回值类型）</li><li>包名可以使用<code>*</code>号代替，代表任意包（一层包使用一个<code>*</code>）</li><li>使用<code>..</code>配置包名，标识此包以及此包下的所有子包</li><li>类名可以使用<code>*</code>号代替，标识任意类</li><li>方法名可以使用<code>*</code>号代替，表示任意方法</li><li>可以使用 <code>*</code>  配置参数，一个任意类型的参数</li><li>可以使用<code>..</code> 配置参数，任意个任意类型的参数</li></ol><p><strong>切入点表达式示例</strong></p><ul><li><p>省略方法的修饰符号 </p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">void</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">itheima</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">service</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">impl</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">DeptServiceImpl</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">java</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">lang</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">Integer</span><span style="color: #89DDFF">))</span></span></code></pre></div></li><li><p>使用<code>*</code>代替返回值类型</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">itheima</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">service</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">impl</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">DeptServiceImpl</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">java</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">lang</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">Integer</span><span style="color: #89DDFF">))</span></span></code></pre></div></li><li><p>使用<code>*</code>代替包名（一层包使用一个<code>*</code>）</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">itheima</span><span style="color: #89DDFF">.*.*.</span><span style="color: #BABED8">DeptServiceImpl</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">java</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">lang</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">Integer</span><span style="color: #89DDFF">))</span></span></code></pre></div></li><li><p>使用<code>..</code>省略包名</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">..</span><span style="color: #BABED8">DeptServiceImpl</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">java</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">lang</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">Integer</span><span style="color: #89DDFF">))</span><span style="color: #BABED8">    </span></span></code></pre></div></li><li><p>使用<code>*</code>代替类名</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">..*.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">java</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">lang</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">Integer</span><span style="color: #89DDFF">))</span><span style="color: #BABED8">   </span></span></code></pre></div></li><li><p>使用<code>*</code>代替方法名</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">..*.*(</span><span style="color: #BABED8">java</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">lang</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">Integer</span><span style="color: #89DDFF">))</span><span style="color: #BABED8">   </span></span></code></pre></div></li><li><p>使用 <code>*</code> 代替参数</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">itheima</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">service</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">impl</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">DeptServiceImpl</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(*))</span></span></code></pre></div></li><li><p>使用<code>..</code>省略参数</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">..*.*(..))</span></span></code></pre></div></li></ul><p>​</p><p>注意事项：</p><ul><li><p>根据业务需要，可以使用 且（&amp;&amp;）、或（||）、非（!） 来组合比较复杂的切入点表达式。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">itheima</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">service</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">DeptService</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">(..))</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">||</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">itheima</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">service</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">DeptService</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(..))</span></span></code></pre></div></li></ul><p>切入点表达式的书写建议：</p><ul><li><p>所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如：查询类方法都是 find 开头，更新类方法都是update开头</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//业务类</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Service</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptServiceImpl</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Dept</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">findAllDept</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">       </span><span style="color: #676E95; font-style: italic">//省略代码...</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Dept</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">findDeptById</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">       </span><span style="color: #676E95; font-style: italic">//省略代码...</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">updateDeptById</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">       </span><span style="color: #676E95; font-style: italic">//省略代码...</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">updateDeptByMoreCondition</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Dept</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">dept</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">       </span><span style="color: #676E95; font-style: italic">//省略代码...</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//匹配DeptServiceImpl类中以find开头的方法</span></span><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">itheima</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">service</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">impl</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">DeptServiceImpl</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">find</span><span style="color: #89DDFF">*(..))</span></span></code></pre></div></li><li><p>描述切入点方法通常基于接口描述，而不是直接描述实现类，增强拓展性</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">itheima</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">service</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">DeptService</span><span style="color: #89DDFF">.*(..))</span></span></code></pre></div></li><li><p>在满足业务需要的前提下，尽量缩小切入点的匹配范围。如：包名匹配尽量不使用 ..，使用 * 匹配单个包</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #82AAFF">execution</span><span style="color: #89DDFF">(*</span><span style="color: #BABED8"> com</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">itheima</span><span style="color: #89DDFF">.*.*.</span><span style="color: #BABED8">DeptServiceImpl</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">find</span><span style="color: #89DDFF">*(..))</span></span></code></pre></div></li></ul><h4 id="13-3-2-annotation"><a href="#13-3-2-annotation" class="headerlink" title="13.3.2 @annotation"></a>13.3.2 @annotation</h4><p>已经学习了execution切入点表达式的语法。那么如果我们要匹配多个无规则的方法，比如：list()和 delete()这两个方法。这个时候我们基于execution这种切入点表达式来描述就不是很方便了。而在之前我们是将两个切入点表达式组合在了一起完成的需求，这个是比较繁琐的。</p><p>我们可以借助于另一种切入点表达式annotation来描述这一类的切入点，从而来简化切入点表达式的书写。</p><p>实现步骤：</p><ol><li><p>编写自定义注解</p></li><li><p>在业务类要做为连接点的方法上添加自定义注解</p></li></ol><p><strong>自定义注解</strong>：MyLog</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Target</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">ElementType</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">METHOD</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Retention</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">RetentionPolicy</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">RUNTIME</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #C792EA">MyLog</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p><strong>业务类</strong>：DeptServiceImpl</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Service</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptServiceImpl</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptMapper</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">MyLog</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//自定义注解（表示：当前方法属于目标方法）</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Dept</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Dept</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> deptList </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//模拟异常</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//int num = 10/0;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> deptList</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">MyLog</span><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic">//自定义注解（表示：当前方法属于目标方法）</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//1. 删除部门</span></span><span class="line"><span style="color: #BABED8">        deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">save</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Dept</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">dept</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        dept</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setCreateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        dept</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setUpdateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">save</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">dept</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Dept</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getById</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getById</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">update</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Dept</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">dept</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        dept</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setUpdateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">update</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">dept</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p><strong>切面类</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Aspect</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyAspect6</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//针对list方法、delete方法进行前置通知和后置通知</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Before</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">@annotation(com.itheima.anno.MyLog)</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect6 -&gt; before ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//后置通知</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">After</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">@annotation(com.itheima.anno.MyLog)</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">after</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">MyAspect6 -&gt; after ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重启SpringBoot服务，测试查询所有部门数据，查看控制台日志：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230110224447047.png" alt="image-20230110224447047"></p><p>到此我们两种常见的切入点表达式我已经介绍完了。</p><ul><li>execution切入点表达式<ul><li>根据我们所指定的方法的描述信息来匹配切入点方法，这种方式也是最为常用的一种方式</li><li>如果我们要匹配的切入点方法的方法名不规则，或者有一些比较特殊的需求，通过execution切入点表达式描述比较繁琐</li></ul></li><li>annotation 切入点表达式<ul><li>基于注解的方式来匹配切入点方法。这种方式虽然多一步操作，我们需要自定义一个注解，但是相对来比较灵活。我们需要匹配哪个方法，就在方法上加上对应的注解就可以了</li></ul></li></ul><h3 id="13-4-连接点"><a href="#13-4-连接点" class="headerlink" title="13.4 连接点"></a>13.4 连接点</h3><p>讲解完了切入点表达式之后，接下来我们再来讲解最后一个部分连接点。我们前面在讲解AOP核心概念的时候，我们提到过什么是连接点，连接点可以简单理解为可以被AOP控制的方法。</p><p>我们目标对象当中所有的方法是不是都是可以被AOP控制的方法。而在SpringAOP当中，连接点又特指方法的执行。</p><p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p><ul><li><p>对于@Around通知，获取连接点信息只能使用ProceedingJoinPoint类型</p></li><li><p>对于其他四种通知，获取连接点信息只能使用JoinPoint，它是ProceedingJoinPoint的父类型</p></li></ul><h2 id="14-配置优先级"><a href="#14-配置优先级" class="headerlink" title="14.配置优先级"></a>14.配置优先级</h2><p>在我们前面的课程当中，我们已经讲解了SpringBoot项目当中支持的三类配置文件：</p><ul><li>application.properties</li><li>application.yml</li><li>application.yaml</li></ul><p>在SpringBoot项目当中，我们要想配置一个属性，可以通过这三种方式当中的任意一种来配置都可以，那么如果项目中同时存在这三种配置文件，且都配置了同一个属性，如：Tomcat端口号，到底哪一份配置文件生效呢？</p><ul><li>application.properties</li></ul><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">server.port</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">8081</span></span></code></pre></div><ul><li>application.yml</li></ul><div class="language-yaml"><button title="Copy code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">server</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8082</span></span></code></pre></div><ul><li>application.yaml</li></ul><div class="language-yaml"><button title="Copy code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">server</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8082</span></span></code></pre></div><p>我们启动SpringBoot程序，测试下三个配置文件中哪个Tomcat端口号生效：</p><ul><li>properties、yaml、yml三种配置文件同时存在</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113144757856.png" alt="image-20230113144757856"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>properties、yaml、yml三种配置文件，优先级最高的是properties</p></blockquote><ul><li>yaml、yml两种配置文件同时存在</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113145158771.png" alt="image-20230113145158771"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>配置文件优先级排名（从高到低）：</p><ol><li>properties配置文件</li><li>yml配置文件</li><li>yaml配置文件</li></ol></blockquote><p>注意事项：虽然springboot支持多种格式配置文件，但是在项目开发时，推荐统一使用一种格式的配置。（yml是主流）</p><p>在SpringBoot项目当中除了以上3种配置文件外，SpringBoot为了增强程序的扩展性，除了支持配置文件的配置方式以外，还支持另外两种常见的配置方式：</p><ol><li><p>Java系统属性配置 （格式： -Dkey&#x3D;value）</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">-Dserver.port</span><span style="color: #BABED8">=9000</span></span></code></pre></div></li><li><p>命令行参数 （格式：–key&#x3D;value）</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">--server.port</span><span style="color: #BABED8">=10010</span></span></code></pre></div></li></ol><p>那在idea当中运行程序时，如何来指定Java系统属性和命令行参数呢？</p><ul><li>编辑启动程序的配置信息</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113162746634.png" alt="image-20230113162746634"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113162639630.png" alt="image-20230113162639630"></p><p>重启服务，同时配置Tomcat端口(三种配置文件、系统属性、命令行参数)，测试哪个Tomcat端口号生效：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113165006550.png" alt="image-20230113165006550"></p><p>删除命令行参数配置，重启SpringBoot服务：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113170841253.png" alt="image-20230113170841253"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>优先级： 命令行参数 &gt;  系统属性参数 &gt; properties参数 &gt; yml参数 &gt; yaml参数</p></blockquote><p>思考：如果项目已经打包上线了，这个时候我们又如何来设置Java系统属性和命令行参数呢？</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">java</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-Dserver.port=9000</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-jar</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">XXXXX.jar</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--server.port=10010</span></span></code></pre></div><p>下面我们来演示下打包程序运行时指定Java系统属性和命令行参数：</p><ol><li>执行maven打包指令package，把项目打成jar文件</li><li>使用命令：java -jar 方式运行jar文件程序</li></ol><p>项目打包：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113172313655.png" alt="image-20230113172313655"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113172854016.png" alt="image-20230113172854016"></p><p>运行jar程序：</p><ul><li>同时设置Java系统属性和命令行参数</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113172659269.png" alt="image-20230113172659269"></p><ul><li>仅设置Java系统属性</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113173228232.png" alt="image-20230113173228232"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：</p><ul><li>Springboot项目进行打包时，需要引入插件 spring-boot-maven-plugin (基于官网骨架创建项目，会自动添加该插件)</li></ul></blockquote><p>在SpringBoot项目当中，常见的属性配置方式有5种， 3种配置文件，加上2种外部属性的配置(Java系统属性、命令行参数)。通过以上的测试，我们也得出了优先级(从低到高)：</p><ul><li>application.yaml（忽略）</li><li>application.yml</li><li>application.properties</li><li>java系统属性（-Dxxx&#x3D;xxx）</li><li>命令行参数（–xxx&#x3D;xxx）</li></ul><h2 id="15-Bean管理"><a href="#15-Bean管理" class="headerlink" title="15.Bean管理"></a>15.Bean管理</h2><h3 id="15-1-获取Bean"><a href="#15-1-获取Bean" class="headerlink" title="15.1 获取Bean"></a>15.1 获取Bean</h3><p>默认情况下，SpringBoot项目在启动的时候会自动的创建IOC容器(也称为Spring容器)，并且在启动的过程当中会自动的将bean对象都创建好，存放在IOC容器当中。应用程序在运行时需要依赖什么bean对象，就直接进行依赖注入就可以了。</p><p>而在Spring容器中提供了一些方法，可以主动从IOC容器中获取到bean对象，下面介绍3种常用方式：</p><ol><li><p>根据name获取bean</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">)</span></span></code></pre></div></li><li><p>根据类型获取bean</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">T</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #C792EA">T</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Class</span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">T</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> requiredType</span><span style="color: #89DDFF">)</span></span></code></pre></div></li><li><p>根据name获取bean（带类型转换）</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">T</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #C792EA">T</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Class</span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">T</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> requiredType</span><span style="color: #89DDFF">)</span></span></code></pre></div></li></ol><p>思考：要从IOC容器当中来获取到bean对象，需要先拿到IOC容器对象，怎么样才能拿到IOC容器呢？</p><ul><li>想获取到IOC容器，直接将IOC容器对象注入进来就可以了</li></ul><p>控制器：DeptController</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/depts</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptService</span><span style="color: #BABED8"> deptService</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">DeptController</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DeptController constructor ....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">GetMapping</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Dept</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> deptList </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> deptService</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">deptList</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">DeleteMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/&#123;id&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">PathVariable</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        deptService</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">PostMapping</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">save</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">RequestBody</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Dept</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">dept</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        deptService</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">save</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">dept</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>业务实现类：DeptServiceImpl</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Service</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptServiceImpl</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptService</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptMapper</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Dept</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Dept</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> deptList </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> deptList</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">save</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Dept</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">dept</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        dept</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setCreateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        dept</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setUpdateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        deptMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">save</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">dept</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>Mapper接口：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//查询全部部门数据</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Select</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">select * from dept</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Dept</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//删除部门</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Delete</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">delete from dept where id = #&#123;id&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//新增部门</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Insert</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">insert into dept(name, create_time, update_time) values (#&#123;name&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">save</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Dept</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">dept</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>测试类：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootWebConfig2ApplicationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ApplicationContext</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//IOC容器对象</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//获取bean对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testGetBean</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//根据bean的名称获取</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">DeptController</span><span style="color: #BABED8"> bean1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">DeptController</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">deptController</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">bean1</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//根据bean的类型获取</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">DeptController</span><span style="color: #BABED8"> bean2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">DeptController</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">bean2</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//根据bean的名称 及 类型获取</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">DeptController</span><span style="color: #BABED8"> bean3 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">deptController</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> DeptController</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">bean3</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>程序运行后控制台日志：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113211619818.png" alt="image-20230113211619818"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>问题：输出的bean对象地址值是一样的，说明IOC容器当中的bean对象有几个？</p><p>答案：只有一个。        （默认情况下，IOC中的bean对象是单例）</p><p>那么能不能将bean对象设置为非单例的(每次获取的bean都是一个新对象)？</p><p>可以，在下一个知识点(bean作用域)中讲解。</p></blockquote><p>注意事项：</p><ul><li>上述所说的 【Spring项目启动时，会把其中的bean都创建好】还会受到作用域及延迟初始化影响，这里主要针对于默认的单例非延迟加载的bean而言。</li></ul><h3 id="15-2-Bean作用域"><a href="#15-2-Bean作用域" class="headerlink" title="15.2 Bean作用域"></a>15.2 Bean作用域</h3><p>在前面我们提到的IOC容器当中，默认bean对象是单例模式(只有一个实例对象)。那么如何设置bean对象为非单例呢？需要设置bean的作用域。</p><p>在Spring中支持五种作用域，后三种在web环境才生效：</p><table><thead><tr><th><strong>作用域</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>singleton</td><td>容器内同名称的bean只有一个实例（单例）（默认）</td></tr><tr><td>prototype</td><td>每次使用该bean时会创建新的实例（非单例）</td></tr><tr><td>request</td><td>每个请求范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>session</td><td>每个会话范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>application</td><td>每个应用范围内会创建新的实例（web环境中，了解）</td></tr></tbody></table><p>知道了bean的5种作用域了，我们要怎么去设置一个bean的作用域呢？</p><ul><li>可以借助Spring中的@Scope注解来进行配置作用域</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230113214244144.png" alt="image-20230113214244144"></p><p><strong>1). 测试一</strong></p><ul><li>控制器</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//默认bean的作用域为：singleton (单例)</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Lazy</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//延迟加载（第一次使用bean对象时，才会创建bean对象并交给ioc容器管理）</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/depts</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptService</span><span style="color: #BABED8"> deptService</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">DeptController</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DeptController constructor ....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ul><li>测试类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootWebConfig2ApplicationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ApplicationContext</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//IOC容器对象</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//bean的作用域</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testScope</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">DeptController</span><span style="color: #BABED8"> deptController </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">DeptController</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">deptController</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重启SpringBoot服务，运行测试方法，查看控制台打印的日志：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114001348839.png" alt="image-20230114001348839"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：</p><ul><li><p>IOC容器中的bean默认使用的作用域：singleton (单例)</p></li><li><p>默认singleton的bean，在容器启动时被创建，可以使用@Lazy注解来延迟初始化(延迟到第一次使用时)</p></li></ul></blockquote><p><strong>2). 测试二</strong></p><p>修改控制器DeptController代码：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Scope</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">prototype</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//bean作用域为非单例</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Lazy</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//延迟加载</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/depts</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DeptController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">DeptService</span><span style="color: #BABED8"> deptService</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">DeptController</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DeptController constructor ....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重启SpringBoot服务，再次执行测试方法，查看控制吧打印的日志：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114001736151.png" alt="image-20230114001736151"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：</p><ul><li>prototype的bean，每一次使用该bean的时候都会创建一个新的实例</li><li>实际开发当中，绝大部分的Bean是单例的，也就是说绝大部分Bean不需要配置scope属性</li></ul></blockquote><h3 id="15-3-第三方Bean"><a href="#15-3-第三方Bean" class="headerlink" title="15.3 第三方Bean"></a>15.3 第三方Bean</h3><p>学习完bean的获取、bean的作用域之后，接下来我们再来学习第三方bean的配置。</p><p>之前我们所配置的bean，像controller、service，dao三层体系下编写的类，这些类都是我们在项目当中自己定义的类(自定义类)。当我们要声明这些bean，也非常简单，我们只需要在类上加上@Component以及它的这三个衍生注解（@Controller、@Service、@Repository），就可以来声明这个bean对象了。<br>但是在我们项目开发当中，还有一种情况就是这个类它不是我们自己编写的，而是我们引入的第三方依赖当中提供的。</p><p>在pom.xml文件中，引入dom4j：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">&lt;!--Dom4j--&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.dom4j</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">dom4j</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">2.1.3</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>dom4j就是第三方组织提供的。 dom4j中的SAXReader类就是第三方编写的。</p></blockquote><p>当我们需要使用到SAXReader对象时，直接进行依赖注入是不是就可以了呢？</p><ul><li>按照我们之前的做法，需要在SAXReader类上添加一个注解@Component（将当前类交给IOC容器管理）</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114003903285.png" alt="image-20230114003903285"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>结论：第三方提供的类是只读的。无法在第三方类上添加@Component注解或衍生注解。</p></blockquote><p>那么我们应该怎样使用并定义第三方的bean呢？</p><ul><li>如果要管理的bean对象来自于第三方（不是自定义的），是无法用@Component 及衍生注解声明bean的，就需要用到**@Bean**注解。</li></ul><p><strong>解决方案1：在启动类上添加@Bean标识的方法</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootApplication</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootWebConfig2Application</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        SpringApplication</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">run</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">SpringbootWebConfig2Application</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> args</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//声明第三方bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">SAXReader</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">saxReader</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">SAXReader</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>xml文件：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;?</span><span style="color: #F07178">xml</span><span style="color: #C792EA"> version</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA"> encoding</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">UTF-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">?&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">emp</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">name</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">Tom</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">name</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">age</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">18</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">age</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">emp</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span></code></pre></div><p>测试类：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootWebConfig2ApplicationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">SAXReader</span><span style="color: #BABED8"> saxReader</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//第三方bean的管理</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testThirdBean</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Document</span><span style="color: #BABED8"> document </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> saxReader</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">read</span><span style="color: #89DDFF">(this.</span><span style="color: #82AAFF">getClass</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">getClassLoader</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">getResource</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.xml</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Element</span><span style="color: #BABED8"> rootElement </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> document</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getRootElement</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> rootElement</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">element</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">getText</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> age </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> rootElement</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">element</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">getText</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">name </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D"> : </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>重启SpringBoot服务，执行测试方法后，控制台输出日志：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">Tom : 18</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>说明：以上在启动类中声明第三方Bean的作法，不建议使用（项目中要保证启动类的纯粹性）</strong></p></blockquote><p><strong>解决方案2：在配置类中定义@Bean标识的方法</strong></p><ul><li>如果需要定义第三方Bean时， 通常会单独定义一个配置类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//配置类  (在配置类当中对第三方bean进行集中的配置管理)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">CommonConfig</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//声明第三方bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span></span><span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">//通过@Bean注解的name/value属性指定bean名称, 如果未指定, 默认是方法名</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">SAXReader</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">reader</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">DeptService</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">deptService</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">deptService</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">SAXReader</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>注释掉SpringBoot启动类中创建第三方bean对象的代码，重启服务，执行测试方法，查看控制台日志：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">Tom : 18</span></span></code></pre></div><p>在方法上加上一个@Bean注解，Spring 容器在启动的时候，它会自动的调用这个方法，并将方法的返回值声明为Spring容器当中的Bean对象。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项 ：</p><ul><li><p>通过@Bean注解的name或value属性可以声明bean的名称，如果不指定，默认bean的名称就是方法名。</p></li><li><p>如果第三方bean需要依赖其它bean对象，直接在bean定义方法中设置形参即可，容器会根据类型自动装配。</p></li></ul></blockquote><p>关于Bean大家只需要保持一个原则：</p><ul><li>如果是在项目当中我们自己定义的类，想将这些类交给IOC容器管理，我们直接使用@Component以及它的衍生注解来声明就可以。</li><li>如果这个类它不是我们自己定义的，而是引入的第三方依赖当中提供的类，而且我们还想将这个类交给IOC容器管理。此时我们就需要在配置类中定义一个方法，在方法上加上一个@Bean注解，通过这种方式来声明第三方的bean对象。</li></ul><h2 id="16-SpringBoot原理"><a href="#16-SpringBoot原理" class="headerlink" title="16.SpringBoot原理"></a>16.SpringBoot原理</h2><p>SpringBoot使我们能够集中精力地去关注业务功能的开发，而不用过多地关注框架本身的配置使用。而我们前面所讲解的都是面向应用层面的技术，接下来我们开始学习SpringBoot的原理，这部分内容偏向于底层的原理分析。</p><p>在剖析SpringBoot的原理之前，我们先来快速回顾一下我们前面所讲解的Spring家族的框架。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114171304644.png" alt="image-20230114171304644"></p><p>Spring是目前世界上最流行的Java框架，它可以帮助我们更加快速、更加容易的来构建Java项目。而在Spring家族当中提供了很多优秀的框架，而所有的框架都是基于一个基础框架的SpringFramework(也就是Spring框架)。而前面我们也提到，如果我们直接基于Spring框架进行项目的开发，会比较繁琐。</p><p>这个繁琐主要体现在两个地方：</p><ol><li>在pom.xml中依赖配置比较繁琐，在项目开发时，需要自己去找到对应的依赖，还需要找到依赖它所配套的依赖以及对应版本，否则就会出现版本冲突问题。</li><li>在使用Spring框架进行项目开发时，需要在Spring的配置文件中做大量的配置，这就造成Spring框架入门难度较大，学习成本较高。</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114170610438.png" alt="image-20230114170610438"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>基于Spring存在的问题，官方在Spring框架4.0版本之后，又推出了一个全新的框架：SpringBoot。</p><p>通过 SpringBoot来简化Spring框架的开发(是简化不是替代)。我们直接基于SpringBoot来构建Java项目，会让我们的项目开发更加简单，更加快捷。</p></blockquote><p>SpringBoot框架之所以使用起来更简单更快捷，是因为SpringBoot框架底层提供了两个非常重要的功能：一个是起步依赖，一个是自动配置。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114172442018.png" alt="image-20230114172442018"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>通过SpringBoot所提供的起步依赖，就可以大大的简化pom文件当中依赖的配置，从而解决了Spring框架当中依赖配置繁琐的问题。</p><p>通过自动配置的功能就可以大大的简化框架在使用时bean的声明以及bean的配置。我们只需要引入程序开发时所需要的起步依赖，项目开发时所用到常见的配置都已经有了，我们直接使用就可以了。</p></blockquote><p>简单回顾之后，接下来我们来学习下SpringBoot的原理。其实学习SpringBoot的原理就是来解析SpringBoot当中的起步依赖与自动配置的原理。我们首先来学习SpringBoot当中起步依赖的原理。</p><h3 id="16-1-起步依赖"><a href="#16-1-起步依赖" class="headerlink" title="16.1 起步依赖"></a>16.1 起步依赖</h3><p>假如我们没有使用SpringBoot，用的是Spring框架进行web程序的开发，此时我们就需要引入web程序开发所需要的一些依赖。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114173645101.png" alt="image-20230114173645101"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>spring-webmvc依赖：这是Spring框架进行web程序开发所需要的依赖</p><p>servlet-api依赖：Servlet基础依赖</p><p>jackson-databind依赖：JSON处理工具包</p><p>如果要使用AOP，还需要引入aop依赖、aspect依赖</p><p>项目中所引入的这些依赖，还需要保证版本匹配，否则就可能会出现版本冲突问题。</p></blockquote><p>如果我们使用了SpringBoot，就不需要像上面这么繁琐的引入依赖了。我们只需要引入一个依赖就可以了，那就是web开发的起步依赖：springboot-starter-web。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114174805852.png" alt="image-20230114174805852"></p><p>为什么我们只需要引入一个web开发的起步依赖，web开发所需要的所有的依赖都有了呢？</p><ul><li>因为Maven的依赖传递。</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li><p>在SpringBoot给我们提供的这些起步依赖当中，已提供了当前程序开发所需要的所有的常见依赖(官网地址：<a href="https://docs.spring.io/spring-boot/docs/2.7.7/reference/htmlsingle/#using.build-systems.starters)%E3%80%82">https://docs.spring.io/spring-boot/docs/2.7.7/reference/htmlsingle/#using.build-systems.starters)。</a></p></li><li><p>比如：springboot-starter-web，这是web开发的起步依赖，在web开发的起步依赖当中，就集成了web开发中常见的依赖：json、web、webmvc、tomcat等。我们只需要引入这一个起步依赖，其他的依赖都会自动的通过Maven的依赖传递进来。</p></li></ul></blockquote><p><strong>结论：起步依赖的原理就是Maven的依赖传递。</strong></p><h3 id="16-2-自动配置"><a href="#16-2-自动配置" class="headerlink" title="16.2 自动配置"></a>16.2 自动配置</h3><p>我们讲解了SpringBoot当中起步依赖的原理，就是Maven的依赖传递。接下来我们解析下自动配置的原理，我们要分析自动配置的原理，首先要知道什么是自动配置。</p><h4 id="16-2-1-概述"><a href="#16-2-1-概述" class="headerlink" title="16.2.1 概述"></a>16.2.1 概述</h4><p>SpringBoot的自动配置就是当Spring容器启动后，一些配置类、bean对象就自动存入到了IOC容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>比如：我们要进行事务管理、要进行AOP程序的开发，此时就不需要我们再去手动的声明这些bean对象了，我们直接使用就可以从而大大的简化程序的开发，省去了繁琐的配置操作。</p></blockquote><p>下面我们打开idea，一起来看下自动配置的效果：</p><ul><li>运行SpringBoot启动类</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114205745221.png" alt="image-20230114205745221"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114213945851.png" alt="image-20230114213945851"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114212750007.png" alt="image-20230114212750007"></p><p>大家会看到有两个CommonConfig，在第一个CommonConfig类中定义了一个bean对象，bean对象的名字叫reader。</p><p>在第二个CommonConfig中它的bean名字叫commonConfig，为什么还会有这样一个bean对象呢？原因是在CommonConfig配置类上添加了一个注解@Configuration，而@Configuration底层就是@Component</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114220159619.png" alt="image-20230114220159619"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>所以配置类最终也是SpringIOC容器当中的一个bean对象</p></blockquote><p>在IOC容器中除了我们自己定义的bean以外，还有很多配置类，这些配置类都是SpringBoot在启动的时候加载进来的配置类。这些配置类加载进来之后，它也会生成很多的bean对象。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114221341811.png" alt="image-20230114221341811"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>比如：配置类GsonAutoConfiguration里面有一个bean，bean的名字叫gson，它的类型是Gson。 </p><p>com.google.gson.Gson是谷歌包中提供的用来处理JSON格式数据的。</p></blockquote><p>当我们想要使用这些配置类中生成的bean对象时，可以使用@Autowired就自动注入了：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">google</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">gson</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Gson</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">itheima</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">pojo</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Result</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">junit</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">jupiter</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">api</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Test</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">beans</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">factory</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">annotation</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Autowired</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">boot</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">test</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">context</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">SpringBootTest</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AutoConfigurationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Gson</span><span style="color: #BABED8"> gson</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testJson</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> json </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> gson</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toJson</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">json</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>添加断点，使用debug模式运行测试类程序：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114222245520.png" alt="image-20230114222245520"></p><p>问题：在当前项目中我们并没有声明谷歌提供的Gson这么一个bean对象，然后我们却可以通过@Autowired从Spring容器中注入bean对象，那么这个bean对象怎么来的？</p><p>答案：SpringBoot项目在启动时通过自动配置完成了bean对象的创建。</p><p>体验了SpringBoot的自动配置了，下面我们就来分析自动配置的原理。其实分析自动配置原理就是来解析在SpringBoot项目中，在引入依赖之后是如何将依赖jar包当中所定义的配置类以及bean加载到SpringIOC容器中的。</p><h4 id="16-2-2-常见方案"><a href="#16-2-2-常见方案" class="headerlink" title="16.2.2 常见方案"></a>16.2.2 常见方案</h4><p>我们知道了什么是自动配置之后，接下来我们就要来剖析自动配置的原理。解析自动配置的原理就是分析在 SpringBoot项目当中，我们引入对应的依赖之后，是如何将依赖jar包当中所提供的bean以及配置类直接加载到当前项目的SpringIOC容器当中的。</p><p>接下来，我们就直接通过代码来分析自动配置原理。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>准备工作：在Idea中导入”资料\03. 自动配置原理”下的itheima-utils工程</p></blockquote><p>1、在SpringBoot项目 spring-boot-web-config2 工程中，通过坐标引入itheima-utils依赖</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114224107653.png" alt="image-20230114224107653"></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">TokenParser</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">parse</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">TokenParser ... parse ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>2、在测试类中，添加测试方法</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AutoConfigurationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ApplicationContext</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testTokenParse</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">applicationContext</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">TokenParser</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>3、执行测试方法</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114225018255.png" alt="image-20230114225018255"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>异常信息描述： 没有com.example.TokenParse类型的bean</p><p>说明：在Spring容器中没有找到com.example.TokenParse类型的bean对象</p></blockquote><p>思考：引入进来的第三方依赖当中的bean以及配置类为什么没有生效？</p><ul><li>原因在我们之前讲解IOC的时候有提到过，在类上添加@Component注解来声明bean对象时，还需要保证@Component注解能被Spring的组件扫描到。</li><li>SpringBoot项目中的@SpringBootApplication注解，具有包扫描的作用，但是它只会扫描启动类所在的当前包以及子包。 </li><li>当前包：com.itheima， 第三方依赖中提供的包：com.example（扫描不到）</li></ul><p>那么如何解决以上问题的呢？</p><ul><li>方案1：@ComponentScan 组件扫描</li><li>方案2：@Import 导入（使用@Import导入的类会被Spring加载到IOC容器中）</li></ul><p>@ComponentScan组件扫描</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootApplication</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">ComponentScan</span><span style="color: #89DDFF">(&#123;</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.example</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&#125;)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//指定要扫描的包</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootWebConfig2Application</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        SpringApplication</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">run</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">SpringbootWebConfig2Application</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> args</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>重新执行测试方法，控制台日志输出：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114231121016.png" alt="image-20230114231121016"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>大家可以想象一下，如果采用以上这种方式来完成自动配置，那我们进行项目开发时，当需要引入大量的第三方的依赖，就需要在启动类上配置N多要扫描的包，这种方式会很繁琐。而且这种大面积的扫描性能也比较低。</p><p>缺点：</p><ol><li>使用繁琐</li><li>性能低</li></ol><p><strong>结论：SpringBoot中并没有采用以上这种方案。</strong></p></blockquote><p>@Import导入</p><ul><li>导入形式主要有以下几种：<ol><li>导入普通类</li><li>导入配置类</li><li>导入ImportSelector接口实现类</li></ol></li></ul><p>1). 使用@Import导入普通类：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Import</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">TokenParser</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//导入的类会被Spring加载到IOC容器中</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootApplication</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootWebConfig2Application</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        SpringApplication</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">run</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">SpringbootWebConfig2Application</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> args</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>重新执行测试方法，控制台日志输出：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114231709392.png" alt="image-20230114231709392"></p></blockquote><p>2). 使用@Import导入配置类：</p><ul><li>配置类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HeaderConfig</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HeaderParser</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">headerParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">HeaderParser</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HeaderGenerator</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">headerGenerator</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">HeaderGenerator</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ul><li>启动类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Import</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">HeaderConfig</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//导入配置类</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootApplication</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootWebConfig2Application</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        SpringApplication</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">run</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">SpringbootWebConfig2Application</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> args</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ul><li>测试类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AutoConfigurationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ApplicationContext</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testHeaderParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">applicationContext</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">HeaderParser</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testHeaderGenerator</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">applicationContext</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">HeaderGenerator</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行测试方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114233252259.png" alt="image-20230114233252259"></p></blockquote><p>3). 使用@Import导入ImportSelector接口实现类：</p><ul><li>ImportSelector接口实现类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">MyImportSelector</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">ImportSelector</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">selectImports</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">AnnotationMetadata</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">importingClassMetadata</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//返回值字符串数组（数组中封装了全限定名称的类）</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]&#123;</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.example.HeaderConfig</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&#125;;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ul><li>启动类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Import</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">MyImportSelector</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//导入ImportSelector接口实现类</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootApplication</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootWebConfig2Application</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        SpringApplication</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">run</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">SpringbootWebConfig2Application</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> args</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行测试方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114234222946.png" alt="image-20230114234222946"></p></blockquote><p>我们使用@Import注解通过这三种方式都可以导入第三方依赖中所提供的bean或者是配置类。</p><p>思考：如果基于以上方式完成自动配置，当要引入一个第三方依赖时，是不是还要知道第三方依赖中有哪些配置类和哪些Bean对象？</p><ul><li>答案：是的。 （对程序员来讲，很不友好，而且比较繁琐）</li></ul><p>思考：当我们要使用第三方依赖，依赖中到底有哪些bean和配置类，谁最清楚？</p><ul><li>答案：第三方依赖自身最清楚。</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>结论：我们不用自己指定要导入哪些bean对象和配置类了，让第三方依赖它自己来指定。</strong></p></blockquote><p>怎么让第三方依赖自己指定bean对象和配置类？</p><ul><li>比较常见的方案就是第三方依赖给我们提供一个注解，这个注解一般都以@EnableXxxx开头的注解，注解中封装的就是@Import注解</li></ul><p>4). 使用第三方依赖提供的 @EnableXxxxx注解</p><ul><li>第三方依赖中提供的注解</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Retention</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">RetentionPolicy</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">RUNTIME</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Target</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">ElementType</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">TYPE</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Import</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">MyImportSelector</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//指定要导入哪些bean对象或配置类</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EnableHeaderConfig</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ul><li>在使用时只需在启动类上加上@EnableXxxxx注解即可</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">EnableHeaderConfig</span><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic">//使用第三方依赖提供的Enable开头的注解</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootApplication</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootWebConfig2Application</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        SpringApplication</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">run</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">SpringbootWebConfig2Application</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> args</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行测试方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114233252259.png" alt="image-20230114233252259"></p></blockquote><p>以上四种方式都可以完成导入操作，但是第4种方式会更方便更优雅，而这种方式也是SpringBoot当中所采用的方式。</p><h4 id="16-2-3-原理分析"><a href="#16-2-3-原理分析" class="headerlink" title="16.2.3 原理分析"></a>16.2.3 原理分析</h4><p>前面我们讲解了在项目当中引入第三方依赖之后，如何加载第三方依赖中定义好的bean对象以及配置类，从而完成自动配置操作。那下面我们通过源码跟踪的形式来剖析下SpringBoot底层到底是如何完成自动配置的。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>源码跟踪技巧：</p><p>在跟踪框架源码的时候，一定要抓住关键点，找到核心流程。一定不要从头到尾一行代码去看，一个方法的去研究，一定要找到关键流程，抓住关键点，先在宏观上对整个流程或者整个原理有一个认识，有精力再去研究其中的细节。</p></blockquote><p>要搞清楚SpringBoot的自动配置原理，要从SpringBoot启动类上使用的核心注解@SpringBootApplication开始分析：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115001439110.png" alt="image-20230115001439110"></p><p>在@SpringBootApplication注解中包含了：</p><ul><li>元注解（不再解释）</li><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p>我们先来看第一个注解：@SpringBootConfiguration</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115001950076.png" alt="image-20230115001950076"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>@SpringBootConfiguration注解上使用了@Configuration，表明SpringBoot启动类就是一个配置类。</p><p>@Indexed注解，是用来加速应用启动的（不用关心）。</p></blockquote><p>接下来再先看@ComponentScan注解：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115002450993.png" alt="image-20230115002450993"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>@ComponentScan注解是用来进行组件扫描的，扫描启动类所在的包及其子包下所有被@Component及其衍生注解声明的类。</p><p>SpringBoot启动类，之所以具备扫描包功能，就是因为包含了@ComponentScan注解。</p></blockquote><p>最后我们来看看@EnableAutoConfiguration注解（自动配置核心注解）：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115002743115.png" alt="image-20230115002743115"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>使用@Import注解，导入了实现ImportSelector接口的实现类。</p><p>AutoConfigurationImportSelector类是ImportSelector接口的实现类。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115003242549.png" alt="image-20230115003242549"></p></blockquote><p>AutoConfigurationImportSelector类中重写了ImportSelector接口的selectImports()方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115003348288.png" alt="image-20230115003348288"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>selectImports()方法底层调用getAutoConfigurationEntry()方法，获取可自动配置的配置类信息集合</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115003704385.png" alt="image-20230115003704385"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>getAutoConfigurationEntry()方法通过调用getCandidateConfigurations(annotationMetadata, attributes)方法获取在配置文件中配置的所有自动配置类的集合</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115003903302.png" alt="image-20230115003903302"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>getCandidateConfigurations方法的功能：</p><p>获取所有基于META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件、META-INF&#x2F;spring.factories文件中配置类的集合</p></blockquote><p>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件和META-INF&#x2F;spring.factories文件这两个文件在哪里呢？</p><ul><li>通常在引入的起步依赖中，都有包含以上两个文件</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230129090835964.png" alt="image-20230129090835964"> </p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115064329460.png" alt="image-20230115064329460"></p><p>在前面在给大家演示自动配置的时候，我们直接在测试类当中注入了一个叫gson的bean对象，进行JSON格式转换。虽然我们没有配置bean对象，但是我们是可以直接注入使用的。原因就是因为在自动配置类当中做了自动配置。到底是在哪个自动配置类当中做的自动配置呢？我们通过搜索来查询一下。</p><p>在META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports配置文件中指定了第三方依赖Gson的配置类：GsonAutoConfiguration</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115005159530.png" alt="image-20230115005159530"></p><p>第三方依赖中提供的GsonAutoConfiguration类：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115005418900.png" alt="image-20230115005418900"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在GsonAutoConfiguration类上，添加了注解@AutoConfiguration，通过查看源码，可以明确：GsonAutoConfiguration类是一个配置。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115065247287.png" alt="image-20230115065247287"></p></blockquote><p>看到这里，大家就应该明白为什么可以完成自动配置了，原理就是在配置类中定义一个@Bean标识的方法，而Spring会自动调用配置类中使用@Bean标识的方法，并把方法的返回值注册到IOC容器中。</p><p><strong>自动配置源码小结</strong></p><p>自动配置原理源码入口就是@SpringBootApplication注解，在这个注解中封装了3个注解，分别是：</p><ul><li>@SpringBootConfiguration<ul><li>声明当前类是一个配置类</li></ul></li><li>@ComponentScan<ul><li>进行组件扫描（SpringBoot中默认扫描的是启动类所在的当前包及其子包）</li></ul></li><li>@EnableAutoConfiguration<ul><li>封装了@Import注解（Import注解中指定了一个ImportSelector接口的实现类）<ul><li>在实现类重写的selectImports()方法，读取当前项目下所有依赖jar包中META-INF&#x2F;spring.factories、META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports两个文件里面定义的配置类（配置类中定义了@Bean注解标识的方法）。</li></ul></li></ul></li></ul><p>当SpringBoot程序启动时，就会加载配置文件当中所定义的配置类，并将这些配置类信息(类的全限定名)封装到String类型的数组中，最终通过@Import注解将这些配置类全部加载到Spring的IOC容器中，交给IOC容器管理。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>最后呢给大家抛出一个问题：在META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件中定义的配置类非常多，而且每个配置类中又可以定义很多的bean，那这些bean都会注册到Spring的IOC容器中吗？</p><p>答案：并不是。 在声明bean对象时，上面有加一个以@Conditional开头的注解，这种注解的作用就是按照条件进行装配，只有满足条件之后，才会将bean注册到Spring的IOC容器中（下面会详细来讲解）</p></blockquote><p>我们在跟踪SpringBoot自动配置的源码的时候，在自动配置类声明bean的时候，除了在方法上加了一个@Bean注解以外，还会经常用到一个注解，就是以Conditional开头的这一类的注解。以Conditional开头的这些注解都是条件装配的注解。下面我们就来介绍下条件装配注解。</p><p>@Conditional注解：</p><ul><li>作用：按照一定的条件进行判断，在满足给定条件后才会注册对应的bean对象到Spring的IOC容器中。</li><li>位置：方法、类</li><li>@Conditional本身是一个父注解，派生出大量的子注解：<ul><li>@ConditionalOnClass：判断环境中有对应字节码文件，才注册bean到IOC容器。</li><li>@ConditionalOnMissingBean：判断环境中没有对应的bean(类型或名称)，才注册bean到IOC容器。</li><li>@ConditionalOnProperty：判断配置文件中有对应属性和值，才注册bean到IOC容器。</li></ul></li></ul><p>下面我们通过代码来演示下Conditional注解的使用：</p><ul><li>@ConditionalOnClass注解</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HeaderConfig</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">ConditionalOnClass</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">io.jsonwebtoken.Jwts</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//环境中存在指定的这个类，才会将该bean加入IOC容器</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HeaderParser</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">headerParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">HeaderParser</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ul><li>pom.xml</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;!--</span><span style="color: #BABED8">JWT令牌</span><span style="color: #89DDFF">--&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">     </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">io</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">jsonwebtoken</span><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">     </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">jjwt</span><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">     </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #F78C6C">0.9</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">1</span><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><ul><li>测试类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AutoConfigurationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ApplicationContext</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testHeaderParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">applicationContext</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">HeaderParser</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行testHeaderParser()测试方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115203748022.png" alt="image-20230115203748022"></p><p>因为io.jsonwebtoken.Jwts字节码文件在启动SpringBoot程序时已存在，所以创建HeaderParser对象并注册到IOC容器中。</p></blockquote><ul><li>@ConditionalOnMissingBean注解</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HeaderConfig</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">ConditionalOnMissingBean</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//不存在该类型的bean，才会将该bean加入IOC容器</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HeaderParser</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">headerParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">HeaderParser</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行testHeaderParser()测试方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115211029855.png" alt="image-20230115211029855"></p><p>SpringBoot在调用@Bean标识的headerParser()前，IOC容器中是没有HeaderParser类型的bean，所以HeaderParser对象正常创建，并注册到IOC容器中。</p></blockquote><p>再次修改@ConditionalOnMissingBean注解：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HeaderConfig</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">ConditionalOnMissingBean</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">deptController2</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//不存在指定名称的bean，才会将该bean加入IOC容器</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HeaderParser</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">headerParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">HeaderParser</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行testHeaderParser()测试方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115211351681.png" alt="image-20230115211351681"></p><p>因为在SpringBoot环境中不存在名字叫deptController2的bean对象，所以创建HeaderParser对象并注册到IOC容器中。</p></blockquote><p>再次修改@ConditionalOnMissingBean注解：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HeaderConfig</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">ConditionalOnMissingBean</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">HeaderConfig</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//不存在指定类型的bean，才会将bean加入IOC容器</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HeaderParser</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">headerParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">HeaderParser</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AutoConfigurationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ApplicationContext</span><span style="color: #BABED8"> applicationContext</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testHeaderParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">applicationContext</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBean</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">HeaderParser</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行testHeaderParser()测试方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115211957191.png" alt="image-20230115211957191"></p><p>因为HeaderConfig类中添加@Configuration注解，而@Configuration注解中包含了@Component，所以SpringBoot启动时会创建HeaderConfig类对象，并注册到IOC容器中。</p><p>当IOC容器中有HeaderConfig类型的bean存在时，不会把创建HeaderParser对象注册到IOC容器中。而IOC容器中没有HeaderParser类型的对象时，通过getBean(HeaderParser.class)方法获取bean对象时，引发异常：NoSuchBeanDefinitionException</p></blockquote><ul><li>@ConditionalOnProperty注解（这个注解和配置文件当中配置的属性有关系）</li></ul><p>先在application.yml配置文件中添加如下的键值对：</p><div class="language-yaml"><button title="Copy code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">itheima</span></span></code></pre></div><p>在声明bean的时候就可以指定一个条件@ConditionalOnProperty</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HeaderConfig</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">ConditionalOnProperty</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">name</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #FFCB6B">havingValue</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">itheima</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//配置文件中存在指定属性名与值，才会将bean加入IOC容器</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HeaderParser</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">headerParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">HeaderParser</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HeaderGenerator</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">headerGenerator</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">HeaderGenerator</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行testHeaderParser()测试方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115220235511.png" alt="image-20230115220235511"></p></blockquote><p>修改@ConditionalOnProperty注解：  havingValue的值修改为”itheima2”</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Bean</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">ConditionalOnProperty</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">name</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #FFCB6B">havingValue</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">itheima2</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//配置文件中存在指定属性名与值，才会将bean加入IOC容器</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HeaderParser</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">headerParser</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">HeaderParser</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>再次执行testHeaderParser()测试方法：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115211957191.png" alt="image-20230115211957191"></p><p>因为application.yml配置文件中，不存在： name:  itheima2，所以HeaderParser对象在IOC容器中不存在</p></blockquote><p>我们再回头看看之前讲解SpringBoot源码时提到的一个配置类：GsonAutoConfiguration</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115222128740.png" alt="image-20230115222128740"></p><p>最后再给大家梳理一下自动配置原理：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230115222302753.png" alt="image-20230115222302753"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>自动配置的核心就在@SpringBootApplication注解上，SpringBootApplication这个注解底层包含了3个注解，分别是：</p><ul><li><p>@SpringBootConfiguration</p></li><li><p>@ComponentScan</p></li><li><p>@EnableAutoConfiguration</p></li></ul><p>@EnableAutoConfiguration这个注解才是自动配置的核心。</p><ul><li>它封装了一个@Import注解，Import注解里面指定了一个ImportSelector接口的实现类。</li><li>在这个实现类中，重写了ImportSelector接口中的selectImports()方法。</li><li>而selectImports()方法中会去读取两份配置文件，并将配置文件中定义的配置类做为selectImports()方法的返回值返回，返回值代表的就是需要将哪些类交给Spring的IOC容器进行管理。</li><li>那么所有自动配置类的中声明的bean都会加载到Spring的IOC容器中吗? 其实并不会，因为这些配置类中在声明bean时，通常都会添加@Conditional开头的注解，这个注解就是进行条件装配。而Spring会根据Conditional注解有选择性的进行bean的创建。</li><li>@Enable 开头的注解底层，它就封装了一个注解 import 注解，它里面指定了一个类，是 ImportSelector 接口的实现类。在实现类当中，我们需要去实现 ImportSelector  接口当中的一个方法 selectImports 这个方法。这个方法的返回值代表的就是我需要将哪些类交给 spring 的 IOC容器进行管理。</li><li>此时它会去读取两份配置文件，一份儿是 spring.factories，另外一份儿是 autoConfiguration.imports。而在  autoConfiguration.imports 这份儿文件当中，它就会去配置大量的自动配置的类。</li><li>而前面我们也提到过这些所有的自动配置类当中，所有的 bean都会加载到 spring 的 IOC 容器当中吗？其实并不会，因为这些配置类当中，在声明 bean 的时候，通常会加上这么一类@Conditional 开头的注解。这个注解就是进行条件装配。所以SpringBoot非常的智能，它会根据 @Conditional 注解来进行条件装配。只有条件成立，它才会声明这个bean，才会将这个 bean 交给 IOC 容器管理。</li></ul></blockquote><h2 id="17-总结"><a href="#17-总结" class="headerlink" title="17.总结"></a>17.总结</h2><p>web后端开发现在基本上都是基于标准的三层架构进行开发的，在三层架构当中，Controller控制器层负责接收请求响应数据，Service业务层负责具体的业务逻辑处理，而Dao数据访问层也叫持久层，就是用来处理数据访问操作的，来完成数据库当中数据的增删改查操作。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114180044897.png" alt="image-20230114180044897"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在三层架构当中，前端发起请求首先会到达Controller(不进行逻辑处理)，然后Controller会直接调用Service 进行逻辑处理， Service再调用Dao完成数据访问操作。</p></blockquote><p>如果我们在执行具体的业务处理之前，需要去做一些通用的业务处理，比如：我们要进行统一的登录校验，我们要进行统一的字符编码等这些操作时，我们就可以借助于Javaweb当中三大组件之一的过滤器Filter或者是Spring当中提供的拦截器Interceptor来实现。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114191737227.png" alt="image-20230114191737227"></p><p>而为了实现三层架构层与层之间的解耦，我们学习了Spring框架当中的第一大核心：IOC控制反转与DI依赖注入。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>所谓控制反转，指的是将对象创建的控制权由应用程序自身交给外部容器，这个容器就是我们常说的IOC容器或Spring容器。</p><p>而DI依赖注入指的是容器为程序提供运行时所需要的资源。</p></blockquote><p>除了IOC与DI我们还讲到了AOP面向切面编程，还有Spring中的事务管理、全局异常处理器，以及传递会话技术Cookie、Session以及新的会话跟踪解决方案JWT令牌，阿里云OSS对象存储服务，以及通过Mybatis持久层架构操作数据库等技术。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114192921673.png" alt="image-20230114192921673"></p><p>我们在学习这些web后端开发技术的时候，我们都是基于主流的SpringBoot进行整合使用的。而SpringBoot又是用来简化开发，提高开发效率的。像过滤器、拦截器、IOC、DI、AOP、事务管理等这些技术到底是哪个框架提供的核心功能？</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114193609782.png" alt="image-20230114193609782"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Filter过滤器、Cookie、 Session这些都是传统的JavaWeb提供的技术。</p><p>JWT令牌、阿里云OSS对象存储服务，是现在企业项目中常见的一些解决方案。</p><p>IOC控制反转、DI依赖注入、AOP面向切面编程、事务管理、全局异常处理、拦截器等，这些技术都是 Spring Framework框架当中提供的核心功能。</p><p>Mybatis就是一个持久层的框架，是用来操作数据库的。</p></blockquote><p>在Spring框架的生态中，对web程序开发提供了很好的支持，如：全局异常处理器、拦截器这些都是Spring框架中web开发模块所提供的功能，而Spring框架的web开发模块，我们也称为：SpringMVC</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A03/image-20230114195143418.png" alt="image-20230114195143418"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>SpringMVC不是一个单独的框架，它是Spring框架的一部分，是Spring框架中的web开发模块，是用来简化原始的Servlet程序开发的。</p></blockquote><p>外界俗称的SSM，就是由：SpringMVC、Spring Framework、Mybatis三块组成。</p><p>基于传统的SSM框架进行整合开发项目会比较繁琐，而且效率也比较低，所以在现在的企业项目开发当中，基本上都是直接基于SpringBoot整合SSM进行项目开发的。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot知识点总结（二）</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="9-登录校验"><a href="#9-登录校验" class="headerlink" title="9.登录校验"></a>9.登录校验</h2><h3 id="9-1-问题分析"><a href="#9-1-问题分析" class="headerlink" title="9.1 问题分析"></a>9.1 问题分析</h3><p>我们已经完成了基础登录功能的开发与测试，在我们登录成功后就可以进入到后台管理系统中进行数据的操作。</p><p>但是当我们在浏览器中新的页面上输入地址：<code>http://localhost:9528/#/system/dept</code>，发现没有登录仍然可以进入到后端管理系统页面。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20220907133329021.png" alt="image-20220907133329021"></p><p>而真正的登录功能应该是：登陆后才能访问后端系统页面，不登陆则跳转登陆页面进行登陆。</p><p>为什么会出现这个问题？其实原因很简单，就是因为针对于我们当前所开发的部门管理、员工管理以及文件上传等相关接口来说，我们在服务器端并没有做任何的判断，没有去判断用户是否登录了。所以无论用户是否登录，都可以访问部门管理以及员工管理的相关数据。所以我们目前所开发的登录功能，它只是徒有其表。而我们要想解决这个问题，我们就需要完成一步非常重要的操作：登录校验。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230105180811717.png" alt="image-20230105180811717"></p><p>什么是登录校验？</p><ul><li>所谓登录校验，指的是我们在服务器端接收到浏览器发送过来的请求之后，首先我们要对请求进行校验。先要校验一下用户登录了没有，如果用户已经登录了，就直接执行对应的业务操作就可以了；如果用户没有登录，此时就不允许他执行相关的业务操作，直接给前端响应一个错误的结果，最终跳转到登录页面，要求他登录成功之后，再来访问对应的数据。</li></ul><p>了解完什么是登录校验之后，接下来我们分析一下登录校验大概的实现思路。</p><p>首先我们在宏观上先有一个认知：</p><p>前面在讲解HTTP协议的时候，我们提到HTTP协议是无状态协议。什么又是无状态的协议？</p><p>所谓无状态，指的是每一次请求都是独立的，下一次请求并不会携带上一次请求的数据。而浏览器与服务器之间进行交互，基于HTTP协议也就意味着现在我们通过浏览器来访问了登陆这个接口，实现了登陆的操作，接下来我们在执行其他业务操作时，服务器也并不知道这个员工到底登陆了没有。因为HTTP协议是无状态的，两次请求之间是独立的，所以是无法判断这个员工到底登陆了没有。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230105194710533.png" alt="image-20230105194710533"></p><p>那应该怎么来实现登录校验的操作呢？具体的实现思路可以分为两部分：</p><ol><li>在员工登录成功后，需要将用户登录成功的信息存起来，记录用户已经登录成功的标记。</li><li>在浏览器发起请求时，需要在服务端进行统一拦截，拦截后进行登录校验。</li></ol><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>想要判断员工是否已经登录，我们需要在员工登录成功之后，存储一个登录成功的标记，接下来在每一个接口方法执行之前，先做一个条件判断，判断一下这个员工到底登录了没有。如果是登录了，就可以执行正常的业务操作，如果没有登录，会直接给前端返回一个错误的信息，前端拿到这个错误信息之后会自动的跳转到登录页面。</p><p>我们程序中所开发的查询功能、删除功能、添加功能、修改功能，都需要使用以上套路进行登录校验。此时就会出现：相同代码逻辑，每个功能都需要编写，就会造成代码非常繁琐。</p><p>为了简化这块操作，我们可以使用一种技术：统一拦截技术。</p><p>通过统一拦截的技术，我们可以来拦截浏览器发送过来的所有的请求，拦截到这个请求之后，就可以通过请求来获取之前所存入的登录标记，在获取到登录标记且标记为登录成功，就说明员工已经登录了。如果已经登录，我们就直接放行(意思就是可以访问正常的业务接口了)。</p></blockquote><p>我们要完成以上操作，会涉及到web开发中的两个技术：</p><ol><li>会话技术</li><li>统一拦截技术</li></ol><p>而统一拦截技术现实方案也有两种：</p><ol><li>Servlet规范中的Filter过滤器</li><li>Spring提供的interceptor拦截器</li></ol><p>下面我们先学习会话技术，然后再学习统一拦截技术。</p><h3 id="9-2-会话技术"><a href="#9-2-会话技术" class="headerlink" title="9.2 会话技术"></a>9.2 会话技术</h3><h4 id="9-2-1-会话技术介绍"><a href="#9-2-1-会话技术介绍" class="headerlink" title="9.2.1 会话技术介绍"></a>9.2.1 会话技术介绍</h4><p>什么是会话？</p><ul><li><p>在我们日常生活当中，会话指的就是谈话、交谈。</p></li><li><p>在web开发当中，会话指的就是浏览器与服务器之间的一次连接，我们就称为一次会话。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在用户打开浏览器第一次访问服务器的时候，这个会话就建立了，直到有任何一方断开连接，此时会话就结束了。在一次会话当中，是可以包含多次请求和响应的。</p><p>比如：打开了浏览器来访问web服务器上的资源（浏览器不能关闭、服务器不能断开）</p><ul><li>第1次：访问的是登录的接口，完成登录操作</li><li>第2次：访问的是部门管理接口，查询所有部门数据</li><li>第3次：访问的是员工管理接口，查询员工数据</li></ul><p>只要浏览器和服务器都没有关闭，以上3次请求都属于一次会话当中完成的。</p></blockquote></li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230105203827355.png" alt="image-20230105203827355"></p><p>需要注意的是：会话是和浏览器关联的，当有三个浏览器客户端和服务器建立了连接时，就会有三个会话。同一个浏览器在未关闭之前请求了多次服务器，这多次请求是属于同一个会话。比如：1、2、3这三个请求都是属于同一个会话。当我们关闭浏览器之后，这次会话就结束了。而如果我们是直接把web服务器关了，那么所有的会话就都结束了。</p><p>知道了会话的概念了，接下来我们再来了解下会话跟踪。</p><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>服务器会接收很多的请求，但是服务器是需要识别出这些请求是不是同一个浏览器发出来的。比如：1和2这两个请求是不是同一个浏览器发出来的，3和5这两个请求不是同一个浏览器发出来的。如果是同一个浏览器发出来的，就说明是同一个会话。如果是不同的浏览器发出来的，就说明是不同的会话。而识别多次请求是否来自于同一浏览器的过程，我们就称为会话跟踪。</p></blockquote><p>我们使用会话跟踪技术就是要完成在同一个会话中，多个请求之间进行共享数据。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>为什么要共享数据呢？</p><p>由于HTTP是无状态协议，在后面请求中怎么拿到前一次请求生成的数据呢？此时就需要在一次会话的多次请求之间进行数据共享</p></blockquote><p>会话跟踪技术有两种：</p><ol><li>Cookie（客户端会话跟踪技术）<ul><li>数据存储在客户端浏览器当中</li></ul></li><li>Session（服务端会话跟踪技术）<ul><li>数据存储在储在服务端</li></ul></li><li>令牌技术</li></ol><h4 id="9-2-2-会话跟踪方案-Cookie"><a href="#9-2-2-会话跟踪方案-Cookie" class="headerlink" title="9.2.2 会话跟踪方案-Cookie"></a>9.2.2 会话跟踪方案-Cookie</h4><p>cookie 是客户端会话跟踪技术，它是存储在客户端浏览器的，我们使用 cookie 来跟踪会话，我们就可以在浏览器第一次发起请求来请求服务器的时候，我们在服务器端来设置一个cookie。</p><p>比如第一次请求了登录接口，登录接口执行完成之后，我们就可以设置一个cookie，在 cookie 当中我们就可以来存储用户相关的一些数据信息。比如我可以在 cookie 当中来存储当前登录用户的用户名，用户的ID。</p><p>服务器端在给客户端在响应数据的时候，会<strong>自动</strong>的将 cookie 响应给浏览器，浏览器接收到响应回来的 cookie 之后，会<strong>自动</strong>的将 cookie 的值存储在浏览器本地。接下来在后续的每一次请求当中，都会将浏览器本地所存储的 cookie <strong>自动</strong>地携带到服务端。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112101901417.png" alt="image-20230112101901417"> </p><p>接下来在服务端我们就可以获取到 cookie 的值。我们可以去判断一下这个 cookie 的值是否存在，如果不存在这个cookie，就说明客户端之前是没有访问登录接口的；如果存在 cookie 的值，就说明客户端之前已经登录完成了。这样我们就可以基于 cookie 在同一次会话的不同请求之间来共享数据。</p><p>我刚才在介绍流程的时候，用了 3 个自动：</p><ul><li><p>服务器会 <strong>自动</strong> 的将 cookie 响应给浏览器。</p></li><li><p>浏览器接收到响应回来的数据之后，会 <strong>自动</strong> 的将 cookie 存储在浏览器本地。</p></li><li><p>在后续的请求当中，浏览器会 <strong>自动</strong> 的将 cookie 携带到服务器端。</p></li></ul><p><strong>为什么这一切都是自动化进行的？</strong></p><p>是因为 cookie 它是 HTP 协议当中所支持的技术，而各大浏览器厂商都支持了这一标准。在 HTTP 协议官方给我们提供了一个响应头和请求头：</p><ul><li><p>响应头 Set-Cookie ：设置Cookie数据的</p></li><li><p>请求头 Cookie：携带Cookie数据的</p></li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112101804878.png" alt="image-20230112101804878"> </p><p><strong>代码测试</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SessionController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//设置Cookie</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">GetMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/c1</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">cookie1</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addCookie</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Cookie</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">login_username</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">itheima</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">));</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//设置Cookie/响应Cookie</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//获取Cookie</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">GetMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/c2</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">cookie2</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Cookie</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> cookies </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> request</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getCookies</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Cookie</span><span style="color: #BABED8"> cookie </span><span style="color: #89DDFF; font-style: italic">:</span><span style="color: #BABED8"> cookies</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">cookie</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getName</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">equals</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">login_username</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">))&#123;</span></span><span class="line"><span style="color: #BABED8">                System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">login_username: </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">+</span><span style="color: #BABED8">cookie</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getValue</span><span style="color: #89DDFF">());</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//输出name为login_username的cookie</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span><span style="color: #BABED8">    </span></span></code></pre></div><p>A. 访问c1接口，设置Cookie，<a href="http://localhost:8080/c1">http://localhost:8080/c1</a></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112105410076.png" alt="image-20230112105410076"> </p><p>我们可以看到，设置的cookie，通过<strong>响应头Set-Cookie</strong>响应给浏览器，并且浏览器会将Cookie，存储在浏览器端。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112105538131.png" alt="image-20230112105538131"> </p><p>B. 访问c2接口 <a href="http://localhost:8080/c2%EF%BC%8C%E6%AD%A4%E6%97%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E8%87%AA%E5%8A%A8%E7%9A%84%E5%B0%86Cookie%E6%90%BA%E5%B8%A6%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E6%98%AF%E9%80%9A%E8%BF%87**%E8%AF%B7%E6%B1%82%E5%A4%B4Cookie**%EF%BC%8C%E6%90%BA%E5%B8%A6%E7%9A%84%E3%80%82">http://localhost:8080/c2，此时浏览器会自动的将Cookie携带到服务端，是通过**请求头Cookie**，携带的。</a></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112105658486.png" alt="image-20230112105658486"> </p><p><strong>优缺点</strong></p><ul><li>优点：HTTP协议中支持的技术（像Set-Cookie 响应头的解析以及 Cookie 请求头数据的携带，都是浏览器自动进行的，是无需我们手动操作的）</li><li>缺点：<ul><li>移动端APP(Android、IOS)中无法使用Cookie</li><li>不安全，用户可以自己禁用Cookie</li><li>Cookie不能跨域</li></ul></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>跨域介绍：</p><p>​ <img src="/oranfish.github.io/posts/0/image-20230112103840467.png" alt="image-20230112103840467" style="zoom:80%;"> </p><ul><li>现在的项目，大部分都是前后端分离的，前后端最终也会分开部署，前端部署在服务器 192.168.150.200 上，端口 80，后端部署在 192.168.150.100上，端口 8080</li><li>我们打开浏览器直接访问前端工程，访问url：<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a></li><li>然后在该页面发起请求到服务端，而服务端所在地址不再是localhost，而是服务器的IP地址192.168.150.100，假设访问接口地址为：<a href="http://192.168.150.100:8080/login">http://192.168.150.100:8080/login</a></li><li>那此时就存在跨域操作了，因为我们是在 <a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> 这个页面上访问了<a href="http://192.168.150.100:8080/login">http://192.168.150.100:8080/login</a> 接口</li><li>此时如果服务器设置了一个Cookie，这个Cookie是不能使用的，因为Cookie无法跨域</li></ul><p>区分跨域的维度：</p><ul><li>协议</li><li>IP&#x2F;协议</li><li>端口</li></ul><p>只要上述的三个维度有任何一个维度不同，那就是跨域操作</p><p>举例：</p><p>​<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="https://192.168.150.200/login">https://192.168.150.200/login</a>   [协议不同，跨域]</p><p>​<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="http://192.168.150.100/login">http://192.168.150.100/login</a>     [IP不同，跨域]</p><p>​<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="http://192.168.150.200:8080/login">http://192.168.150.200:8080/login</a>   [端口不同，跨域]</p><p>​    <a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="http://192.168.150.200/login">http://192.168.150.200/login</a>     [不跨域]   </p></blockquote><h4 id="9-2-3-会话跟踪方案-Session"><a href="#9-2-3-会话跟踪方案-Session" class="headerlink" title="9.2.3 会话跟踪方案-Session"></a>9.2.3 会话跟踪方案-Session</h4><p>前面介绍的时候，我们提到Session，它是服务器端会话跟踪技术，所以它是存储在服务器端的。而 Session 的底层其实就是基于我们刚才所介绍的 Cookie 来实现的。</p><ul><li><p>获取Session</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112105938545.png" alt="image-20230112105938545"> </p><p>如果我们现在要基于 Session 来进行会话跟踪，浏览器在第一次请求服务器的时候，我们就可以直接在服务器当中来获取到会话对象Session。如果是第一次请求Session ，会话对象是不存在的，这个时候服务器会自动的创建一个会话对象Session 。而每一个会话对象Session ，它都有一个ID（示意图中Session后面括号中的1，就表示ID），我们称之为 Session 的ID。</p></li><li><p>响应Cookie (JSESSIONID)</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112110441075.png" alt="image-20230112110441075"> </p><p>接下来，服务器端在给浏览器响应数据的时候，它会将 Session 的 ID 通过 Cookie 响应给浏览器。其实在响应头当中增加了一个 Set-Cookie 响应头。这个  Set-Cookie  响应头对应的值是不是cookie？ cookie 的名字是固定的 JSESSIONID 代表的服务器端会话对象 Session 的 ID。浏览器会自动识别这个响应头，然后自动将Cookie存储在浏览器本地。</p></li><li><p>查找Session</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112101943835.png" alt="image-20230112101943835"> </p><p>接下来，在后续的每一次请求当中，都会将 Cookie 的数据获取出来，并且携带到服务端。接下来服务器拿到JSESSIONID这个 Cookie 的值，也就是 Session 的ID。拿到 ID 之后，就会从众多的 Session 当中来找到当前请求对应的会话对象Session。</p><p>这样我们是不是就可以通过 Session 会话对象在同一次会话的多次请求之间来共享数据了？好，这就是基于 Session 进行会话跟踪的流程。</p></li></ul><p><strong>代码测试</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SessionController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">GetMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/s1</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">session1</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpSession</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">session</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">HttpSession-s1: &#123;&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> session</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hashCode</span><span style="color: #89DDFF">());</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        session</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setAttribute</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">loginUser</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">tom</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//往session中存储数据</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">GetMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/s2</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">session2</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">HttpSession</span><span style="color: #BABED8"> session </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> request</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getSession</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">HttpSession-s2: &#123;&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> session</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hashCode</span><span style="color: #89DDFF">());</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> loginUser </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> session</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getAttribute</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">loginUser</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//从session中获取数据</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">loginUser: &#123;&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> loginUser</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">loginUser</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>A. 访问 s1 接口，<a href="http://localhost:8080/s1">http://localhost:8080/s1</a></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112111004447.png" alt="image-20230112111004447"> </p><p>请求完成之后，在响应头中，就会看到有一个Set-Cookie的响应头，里面响应回来了一个Cookie，就是JSESSIONID，这个就是服务端会话对象 Session 的ID。</p><p>B. 访问 s2 接口，<a href="http://localhost:8080/s2">http://localhost:8080/s2</a></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112111137207.png" alt="image-20230112111137207"> </p><p>接下来，在后续的每次请求时，都会将Cookie的值，携带到服务端，那服务端呢，接收到Cookie之后，会自动的根据JSESSIONID的值，找到对应的会话对象Session。</p><p>那经过这两步测试，大家也会看到，在控制台中输出如下日志：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112111328117.png" alt="image-20230112111328117"> </p><p>两次请求，获取到的Session会话对象的hashcode是一样的，就说明是同一个会话对象。而且，第一次请求时，往Session会话对象中存储的值，第二次请求时，也获取到了。 那这样，我们就可以通过Session会话对象，在同一个会话的多次请求之间来进行数据共享了。</p><p><strong>优缺点</strong></p><ul><li>优点：Session是存储在服务端的，安全</li><li>缺点：<ul><li>服务器集群环境下无法直接使用Session</li><li>移动端APP(Android、IOS)中无法使用Cookie</li><li>用户可以自己禁用Cookie</li><li>Cookie不能跨域</li></ul></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>PS：Session 底层是基于Cookie实现的会话跟踪，如果Cookie不可用，则该方案，也就失效了。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>服务器集群环境为何无法使用Session？</p><p>​<img src="/oranfish.github.io/posts/0/image-20230112112557480.png" alt="image-20230112112557480" style="zoom:67%;"> </p><ul><li>首先第一点，我们现在所开发的项目，一般都不会只部署在一台服务器上，因为一台服务器会存在一个很大的问题，就是单点故障。所谓单点故障，指的就是一旦这台服务器挂了，整个应用都没法访问了。</li></ul><p>​    <img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112112740131.png" alt="image-20230112112740131"> </p><ul><li><p>所以在现在的企业项目开发当中，最终部署的时候都是以集群的形式来进行部署，也就是同一个项目它会部署多份。比如这个项目我们现在就部署了 3 份。</p></li><li><p>而用户在访问的时候，到底访问这三台其中的哪一台？其实用户在访问的时候，他会访问一台前置的服务器，我们叫负载均衡服务器，我们在后面项目当中会详细讲解。目前大家先有一个印象负载均衡服务器，它的作用就是将前端发起的请求均匀的分发给后面的这三台服务器。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112113558810.png" alt="image-20230112113558810"> </p></li><li><p>此时假如我们通过 session 来进行会话跟踪，可能就会存在这样一个问题。用户打开浏览器要进行登录操作，此时会发起登录请求。登录请求到达负载均衡服务器，将这个请求转给了第一台 Tomcat 服务器。</p><p>Tomcat 服务器接收到请求之后，要获取到会话对象session。获取到会话对象 session 之后，要给浏览器响应数据，最终在给浏览器响应数据的时候，就会携带这么一个 cookie 的名字，就是 JSESSIONID ，下一次再请求的时候，是不是又会将 Cookie 携带到服务端？</p><p>好。此时假如又执行了一次查询操作，要查询部门的数据。这次请求到达负载均衡服务器之后，负载均衡服务器将这次请求转给了第二台 Tomcat 服务器，此时他就要到第二台 Tomcat 服务器当中。根据JSESSIONID 也就是对应的 session 的 ID 值，要找对应的 session 会话对象。</p><p>我想请问在第二台服务器当中有没有这个ID的会话对象 Session， 是没有的。此时是不是就出现问题了？我同一个浏览器发起了 2 次请求，结果获取到的不是同一个会话对象，这就是Session这种会话跟踪方案它的缺点，在服务器集群环境下无法直接使用Session。</p></li></ul></blockquote><p>大家会看到上面这两种传统的会话技术，在现在的企业开发当中是不是会存在很多的问题。 为了解决这些问题，在现在的企业开发当中，基本上都会采用第三种方案，通过令牌技术来进行会话跟踪。接下来我们就来介绍一下令牌技术，来看一下令牌技术又是如何跟踪会话的。</p><h4 id="9-2-4-会话跟踪方案-令牌技术"><a href="#9-2-4-会话跟踪方案-令牌技术" class="headerlink" title="9.2.4 会话跟踪方案-令牌技术"></a>9.2.4 会话跟踪方案-令牌技术</h4><p>这里我们所提到的令牌，其实它就是一个用户身份的标识，看似很高大上，很神秘，其实本质就是一个字符串。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112102022634.png" alt="image-20230112102022634"> </p><p>如果通过令牌技术来跟踪会话，我们就可以在浏览器发起请求。在请求登录接口的时候，如果登录成功，我就可以生成一个令牌，令牌就是用户的合法身份凭证。接下来我在响应数据的时候，我就可以直接将令牌响应给前端。</p><p>接下来我们在前端程序当中接收到令牌之后，就需要将这个令牌存储起来。这个存储可以存储在 cookie 当中，也可以存储在其他的存储空间(比如：localStorage)当中。</p><p>接下来，在后续的每一次请求当中，都需要将令牌携带到服务端。携带到服务端之后，接下来我们就需要来校验令牌的有效性。如果令牌是有效的，就说明用户已经执行了登录操作，如果令牌是无效的，就说明用户之前并未执行登录操作。</p><p>此时，如果是在同一次会话的多次请求之间，我们想共享数据，我们就可以将共享的数据存储在令牌当中就可以了。</p><p><strong>优缺点</strong></p><ul><li>优点：<ul><li>支持PC端、移动端</li><li>解决集群环境下的认证问题</li><li>减轻服务器的存储压力（无需在服务器端存储）</li></ul></li><li>缺点：需要自己实现（包括令牌的生成、令牌的传递、令牌的校验）</li></ul><p><strong>针对于这三种方案，现在企业开发当中使用的最多的就是第三种令牌技术进行会话跟踪。而前面的这两种传统的方案，现在企业项目开发当中已经很少使用了。所以在我们的课程当中，我们也将会采用令牌技术来解决案例项目当中的会话跟踪问题。</strong></p><h3 id="9-3-JWT令牌"><a href="#9-3-JWT令牌" class="headerlink" title="9.3 JWT令牌"></a>9.3 JWT令牌</h3><h4 id="9-3-1-介绍"><a href="#9-3-1-介绍" class="headerlink" title="9.3.1 介绍"></a>9.3.1 介绍</h4><p>JWT全称：JSON Web Token  （官网：<a href="https://jwt.io/%EF%BC%89">https://jwt.io/）</a></p><ul><li><p>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>简洁：是指jwt就是一个简单的字符串。可以在请求参数或者是请求头当中直接传递。</p><p>自包含：指的是jwt令牌，看似是一个随机的字符串，但是我们是可以根据自身的需求在jwt令牌中存储自定义的数据内容。如：可以直接在jwt令牌中存储用户的相关信息。</p><p>简单来讲，jwt就是将原始的json数据格式进行了安全的封装，这样就可以直接基于jwt在通信双方安全的进行信息传输了。</p></blockquote></li></ul><p>JWT的组成： （JWT令牌由三个部分组成，三个部分之间使用英文的点来分割）</p><ul><li><p>第一部分：Header(头）， 记录令牌类型、签名算法等。 例如：{“alg”:”HS256”,”type”:”JWT”}</p></li><li><p>第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如：{“id”:”1”,”username”:”Tom”}</p></li><li><p>第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加入指定秘钥，通过指定签名算法计算而来。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>签名的目的就是为了防jwt令牌被篡改，而正是因为jwt令牌最后一个部分数字签名的存在，所以整个jwt 令牌是非常安全可靠的。一旦jwt令牌当中任何一个部分、任何一个字符被篡改了，整个令牌在校验的时候都会失败，所以它是非常安全可靠的。</p></blockquote></li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106085442076.png" alt="image-20230106085442076"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>JWT是如何将原始的JSON格式数据，转变为字符串的呢？</p><p>其实在生成JWT令牌时，会对JSON格式的数据进行一次编码：进行base64编码</p><p>Base64：是一种基于64个可打印的字符来表示二进制数据的编码方式。既然能编码，那也就意味着也能解码。所使用的64个字符分别是A到Z、a到z、 0- 9，一个加号，一个斜杠，加起来就是64个字符。任何数据经过base64编码之后，最终就会通过这64个字符来表示。当然还有一个符号，那就是等号。等号它是一个补位的符号</p><p>需要注意的是Base64是编码方式，而不是加密方式。</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112114319773.png" alt="image-20230112114319773"> </p><p>JWT令牌最典型的应用场景就是登录认证：</p><ol><li>在浏览器发起请求来执行登录操作，此时会访问登录的接口，如果登录成功之后，我们需要生成一个jwt令牌，将生成的 jwt令牌返回给前端。</li><li>前端拿到jwt令牌之后，会将jwt令牌存储起来。在后续的每一次请求中都会将jwt令牌携带到服务端。</li><li>服务端统一拦截请求之后，先来判断一下这次请求有没有把令牌带过来，如果没有带过来，直接拒绝访问，如果带过来了，还要校验一下令牌是否是有效。如果有效，就直接放行进行请求的处理。</li></ol><p>在JWT登录认证的场景中我们发现，整个流程当中涉及到两步操作：</p><ol><li>在登录成功之后，要生成令牌。</li><li>每一次请求当中，要接收令牌并对令牌进行校验。</li></ol><p>稍后我们再来学习如何来生成jwt令牌，以及如何来校验jwt令牌。</p><h4 id="9-3-2-生成和校验"><a href="#9-3-2-生成和校验" class="headerlink" title="9.3.2 生成和校验"></a>9.3.2 生成和校验</h4><p>简单介绍了JWT令牌以及JWT令牌的组成之后，接下来我们就来学习基于Java代码如何生成和校验JWT令牌。</p><p>首先我们先来实现JWT令牌的生成。要想使用JWT令牌，需要先引入JWT的依赖：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">&lt;!-- JWT依赖--&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">io.jsonwebtoken</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">jjwt</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">0.9.1</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在引入完JWT来赖后，就可以调用工具包中提供的API来完成JWT令牌的生成和校验</p><p>工具类：Jwts</p></blockquote><p>生成JWT代码实现：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">genJwt</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">Map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">,</span><span style="color: #C792EA">Object</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> claims </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HashMap</span><span style="color: #89DDFF">&lt;&gt;();</span></span><span class="line"><span style="color: #BABED8">    claims</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">put</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">id</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    claims</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">put</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">username</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Tom</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> jwt </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Jwts</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">builder</span><span style="color: #89DDFF">()</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setClaims</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">claims</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//自定义内容(载荷)          </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">signWith</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">SignatureAlgorithm</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">HS256</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">itheima</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//签名算法        </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setExpiration</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Date</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">System</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">currentTimeMillis</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">24</span><span style="color: #89DDFF">*</span><span style="color: #F78C6C">3600</span><span style="color: #89DDFF">*</span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">))</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//有效期   </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">compact</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">jwt</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>运行测试方法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjcyNzI5NzMwfQ.fHi0Ub8npbyt71UqLXDdLyipptLgxBUg_mSuGJtXtBk</span></span></code></pre></div><p>输出的结果就是生成的JWT令牌,，通过英文的点分割对三个部分进行分割，我们可以将生成的令牌复制一下，然后打开JWT的官网，将生成的令牌直接放在Encoded位置，此时就会自动的将令牌解析出来。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106190950305.png" alt="image-20230106190950305"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>第一部分解析出来，看到JSON格式的原始数据，所使用的签名算法为HS256。</p><p>第二个部分是我们自定义的数据，之前我们自定义的数据就是id，还有一个exp代表的是我们所设置的过期时间。</p><p>由于前两个部分是base64编码，所以是可以直接解码出来。但最后一个部分并不是base64编码，是经过签名算法计算出来的，所以最后一个部分是不会解析的。</p></blockquote><p>实现了JWT令牌的生成，下面我们接着使用Java代码来校验JWT令牌(解析生成的令牌)：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">parseJwt</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">Claims</span><span style="color: #BABED8"> claims </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Jwts</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parser</span><span style="color: #89DDFF">()</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setSigningKey</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">itheima</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//指定签名密钥（必须保证和生成令牌时使用相同的签名密钥）  </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parseClaimsJws</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjcyNzI5NzMwfQ.fHi0Ub8npbyt71UqLXDdLyipptLgxBUg_mSuGJtXtBk</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBody</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">claims</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>运行测试方法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;id=1, exp=1672729730&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>令牌解析后，我们可以看到id和过期时间，如果在解析的过程当中没有报错，就说明解析成功了。</p></blockquote><p>下面我们做一个测试：把令牌header中的数字9变为8，运行测试方法后发现报错：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>原header： eyJhbGciOiJIUzI1NiJ9</p><p>修改为： eyJhbGciOiJIUzI1NiJ8</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106205045658.png" alt="image-20230106205045658"></p><p>结论：篡改令牌中的任何一个字符，在对令牌进行解析时都会报错，所以JWT令牌是非常安全可靠的。</p><p>我们继续测试：修改生成令牌的时指定的过期时间，修改为1分钟</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">genJwt</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">Map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">,</span><span style="color: #C792EA">Object</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> claims </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HashMap</span><span style="color: #89DDFF">&lt;&gt;();</span></span><span class="line"><span style="color: #BABED8">    claims</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">put</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">“id”</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    claims</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">put</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">“username”</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">“Tom”</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> jwt </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Jwts</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">builder</span><span style="color: #89DDFF">()</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setClaims</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">claims</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//自定义内容(载荷)          </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">signWith</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">SignatureAlgorithm</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">HS256</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> “itheima”</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//签名算法        </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setExpiration</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Date</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">System</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">currentTimeMillis</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">60</span><span style="color: #89DDFF">*</span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">))</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//有效期60秒   </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">compact</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">jwt</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//输出结果：eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjczMDA5NzU0fQ.RcVIR65AkGiax-ID6FjW60eLFH3tPTKdoK7UtE4A1ro</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">parseJwt</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">Claims</span><span style="color: #BABED8"> claims </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Jwts</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parser</span><span style="color: #89DDFF">()</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setSigningKey</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">itheima</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//指定签名密钥</span></span><span class="line"><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parseClaimsJws</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjczMDA5NzU0fQ.RcVIR65AkGiax-ID6FjW60eLFH3tPTKdoK7UtE4A1ro</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBody</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">claims</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>等待1分钟之后运行测试方法发现也报错了，说明：JWT令牌过期后，令牌就失效了，解析的为非法令牌。</p><p>通过以上测试，我们在使用JWT令牌时需要注意：</p><ul><li><p>JWT校验时使用的签名秘钥，必须和生成JWT令牌时使用的秘钥是配套的。</p></li><li><p>如果JWT令牌解析校验时报错，则说明 JWT令牌被篡改 或 失效了，令牌非法。</p></li></ul><h4 id="9-3-3-登录下发令牌"><a href="#9-3-3-登录下发令牌" class="headerlink" title="9.3.3 登录下发令牌"></a>9.3.3 登录下发令牌</h4><p>JWT令牌的生成和校验的基本操作我们已经学习完了，接下来我们就需要在案例当中通过JWT令牌技术来跟踪会话。具体的思路我们前面已经分析过了，主要就是两步操作：</p><ol><li>生成令牌<ul><li>在登录成功之后来生成一个JWT令牌，并且把这个令牌直接返回给前端</li></ul></li><li>校验令牌<ul><li>拦截前端请求，从请求中获取到令牌，对令牌进行解析校验</li></ul></li></ol><p>那我们首先来完成：登录成功之后生成JWT令牌，并且把令牌返回给前端。</p><p>JWT令牌怎么返回给前端呢？此时我们就需要再来看一下接口文档当中关于登录接口的描述（主要看响应数据）：</p><ul><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 ; 0  失败</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>string</td><td>必须</td><td></td><td>返回的数据 , jwt令牌</td><td></td></tr></tbody></table><p>响应数据样例：</p><div class="language-json"><button title="Copy code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">code</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">msg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">data</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoi6YeR5bq4IiwiaWQiOjEsInVzZXJuYW1lIjoiamlueW9uZyIsImV4cCI6MTY2MjIwNzA0OH0.KkUc_CXJZJ8Dd063eImx4H9Ojfrr6XMJ-yVzaWCVZCo</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></li><li><p>备注说明</p><p>用户登录成功后，系统会自动下发JWT令牌，然后在后续的每次请求中，都需要在请求头header中携带到服务端，请求头的名称为 token ，值为 登录时下发的JWT令牌。</p><p>如果检测到用户未登录，则会返回如下固定错误信息：</p><div class="language-json"><button title="Copy code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">code</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">msg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NOT_LOGIN</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">data</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></li></ul><p>解读完接口文档中的描述了，目前我们先来完成令牌的生成和令牌的下发，我们只需要生成一个令牌返回给前端就可以了。</p><p><strong>实现步骤：</strong></p><ol><li>引入JWT工具类<ul><li>在项目工程下创建com.itheima.utils包，并把提供JWT工具类复制到该包下</li></ul></li><li>登录完成后，调用工具类生成JWT令牌并返回</li></ol><p><strong>JWT工具类</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">JwtUtils</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> signKey </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">itheima</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">//签名密钥</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Long</span><span style="color: #BABED8"> expire </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">43200000L</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//有效时间</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">    /**</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * 生成JWT令牌</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * </span><span style="color: #F78C6C; font-style: italic">@param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #BABED8; font-style: italic">claims</span><span style="color: #676E95; font-style: italic"> JWT第二部分负载 payload 中存储的内容</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * </span><span style="color: #F78C6C; font-style: italic">@return</span></span><span class="line"><span style="color: #676E95; font-style: italic">     */</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">generateJwt</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">claims</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> jwt </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Jwts</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">builder</span><span style="color: #89DDFF">()</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addClaims</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">claims</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//自定义信息（有效载荷）</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">signWith</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">SignatureAlgorithm</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">HS256</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> signKey</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//签名算法（头部）</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setExpiration</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Date</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">System</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">currentTimeMillis</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> expire</span><span style="color: #89DDFF">))</span><span style="color: #676E95; font-style: italic">//过期时间</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">compact</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> jwt</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">    /**</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * 解析JWT令牌</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * </span><span style="color: #F78C6C; font-style: italic">@param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #BABED8; font-style: italic">jwt</span><span style="color: #676E95; font-style: italic"> JWT令牌</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * </span><span style="color: #F78C6C; font-style: italic">@return</span><span style="color: #676E95; font-style: italic"> JWT第二部分负载 payload 中存储的内容</span></span><span class="line"><span style="color: #676E95; font-style: italic">     */</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Claims</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">parseJWT</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">jwt</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Claims</span><span style="color: #BABED8"> claims </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Jwts</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parser</span><span style="color: #89DDFF">()</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setSigningKey</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">signKey</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//指定签名密钥</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parseClaimsJws</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">jwt</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//指定令牌Token</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBody</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> claims</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p><strong>登录成功，生成JWT令牌并返回</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">LoginController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//依赖业务层对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EmpService</span><span style="color: #BABED8"> empService</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">PostMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/login</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">login</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">RequestBody</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">emp</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//调用业务层：登录功能</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> loginEmp </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> empService</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">login</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//判断：登录用户是否存在</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">loginEmp </span><span style="color: #89DDFF">!=null</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//自定义信息</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">Map</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> claims </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HashMap</span><span style="color: #89DDFF">&lt;&gt;();</span></span><span class="line"><span style="color: #BABED8">            claims</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">put</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">id</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> loginEmp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getId</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">            claims</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">put</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">username</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">loginEmp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getUsername</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">            claims</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">put</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">loginEmp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getName</span><span style="color: #89DDFF">());</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//使用JWT工具类，生成身份令牌</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> token </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> JwtUtils</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">generateJwt</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">claims</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">token</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">用户名或密码错误</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重启服务，打开postman测试登录接口：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106212805480.png" alt="image-20230106212805480"></p><p>打开浏览器完成前后端联调操作：利用开发者工具，抓取一下网络请求</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106213419461.png" alt="image-20230106213419461"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>登录请求完成后，可以看到JWT令牌已经响应给了前端，此时前端就会将JWT令牌存储在浏览器本地。</p></blockquote><p>服务器响应的JWT令牌存储在本地浏览器哪里了呢？</p><ul><li>在当前案例中，JWT令牌存储在浏览器的本地存储空间local storage中了。 local storage是浏览器的本地存储，在移动端也是支持的。</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106213910049.png" alt="image-20230106213910049"></p><p>我们在发起一个查询部门数据的请求，此时我们可以看到在请求头中包含一个token(JWT令牌)，后续的每一次请求当中，都会将这个令牌携带到服务端。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106214331443.png" alt="image-20230106214331443"></p><h3 id="9-4-过滤器Filter"><a href="#9-4-过滤器Filter" class="headerlink" title="9.4 过滤器Filter"></a>9.4 过滤器Filter</h3><p>刚才通过浏览器的开发者工具，我们可以看到在后续的请求当中，都会在请求头中携带JWT令牌到服务端，而服务端需要统一拦截所有的请求，从而判断是否携带的有合法的JWT令牌。<br>那怎么样来统一拦截到所有的请求校验令牌的有效性呢？这里我们会学习两种解决方案：</p><ol><li>Filter过滤器</li><li>Interceptor拦截器</li></ol><p>我们首先来学习过滤器Filter。</p><h4 id="9-4-1-快速入门"><a href="#9-4-1-快速入门" class="headerlink" title="9.4.1 快速入门"></a>9.4.1 快速入门</h4><p>什么是Filter？</p><ul><li>Filter表示过滤器，是 JavaWeb三大组件(Servlet、Filter、Listener)之一。</li><li>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能<ul><li>使用了过滤器之后，要想访问web服务器上的资源，必须先经过滤器，过滤器处理完毕之后，才可以访问对应的资源。</li></ul></li><li>过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等。</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112120955145.png" alt="image-20230112120955145"> </p><p>下面我们通过Filter快速入门程序掌握过滤器的基本使用操作：</p><ul><li>第1步，定义过滤器 ：1.定义一个类，实现 Filter 接口，并重写其所有方法。</li><li>第2步，配置过滤器：Filter类上加 @WebFilter 注解，配置拦截资源的路径。引导类上加 @ServletComponentScan 开启Servlet组件支持。</li></ul><p><strong>定义过滤器</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//定义一个类，实现一个标准的Filter过滤器的接口</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DemoFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//初始化方法, 只调用一次</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">init</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">FilterConfig</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterConfig</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">init 初始化方法执行了</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//拦截到请求之后调用, 调用多次</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">chain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Demo 拦截到了请求...放行前逻辑</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//放行</span></span><span class="line"><span style="color: #BABED8">        chain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">response</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//销毁方法, 只调用一次</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">destroy</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">destroy 销毁方法执行了</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li><p>init方法：过滤器的初始化方法。在web服务器启动的时候会自动的创建Filter过滤器对象，在创建过滤器对象的时候会自动调用init初始化方法，这个方法只会被调用一次。</p></li><li><p>doFilter方法：这个方法是在每一次拦截到请求之后都会被调用，所以这个方法是会被调用多次的，每拦截到一次请求就会调用一次doFilter()方法。</p></li><li><p>destroy方法： 是销毁的方法。当我们关闭服务器的时候，它会自动的调用销毁方法destroy，而这个销毁方法也只会被调用一次。</p></li></ul></blockquote><p>在定义完Filter之后，Filter其实并不会生效，还需要完成Filter的配置，Filter的配置非常简单，只需要在Filter类上添加一个注解：@WebFilter，并指定属性urlPatterns，通过这个属性指定过滤器要拦截哪些请求</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">WebFilter</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">urlPatterns</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/*</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//配置过滤器要拦截的请求路径（ /* 表示拦截浏览器的所有请求 ）</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DemoFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//初始化方法, 只调用一次</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">init</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">FilterConfig</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterConfig</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">init 初始化方法执行了</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//拦截到请求之后调用, 调用多次</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">chain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Demo 拦截到了请求...放行前逻辑</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//放行</span></span><span class="line"><span style="color: #BABED8">        chain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">response</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//销毁方法, 只调用一次</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">destroy</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">destroy 销毁方法执行了</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>当我们在Filter类上面加了@WebFilter注解之后，接下来我们还需要在启动类上面加上一个注解@ServletComponentScan，通过这个@ServletComponentScan注解来开启SpringBoot项目对于Servlet组件的支持。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">ServletComponentScan</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootApplication</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">TliasWebManagementApplication</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        SpringApplication</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">run</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">TliasWebManagementApplication</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> args</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重新启动服务，打开浏览器，执行部门管理的请求，可以看到控制台输出了过滤器中的内容：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112121205697.png" alt="image-20230112121205697"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：</p><p>​在过滤器Filter中，如果不执行放行操作，将无法访问后面的资源。 放行操作：chain.doFilter(request, response);</p></blockquote><p>现在我们已完成了Filter过滤器的基本使用，下面我们将学习Filter过滤器在使用过程中的一些细节。</p><h4 id="9-4-2-Filter详解"><a href="#9-4-2-Filter详解" class="headerlink" title="9.4.2 Filter详解"></a>9.4.2 Filter详解</h4><p>Filter过滤器的快速入门程序我们已经完成了，接下来我们就要详细的介绍一下过滤器Filter在使用中的一些细节。主要介绍以下3个方面的细节：</p><ol><li>过滤器的执行流程</li><li>过滤器的拦截路径配置</li><li>过滤器链</li></ol><p><strong>执行流程</strong></p><p>首先我们先来看下过滤器的执行流程：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106222559935.png" alt="image-20230106222559935"></p><p>过滤器当中我们拦截到了请求之后，如果希望继续访问后面的web资源，就要执行放行操作，放行就是调用 FilterChain对象当中的doFilter()方法，在调用doFilter()这个方法之前所编写的代码属于放行之前的逻辑。</p><p>在放行后访问完 web 资源之后还会回到过滤器当中，回到过滤器之后如有需求还可以执行放行之后的逻辑，放行之后的逻辑我们写在doFilter()这行代码之后。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">WebFilter</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">urlPatterns</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/*</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DemoFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//初始化方法, 只调用一次</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">init</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">FilterConfig</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterConfig</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">init 初始化方法执行了</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletResponse</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterChain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行前逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//放行请求</span></span><span class="line"><span style="color: #BABED8">        filterChain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">servletResponse</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行后逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//销毁方法, 只调用一次</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">destroy</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">destroy 销毁方法执行了</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106224322625.png" alt="image-20230106224322625"></p><p><strong>拦截路径</strong></p><p>执行流程我们搞清楚之后，接下来再来介绍一下过滤器的拦截路径，Filter可以根据需求，配置不同的拦截资源路径：</p><table><thead><tr><th>拦截路径</th><th>urlPatterns值</th><th>含义</th></tr></thead><tbody><tr><td>拦截具体路径</td><td>&#x2F;login</td><td>只有访问 &#x2F;login 路径时，才会被拦截</td></tr><tr><td>目录拦截</td><td>&#x2F;emps&#x2F;*</td><td>访问&#x2F;emps下的所有资源，都会被拦截</td></tr><tr><td>拦截所有</td><td>&#x2F;*</td><td>访问所有资源，都会被拦截</td></tr></tbody></table><p>下面我们来测试”拦截具体路径”：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">WebFilter</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">urlPatterns</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/login</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic">//拦截/login具体路径</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DemoFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletResponse</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterChain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行前逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//放行请求</span></span><span class="line"><span style="color: #BABED8">        filterChain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">servletResponse</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行后逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">init</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">FilterConfig</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterConfig</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        Filter</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">super</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">init</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">filterConfig</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">destroy</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        Filter</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">super</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">destroy</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>测试1：访问部门管理请求，发现过滤器没有拦截请求</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106225658525-17076395955311.png" alt="image-20230106225658525"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106230332510-17076395955312.png" alt="image-20230106230332510"></p><p>测试2：访问登录请求&#x2F;login，发现过滤器拦截请求</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106230520229-17076395955315.png" alt="image-20230106230520229"></p><p>下面我们来测试”目录拦截”：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">WebFilter</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">urlPatterns</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/depts/*</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//拦截所有以/depts开头，后面是什么无所谓</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DemoFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletResponse</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterChain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行前逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//放行请求</span></span><span class="line"><span style="color: #BABED8">        filterChain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">servletResponse</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行后逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">init</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">FilterConfig</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterConfig</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        Filter</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">super</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">init</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">filterConfig</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">destroy</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        Filter</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">super</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">destroy</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>测试1：访问部门管理请求，发现过滤器拦截了请求</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106231144348-17076395955313.png" alt="image-20230106231144348"></p><p>测试2：访问登录请求&#x2F;login，发现过滤器没有拦截请求</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230106231220802-17076395955314.png" alt="image-20230106231220802"></p><p><strong>过滤器链</strong></p><p>最后我们在来介绍下过滤器链，什么是过滤器链呢？所谓过滤器链指的是在一个web应用程序当中，可以配置多个过滤器，多个过滤器就形成了一个过滤器链。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107084730393.png" alt="image-20230107084730393"></p><p>比如：在我们web服务器当中，定义了两个过滤器，这两个过滤器就形成了一个过滤器链。</p><p>而这个链上的过滤器在执行的时候会一个一个的执行，会先执行第一个Filter，放行之后再来执行第二个Filter，如果执行到了最后一个过滤器放行之后，才会访问对应的web资源。</p><p>访问完web资源之后，按照我们刚才所介绍的过滤器的执行流程，还会回到过滤器当中来执行过滤器放行后的逻辑，而在执行放行后的逻辑的时候，顺序是反着的。</p><p>先要执行过滤器2放行之后的逻辑，再来执行过滤器1放行之后的逻辑，最后在给浏览器响应数据。</p><p>以上就是当我们在web应用当中配置了多个过滤器，形成了这样一个过滤器链以及过滤器链的执行顺序。下面我们通过idea来验证下过滤器链。</p><p>验证步骤：</p><ol><li>在filter包下再来新建一个Filter过滤器类：AbcFilter</li><li>在AbcFilter过滤器中编写放行前和放行后逻辑</li><li>配置AbcFilter过滤器拦截请求路径为：&#x2F;* </li><li>重启SpringBoot服务，查看DemoFilter、AbcFilter的执行日志</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107085552176.png" alt="image-20230107085552176"></p><p><strong>AbcFilter过滤器</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">WebFilter</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">urlPatterns</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/*</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AbcFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">chain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Abc 拦截到了请求... 放行前逻辑</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//放行</span></span><span class="line"><span style="color: #BABED8">        chain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">response</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Abc 拦截到了请求... 放行后逻辑</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p><strong>DemoFilter过滤器</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">WebFilter</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">urlPatterns</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/*</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DemoFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletResponse</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterChain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行前逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//放行请求</span></span><span class="line"><span style="color: #BABED8">        filterChain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">servletResponse</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行后逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>打开浏览器访问登录接口：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107090425999.png" alt="image-20230107090425999"></p><p>通过控制台日志的输出，大家发现AbcFilter先执行DemoFilter后执行，这是为什么呢？</p><p>其实是和过滤器的类名有关系。以注解方式配置的Filter过滤器，它的执行优先级是按时过滤器类名的自动排序确定的，类名排名越靠前，优先级越高。</p><p>假如我们想让DemoFilter先执行，怎么办呢？答案就是修改类名。</p><p>测试：修改AbcFilter类名为XbcFilter，运行程序查看控制台日志</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">WebFilter</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">urlPatterns</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/*</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">XbcFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">chain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Xbc 拦截到了请求...放行前逻辑</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//放行</span></span><span class="line"><span style="color: #BABED8">        chain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">response</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Xbc 拦截到了请求...放行后逻辑</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107093757050.png" alt="image-20230107093757050"></p><p>到此，关于过滤器的使用细节，我们已经全部介绍完毕了。</p><h4 id="9-4-3-登录校验-Filter"><a href="#9-4-3-登录校验-Filter" class="headerlink" title="9.4.3 登录校验-Filter"></a>9.4.3 登录校验-Filter</h4><p>过滤器Filter的快速入门以及使用细节我们已经介绍完了，接下来最后一步，我们需要使用过滤器Filter来完成案例当中的登录校验功能。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107095010089.png" alt="image-20230107095010089"></p><p>我们先来回顾下前面分析过的登录校验的基本流程：</p><ul><li><p>要进入到后台管理系统，我们必须先完成登录操作，此时就需要访问登录接口login。</p></li><li><p>登录成功之后，我们会在服务端生成一个JWT令牌，并且把JWT令牌返回给前端，前端会将JWT令牌存储下来。</p></li><li><p>在后续的每一次请求当中，都会将JWT令牌携带到服务端，请求到达服务端之后，要想去访问对应的业务功能，此时我们必须先要校验令牌的有效性。</p></li><li><p>对于校验令牌的这一块操作，我们使用登录校验的过滤器，在过滤器当中来校验令牌的有效性。如果令牌是无效的，就响应一个错误的信息，也不会再去放行访问对应的资源了。如果令牌存在，并且它是有效的，此时就会放行去访问对应的web资源，执行相应的业务操作。</p></li></ul><p>大概清楚了在Filter过滤器的实现步骤了，那在正式开发登录校验过滤器之前，我们思考两个问题：</p><ol><li><p>所有的请求，拦截到了之后，都需要校验令牌吗？</p><ul><li>答案：<strong>登录请求例外</strong></li></ul></li><li><p>拦截到请求后，什么情况下才可以放行，执行业务操作？</p><ul><li>答案：<strong>有令牌，且令牌校验通过(合法)；否则都返回未登录错误结果</strong></li></ul></li></ol><p><strong>具体流程</strong></p><p>我们要完成登录校验，主要是利用Filter过滤器实现，而Filter过滤器的流程步骤：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112122130564.png" alt="image-20230112122130564"> </p><p>基于上面的业务流程，我们分析出具体的操作步骤：</p><ol><li>获取请求url</li><li>判断请求url中是否包含login，如果包含，说明是登录操作，放行</li><li>获取请求头中的令牌（token）</li><li>判断令牌是否存在，如果不存在，返回错误结果（未登录）</li><li>解析token，如果解析失败，返回错误结果（未登录）</li><li>放行</li></ol><p>分析清楚了以上的问题后，我们就参照接口文档来开发登录功能了，登录接口描述如下：</p><ul><li><p>基本信息</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">请求路径：/login</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">请求方式：POST</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">接口描述：该接口用于员工登录Tlias智能学习辅助系统，登录完毕后，系统下发JWT令牌。 </span></span></code></pre></div></li><li><p>请求参数</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>必须</td><td>用户名</td></tr><tr><td>password</td><td>string</td><td>必须</td><td>密码</td></tr></tbody></table><p>请求数据样例：</p><div class="language-json"><button title="Copy code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">username</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">jinyong</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">password</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">123456</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 ; 0  失败</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>string</td><td>必须</td><td></td><td>返回的数据 , jwt令牌</td><td></td></tr></tbody></table><p>响应数据样例：</p><div class="language-json"><button title="Copy code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">code</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">msg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">data</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoi6YeR5bq4IiwiaWQiOjEsInVzZXJuYW1lIjoiamlueW9uZyIsImV4cCI6MTY2MjIwNzA0OH0.KkUc_CXJZJ8Dd063eImx4H9Ojfrr6XMJ-yVzaWCVZCo</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></li><li><p>备注说明</p><p>用户登录成功后，系统会自动下发JWT令牌，然后在后续的每次请求中，都需要在请求头header中携带到服务端，请求头的名称为 token ，值为 登录时下发的JWT令牌。</p><p>如果检测到用户未登录，则会返回如下固定错误信息：</p><div class="language-json"><button title="Copy code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">code</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">msg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NOT_LOGIN</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">data</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></li></ul><p><strong>登录校验过滤器：LoginCheckFilter</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">WebFilter</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">urlPatterns</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/*</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//拦截所有请求</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">LoginCheckFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletResponse</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">chain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//前置：强制转换为http协议的请求对象、响应对象 （转换原因：要使用子类中特有方法）</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> request </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">HttpServletRequest</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> servletRequest</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">HttpServletResponse</span><span style="color: #BABED8"> response </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">HttpServletResponse</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> servletResponse</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//1.获取请求url</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> url </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> request</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getRequestURL</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">toString</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">请求路径：&#123;&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> url</span><span style="color: #89DDFF">);</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//请求路径：http://localhost:8080/login</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">url</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">contains</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/login</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">))&#123;</span></span><span class="line"><span style="color: #BABED8">            chain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> response</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">//放行请求</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">//结束当前方法的执行</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//3.获取请求头中的令牌（token）</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> token </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> request</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getHeader</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">token</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">从请求头中获取的令牌：&#123;&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">token</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #89DDFF">(!</span><span style="color: #BABED8">StringUtils</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasLength</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">token</span><span style="color: #89DDFF">))&#123;</span></span><span class="line"><span style="color: #BABED8">            log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Token不存在</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> responseResult </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NOT_LOGIN</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> json </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> JSONObject</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toJSONString</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">responseResult</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setContentType</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">application/json;charset=utf-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//响应</span></span><span class="line"><span style="color: #BABED8">            response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getWriter</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">write</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">json</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//5.解析token，如果解析失败，返回错误结果（未登录）</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">            JwtUtils</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parseJWT</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">token</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">e</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">            log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">令牌解析失败!</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> responseResult </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NOT_LOGIN</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> json </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> JSONObject</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toJSONString</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">responseResult</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setContentType</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">application/json;charset=utf-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//响应</span></span><span class="line"><span style="color: #BABED8">            response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getWriter</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">write</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">json</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//6.放行</span></span><span class="line"><span style="color: #BABED8">        chain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> response</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>在上述过滤器的功能实现中，我们使用到了一个第三方json处理的工具包fastjson。我们要想使用，需要引入如下依赖：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.alibaba</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">fastjson</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.2.76</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>登录校验的过滤器我们编写完成了，接下来我们就可以重新启动服务来做一个测试：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>测试前先把之前所编写的测试使用的过滤器，暂时注释掉。直接将@WebFilter注解给注释掉即可。</p></blockquote><ul><li><p>测试1：未登录是否可以访问部门管理页面</p><p>首先关闭浏览器，重新打开浏览器，在地址栏中输入：<a href="http://localhost:9528/#/system/dept">http://localhost:9528/#/system/dept</a></p><p>由于用户没有登录，登录校验过滤器返回错误信息，前端页面根据返回的错误信息结果，自动跳转到登录页面了</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230105085212629.png" alt="image-20230105085212629"></p></li><li><p>测试2：先进行登录操作，再访问部门管理页面</p><p>登录校验成功之后，可以正常访问相关业务操作页面</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107102922550.png" alt="image-20230107102922550"></p></li></ul><h3 id="9-5-拦截器Interceptor"><a href="#9-5-拦截器Interceptor" class="headerlink" title="9.5 拦截器Interceptor"></a>9.5 拦截器Interceptor</h3><h4 id="9-5-1-快速入门"><a href="#9-5-1-快速入门" class="headerlink" title="9.5.1 快速入门"></a>9.5.1 快速入门</h4><p>什么是拦截器？</p><ul><li>是一种动态拦截方法调用的机制，类似于过滤器。</li><li>拦截器是Spring框架中提供的，用来动态拦截控制器方法的执行。</li></ul><p>拦截器的作用：</p><ul><li>拦截请求，在指定方法调用前后，根据业务需要执行预先设定的代码。</li></ul><p>在拦截器当中，我们通常也是做一些通用性的操作，比如：我们可以通过拦截器来拦截前端发起的请求，将登录校验的逻辑全部编写在拦截器当中。在校验的过程当中，如发现用户登录了(携带JWT令牌且是合法令牌)，就可以直接放行，去访问spring当中的资源。如果校验时发现并没有登录或是非法令牌，就可以直接给前端响应未登录的错误信息。</p><p>下面我们通过快速入门程序，来学习下拦截器的基本使用。拦截器的使用步骤和过滤器类似，也分为两步：</p><ol><li><p>定义拦截器</p></li><li><p>注册配置拦截器</p></li></ol><p><strong>自定义拦截器：</strong>实现HandlerInterceptor接口，并重写其所有方法</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//自定义拦截器</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">LoginCheckInterceptor</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HandlerInterceptor</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//目标资源方法执行前执行。 返回true：放行    返回false：不放行</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">boolean</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">preHandle</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HttpServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">handler</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">preHandle .... </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">true;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//true表示放行</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//目标资源方法执行后执行</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">postHandle</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HttpServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">handler</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ModelAndView</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">modelAndView</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">postHandle ... </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//视图渲染完毕后执行，最后执行</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">afterCompletion</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HttpServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">handler</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">ex</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">afterCompletion .... </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：</p><p>​preHandle方法：目标资源方法执行前执行。 返回true：放行    返回false：不放行</p><p>​postHandle方法：目标资源方法执行后执行</p><p>​afterCompletion方法：视图渲染完毕后执行，最后执行</p></blockquote><p><strong>注册配置拦截器</strong>：实现WebMvcConfigurer接口，并重写addInterceptors方法</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebConfig</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebMvcConfigurer</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//自定义的拦截器对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LoginCheckInterceptor</span><span style="color: #BABED8"> loginCheckInterceptor</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">addInterceptors</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">InterceptorRegistry</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">registry</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">       </span><span style="color: #676E95; font-style: italic">//注册自定义拦截器对象</span></span><span class="line"><span style="color: #BABED8">        registry</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addInterceptor</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">loginCheckInterceptor</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">addPathPatterns</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/**</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">//设置拦截器拦截的请求路径（ /** 表示拦截所有请求）</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重新启动SpringBoot服务，打开postman测试：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107105224741.png" alt="image-20230107105224741"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107105415120.png" alt="image-20230107105415120"></p><p>接下来我们再来做一个测试：将拦截器中返回值改为false</p><p>使用postman，再次点击send发送请求后，没有响应数据，说明请求被拦截了没有放行</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107105815511.png" alt="image-20230107105815511"></p><h4 id="9-5-2-Interceptor详解"><a href="#9-5-2-Interceptor详解" class="headerlink" title="9.5.2 Interceptor详解"></a>9.5.2 Interceptor详解</h4><p>首先我们先来看拦截器的拦截路径的配置，在注册配置拦截器的时候，我们要指定拦截器的拦截路径，通过<code>addPathPatterns(&quot;要拦截路径&quot;)</code>方法，就可以指定要拦截哪些资源。</p><p>在入门程序中我们配置的是<code>/**</code>，表示拦截所有资源，而在配置拦截器时，不仅可以指定要拦截哪些资源，还可以指定不拦截哪些资源，只需要调用<code>excludePathPatterns(&quot;不拦截路径&quot;)</code>方法，指定哪些资源不需要拦截。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebConfig</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebMvcConfigurer</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//拦截器对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LoginCheckInterceptor</span><span style="color: #BABED8"> loginCheckInterceptor</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">addInterceptors</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">InterceptorRegistry</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">registry</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//注册自定义拦截器对象</span></span><span class="line"><span style="color: #BABED8">        registry</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addInterceptor</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">loginCheckInterceptor</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addPathPatterns</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/**</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//设置拦截器拦截的请求路径（ /** 表示拦截所有请求）</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">excludePathPatterns</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/login</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">//设置不拦截的请求路径</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>在拦截器中除了可以设置<code>/**</code>拦截所有资源外，还有一些常见拦截路径设置：</p><table><thead><tr><th>拦截路径</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>&#x2F;*</td><td>一级路径</td><td>能匹配&#x2F;depts，&#x2F;emps，&#x2F;login，不能匹配 &#x2F;depts&#x2F;1</td></tr><tr><td>&#x2F;**</td><td>任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2</td></tr><tr><td>&#x2F;depts&#x2F;*</td><td>&#x2F;depts下的一级路径</td><td>能匹配&#x2F;depts&#x2F;1，不能匹配&#x2F;depts&#x2F;1&#x2F;2，&#x2F;depts</td></tr><tr><td>&#x2F;depts&#x2F;**</td><td>&#x2F;depts下的任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2，不能匹配&#x2F;emps&#x2F;1</td></tr></tbody></table><p>下面主要来演示下<code>/**</code>与<code>/*</code>的区别： </p><ul><li>修改拦截器配置，把拦截路径设置为<code>/*</code></li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebConfig</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebMvcConfigurer</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//拦截器对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LoginCheckInterceptor</span><span style="color: #BABED8"> loginCheckInterceptor</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">addInterceptors</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">InterceptorRegistry</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">registry</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">       </span><span style="color: #676E95; font-style: italic">//注册自定义拦截器对象</span></span><span class="line"><span style="color: #BABED8">        registry</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addInterceptor</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">loginCheckInterceptor</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addPathPatterns</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/*</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">excludePathPatterns</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/login</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">//设置不拦截的请求路径</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>使用postman测试：<a href="http://localhost:8080/emps/1">http://localhost:8080/emps/1</a> </p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107111525558.png" alt="image-20230107111525558"></p><p>控制台没有输出拦截器中的日志信息，说明<code>/*</code>没有匹配到拦截路径<code>/emp/1</code> 。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107111812963.png" alt="image-20230107111812963"></p><p><strong>执行流程</strong></p><p>介绍完拦截路径的配置之后，接下来我们再来介绍拦截器的执行流程。通过执行流程，大家就能够清晰的知道过滤器与拦截器的执行时机。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107112136151.png" alt="image-20230107112136151"></p><ul><li><p>当我们打开浏览器来访问部署在web服务器当中的web应用时，此时我们所定义的过滤器会拦截到这次请求。拦截到这次请求之后，它会先执行放行前的逻辑，然后再执行放行操作。而由于我们当前是基于springboot开发的，所以放行之后是进入到了spring的环境当中，也就是要来访问我们所定义的controller当中的接口方法。</p></li><li><p>Tomcat并不识别所编写的Controller程序，但是它识别Servlet程序，所以在Spring的Web环境中提供了一个非常核心的Servlet：DispatcherServlet（前端控制器），所有请求都会先进行到DispatcherServlet，再将请求转给Controller。</p></li><li><p>当我们定义了拦截器后，会在执行Controller的方法之前，请求被拦截器拦截住。执行<code>preHandle()</code>方法，这个方法执行完成后需要返回一个布尔类型的值，如果返回true，就表示放行本次操作，才会继续访问controller中的方法；如果返回false，则不会放行（controller中的方法也不会执行）。</p></li><li><p>在controller当中的方法执行完毕之后，再回过来执行<code>postHandle()</code>这个方法以及<code>afterCompletion()</code> 方法，然后再返回给DispatcherServlet，最终再来执行过滤器当中放行后的这一部分逻辑的逻辑。执行完毕之后，最终给浏览器响应数据。</p></li></ul><p>接下来我们就来演示下过滤器和拦截器同时存在的执行流程：</p><ul><li>开启LoginCheckInterceptor拦截器</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">LoginCheckInterceptor</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HandlerInterceptor</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">boolean</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">preHandle</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HttpServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">handler</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">preHandle .... </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">true;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//true表示放行</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">postHandle</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HttpServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">handler</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ModelAndView</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">modelAndView</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">postHandle ... </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">afterCompletion</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HttpServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">handler</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">ex</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">afterCompletion .... </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebConfig</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebMvcConfigurer</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//拦截器对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LoginCheckInterceptor</span><span style="color: #BABED8"> loginCheckInterceptor</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">addInterceptors</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">InterceptorRegistry</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">registry</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//注册自定义拦截器对象</span></span><span class="line"><span style="color: #BABED8">        registry</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addInterceptor</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">loginCheckInterceptor</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addPathPatterns</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/**</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//拦截所有请求</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">excludePathPatterns</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/login</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">//不拦截登录请求</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ul><li>开启DemoFilter过滤器</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">WebFilter</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">urlPatterns</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/*</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">DemoFilter</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Filter</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">servletResponse</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">FilterChain</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">filterChain</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ServletException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行前逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//放行请求</span></span><span class="line"><span style="color: #BABED8">        filterChain</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">doFilter</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">servletRequest</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">servletResponse</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DemoFilter   放行后逻辑.....</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>重启SpringBoot服务后，清空日志，打开Postman，测试查询部门：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107113653871.png" alt="image-20230107113653871"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107114008004.png" alt="image-20230107114008004"></p><p>以上就是拦截器的执行流程。通过执行流程分析，大家应该已经清楚了过滤器和拦截器之间的区别，其实它们之间的区别主要是两点：</p><ul><li>接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现HandlerInterceptor接口。</li><li>拦截范围不同：过滤器Filter会拦截所有的资源，而Interceptor只会拦截Spring环境中的资源。</li></ul><h4 id="9-5-3-登录校验-Interceptor"><a href="#9-5-3-登录校验-Interceptor" class="headerlink" title="9.5.3 登录校验- Interceptor"></a>9.5.3 登录校验- Interceptor</h4><p>讲解完了拦截器的基本操作之后，接下来我们需要完成最后一步操作：通过拦截器来完成案例当中的登录校验功能。</p><p>登录校验的业务逻辑以及操作步骤我们前面已经分析过了，和登录校验Filter过滤器当中的逻辑是完全一致的。现在我们只需要把这个技术方案由原来的过滤器换成拦截器interceptor就可以了。</p><p><strong>登录校验拦截器</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">//自定义拦截器</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//当前拦截器对象由Spring创建和管理</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">LoginCheckInterceptor</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HandlerInterceptor</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//前置方式</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">boolean</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">preHandle</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">HttpServletRequest</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">HttpServletResponse</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">response</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">handler</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">preHandle .... </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//1.获取请求url</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//3.获取请求头中的令牌（token）</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> token </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> request</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getHeader</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">token</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">从请求头中获取的令牌：&#123;&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">token</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #89DDFF">(!</span><span style="color: #BABED8">StringUtils</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasLength</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">token</span><span style="color: #89DDFF">))&#123;</span></span><span class="line"><span style="color: #BABED8">            log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Token不存在</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//创建响应结果对象</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> responseResult </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NOT_LOGIN</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> json </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> JSONObject</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toJSONString</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">responseResult</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//设置响应头（告知浏览器：响应的数据类型为json、响应的数据编码表为utf-8）</span></span><span class="line"><span style="color: #BABED8">            response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setContentType</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">application/json;charset=utf-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//响应</span></span><span class="line"><span style="color: #BABED8">            response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getWriter</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">write</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">json</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">false;</span><span style="color: #676E95; font-style: italic">//不放行</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//5.解析token，如果解析失败，返回错误结果（未登录）</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">            JwtUtils</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parseJWT</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">token</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">e</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">            log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">令牌解析失败!</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//创建响应结果对象</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> responseResult </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">NOT_LOGIN</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> json </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> JSONObject</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toJSONString</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">responseResult</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//设置响应头</span></span><span class="line"><span style="color: #BABED8">            response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setContentType</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">application/json;charset=utf-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//响应</span></span><span class="line"><span style="color: #BABED8">            response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getWriter</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">write</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">json</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">false;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//6.放行</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">true;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p><strong>注册配置拦截器</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Configuration</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebConfig</span><span style="color: #BABED8"> </span><span style="color: #C792EA">implements</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">WebMvcConfigurer</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//拦截器对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LoginCheckInterceptor</span><span style="color: #BABED8"> loginCheckInterceptor</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">addInterceptors</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">InterceptorRegistry</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">registry</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">       </span><span style="color: #676E95; font-style: italic">//注册自定义拦截器对象</span></span><span class="line"><span style="color: #BABED8">        registry</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addInterceptor</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">loginCheckInterceptor</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addPathPatterns</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/**</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">excludePathPatterns</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/login</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>登录校验的拦截器编写完成后，接下来我们就可以重新启动服务来做一个测试： （<strong>关闭登录校验Filter过滤器</strong>）</p><ul><li><p>测试1：未登录是否可以访问部门管理页面</p><p>首先关闭浏览器，重新打开浏览器，在地址栏中输入：<a href="http://localhost:9528/#/system/dept">http://localhost:9528/#/system/dept</a></p><p>由于用户没有登录，校验机制返回错误信息，前端页面根据返回的错误信息结果，自动跳转到登录页面了</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230105085212629-17076408768227.png" alt="image-20230105085212629"></p></li><li><p>测试2：先进行登录操作，再访问部门管理页面</p><p>登录校验成功之后，可以正常访问相关业务操作页面</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107102922550-17076408768226.png" alt="image-20230107102922550"></p></li></ul><p>到此我们也就验证了所开发的登录校验的拦截器也是没问题的。登录校验的过滤器和拦截器，我们只需要使用其中的一种就可以了。</p><h2 id="10-异常处理"><a href="#10-异常处理" class="headerlink" title="10.异常处理"></a>10.异常处理</h2><h3 id="10-1-当前问题"><a href="#10-1-当前问题" class="headerlink" title="10.1 当前问题"></a>10.1 当前问题</h3><p>登录功能和登录校验功能我们都实现了，下面我们学习下今天最后一块技术点：异常处理。首先我们先来看一下系统出现异常之后会发生什么现象，再来介绍异常处理的方案。</p><p>我们打开浏览器，访问系统中的新增部门操作，系统中已经有了 “就业部” 这个部门，我们再来增加一个就业部，看看会发生什么现象。</p><img src="/oranfish.github.io/posts/0/image-20230112125651073.png" alt="image-20230112125651073" style="zoom: 80%;">   <p>点击确定之后，窗口关闭了，页面没有任何反应，就业部也没有添加上。 而此时，大家会发现，网络请求报错了。</p><img src="/oranfish.github.io/posts/0/image-20230112125737863.png" alt="image-20230112125737863" style="zoom:80%;"> <p>状态码为500，表示服务器端异常，我们打开idea，来看一下，服务器端出了什么问题。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112125826602.png" alt="image-20230112125826602"> </p><p>上述错误信息的含义是，dept部门表的name字段的值 就业部 重复了，因为在数据库表dept中已经有了就业部，我们之前设计这张表时，为name字段建议了唯一约束，所以该字段的值是不能重复的。</p><p>而当我们再添加就业部，这个部门时，就违反了唯一约束，此时就会报错。</p><p>我们来看一下出现异常之后，最终服务端给前端响应回来的数据长什么样。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112130253486.png" alt="image-20230112130253486"> </p><p>响应回来的数据是一个JSON格式的数据。但这种JSON格式的数据还是我们开发规范当中所提到的统一响应结果Result吗？显然并不是。由于返回的数据不符合开发规范，所以前端并不能解析出响应的JSON数据。</p><p>接下来我们需要思考的是出现异常之后，当前案例项目的异常是怎么处理的？</p><ul><li>答案：没有做任何的异常处理</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107121909087.png" alt="image-20230107121909087"></p><p>当我们没有做任何的异常处理时，我们三层架构处理异常的方案：</p><ul><li>Mapper接口在操作数据库的时候出错了，此时异常会往上抛(谁调用Mapper就抛给谁)，会抛给service。 </li><li>service 中也存在异常了，会抛给controller。</li><li>而在controller当中，我们也没有做任何的异常处理，所以最终异常会再往上抛。最终抛给框架之后，框架就会返回一个JSON格式的数据，里面封装的就是错误的信息，但是框架返回的JSON格式的数据并不符合我们的开发规范。</li></ul><h3 id="3-2-解决方案"><a href="#3-2-解决方案" class="headerlink" title="3.2 解决方案"></a>3.2 解决方案</h3><p>那么在三层构架项目中，出现了异常，该如何处理?</p><ul><li>方案一：在所有Controller的所有方法中进行try…catch处理<ul><li>缺点：代码臃肿（不推荐）</li></ul></li><li>方案二：全局异常处理器<ul><li>好处：简单、优雅（推荐）</li></ul></li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230107122904214.png" alt="image-20230107122904214"></p><h3 id="3-3-全局异常处理器"><a href="#3-3-全局异常处理器" class="headerlink" title="3.3 全局异常处理器"></a>3.3 全局异常处理器</h3><p>我们该怎么样定义全局异常处理器？</p><ul><li>定义全局异常处理器非常简单，就是定义一个类，在类上加上一个注解@RestControllerAdvice，加上这个注解就代表我们定义了一个全局异常处理器。</li><li>在全局异常处理器当中，需要定义一个方法来捕获异常，在这个方法上需要加上注解@ExceptionHandler。通过@ExceptionHandler注解当中的value属性来指定我们要捕获的是哪一类型的异常。</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestControllerAdvice</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">GlobalExceptionHandler</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//处理异常</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">ExceptionHandler</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">Exception</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//指定能够处理的异常类型</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">ex</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">e</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        e</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">printStackTrace</span><span style="color: #89DDFF">();</span><span style="color: #676E95; font-style: italic">//打印堆栈中的异常信息</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//捕获到异常之后，响应一个标准的Result</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">对不起,操作失败,请联系管理员</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>@RestControllerAdvice &#x3D; @ControllerAdvice + @ResponseBody</p><p>处理异常的方法返回值会转换为json后再响应给前端</p></blockquote><p>重新启动SpringBoot服务，打开浏览器，再来测试一下添加部门这个操作，我们依然添加已存在的 “就业部” 这个部门：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112131232032.png" alt="image-20230112131232032"> </p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A02/image-20230112131135272.png" alt="image-20230112131135272"> </p><p>此时，我们可以看到，出现异常之后，异常已经被全局异常处理器捕获了。然后返回的错误信息，被前端程序正常解析，然后提示出了对应的错误提示信息。</p><p>以上就是全局异常处理器的使用，主要涉及到两个注解：</p><ul><li>@RestControllerAdvice  &#x2F;&#x2F;表示当前类为全局异常处理器</li><li>@ExceptionHandler  &#x2F;&#x2F;指定可以捕获哪种类型的异常进行处理</li></ul>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot知识点总结（一）</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-SpingBoot入门"><a href="#1-SpingBoot入门" class="headerlink" title="1.SpingBoot入门"></a>1.SpingBoot入门</h2><h3 id="1-1-什么是Spring"><a href="#1-1-什么是Spring" class="headerlink" title="1.1 什么是Spring"></a>1.1 什么是Spring</h3><p>Spring的官网(<a href="https://spring.io)，去看一下Spring的简介：Spring">https://spring.io)，去看一下Spring的简介：Spring</a> makes Java simple。</p><p>Spring的官方提供很多开源的项目，我们可以点击上面的projects，看到spring家族旗下的项目，按照流行程度排序为：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220617222925923.png"></p><p>Spring发展到今天已经形成了一种开发生态圈，Spring提供了若干个子项目，每个项目用于完成特定的功能。而我们在项目开发时，一般会偏向于选择这一套spring家族的技术，来解决对应领域的问题，那我们称这一套技术为<strong>spring全家桶</strong>。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220617222609699.png"></p><p>而Spring家族旗下这么多的技术，最基础、最核心的是 SpringFramework。其他的spring家族的技术，都是基于SpringFramework的，SpringFramework中提供很多实用功能，如：依赖注入、事务管理、web开发支持、数据访问、消息服务等等。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220617224427947.png"></p><p>而如果我们在项目中，直接基于SpringFramework进行开发，存在两个问题：配置繁琐、入门难度大。 </p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220823185227296.png"></p><p>所以基于此呢，spring官方推荐我们从另外一个项目开始学习，那就是目前最火爆的SpringBoot。 </p><p><strong>Spring Boot 可以帮助我们非常快速的构建应用程序、简化开发、提高效率 。</strong></p><h3 id="1-2-SpringBootWeb快速入门"><a href="#1-2-SpringBootWeb快速入门" class="headerlink" title="1.2 SpringBootWeb快速入门"></a>1.2 SpringBootWeb快速入门</h3><h4 id="1-2-1-开发步骤"><a href="#1-2-1-开发步骤" class="headerlink" title="1.2.1 开发步骤"></a>1.2.1 开发步骤</h4><p>第1步：创建SpringBoot工程项目</p><p>第2步：定义HelloController类，添加方法hello，并添加注解</p><p>第3步：测试运行</p><p>基于Spring官方骨架，创建SpringBoot工程。</p><img src="/oranfish.github.io/posts/0/image-20221201184702136.png" alt="image-20221201184702136" style="zoom:80%;"><p>基本信息描述完毕之后，勾选web开发相关依赖。</p><img src="/oranfish.github.io/posts/0/image-20221201184850248.png" alt="image-20221201184850248" style="zoom:80%;"><p>点击Finish之后，就会联网创建这个SpringBoot工程，创建好之后，结构如下：</p><ul><li>&#x3D;&#x3D;注意：在联网创建过程中，会下载相关资源(请耐心等待)&#x3D;&#x3D;</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221201185910596.png" alt="image-20221201185910596"> </p><p><strong>定义请求处理类</strong></p><p>在com.itheima这个包下创建一个子包controller</p><img src="/oranfish.github.io/posts/0/image-20221201190541295.png" alt="image-20221201190541295" style="zoom:80%;"><p>然后在controller包下新建一个类：HelloController</p><img src="/oranfish.github.io/posts/0/image-20221201190825439.png" alt="image-20221201190825439" style="zoom:80%;"><p>运行SpringBoot自动生成的引导类</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221201191028124.png" alt="image-20221201191028124"></p><p>打开浏览器，输入 <code>http://localhost:8080/hello</code></p><h3 id="1-3-Web分析"><a href="#1-3-Web分析" class="headerlink" title="1.3 Web分析"></a>1.3 Web分析</h3><p>浏览器：</p><ul><li><p>输入网址：<code>http://192.168.100.11:8080/hello</code></p><ul><li><p>通过IP地址192.168.100.11定位到网络上的一台计算机</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我们之前在浏览器中输入的localhost，就是127.0.0.1（本机）</p></blockquote></li><li><p>通过端口号8080找到计算机上运行的程序</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><code>localhost:8080</code>  , 意思是在本地计算机中找到正在运行的8080端口的程序</p></blockquote></li><li><p>&#x2F;hello是请求资源位置</p><ul><li>资源：对计算机而言资源就是数据<ul><li>web资源：通过网络可以访问到的资源（通常是指存放在服务器上的数据）</li></ul></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><code>localhost:8080/hello</code> ，意思是向本地计算机中的8080端口程序，获取资源位置是&#x2F;hello的数据</p><ul><li>8080端口程序，在服务器找&#x2F;hello位置的资源数据，发给浏览器</li></ul></blockquote></li></ul></li></ul><p>服务器：（可以理解为ServerSocket）</p><ul><li>接收到浏览器发送的信息（如：&#x2F;hello）</li><li>在服务器上找到&#x2F;hello的资源</li><li>把资源发送给浏览器</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我们在JavaSE阶段学习网络编程时，有讲过网络三要素：</p><ul><li>IP  ：网络中计算机的唯一标识</li><li>端口 ：计算机中运行程序的唯一标识</li><li>协议 ：网络中计算机之间交互的规则</li></ul></blockquote><h2 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2 HTTP协议"></a>2 HTTP协议</h2><h3 id="2-1-HTTP概述"><a href="#2-1-HTTP概述" class="headerlink" title="2.1 HTTP概述"></a>2.1 HTTP概述</h3><p>HTTP：Hyper Text Transfer Protocol(超文本传输协议)，规定了浏览器与服务器之间数据传输的规则。</p><ul><li>http是互联网上应用最为广泛的一种网络协议 </li><li>http协议要求：浏览器在向服务器发送请求数据时，或是服务器在向浏览器发送响应数据时，都必须按照固定的格式进行数据传输</li></ul><p>浏览器向服务器进行请求时：</p><ul><li>服务器按照固定的格式进行解析</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202111044434.png" alt="image-20221202111044434"></p><p>服务器向浏览器进行响应时：</p><ul><li>浏览器按照固定的格式进行解析</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202111307819.png" alt="image-20221202111307819"></p><p>我们刚才初步认识了HTTP协议，那么我们在看看HTTP协议有哪些特点：</p><ul><li><p>**基于TCP协议: **   面向连接，安全</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全</p></blockquote></li><li><p><strong>基于请求-响应模型:</strong>   一次请求对应一次响应（先请求后响应）</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>请求和响应是一一对应关系，没有请求，就没有响应</p></blockquote></li><li><p><strong>HTTP协议是无状态协议:</strong>  对于数据没有记忆能力。每次请求-响应都是独立的</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。</p><ul><li>缺点:  多次请求间不能共享数据</li><li>优点:  速度快</li></ul><p>请求之间无法共享数据会引发的问题：</p><ul><li>如：京东购物。加入购物车和去购物车结算是两次请求</li><li>由于HTTP协议的无状态特性，加入购物车请求响应结束后，并未记录加入购物车是何商品</li><li>发起去购物车结算的请求后，因为无法获取哪些商品加入了购物车，会导致此次请求无法正确展示数据</li></ul><p>具体使用的时候，我们发现京东是可以正常展示数据的，原因是Java早已考虑到这个问题，并提出了使用会话技术(Cookie、Session)来解决这个问题。</p></blockquote></li></ul><h3 id="2-2-HTTP-请求协议"><a href="#2-2-HTTP-请求协议" class="headerlink" title="2.2 HTTP-请求协议"></a>2.2 HTTP-请求协议</h3><p>HTTP协议又分为：请求协议和响应协议</p><ul><li>请求协议：浏览器将数据以请求格式发送到服务器<ul><li>包括：<strong>请求行</strong>、<strong>请求头</strong> 、<strong>请求体</strong></li></ul></li><li>响应协议：服务器将数据以响应格式返回给浏览器<ul><li>包括：<strong>响应行</strong> 、<strong>响应头</strong> 、<strong>响应体</strong></li></ul></li></ul><table><thead><tr><th align="center">请求方式</th><th align="left">请求说明</th></tr></thead><tbody><tr><td align="center"><strong>GET</strong></td><td align="left">获取资源。<br>向特定的资源发出请求。例：<a href="http://www.baidu.com/s?wd=itheima">http://www.baidu.com/s?wd=itheima</a></td></tr><tr><td align="center"><strong>POST</strong></td><td align="left">传输实体主体。<br>向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。</td></tr><tr><td align="center">OPTIONS</td><td align="left">返回服务器针对特定资源所支持的HTTP请求方式。<br>因为并不是所有的服务器都支持规定的方法，为了安全有些服务器可能会禁止掉一些方法，例如：DELETE、PUT等。那么OPTIONS就是用来询问服务器支持的方法。</td></tr><tr><td align="center">HEAD</td><td align="left">获得报文首部。<br>HEAD方法类似GET方法，但是不同的是HEAD方法不要求返回数据。通常用于确认URI的有效性及资源更新时间等。</td></tr><tr><td align="center">PUT</td><td align="left">传输文件。<br>PUT方法用来传输文件。类似FTP协议，文件内容包含在请求报文的实体中，然后请求保存到URL指定的服务器位置。</td></tr><tr><td align="center">DELETE</td><td align="left">删除文件。<br>请求服务器删除Request-URI所标识的资源</td></tr><tr><td align="center">TRACE</td><td align="left">追踪路径。<br>回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td align="center">CONNECT</td><td align="left">要求用隧道协议连接代理。<br>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器</td></tr></tbody></table><p>在我们实际应用中常用的也就是 ：<strong>GET、POST</strong></p><p><strong>GET方式的请求协议：</strong></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220823200708026.png"> </p><ul><li><p>请求行 ：HTTP请求中的第一行数据。由：<code>请求方式</code>、<code>资源路径</code>、<code>协议/版本</code>组成（之间使用空格分隔）</p><ul><li>请求方式：GET  </li><li>资源路径：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1<ul><li>请求路径：&#x2F;brand&#x2F;findAll</li><li>请求参数：name&#x3D;OPPO&amp;status&#x3D;1<ul><li>请求参数是以key&#x3D;value形式出现</li><li>多个请求参数之间使用<code>&amp;</code>连接</li></ul></li><li>请求路径和请求参数之间使用<code>?</code>连接</li></ul><p>  </p></li><li>协议&#x2F;版本：HTTP&#x2F;1.1</li></ul></li><li><p>请求头 ：第二行开始，上图黄色部分内容就是请求头。格式为key: value形式 </p><ul><li>http是个无状态的协议，所以在请求头设置浏览器的一些自身信息和想要响应的形式。这样服务器在收到信息后，就可以知道是谁，想干什么了</li></ul><p>常见的HTTP请求头有:</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">Host: 表示请求的主机名</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">User-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79 ，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">Content-Type：请求主体的数据类型</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">Content-Length：数据主体的大小（单位：字节）</span></span></code></pre></div></li></ul><ul><li>请求体 ：存储请求参数<ul><li>GET请求的请求参数在请求行中，故不需要设置请求体</li></ul></li></ul><p><strong>POST方式的请求协议：</strong></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220823201303601.png"></p><ul><li>请求行(以上图中红色部分)：包含请求方式、资源路径、协议&#x2F;版本<ul><li>请求方式：POST</li><li>资源路径：&#x2F;brand</li><li>协议&#x2F;版本：HTTP&#x2F;1.1</li></ul></li><li>请求头(以上图中黄色部分)   </li><li>请求体(以上图中绿色部分) ：存储请求参数 <ul><li>请求体和请求头之间是有一个空行隔开（作用：用于标记请求头结束）</li></ul></li></ul><p>GET请求和POST请求的区别：</p><table><thead><tr><th>区别方式</th><th>GET请求</th><th>POST请求</th></tr></thead><tbody><tr><td>请求参数</td><td>请求参数在请求行中。<br>例：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1</td><td>请求参数在请求体中</td></tr><tr><td>请求参数长度</td><td>请求参数长度有限制(浏览器不同限制也不同)</td><td>请求参数长度没有限制</td></tr><tr><td>安全性</td><td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td><td>安全性相对高</td></tr></tbody></table><h3 id="2-3-HTTP-响应协议"><a href="#2-3-HTTP-响应协议" class="headerlink" title="2.3 HTTP-响应协议"></a>2.3 HTTP-响应协议</h3><p>与HTTP的请求一样，HTTP响应的数据也分为3部分：<strong>响应行</strong>、<strong>响应头</strong> 、<strong>响应体</strong> </p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220823202344149.png"> </p><ul><li><p>响应行(以上图中红色部分)：响应数据的第一行。响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</p><ul><li>协议&#x2F;版本：HTTP&#x2F;1.1</li><li>响应状态码：200</li><li>状态码描述：OK</li></ul></li><li><p>响应头(以上图中黄色部分)：响应数据的第二行开始。格式为key：value形式</p><ul><li>http是个无状态的协议，所以可以在请求头和响应头中设置一些信息和想要执行的动作，这样，对方在收到信息后，就可以知道你是谁，你想干什么</li></ul><p>常见的HTTP响应头有:</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg ；</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">Content-Length：表示该响应内容的长度（字节数）；</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">Content-Encoding：表示该响应压缩算法，例如gzip ；</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒 ;</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">Set-Cookie: 告诉浏览器为当前页面所在的域设置cookie ;</span></span></code></pre></div></li></ul><ul><li><p>响应体(以上图中绿色部分)： 响应数据的最后一部分。存储响应的数据</p><ul><li>响应体和响应头之间有一个空行隔开（作用：用于标记响应头结束）</li></ul></li><li><p>ServerSocket程序，会读取服务器上<code>html/a.html</code>文件，并把文件数据发送给浏览器</p></li><li><p>浏览器接收到a.html文件中的数据后进行解析，显示以下内容</p></li></ul><p>现在大家知道了服务器是可以使用java完成编写，是可以接受页面发送的请求和响应数据给前端浏览器的，而在开发中真正用到的Web服务器，我们不会自己写的，都是使用目前比较流行的web服务器。如：<strong>Tomcat</strong></p><h2 id="3-WEB服务器-Tomcat"><a href="#3-WEB服务器-Tomcat" class="headerlink" title="3.WEB服务器-Tomcat"></a>3.WEB服务器-Tomcat</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p><strong>服务器硬件</strong></p><ul><li>指的也是计算机，只不过服务器要比我们日常使用的计算机大很多。</li></ul><p>服务器，也称伺服器。是提供计算服务的设备。由于服务器需要响应服务请求，并进行处理，因此一般来说服务器应具备承担服务并且保障服务的能力。</p><p>服务器的构成包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。</p><p>在网络环境下，根据服务器提供的服务类型不同，可分为：文件服务器，数据库服务器，应用程序服务器，WEB服务器等。</p><p>服务器只是一台设备，必须安装服务器软件才能提供相应的服务。</p><p><strong>服务器软件</strong></p><p>服务器软件：基于ServerSocket编写的程序</p><ul><li>服务器软件本质是一个运行在服务器设备上的应用程序</li><li>能够接收客户端请求，并根据请求给客户端响应数据</li></ul><h3 id="3-2-Web服务器"><a href="#3-2-Web服务器" class="headerlink" title="3.2 Web服务器"></a>3.2 Web服务器</h3><p>Web服务器是一个应用程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作(不用程序员自己写代码去解析http协议规则)，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220824233614686.png"></p><p>Web服务器是安装在服务器端的一款软件，将来我们把自己写的Web项目部署到Tomcat服务器软件中，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。</p><p><strong>Web服务器软件使用步骤</strong></p><ul><li>准备静态资源</li><li>下载安装Web服务器软件</li><li>将静态资源部署到Web服务器上</li><li>启动Web服务器使用浏览器访问对应的资源</li></ul><p>第1步：准备静态资源</p><ul><li>在提供的资料中找到静态资源文件</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202180119859.png" alt="image-20221202180119859"> </p><p>第2步：下载安装Web服务器软件</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202181110555.png" alt="image-20221202181110555"></p><p>第3步：将静态资源部署到Web服务器上</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202180805686.png" alt="image-20221202180805686"></p><p>第4步：启动Web服务器使用浏览器访问对应的资源</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202181346327.png" alt="image-20221202181346327"></p><p>浏览器输入：<code>http://localhost:8080/demo/index.html</code></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202181651469.png" alt="image-20221202181651469"></p><p>上述内容在演示的时候，使用的是Apache下的Tomcat软件，至于Tomcat软件如何使用，后面会详细的讲到。而对于Web服务器来说，实现的方案有很多，Tomcat只是其中的一种，而除了Tomcat以外，还有很多优秀的Web服务器，比如:</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220824233728524.png" alt="image-20220824233728524"></p><h3 id="3-3-Tomcat"><a href="#3-3-Tomcat" class="headerlink" title="3.3 Tomcat"></a>3.3 Tomcat</h3><h4 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h4><p>Tomcat服务器软件是一个免费的开源的web应用服务器。是Apache软件基金会的一个核心项目。由Apache，Sun和其他一些公司及个人共同开发而成。</p><p>由于Tomcat只支持Servlet&#x2F;JSP少量JavaEE规范，所以是一个开源免费的轻量级Web服务器。</p><p>因为Tomcat支持Servlet&#x2F;JSP规范，所以Tomcat也被称为Web容器、Servlet容器。JavaWeb程序需要依赖Tomcat才能运行。</p><p>Tomcat的官网: <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a> </p><h4 id="3-3-2-基本使用"><a href="#3-3-2-基本使用" class="headerlink" title="3.3.2 基本使用"></a>3.3.2 基本使用</h4><p>直接从官方网站下载：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><p><strong>安装:</strong> Tomcat是绿色版，直接解压即安装</p><p>&#x3D;&#x3D;注意，Tomcat在解压缩的时候，解压所在的目录可以任意，但最好解压到一个不包含中文和空格的目录，因为后期在部署项目的时候，如果路径有中文或者空格可能会导致程序部署失败。&#x3D;&#x3D;</p><p>打开<code>apache-tomcat-9.0.27</code>目录就能看到如下目录结构，每个目录中包含的内容需要认识下</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220824234652173.png">  </p><p>bin：目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件。</p><p>webapps：就是以后项目部署的目录</p><p><strong>卸载：</strong>卸载比较简单，可以直接删除目录即可</p><p><strong>启动Tomcat</strong> </p><ul><li>双击tomcat解压目录&#x2F;bin&#x2F;<strong>startup.bat</strong>文件即可启动tomcat</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202183201663.png" alt="image-20221202183201663"></p><p>&#x3D;&#x3D;注意: tomcat服务器启动后,黑窗口不会关闭,只要黑窗口不关闭,就证明tomcat服务器正在运行&#x3D;&#x3D;</p><p>Tomcat的默认端口为8080，所以在浏览器的地址栏输入：<code>http://127.0.0.1:8080</code> 即可访问tomcat服务器</p><p>&#x3D;&#x3D;注意事项&#x3D;&#x3D; ：Tomcat启动的过程中，遇到控制台有中文乱码时，可以通常修改conf&#x2F;logging.prooperties文件解决</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220825083848086.png" alt="image-20220825083848086"></p><p><strong>关闭:</strong>  关闭有三种方式 </p><p>1、强制关闭：直接x掉Tomcat窗口（不建议）</p><p>2、正常关闭：bin\shutdown.bat</p><p>3、正常关闭：在Tomcat启动窗口中按下 Ctrl+C</p><h4 id="3-3-3-常见问题"><a href="#3-3-3-常见问题" class="headerlink" title="3.3.3 常见问题"></a>3.3.3 常见问题</h4><p><strong>问题1：Tomcat启动时，窗口一闪而过</strong></p><ul><li>检查JAVA_HOME环境变量是否正确配置</li></ul><p><strong>问题2：端口号冲突</strong></p><ul><li><p>发生问题的原因：Tomcat使用的端口被占用了。</p></li><li><p>解决方案：换Tomcat端口号</p><ul><li>要想修改Tomcat启动的端口号，需要修改 conf&#x2F;server.xml文件</li></ul></li></ul><h3 id="3-4-入门程序"><a href="#3-4-入门程序" class="headerlink" title="3.4 入门程序"></a>3.4 入门程序</h3><h4 id="3-4-1-Spring官方骨架"><a href="#3-4-1-Spring官方骨架" class="headerlink" title="3.4.1 Spring官方骨架"></a>3.4.1 Spring官方骨架</h4><p>之前我们创建的SpringBoot入门案例，是基于Spring官方提供的骨架实现的。</p><p>Spring官方骨架，可以理解为Spring官方为程序员提供一个搭建项目的模板。</p><p>我们可以通过访问：<a href="https://start.spring.io/">https://start.spring.io/</a> ，进入到官方骨架页面</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202200356398.png" alt="image-20221202200356398"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202200547676.png" alt="image-20221202200547676"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202200708988.png" alt="image-20221202200708988"></p><p>Spring官方生成的SpringBoot项目，怎么使用呢？</p><ul><li>解压缩后，就会得到一个SpringBoot项目工程</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202201042109.png" alt="image-20221202201042109"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202201221136.png" alt="image-20221202201221136"></p><p>打开pom.xml文件，我们可以看到springboot项目中引入了web依赖和test依赖</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202201826364.png" alt="image-20221202201826364"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>结论：不论使用IDEA创建SpringBoot项目，还是直接在官方网站利用骨架生成SpringBoot项目，项目的结构和pom.xml文件中内容是相似的。</strong></p></blockquote><h4 id="3-4-2-起步依赖"><a href="#3-4-2-起步依赖" class="headerlink" title="3.4.2 起步依赖"></a>3.4.2 起步依赖</h4><p>在我们之前讲解的SpringBoot快速入门案例中，同样也引用了：web依赖和test依赖</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202202305118.png" alt="image-20221202202305118"></p><p>spring-boot-starter-web和spring-boot-starter-test，在SpringBoot中又称为：起步依赖</p><p>而在SpringBoot的项目中，有很多的起步依赖，他们有一个共同的特征：就是以<code>spring-boot-starter-</code>作为开头。在以后大家遇到spring-boot-starter-xxx这类的依赖，都为起步依赖。</p><p>起步依赖有什么特殊之处呢，这里我们以入门案例中引入的起步依赖做为讲解：</p><ul><li>spring-boot-starter-web：包含了web应用开发所需要的常见依赖</li><li>spring-boot-starter-test：包含了单元测试所需要的常见依赖</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>spring-boot-starter-web</strong>内部把关于Web开发所有的依赖都已经导入并且指定了版本，只需引入 <code>spring-boot-starter-web</code> 依赖就可以实现Web开发的需要的功能</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202204013113.png" alt="image-20221202204013113"></p></blockquote><p>Spring的官方提供了很多现成的starter(起步依赖)，我们在开发相关应用时，只需要引入对应的starter即可。</p><p>官方地址：<a href="https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters</a></p><p>每一个起步依赖，都用于开发一个特定的功能。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>举例：当我们开发中需要使用redis数据库时，只需要在SpringBoot项目中，引入：spring-boot-starter-redis ，即可导入redis开发所需要的依赖。</p></blockquote><h4 id="3-4-3-SpringBoot父工程"><a href="#3-4-3-SpringBoot父工程" class="headerlink" title="3.4.3 SpringBoot父工程"></a>3.4.3 SpringBoot父工程</h4><p>在我们之前开发的SpringBoot入门案例中，我们通过maven引入的依赖，是没有指定具体的依赖版本号的。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202205103486.png" alt="image-20221202205103486"></p><p>为什么没有指定<version>版本号，可以正常使用呢？</version></p><ul><li>因为每一个SpringBoot工程，都有一个父工程。依赖的版本号，在父工程中统一管理。</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221202205318778.png" alt="image-20221202205318778"></p><h4 id="3-4-4-内嵌Tomcat"><a href="#3-4-4-内嵌Tomcat" class="headerlink" title="3.4.4 内嵌Tomcat"></a>3.4.4 内嵌Tomcat</h4><p>问题：为什么我们之前书写的SpringBoot入门程序中，并没有把程序部署到Tomcat的webapps目录下，也可以运行呢？</p><p>原因呢，是因为在我们的SpringBoot中，引入了web运行环境(也就是引入spring-boot-starter-web起步依赖)，其内部已经集成了内置的Tomcat服务器。</p><p>我们可以通过IDEA开发工具右侧的maven面板中，就可以看到当前工程引入的依赖。其中已经将Tomcat的相关依赖传递下来了，也就是说在SpringBoot中可以直接使用Tomcat服务器。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220825194553137.png"> </p><p>当我们运行SpringBoot的引导类时(运行main方法)，就会看到命令行输出的日志，其中占用8080端口的就是Tomcat。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220825195359993.png" alt="image-20220825195359993"></p><h2 id="4-SpringBoot请求"><a href="#4-SpringBoot请求" class="headerlink" title="4.SpringBoot请求"></a>4.SpringBoot请求</h2><h3 id="4-1-BS架构"><a href="#4-1-BS架构" class="headerlink" title="4.1 BS架构"></a>4.1 BS架构</h3><p>我们在浏览器发起请求，请求了我们的后端web服务器(也就是内置的Tomcat)。而我们在开发web程序时呢，定义了一个控制器类Controller，请求会被部署在Tomcat中的Controller接收，然后Controller再给浏览器一个响应，响应一个字符串 “Hello World”。 而在请求响应的过程中是遵循HTTP协议的。</p><p>但是呢，这里要告诉大家的时，其实在Tomcat这类Web服务器中，是不识别我们自己定义的Controller的。但是我们前面讲到过Tomcat是一个Servlet容器，是支持Serlvet规范的，所以呢，在tomcat中是可以识别 Servlet程序的。 那我们所编写的XxxController 是如何处理请求的，又与Servlet之间有什么联系呢？</p><p>其实呢，在SpringBoot进行web程序开发时，它内置了一个核心的Servlet程序 DispatcherServlet，称之为 核心控制器。 DispatcherServlet 负责接收页面发送的请求，然后根据执行的规则，将请求再转发给后面的请求处理器Controller，请求处理器处理完请求之后，最终再由DispatcherServlet给浏览器响应数据。</p><p>那将来浏览器发送请求，会携带请求数据，包括：请求行、请求头；请求到达tomcat之后，tomcat会负责解析这些请求数据，然后呢将解析后的请求数据会传递给Servlet程序的HttpServletRequest对象，那也就意味着 HttpServletRequest 对象就可以获取到请求数据。 而Tomcat，还给Servlet程序传递了一个参数 HttpServletResponse，通过这个对象，我们就可以给浏览器设置响应数据 。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220826171407354.png" alt="image-20220826171407354"> </p><p>那上述所描述的这种浏览器&#x2F;服务器的架构模式呢，我们称之为：BS架构。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220826171454775.png" alt="image-20220826171454775"> </p><p>• BS架构：Browser&#x2F;Server，浏览器&#x2F;服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。</p><h3 id="4-2-Postman"><a href="#4-2-Postman" class="headerlink" title="4.2 Postman"></a>4.2 Postman</h3><h4 id="4-2-1-入门"><a href="#4-2-1-入门" class="headerlink" title="4.2.1 入门"></a>4.2.1 入门</h4><p>前后端分离这种模式下，前端技术人员基于”接口文档”，开发前端程序；后端技术人员也基于”接口文档”，开发后端程序。</p><p>方式1：像之前SpringBoot入门案例中一样，直接使用浏览器。在浏览器中输入地址，测试后端程序。</p><ul><li>弊端：在浏览器地址栏中输入地址这种方式都是GET请求，如何我们要用到POST请求怎么办呢？<ul><li>要解决POST请求，需要程序员自己编写前端代码（比较麻烦）</li></ul></li></ul><p>方式2：使用专业的接口测试工具（课程中我们使用Postman工具）</p><ul><li><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Postman原是Chrome浏览器的插件，可以模拟浏览器向后端服务器发起任何形式(如:get、post)的HTTP请求</p><p>使用Postman还可以在发起请求时，携带一些请求参数、请求头等信息</p></blockquote></li><li><p>作用：常用于进行接口测试</p></li></ul><p>界面介绍:</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220826175306141.png" alt="image-20220826175306141"></p><h4 id="4-2-2-简单参数传递"><a href="#4-2-2-简单参数传递" class="headerlink" title="4.2.2 简单参数传递"></a>4.2.2 简单参数传递</h4><p>简单参数：在向服务器发起请求时，向服务器传递的是一些普通的请求数据。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220826180550583.png" alt="image-20220826180550583"></p><p>那么在后端程序中，如何接收传递过来的普通参数数据呢？我们在这里讲解两种方式：</p><ol><li><strong>原始方式</strong></li></ol><p>在原始的Web程序当中，需要通过Servlet中提供的API：HttpServletRequest（请求对象），获取请求的相关信息。比如获取请求参数：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Tomcat接收到http请求时：把请求的相关信息封装到HttpServletRequest对象中</p></blockquote><p>在Controller中，我们要想获取Request对象，可以直接在方法的形参中声明 HttpServletRequest 对象。然后就可以通过该对象来获取请求信息。</p><ol start="2"><li><strong>SpringBoot方式</strong></li></ol><p>在Springboot的环境中，对原始的API进行了封装，接收参数的形式更加简单。 如果是简单参数，参数名与形参变量名相同，定义同名的形参即可接收参数。</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//springboot方式</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/simpleParam</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">simpleParam</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">name</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">age</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">)&#123;</span><span style="color: #676E95; font-style: italic">//形参名和请求参数名保持一致</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">name</span><span style="color: #89DDFF">+</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">  :  </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">+</span><span style="color: #BABED8">age</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p><strong>postman测试( GET 请求)：</strong></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203122405075.png" alt="image-20221203122405075"> </p><p><strong>postman测试( POST请求 )：</strong></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220826181117898.png" alt="image-20220826181117898"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>结论：不论是GET请求还是POST请求，对于简单参数来讲，只要保证&#x3D;&#x3D;请求参数名和Controller方法中的形参名保持一致&#x3D;&#x3D;，就可以获取到请求参数中的数据值。</strong></p></blockquote><p>对于简单参数来讲，请求参数名和controller方法中的形参名不一致时，无法接收到请求数据</p><p>那么如果我们开发中，遇到了这种请求参数名和controller方法中的形参名不相同，怎么办？</p><p>解决方案：可以使用Spring提供的@RequestParam注解完成映射</p><p>在方法形参前面加上 @RequestParam 然后通过value属性执行请求参数名，从而完成映射。代码如下：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 请求参数名：name</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//springboot方式</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/simpleParam</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">simpleParam</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">RequestParam</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">username</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">age</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">username</span><span style="color: #89DDFF">+</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">  :  </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">+</span><span style="color: #BABED8">age</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>注意事项：</strong></p><p>@RequestParam中的required属性默认为true（默认值也是true），代表该请求参数必须传递，如果不传递将报错</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203130726310.png" alt="image-20221203130726310"></p><p>如果该参数是可选的，可以将required属性设置为false</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/simpleParam</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">simpleParam</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">RequestParam</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">name</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">required</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">false)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> username</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">username</span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">:</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></blockquote><h4 id="4-2-3-实体参数"><a href="#4-2-3-实体参数" class="headerlink" title="4.2.3 实体参数"></a>4.2.3 实体参数</h4><p>在使用简单参数做为数据传递方式时，前端传递了多少个请求参数，后端controller方法中的形参就要书写多少个。如果请求参数比较多，通过上述的方式一个参数一个参数的接收，会比较繁琐。 </p><p>此时，我们可以考虑将请求参数封装到一个实体类对象中。 要想完成数据封装，需要遵守如下规则：<strong>请求参数名与实体类的属性名相同</strong></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20240206180603154.png" alt="image-20240206180603154"></p><p><strong>简单实体对象</strong></p><p>定义POJO实体类：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">User</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getName</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setName</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">name</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">name </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getAge</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setAge</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">age</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">age </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">toString</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">User&#123;</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name=&#39;</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> name </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">\&#39;</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">, age=</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> age </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&#125;</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>Controller方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//实体参数：简单实体对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/simplePojo</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">simplePojo</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">User</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">user</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">user</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>Postman测试：</p><ul><li>参数名和实体类属性名一致时</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203161246168.png" alt="image-20221203161246168"> </p><ul><li>参数名和实体类属性名不一致时</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203161004349.png" alt="image-20221203161004349"></p><p><strong>复杂实体对象</strong></p><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。如下：</p><ul><li>User类中有一个Address类型的属性（Address是一个实体类）</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203160447953.png" alt="image-20221203160447953"></p><p>复杂实体对象的封装，需要遵守如下规则：</p><ul><li><strong>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套实体类属性参数。</strong></li></ul><p>定义POJO实体类：</p><ul><li>Address实体类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Address</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> province</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> city</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getProvince</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> province</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setProvince</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">province</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">province </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> province</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getCity</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> city</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setCity</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">city</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">city </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> city</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">toString</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Address&#123;</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">province=&#39;</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> province </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">\&#39;</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">, city=&#39;</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> city </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">\&#39;</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&#125;</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><ul><li>User实体类</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">User</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Address</span><span style="color: #BABED8"> address</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//地址对象</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getName</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setName</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">name</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">name </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getAge</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setAge</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">age</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">age </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Address</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getAddress</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> address</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setAddress</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Address</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">address</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">address </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> address</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Override</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">toString</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">User&#123;</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name=&#39;</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> name </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">\&#39;</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">, age=</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> age </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">, address=</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> address </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">                </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&#125;</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>Controller方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//实体参数：复杂实体对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/complexPojo</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">complexPojo</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">User</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">user</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">user</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>Postman测试：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203162706175.png" alt="image-20221203162706175"> </p><h4 id="4-2-4-数组集合参数"><a href="#4-2-4-数组集合参数" class="headerlink" title="4.2.4 数组集合参数"></a>4.2.4 数组集合参数</h4><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p><p>多个值是怎么提交的呢？其实多个值也是一个一个的提交。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203164944144.png" alt="image-20221203164944144"> </p><p>后端程序接收上述多个值的方式有两种：</p><ol><li>数组</li><li>集合</li></ol><p><strong>数组</strong></p><p>数组参数：<strong>请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</strong></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203190218468.png" alt="image-20221203190218468"></p><p>Controller方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//数组集合参数</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/arrayParam</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">arrayParam</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">hobby</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">Arrays</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toString</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">hobby</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>在前端请求时，有两种传递形式：</p><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p><p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p><p><strong>集合</strong></p><p>集合参数：<strong>请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</strong></p><blockquote><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203211640646.png" alt="image-20221203211640646"></p><p>Controller方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//数组集合参数</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/listParam</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">listParam</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">RequestParam</span><span style="color: #BABED8"> </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">hobby</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">hobby</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p><p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p><h4 id="4-2-5-日期参数"><a href="#4-2-5-日期参数" class="headerlink" title="4.2.5 日期参数"></a>4.2.5 日期参数</h4><p>上述演示的都是一些普通的参数，在一些特殊的需求中，可能会涉及到日期类型数据的封装。比如，如下需求：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220826194159343.png" alt="image-20220826194159343"> </p><p>因为日期的格式多种多样（如：2022-12-12 10:05:45 、2022&#x2F;12&#x2F;12 10:05:45），那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203213120692.png" alt="image-20221203213120692"></p><ul><li>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</li><li>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</li></ul><p>Controller方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//日期时间参数</span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/dateParam</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">dateParam</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">DateTimeFormat</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">pattern</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">yyyy-MM-dd HH:mm:ss</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LocalDateTime</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">updateTime</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">updateTime</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>Postman测试：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203214600716.png" alt="image-20221203214600716"></p><h4 id="4-2-6-JSON参数"><a href="#4-2-6-JSON参数" class="headerlink" title="4.2.6 JSON参数"></a>4.2.6 JSON参数</h4><p>在学习前端技术时，我们有讲到过JSON，而在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。 （JSON是开发中最常用的前后端数据交互方式）</p><p>我们学习JSON格式参数，主要从以下两个方面着手：</p><ol><li>Postman在发送请求时，如何传递json格式的请求参数</li><li>在服务端的controller方法中，如何接收json格式的请求参数</li></ol><p>Postman发送JSON格式数据：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203225623337.png" alt="image-20221203225623337"></p><p>服务端Controller方法接收JSON格式数据：</p><ul><li>传递json格式的参数，在Controller中会使用实体类进行封装。 </li><li>封装规则：<strong>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</strong></li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203230457901.png" alt="image-20221203230457901"></p><ul><li>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</li></ul><p>实体类：Address</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Address</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> province</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> city</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略GET , SET 方法</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>实体类：User</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">User</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Address</span><span style="color: #BABED8"> address</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略GET , SET 方法</span></span><span class="line"><span style="color: #89DDFF">&#125;</span><span style="color: #BABED8">    </span></span></code></pre></div><p>Controller方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//JSON参数</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/jsonParam</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">jsonParam</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">RequestBody</span><span style="color: #BABED8"> </span><span style="color: #C792EA">User</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">user</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">user</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>Postman测试：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203231803000.png" alt="image-20221203231803000"> </p><h4 id="4-2-7-路径参数"><a href="#4-2-7-路径参数" class="headerlink" title="4.2.7 路径参数"></a>4.2.7 路径参数</h4><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面通过?key&#x3D;value的形式传递(GET请求)。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221203235715804.png" alt="image-20221203235715804"></p><p>在现在的开发中，经常还会直接在请求的URL中传递参数。例如：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">http://localhost:8080/user/1</span></span><span class="line"><span style="color: #babed8">http://localhost:880/user/1/0</span></span></code></pre></div><p>上述的这种传递请求参数的形式呢，我们称之为：路径参数。</p><p>学习路径参数呢，主要掌握在后端的controller方法中，如何接收路径参数。</p><p>路径参数：</p><ul><li>前端：通过请求URL直接传递参数</li><li>后端：使用{…}来标识该路径参数，需要使用@PathVariable获取路径参数</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204001520756.png" alt="image-20221204001520756"></p><p>Controller方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//路径参数</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/path/&#123;id&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">pathParam</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">PathVariable</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>Postman测试：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204002040184.png" alt="image-20221204002040184"></p><p><strong>传递多个路径参数：</strong></p><p>Postman：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204002306288.png" alt="image-20221204002306288"></p><p>Controller方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">RequestController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//路径参数</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/path/&#123;id&#125;/&#123;name&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">pathParam2</span><span style="color: #89DDFF">(@</span><span style="color: #C792EA">PathVariable</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">PathVariable</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">name</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D"> : </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8">name</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">OK</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h2 id="5-SpringBoot响应"><a href="#5-SpringBoot响应" class="headerlink" title="5.SpringBoot响应"></a>5.SpringBoot响应</h2><h3 id="5-1-ResponseBody注解"><a href="#5-1-ResponseBody注解" class="headerlink" title="5.1 ResponseBody注解"></a>5.1 ResponseBody注解</h3><p>前面我们学习过HTTL协议的交互方式：请求响应模式（有请求就有响应）</p><p>那么Controller程序呢，除了接收请求外，还可以进行响应。</p><p>在我们前面所编写的controller方法中，都已经设置了响应数据。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204100656376.png" alt="image-20221204100656376"></p><p>controller方法中的return的结果，怎么就可以响应给浏览器呢？</p><p>答案：使用@ResponseBody注解</p><p><strong>@ResponseBody注解：</strong></p><ul><li>类型：方法注解、类注解</li><li>位置：书写在Controller方法上或类上</li><li>作用：将方法返回值直接响应给浏览器<ul><li>如果返回值类型是实体对象&#x2F;集合，将会转换为JSON格式后在响应给浏览器</li></ul></li></ul><p>但是在我们所书写的Controller中，只在类上添加了@RestController注解、方法添加了@RequestMapping注解，并没有使用@ResponseBody注解，怎么给浏览器响应呢？</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HelloController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/hello</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">hello</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Hello World ~</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Hello World ~</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>原因：在类上添加的@RestController注解，是一个组合注解。</p><ul><li><p>@RestController &#x3D; @Controller + @ResponseBody </p></li><li><p>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据</p><ul><li>方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</li></ul></li></ul><h3 id="5-2-统一响应结果"><a href="#5-2-统一响应结果" class="headerlink" title="5.2 统一响应结果"></a>5.2 统一响应结果</h3><p>在真实的项目开发中，无论是哪种方法，我们都会定义一个统一的返回结果。方案如下：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204174537686.png" alt="image-20221204174537686"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>前端：只需要按照统一格式的返回结果进行解析(仅一种解析方案)，就可以拿到数据。</p></blockquote><p>统一的返回结果使用类来描述，在这个结果中包含：</p><ul><li><p>响应状态码：当前请求是成功，还是失败</p></li><li><p>状态码信息：给页面的提示信息</p></li><li><p>返回的数据：给前端响应的数据（字符串、对象、集合）</p></li></ul><p>定义在一个实体类Result来包含以上信息。代码如下：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">Result</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> code</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">//响应码，1 代表成功; 0 代表失败</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> msg</span><span style="color: #89DDFF">;</span><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic">//响应码 描述字符串</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> data</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//返回的数据</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Result</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Result</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">code</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">msg</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">code </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> code</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">msg </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> msg</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">data </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> data</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getCode</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> code</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setCode</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">code</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">code </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> code</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getMsg</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> msg</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setMsg</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">msg</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">msg </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> msg</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getData</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> data</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">setData</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">this.</span><span style="color: #BABED8">data </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> data</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//增删改 成功响应(不需要给前端返回数据)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Result</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,null);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Object</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">data</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Result</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">data</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//失败响应</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">error</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">msg</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Result</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">msg</span><span style="color: #89DDFF">,null);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>改造Controller：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">ResponseController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//响应统一格式的结果</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/hello</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">hello</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Hello World ~</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//return new Result(1,&quot;success&quot;,&quot;Hello World ~&quot;);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Hello World ~</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//响应统一格式的结果</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/getAddr</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getAddr</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Address</span><span style="color: #BABED8"> addr </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Address</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        addr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setProvince</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">广东</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        addr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setCity</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">深圳</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">addr</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//响应统一格式的结果</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/listAddr</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">listAddr</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Address</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> list </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ArrayList</span><span style="color: #89DDFF">&lt;&gt;();</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Address</span><span style="color: #BABED8"> addr </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Address</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        addr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setProvince</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">广东</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        addr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setCity</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">深圳</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Address</span><span style="color: #BABED8"> addr2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Address</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        addr2</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setProvince</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">陕西</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        addr2</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setCity</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">西安</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        list</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">addr</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        list</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">addr2</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">list</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h2 id="6-分层解耦"><a href="#6-分层解耦" class="headerlink" title="6.分层解耦"></a>6.分层解耦</h2><h3 id="6-1-三层架构"><a href="#6-1-三层架构" class="headerlink" title="6.1 三层架构"></a>6.1 三层架构</h3><p>在我们进行程序设计以及程序开发时，尽可能让每一个接口、类、方法的职责更单一些（单一职责原则）。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p><p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护。</p></blockquote><p>从组成上看可以分为三个部分：</p><ul><li>数据访问：负责业务数据的维护操作，包括增、删、改、查等操作。</li><li>逻辑处理：负责业务逻辑处理的代码。</li><li>请求处理、响应数据：负责，接收页面的请求，给页面响应数据。</li></ul><p>按照上述的三个组成部分，在我们项目开发中呢，可以将代码分为三层：</p><ul><li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li><li>Service：业务逻辑层。处理具体的业务逻辑。</li><li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>基于三层架构的程序执行流程：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204194207812.png" alt="image-20221204194207812"></p><ul><li>前端发起的请求，由Controller层接收（Controller响应数据给前端）</li><li>Controller层调用Service层来进行逻辑处理（Service层处理完后，把处理结果返回给Controller层）</li><li>Serivce层调用Dao层（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li><li>Dao层操作文件中的数据（Dao拿到的数据会返回给Service层）</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>思考：按照三层架构的思想，如何要对业务逻辑(Service层)进行变更，会影响到Controller层和Dao层吗？ </p><p>答案：不会影响。 （程序的扩展性、维护性变得更好了）</p></blockquote><h3 id="6-2-解耦"><a href="#6-2-解耦" class="headerlink" title="6.2 解耦"></a>6.2 解耦</h3><p>首先需要了解软件开发涉及到的两个概念：内聚和耦合。</p><ul><li><p>内聚：软件中各个功能模块内部的功能联系。</p></li><li><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p></li></ul><p><strong>软件设计原则：高内聚低耦合。</strong></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>高内聚指的是：一个模块中各个元素之间的联系的紧密程度，如果各个元素(语句、程序段)之间的联系程度越高，则内聚性越高，即 “高内聚”。</p><p>低耦合指的是：软件中各个层、模块之间的依赖关联程序越低越好。</p></blockquote><p>程序中高内聚的体现：</p><ul><li>EmpServiceA类中只编写了和员工相关的逻辑处理代码</li></ul><p>程序中耦合代码的体现：</p><ul><li>把业务类变为EmpServiceB时，需要修改controller层中的代码</li></ul><p>高内聚、低耦合的目的是使程序模块的可重用性、移植性大大增强。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220828215549593.png"></p><p> 那应该怎么解耦呢？</p><ul><li>首先不能在EmpController中使用new对象。代码如下：</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204205328069.png" alt="image-20221204205328069"></p><ul><li>此时，就存在另一个问题了，不能new，就意味着没有业务层对象（程序运行就报错），怎么办呢？<ul><li>我们的解决思路是：<ul><li>提供一个容器，容器中存储一些对象(例：EmpService对象)</li><li>controller程序从容器中获取EmpService类型的对象</li></ul></li></ul></li></ul><p>我们想要实现上述解耦操作，就涉及到Spring中的两个核心概念：</p><ul><li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p></blockquote></li><li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p><p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p></blockquote></li></ul><p>IOC容器中创建、管理的对象，称之为：bean对象</p><h3 id="6-3-IOC-DI"><a href="#6-3-IOC-DI" class="headerlink" title="6.3 IOC&amp;DI"></a>6.3 IOC&amp;DI</h3><h4 id="6-3-1-解耦步骤"><a href="#6-3-1-解耦步骤" class="headerlink" title="6.3.1 解耦步骤"></a>6.3.1 解耦步骤</h4><p>任务：完成Controller层、Service层、Dao层的代码解耦</p><ul><li><p>思路：</p><ol><li><p>删除Controller层、Service层中new对象的代码</p></li><li><p>Service层及Dao层的实现类，交给IOC容器管理</p><ul><li>使用Spring提供的注解：@Component ，就可以实现类交给IOC容器管理</li></ul></li><li><p>为Controller及Service注入运行时依赖的对象</p><ul><li><p>使用Spring提供的注解：@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</p></li><li><p>Controller程序中注入依赖的Service层对象</p></li><li><p>Service程序中注入依赖的Dao层对象</p></li></ul></li></ol></li></ul><h4 id="6-3-2-Bean的声明"><a href="#6-3-2-Bean的声明" class="headerlink" title="6.3.2 Bean的声明"></a>6.3.2 Bean的声明</h4><p>通过IOC和DI的入门程序呢，我们已经基本了解了IOC和DI的基础操作。接下来呢，我们学习下IOC控制反转和DI依赖注入的细节。</p><p>前面我们提到IOC控制反转，就是将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象。IOC容器创建的对象称为bean对象。</p><p>在之前的入门案例中，要把某个对象交给IOC容器管理，需要在类上添加一个注解：@Component </p><p>而Spring框架为了更好的标识web应用程序开发当中，bean对象到底归属于哪一层，又提供了@Component的衍生注解：</p><ul><li>@Controller    （标注在控制层类上）</li><li>@Service          （标注在业务层类上）</li><li>@Repository    （标注在数据访问层类上）</li></ul><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th align="left">注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td align="left">@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td align="left">@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td align="left">@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr><tr><td align="left">@Component</td><td>声明bean的基础注解</td><td>不属于以上三类时，用此注解</td></tr></tbody></table><p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字。如果没有指定，默认为类名首字母小写。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204222650873.png" alt="image-20221204222650873"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项: </p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li></ul></blockquote><h4 id="6-3-3-组件扫描"><a href="#6-3-3-组件扫描" class="headerlink" title="6.3.3 组件扫描"></a>6.3.3 组件扫描</h4><p>问题：使用前面学习的四个注解声明的bean，一定会生效吗？</p><p>答案：不一定。（原因：bean想要生效，还需要被组件扫描）</p><ul><li>使用四大注解声明的bean，要想生效，还需要被组件扫描注解@ComponentScan扫描</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了引导类声明注解 @SpringBootApplication 中，&#x3D;&#x3D;<strong>默认扫描的范围是SpringBoot启动类所在包及其子包</strong>&#x3D;&#x3D;。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204224643683.png" alt="image-20221204224643683"> </p></blockquote><ul><li>解决方案：手动添加@ComponentScan注解，指定要扫描的包   （&#x3D;&#x3D;仅做了解，不推荐&#x3D;&#x3D;）</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204225437297.png" alt="image-20221204225437297"></p><p>推荐做法（如下图）：</p><ul><li>将我们定义的controller，service，dao这些包呢，都放在引导类所在包com.itheima的子包下，这样我们定义的bean就会被自动的扫描到</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204225815624.png" alt="image-20221204225815624"></p><h4 id="6-3-4-DI详解"><a href="#6-3-4-DI详解" class="headerlink" title="6.3.4 DI详解"></a>6.3.4 DI详解</h4><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p><p>在入门程序案例中，我们使用了@Autowired这个注解，完成了依赖注入的操作，而这个Autowired翻译过来叫：自动装配。</p><p>@Autowired注解，默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>入门程序举例：在EmpController运行的时候，就要到IOC容器当中去查找EmpService这个类型的对象，而我们的IOC容器中刚好有一个EmpService这个类型的对象，所以就找到了这个类型的对象完成注入操作。</p></blockquote><p>那如果在IOC容器中，存在多个相同类型的bean对象，会出现什么情况呢？程序运行会报错</p><p>如何解决上述问题呢？Spring提供了以下几种解决方案：</p><ul><li><p>@Primary</p></li><li><p>@Qualifier</p></li><li><p>@Resource</p></li></ul><p>使用@Primary注解：当存在多个相同类型的Bean注入时，加上@Primary注解，来确定默认的实现。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204232501679.png" alt="image-20221204232501679"> </p><p>使用@Qualifier注解：指定当前要注入的bean对象。 在@Qualifier的value属性中，指定注入的bean的名称。</p><ul><li>@Qualifier注解不能单独使用，必须配合@Autowired使用</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204233333606.png" alt="image-20221204233333606"></p><p>使用@Resource注解：是按照bean的名称进行注入。通过name属性指定要注入的bean的名称。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221204233637735.png" alt="image-20221204233637735"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>面试题 ： @Autowird 与 @Resource的区别</p><ul><li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</li></ul></blockquote><h2 id="7-文件上传"><a href="#7-文件上传" class="headerlink" title="7.文件上传"></a>7.文件上传</h2><h3 id="7-1-简介"><a href="#7-1-简介" class="headerlink" title="7.1 简介"></a>7.1 简介</h3><p>文件上传，是指将本地图片、视频、音频等文件上传到服务器，供其他用户浏览或下载的过程。</p><p>文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友圈都用到了文件上传功能。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216203904713.png" alt="image-20221216203904713"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在我们的案例中，在新增员工的时候，要上传员工的头像，此时就会涉及到文件上传的功能。在进行文件上传时，我们点击加号或者是点击图片，就可以选择手机或者是电脑本地的图片文件了。当我们选择了某一个图片文件之后，这个文件就会上传到服务器，从而完成文件上传的操作。</p></blockquote><p>想要完成文件上传这个功能需要涉及到两个部分：</p><ol><li>前端程序</li><li>服务端程序</li></ol><p>我们先来看看在前端程序中要完成哪些代码：</p><div class="language-html"><button title="Copy code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">form</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">action</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/upload</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">method</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">post</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">enctype</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">multipart/form-data</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    姓名: </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">input</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">text</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">username</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;</span><span style="color: #F07178">br</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    年龄: </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">input</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">text</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;</span><span style="color: #F07178">br</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    头像: </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">input</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">image</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;</span><span style="color: #F07178">br</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">input</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">submit</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">value</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">提交</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">form</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>上传文件的原始form表单，要求表单必须具备以下三点（上传文件页面三要素）：</p><ul><li><p>表单必须有file域，用于选择要上传的文件</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><div class="language-html"><button title="Copy code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">input</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">image</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">/&gt;</span></span></code></pre></div></blockquote></li><li><p>表单提交方式必须为POST</p><blockquote><p>通常上传的文件会比较大，所以需要使用 POST 提交方式</p></blockquote></li><li><p>表单的编码类型enctype必须要设置为：multipart&#x2F;form-data</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>普通默认的编码格式是不适合传输大型的二进制数据的，所以在文件上传时，表单的编码格式必须设置为multipart&#x2F;form-data</p></blockquote></li></ul><p>前端页面的3要素我们了解后，接下来我们就来验证下所讲解的文件上传3要素。</p><p>在提供的”课程资料”中有一个名叫”文件上传”的文件夹，直接将里的”upload.html”文件，复制到springboot项目工程下的static目录里面。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216210054136.png" alt="image-20221216210054136"></p><p>下面我们来验证：删除form表单中enctype属性值，会是什么情况？</p><ol><li>在IDEA中直接使用浏览器打开upload.html页面</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216210643628.png" alt="image-20221216210643628"></p><ol start="2"><li>选择要上传的本地文件</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216210938612.png" alt="image-20221216210938612"></p><ol start="3"><li>点击”提交”按钮，进入到开发者模式观察</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216211629307.png" alt="image-20221216211629307"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216212152607.png" alt="image-20221216212152607"></p><p>我们再来验证：设置form表单中enctype属性值为multipart&#x2F;form-data，会是什么情况？</p><div class="language-html"><button title="Copy code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">form</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">action</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/upload</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">method</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">post</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">enctype</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">multipart/form-data</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        姓名: </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">input</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">text</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">username</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;</span><span style="color: #F07178">br</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        年龄: </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">input</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">text</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;</span><span style="color: #F07178">br</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        头像: </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">input</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">image</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;</span><span style="color: #F07178">br</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">input</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">submit</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">value</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">提交</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">form</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>知道了前端程序中需要设置上传文件页面三要素，那我们的后端程序又是如何实现的呢？</p><ul><li><p>首先在服务端定义这么一个controller，用来进行文件上传，然后在controller当中定义一个方法来处理<code>/upload</code> 请求</p></li><li><p>在定义的方法中接收提交过来的数据 （方法中的形参名和请求参数的名字保持一致）</p><ul><li>用户名：String  name</li><li>年龄： Integer  age</li><li>文件： MultipartFile  image</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Spring中提供了一个API：MultipartFile，使用这个API就可以来接收到上传的文件</p></blockquote></li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216215930807.png" alt="image-20221216215930807"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>问题：如果表单项的名字和方法中形参名不一致，该怎么办？</p><ul><li><div class="language-javascript"><button title="Copy code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">public Result </span><span style="color: #82AAFF">upload</span><span style="color: #BABED8">(String username</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">                     Integer age</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">                     MultipartFile file) </span><span style="color: #676E95; font-style: italic">//file形参名和请求参数名image不一致</span></span></code></pre></div></li></ul><p>解决：使用@RequestParam注解进行参数绑定</p><ul><li><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">upload</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> username</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">                     </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">                     </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">RequestParam</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">image</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">MultipartFile</span><span style="color: #BABED8"> file</span><span style="color: #89DDFF">)</span></span></code></pre></div></li></ul></blockquote><p><strong>UploadController代码：</strong></p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">UploadController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">PostMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/upload</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">upload</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">username</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">age</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">MultipartFile</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">image</span><span style="color: #89DDFF">)</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">username</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">age</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">image</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>后端程序编写完成之后，打个断点，以debug方式启动SpringBoot项目</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216222533720.png" alt="image-20221216222533720"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>打开浏览器输入：<a href="http://localhost:8080/upload.html">http://localhost:8080/upload.html</a> ， 录入数据并提交</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216222412510.png" alt="image-20221216222412510"></p><p>通过后端程序控制台可以看到，上传的文件是存放在一个临时目录</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216222802617.png" alt="image-20221216222802617"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>打开临时目录可以看到以下内容：</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221216223328710.png" alt="image-20221216223328710"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>表单提交的三项数据(姓名、年龄、文件)，分别存储在不同的临时文件中：</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当我们程序运行完毕之后，这个临时文件会自动删除。 </p><p>所以，我们如果想要实现文件上传，需要将这个临时文件，要转存到我们的磁盘目录中。</p></blockquote><h3 id="7-2-本地存储"><a href="#7-2-本地存储" class="headerlink" title="7.2 本地存储"></a>7.2 本地存储</h3><p>前面我们已分析了文件上传功能前端和后端的基础代码实现，文件上传时在服务端会产生一个临时文件，请求响应完成之后，这个临时文件被自动删除，并没有进行保存。下面呢，我们就需要完成将上传的文件保存在服务器的本地磁盘上。</p><p>代码实现：</p><ol><li>在服务器本地磁盘上创建images目录，用来存储上传的文件（例：E盘创建images目录）</li><li>使用MultipartFile类提供的API方法，把临时文件转存到本地磁盘目录下</li></ol><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>MultipartFile 常见方法： </p><ul><li>String  getOriginalFilename();  &#x2F;&#x2F;获取原始文件名</li><li>void  transferTo(File dest);     &#x2F;&#x2F;将接收的文件转存到磁盘文件中</li><li>long  getSize();     &#x2F;&#x2F;获取文件的大小，单位：字节</li><li>byte[]  getBytes();    &#x2F;&#x2F;获取文件内容的字节数组</li><li>InputStream  getInputStream();    &#x2F;&#x2F;获取接收到的文件内容的输入流</li></ul></blockquote><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">UploadController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">PostMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/upload</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">upload</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">username</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">age</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">MultipartFile</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">image</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">username</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">age</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">image</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//获取原始文件名</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> originalFilename </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> image</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getOriginalFilename</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//将文件存储在服务器的磁盘目录</span></span><span class="line"><span style="color: #BABED8">        image</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">transferTo</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">File</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">E:/images/</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">+</span><span style="color: #BABED8">originalFilename</span><span style="color: #89DDFF">));</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>利用postman测试：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：请求参数名和controller方法形参名保持一致</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221227211742547.png" alt="image-20221227211742547"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221227214219279.png" alt="image-20221227214219279"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221227214753358.png" alt="image-20221227214753358"></p><p>通过postman测试，我们发现文件上传是没有问题的。但是由于我们是使用原始文件名作为所上传文件的存储名字，当我们再次上传一个名为1.jpg文件时，发现会把之前已经上传成功的文件覆盖掉。</p><p>解决方案：保证每次上传文件时文件名都唯一的（使用UUID获取随机文件名）</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">UploadController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">PostMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/upload</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">upload</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">username</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">age</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">MultipartFile</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">image</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">info</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">username</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">age</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">image</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//获取原始文件名</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> originalFilename </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> image</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getOriginalFilename</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//构建新的文件名</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> extname </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> originalFilename</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">substring</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">originalFilename</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">lastIndexOf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">));</span><span style="color: #676E95; font-style: italic">//文件扩展名</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> newFileName </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> UUID</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">randomUUID</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">toString</span><span style="color: #89DDFF">()+</span><span style="color: #BABED8">extname</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">//随机名+文件扩展名</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//将文件存储在服务器的磁盘目录</span></span><span class="line"><span style="color: #BABED8">        image</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">transferTo</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">File</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">E:/images/</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">+</span><span style="color: #BABED8">newFileName</span><span style="color: #89DDFF">));</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>在解决了文件名唯一性的问题后，我们再次上传一个较大的文件(超出1M)时发现，后端程序报错：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221227223851924.png" alt="image-20221227223851924"></p><p>报错原因呢是因为：在SpringBoot中，文件上传时默认单个文件最大大小为1M</p><p>那么如果需要上传大文件，可以在application.properties进行如下配置：</p><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#配置单个文件最大上传大小</span></span><span class="line"><span style="color: #F07178">spring.servlet.multipart.max-file-size</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">10MB</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">#配置单个请求最大上传大小(一次请求可以上传多个文件)</span></span><span class="line"><span style="color: #F07178">spring.servlet.multipart.max-request-size</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">100MB</span></span></code></pre></div><p>到时此，我们文件上传的本地存储方式已完成了。但是这种本地存储方式还存在一问题： </p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220904200320964.png" alt="image-20220904200320964"> </p><p>如果直接存储在服务器的磁盘目录中，存在以下缺点：</p><ul><li>不安全：磁盘如果损坏，所有的文件就会丢失</li><li>容量有限：如果存储大量的图片，磁盘空间有限(磁盘不可能无限制扩容)</li><li>无法直接访问</li></ul><p>为了解决上述问题呢，通常有两种解决方案：</p><ul><li>自己搭建存储服务器，如：fastDFS 、MinIO</li><li>使用现成的云服务，如：阿里云，腾讯云，华为云</li></ul><h3 id="7-3-阿里云OSS"><a href="#7-3-阿里云OSS" class="headerlink" title="7.3 阿里云OSS"></a>7.3 阿里云OSS</h3><p>阿里云是阿里巴巴集团旗下全球领先的云计算公司，也是国内最大的云服务提供商 。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229093412464.png" alt="image-20221229093412464"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>云服务指的就是通过互联网对外提供的各种各样的服务，比如像：语音服务、短信服务、邮件服务、视频直播服务、文字识别服务、对象存储服务等等。</p><p>当我们在项目开发时需要用到某个或某些服务，就不需要自己来开发了，可以直接使用阿里云提供好的这些现成服务就可以了。比如：在项目开发当中，我们要实现一个短信发送的功能，如果我们项目组自己实现，将会非常繁琐，因为你需要和各个运营商进行对接。而此时阿里云完成了和三大运营商对接，并对外提供了一个短信服务。我们项目组只需要调用阿里云提供的短信服务，就可以很方便的来发送短信了。这样就降低了我们项目的开发难度，同时也提高了项目的开发效率。（大白话：别人帮我们实现好了功能，我们只要调用即可）</p><p>云服务提供商给我们提供的软件服务通常是需要收取一部分费用的。</p></blockquote><p>阿里云对象存储OSS（Object Storage Service），是一款海量、安全、低成本、高可靠的云存储服务。使用OSS，您可以通过网络随时存储和调用包括文本、图片、音频和视频等在内的各种文件。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220904200642064.png" alt="image-20220904200642064"> </p><p>在我们使用了阿里云OSS对象存储服务之后，我们的项目当中如果涉及到文件上传这样的业务，在前端进行文件上传并请求到服务端时，在服务器本地磁盘当中就不需要再来存储文件了。我们直接将接收到的文件上传到oss，由 oss帮我们存储和管理，同时阿里云的oss存储服务还保障了我们所存储内容的安全可靠。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229095709505.png" alt="image-20221229095709505"></p><p>那我们学习使用这类云服务，我们主要学习什么呢？其实我们主要学习的是如何在项目当中来使用云服务完成具体的业务功能。而无论使用什么样的云服务，阿里云也好，腾讯云、华为云也罢，在使用第三方的服务时，操作的思路都是一样的。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229093911113.png" alt="image-20221229093911113"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>SDK：Software Development Kit 的缩写，软件开发工具包，包括辅助软件开发的依赖（jar包）、代码示例等，都可以叫做SDK。</p><p>简单说，sdk中包含了我们使用第三方云服务时所需要的依赖，以及一些示例代码。我们可以参照sdk所提供的示例代码就可以完成入门程序。</p></blockquote><p>第三方服务使用的通用思路，我们做一个简单介绍之后，接下来我们就来介绍一下我们当前要使用的阿里云oss对象存储服务具体的使用步骤。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229112451120.png" alt="image-20221229112451120"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Bucket：存储空间是用户用于存储对象（Object，就是文件）的容器，所有的对象都必须隶属于某个存储空间。</p></blockquote><p>下面我们根据之前介绍的使用步骤，完成准备工作：</p><ol><li>注册阿里云账户（注册完成后需要实名认证）</li><li>注册完账号之后，就可以登录阿里云</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220904201839857.png" alt="image-20220904201839857"> </p><ol start="3"><li>通过控制台找到对象存储OSS服务</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220904201932884.png" alt="image-20220904201932884"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>如果是第一次访问，还需要开通对象存储服务OSS</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220904202537579.png" alt="image-20220904202537579"> </p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220904202618423.png" alt="image-20220904202618423"> </p><ol start="4"><li>开通OSS服务之后，就可以进入到阿里云对象存储的控制台</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220904201810832.png" alt="image-20220904201810832"> </p><ol start="5"><li>点击左侧的 “Bucket列表”，创建一个Bucket</li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220904202235180.png" alt="image-20220904202235180"> </p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20220904202824901.png"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>大家可以参照”资料\04. 阿里云oss&quot;中提供的文档，开通阿里云OSS服务。</p></blockquote><p>阿里云oss 对象存储服务的准备工作我们已经完成了，接下来我们就来完成第二步操作：参照官方所提供的sdk示例来编写入门程序。</p><p>首先我们需要来打开阿里云OSS的官方文档，在官方文档中找到 SDK 的示例代码：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229121848524.png" alt="image-20221229121848524"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229122046597.png" alt="image-20221229122046597"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>如果是在实际开发当中，我们是需要从前往后仔细的去阅读这一份文档的，但是由于现在是教学，我们就只挑重点的去看。有兴趣的同学大家下来也可以自己去看一下这份官方文档。</p></blockquote><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229144342148.png" alt="image-20221229144342148"></p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229160827124.png" alt="image-20221229160827124"></p><p>参照官方提供的SDK，改造一下，即可实现文件上传功能：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">ClientException</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">OSS</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">OSSClientBuilder</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">OSSException</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">model</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">PutObjectRequest</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">model</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">PutObjectResult</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">io</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">FileInputStream</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">io</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">InputStream</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AliOssTest</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> endpoint </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeyId </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeySecret </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 填写Bucket名称，例如examplebucket。</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> bucketName </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">web-framework01</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> objectName </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.jpg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 填写本地文件的完整路径，例如D:\\localpath\\examplefile.txt。</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件流。</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> filePath</span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">C:</span><span style="color: #BABED8">\\</span><span style="color: #C3E88D">Users</span><span style="color: #BABED8">\\</span><span style="color: #C3E88D">Administrator</span><span style="color: #BABED8">\\</span><span style="color: #C3E88D">Pictures</span><span style="color: #BABED8">\\</span><span style="color: #C3E88D">1.jpg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 创建OSSClient实例。</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">OSS</span><span style="color: #BABED8"> ossClient </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">OSSClientBuilder</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">build</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">endpoint</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> accessKeyId</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> accessKeySecret</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">InputStream</span><span style="color: #BABED8"> inputStream </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">FileInputStream</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">filePath</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 创建PutObjectRequest对象。</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">PutObjectRequest</span><span style="color: #BABED8"> putObjectRequest </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">PutObjectRequest</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">bucketName</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> objectName</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> inputStream</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 设置该属性可以返回response。如果不设置，则返回的response为空。</span></span><span class="line"><span style="color: #BABED8">            putObjectRequest</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setProcess</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">true</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 创建PutObject请求。</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">PutObjectResult</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> ossClient</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">putObject</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">putObjectRequest</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 如果上传成功，则返回200。</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getResponse</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">getStatusCode</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">OSSException</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">oe</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Caught an OSSException, which means your request made it to OSS, </span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">                    </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">but was rejected with an error response for some reason.</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Error Message:</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> oe</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getErrorMessage</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Error Code:</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> oe</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getErrorCode</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Request ID:</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> oe</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getRequestId</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Host ID:</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> oe</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getHostId</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">ClientException</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">ce</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Caught an ClientException, which means the client encountered </span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">                    </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">a serious internal problem while trying to communicate with OSS, </span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #BABED8">                    </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">such as not being able to access the network.</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Error Message:</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> ce</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getMessage</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">finally</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">ossClient </span><span style="color: #89DDFF">!=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">                ossClient</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">shutdown</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在以上代码中，需要替换的内容为：</p><ul><li>accessKeyId：阿里云账号AccessKey</li><li>accessKeySecret：阿里云账号AccessKey对应的秘钥</li><li>bucketName：Bucket名称</li><li>objectName：对象名称，在Bucket中存储的对象的名称</li><li>filePath：文件路径</li></ul><p>AccessKey ：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221128020105943.png" alt="image-20221128020105943"> </p></blockquote><p>运行以上程序后，会把本地的文件上传到阿里云OSS服务器上：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229161326919.png" alt="image-20221229161326919"></p><p>阿里云oss对象存储服务的准备工作以及入门程序我们都已经完成了，接下来我们就需要在案例当中集成oss对象存储服务，来存储和管理案例中上传的图片。</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20221229170235632.png" alt="image-20221229170235632"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在新增员工的时候，上传员工的图像，而之所以需要上传员工的图像，是因为将来我们需要在系统页面当中访问并展示员工的图像。而要想完成这个操作，需要做两件事：</p><ol><li>需要上传员工的图像，并把图像保存起来（存储到阿里云OSS）</li><li>访问员工图像（通过图像在阿里云OSS的存储地址访问图像）<ul><li>OSS中的每一个文件都会分配一个访问的url，通过这个url就可以访问到存储在阿里云上的图片。所以需要把url返回给前端，这样前端就可以通过url获取到图像。</li></ul></li></ol></blockquote><p>我们参照接口文档来开发文件上传功能：</p><ul><li><p>基本信息</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">请求路径：/upload</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">请求方式：POST</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">接口描述：上传图片接口</span></span></code></pre></div></li><li><p>请求参数</p><p>参数格式：multipart&#x2F;form-data</p><p>参数说明：</p><table><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>file</td><td>是</td><td></td><td></td></tr></tbody></table></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据，上传图片的访问路径</td></tr></tbody></table><p>响应数据样例：</p><div class="language-json"><button title="Copy code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">code</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">msg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">data</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-02-00-27-0400.jpg</span><span style="color: #89DDFF">&quot;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></li></ul><p>引入阿里云OSS上传文件工具类（由官方的示例代码改造而来）</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">OSS</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">OSSClientBuilder</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">stereotype</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Component</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">web</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">multipart</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">MultipartFile</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">io</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">io</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">InputStream</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">util</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">UUID</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AliOSSUtils</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> endpoint </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeyId </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeySecret </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> bucketName </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">    /**</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * 实现上传图片到OSS</span></span><span class="line"><span style="color: #676E95; font-style: italic">     */</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">upload</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">MultipartFile</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">multipartFile</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 获取上传的文件的输入流</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">InputStream</span><span style="color: #BABED8"> inputStream </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> multipartFile</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getInputStream</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 避免文件覆盖</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> originalFilename </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> multipartFile</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getOriginalFilename</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> fileName </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> UUID</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">randomUUID</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">toString</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> originalFilename</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">substring</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">originalFilename</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">lastIndexOf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">));</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//上传文件到 OSS</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">OSS</span><span style="color: #BABED8"> ossClient </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">OSSClientBuilder</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">build</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">endpoint</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> accessKeyId</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> accessKeySecret</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        ossClient</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">putObject</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">bucketName</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> fileName</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> inputStream</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//文件访问路径</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> url </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> endpoint</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">//</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">//</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> bucketName </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> endpoint</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">//</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> fileName</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 关闭ossClient</span></span><span class="line"><span style="color: #BABED8">        ossClient</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">shutdown</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> url</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">// 把上传到oss的路径返回</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>修改UploadController代码：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">itheima</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">pojo</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Result</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">itheima</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">utils</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">AliOSSUtils</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">lombok</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">extern</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">slf4j</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Slf4j</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">beans</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">factory</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">annotation</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Autowired</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">web</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">bind</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">annotation</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">PostMapping</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">web</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">bind</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">annotation</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">RestController</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">web</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">multipart</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">MultipartFile</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">io</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Slf4j</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">RestController</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">UploadController</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">AliOSSUtils</span><span style="color: #BABED8"> aliOSSUtils</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">PostMapping</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/upload</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">upload</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">MultipartFile</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">image</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//调用阿里云OSS工具类，将上传上来的文件存入阿里云</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> url </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> aliOSSUtils</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">upload</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">image</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//将图片上传完成后的url返回，用于浏览器回显展示</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> Result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">success</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">url</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>使用postman测试：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20230102175353270.png" alt="image-20230102175353270"></p><h2 id="8-配置文件"><a href="#8-配置文件" class="headerlink" title="8.配置文件"></a>8.配置文件</h2><h3 id="8-1-参数配置化"><a href="#8-1-参数配置化" class="headerlink" title="8.1 参数配置化"></a>8.1 参数配置化</h3><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20240211160913889.png" alt="image-20240211160913889"></p><p>在我们之前编写的程序中进行文件上传时，需要调用AliOSSUtils工具类，将文件上传到阿里云OSS对象存储服务当中。而在调用工具类进行文件上传时，需要一些参数：</p><ul><li>endpoint       &#x2F;&#x2F;阿里云OSS域名</li><li>accessKeyID    &#x2F;&#x2F;用户身份ID</li><li>accessKeySecret   &#x2F;&#x2F;用户密钥</li><li>bucketName      &#x2F;&#x2F;存储空间的名字</li></ul><p>关于以上的这些阿里云相关配置信息，我们是直接写死在java代码中了(硬编码)，如果我们在做项目时每涉及到一个第三方技术服务，就将其参数硬编码，那么在Java程序中会存在两个问题：</p><ol><li>如果这些参数发生变化了，就必须在源程序代码中改动这些参数，然后需要重新进行代码的编译，将Java代码编译成class字节码文件再重新运行程序。（比较繁琐）</li><li>如果我们开发的是一个真实的企业级项目， Java类可能会有很多，如果将这些参数分散的定义在各个Java类当中，我们要修改一个参数值，我们就需要在众多的Java代码当中来定位到对应的位置，再来修改参数，修改完毕之后再重新编译再运行。（参数配置过于分散，是不方便集中的管理和维护）</li></ol><p>为了解决以上分析的问题，我们可以将参数配置在配置文件中。如下：</p><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#自定义的阿里云OSS配置信息</span></span><span class="line"><span style="color: #F07178">aliyun.oss.endpoint</span><span style="color: #89DDFF">=</span></span><span class="line"><span style="color: #F07178">aliyun.oss.accessKeyId</span><span style="color: #89DDFF">=</span></span><span class="line"><span style="color: #F07178">aliyun.oss.accessKeySecret</span><span style="color: #89DDFF">=</span></span><span class="line"><span style="color: #F07178">aliyun.oss.bucketName</span><span style="color: #89DDFF">=</span></span></code></pre></div><p>在将阿里云OSS配置参数交给properties配置文件来管理之后，我们的AliOSSUtils工具类就变为以下形式：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AliOSSUtils</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">/*以下4个参数没有指定值（默认值：null）*/</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> endpoint</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeyId</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeySecret</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> bucketName</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>而此时如果直接调用AliOSSUtils类当中的upload方法进行文件上传时，这4项参数全部为null，原因是因为并没有给它赋值。</p><p>此时我们是不是需要将配置文件当中所配置的属性值读取出来，并分别赋值给AliOSSUtils工具类当中的各个属性呢？那应该怎么做呢？</p></blockquote><p>因为application.properties是springboot项目默认的配置文件，所以springboot程序在启动时会默认读取application.properties配置文件，而我们可以使用一个现成的注解：@Value，获取配置文件中的数据。</p><p>@Value 注解通常用于外部配置的属性注入，具体用法为： @Value(“${配置文件中的key}”)</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AliOSSUtils</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Value</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">$&#123;aliyun.oss.endpoint&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> endpoint</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Value</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">$&#123;aliyun.oss.accessKeyId&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeyId</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Value</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">$&#123;aliyun.oss.accessKeySecret&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeySecret</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Value</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">$&#123;aliyun.oss.bucketName&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> bucketName</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">     </span></span><span class="line"><span style="color: #89DDFF">     </span><span style="color: #676E95; font-style: italic">//省略其他代码...</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#125;</span><span style="color: #BABED8">   </span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20230102173905913.png" alt="image-20230102173905913"></p><p>使用postman测试：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20230102175353270-17076389401491.png" alt="image-20230102175353270"></p><h3 id="8-2-yml配置文件"><a href="#8-2-yml配置文件" class="headerlink" title="8.2 yml配置文件"></a>8.2 yml配置文件</h3><p>前面我们一直使用springboot项目创建完毕后自带的application.properties进行属性的配置，那其实呢，在springboot项目当中是支持多种配置方式的，除了支持properties配置文件以外，还支持另外一种类型的配置文件，就是我们接下来要讲解的yml格式的配置文件。</p><ul><li><p>application.properties</p><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">server.port</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">8080</span></span><span class="line"><span style="color: #F07178">server.address</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">127.0.0.1</span></span></code></pre></div></li><li><p>application.yml </p><div class="language-yml"><button title="Copy code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">server</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8080</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">address</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">127.0.0.1</span></span></code></pre></div></li><li><p>application.yaml </p><div class="language-yml"><button title="Copy code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">server</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">8080</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">address</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">127.0.0.1</span></span></code></pre></div></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>yml 格式的配置文件，后缀名有两种：</p><ul><li>yml （推荐）</li><li>yaml</li></ul></blockquote><p>常见配置文件格式对比：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20230102181215809.png" alt="image-20230102181215809"></p><p>我们可以看到配置同样的数据信息，yml格式的数据有以下特点：</p><ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ul><p>简单的了解过springboot所支持的配置文件，以及不同类型配置文件之间的优缺点之后，接下来我们就来了解下yml配置文件的基本语法：</p><ul><li>大小写敏感</li><li>数值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格（idea中会自动将Tab转换为空格）</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code>表示注释，从这个字符一直到行尾，都会被解析器忽略</li></ul><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20230103084645450.png" alt="image-20230103084645450"></p><p>了解完yml格式配置文件的基本语法之后，接下来我们再来看下yml文件中常见的数据格式。在这里我们主要介绍最为常见的两类：</p><ol><li>定义对象或Map集合</li><li>定义数组、list或set集合</li></ol><p>对象&#x2F;Map集合</p><div class="language-yml"><button title="Copy code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">user</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">zhangsan</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">18</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">password</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">123456</span></span></code></pre></div><p>数组&#x2F;List&#x2F;Set集合</p><div class="language-yml"><button title="Copy code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">hobby</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">java</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">game</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">sport</span></span></code></pre></div><p>熟悉完了yml文件的基本语法后，我们修改下之前案例中使用的配置文件，变更为application.yml配置方式：</p><ol><li>修改application.properties名字为：<code>_application.properties</code>（名字随便更换，只要加载不到即可）</li><li>创建新的配置文件： <code>application.yml</code></li></ol><p>原有application.properties文件：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20230103202630793.png" alt="image-20230103202630793"></p><p>新建的application.yml文件：</p><div class="language-yaml"><button title="Copy code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">spring</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">datasource</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">driver-class-name</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">com.mysql.cj.jdbc.Driver</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">url</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">jdbc:mysql://localhost:3306/tlias</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">username</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">root</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">password</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1234</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">servlet</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">multipart</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F07178">max-file-size</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">10MB</span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F07178">max-request-size</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">100MB</span></span><span class="line"><span style="color: #BABED8">      </span></span><span class="line"><span style="color: #F07178">mybatis</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">configuration</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">log-impl</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">map-underscore-to-camel-case</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #FF9CAC">true</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #F07178">aliyun</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F07178">oss</span><span style="color: #89DDFF">:</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">endpoint</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">https://oss-cn-hangzhou.aliyuncs.com</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">accessKeyId</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">accessKeySecret</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">bucketName</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">web-397</span></span></code></pre></div><h3 id="8-3-ConfigurationProperties"><a href="#8-3-ConfigurationProperties" class="headerlink" title="8.3 @ConfigurationProperties"></a>8.3 @ConfigurationProperties</h3><p>讲解完了yml配置文件之后，最后再来介绍一个注解<code>@ConfigurationProperties</code>。在介绍注解之前，我们先来看一个场景，分析下代码当中可能存在的问题：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20230103202919756.png" alt="image-20230103202919756"></p><p>我们在application.properties或者application.yml中配置了阿里云OSS的四项参数之后，如果java程序中需要这四项参数数据，我们直接通过@Value注解来进行注入。这种方式本身没有什么问题问题，但是如果说需要注入的属性较多(例：需要20多个参数数据)，我们写起来就会比较繁琐。</p><p>那么有没有一种方式可以简化这些配置参数的注入呢？答案是肯定有，在Spring中给我们提供了一种简化方式，可以直接将配置文件中配置项的值自动的注入到对象的属性中。</p><p>Spring提供的简化方式套路：</p><ol><li><p>需要创建一个实现类，且实体类中的属性名和配置文件当中key的名字必须要一致</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>比如：配置文件当中叫endpoints，实体类当中的属性也得叫endpoints，另外实体类当中的属性还需要提供 getter &#x2F; setter方法</p></blockquote></li><li><p>需要将实体类交给Spring的IOC容器管理，成为IOC容器当中的bean对象</p></li><li><p>在实体类上添加<code>@ConfigurationProperties</code>注解，并通过perfect属性来指定配置参数项的前缀</p></li></ol><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20230103210827003.png" alt="image-20230103210827003"></p><p>实体类：AliOSSProperties</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">lombok</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Data</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">boot</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">context</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">properties</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">ConfigurationProperties</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">stereotype</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Component</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">/*阿里云OSS相关配置*/</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Data</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">ConfigurationProperties</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">prefix</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">aliyun.oss</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AliOSSProperties</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//区域</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> endpoint</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//身份ID</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeyId </span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//身份密钥</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> accessKeySecret </span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//存储空间</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> bucketName</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>AliOSSUtils工具类：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">OSS</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">aliyun</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">oss</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">OSSClientBuilder</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">beans</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">factory</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">annotation</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Autowired</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">stereotype</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Component</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">web</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">multipart</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">MultipartFile</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">io</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">IOException</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">io</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">InputStream</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">util</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">UUID</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Component</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//当前类对象由Spring创建和管理</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">AliOSSUtils</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//注入配置参数实体类对象</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">AliOSSProperties</span><span style="color: #BABED8"> aliOSSProperties</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">   </span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #676E95; font-style: italic">    /**</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * 实现上传图片到OSS</span></span><span class="line"><span style="color: #676E95; font-style: italic">     */</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">upload</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">MultipartFile</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">multipartFile</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">IOException</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 获取上传的文件的输入流</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">InputStream</span><span style="color: #BABED8"> inputStream </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> multipartFile</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getInputStream</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 避免文件覆盖</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> originalFilename </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> multipartFile</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getOriginalFilename</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> fileName </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> UUID</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">randomUUID</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">toString</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> originalFilename</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">substring</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">originalFilename</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">lastIndexOf</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">));</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//上传文件到 OSS</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">OSS</span><span style="color: #BABED8"> ossClient </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">OSSClientBuilder</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">build</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">aliOSSProperties</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getEndpoint</span><span style="color: #89DDFF">(),</span></span><span class="line"><span style="color: #BABED8">                aliOSSProperties</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getAccessKeyId</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> aliOSSProperties</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getAccessKeySecret</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        ossClient</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">putObject</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">aliOSSProperties</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBucketName</span><span style="color: #89DDFF">(),</span><span style="color: #BABED8"> fileName</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> inputStream</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//文件访问路径</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> url </span><span style="color: #89DDFF">=</span><span style="color: #BABED8">aliOSSProperties</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getEndpoint</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">split</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">//</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">//</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> aliOSSProperties</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getBucketName</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> aliOSSProperties</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getEndpoint</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">split</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">//</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">]</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span><span style="color: #BABED8"> fileName</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 关闭ossClient</span></span><span class="line"><span style="color: #BABED8">        ossClient</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">shutdown</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> url</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">// 把上传到oss的路径返回</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><p>在我们添加上注解后，会发现idea窗口上面出现一个红色警告：</p><p><img src="/oranfish.github.io/posts/0/Springboot%E5%AD%A6%E4%B9%A0/image-20230103212042823.png" alt="image-20230103212042823"> </p><p>这个警告提示是告知我们还需要引入一个依赖：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.springframework.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">spring-boot-configuration-processor</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>当我们在pom.xml文件当中配置了这项依赖之后，我们重新启动服务，大家就会看到在properties或者是yml配置文件当中，就会提示阿里云 OSS 相关的配置项。所以这项依赖它的作用就是会自动的识别被<code>@Configuration Properties</code>注解标识的bean对象。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>刚才的红色警告，已经变成了一个灰色的提示，提示我们需要重新运行springboot服务</p></blockquote><p>@ConfigurationProperties注解我们已经介绍完了，接下来我们就来区分一下@ConfigurationProperties注解以及我们前面所介绍的另外一个@Value注解：</p><p>相同点：都是用来注入外部配置的属性的。</p><p>不同点：</p><ul><li><p>@Value注解只能一个一个的进行外部属性的注入。</p></li><li><p>@ConfigurationProperties可以批量的将外部的属性配置注入到bean对象的属性中。</p></li></ul><p>如果要注入的属性非常的多，并且还想做到复用，就可以定义这么一个bean对象。通过 configuration properties 批量的将外部的属性配置直接注入到 bin 对象的属性当中。在其他的类当中，我要想获取到注入进来的属性，我直接注入 bin 对象，然后调用 get 方法，就可以获取到对应的属性值了</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis知识点总结</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Mybatis入门"><a href="#1-Mybatis入门" class="headerlink" title="1.Mybatis入门"></a>1.Mybatis入门</h2><p>在前面我们学习MySQL数据库时，都是利用图形化客户端工具(如：idea、datagrip)，来操作数据库的。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在客户端工具中，编写增删改查的SQL语句，发给MySQL数据库管理系统，由数据库管理系统执行SQL语句并返回执行结果。</p><p>增删改操作：返回受影响行数</p><p>查询操作：返回结果集(查询的结果)</p></blockquote><p>我们做为后端程序开发人员，通常会使用Java程序来完成对数据库的操作。Java程序操作数据库，现在主流的方式是：Mybatis。</p><p>什么是MyBatis?</p><ul><li><p>MyBatis是一款优秀的 <strong>持久层</strong> <strong>框架</strong>，用于简化JDBC的开发。</p></li><li><p>MyBatis本是 Apache的一个开源项目iBatis，2010年这个项目由apache迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p></li><li><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><p>在上面我们提到了两个词：一个是持久层，另一个是框架。</p><ul><li>持久层：指的是就是数据访问层(dao)，是用来操作数据库的。</li></ul><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901114951631.png" alt="image-20220901114951631"> </p><ul><li>框架：是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。在框架的基础上进行软件开发更加高效、规范、通用、可拓展。</li></ul><h3 id="1-1-入门程序"><a href="#1-1-入门程序" class="headerlink" title="1.1 入门程序"></a>1.1 入门程序</h3><p>以前我们是在图形化客户端工具中编写SQL查询代码，发送给数据库执行，数据库执行后返回操作结果。</p><p>图形化工具会把数据库执行的查询结果，使用表格的形式展现出来</p><p>现在使用Mybatis操作数据库，就是在Mybatis中编写SQL查询代码，发送给数据库执行，数据库执行后返回结果。</p><p>Mybatis会把数据库执行的查询结果，使用实体类封装起来（一行记录对应一个实体类对象）</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221209161623051.png" alt="image-20221209161623051"></p><p>Mybatis操作数据库的步骤：</p><ol><li><p>准备工作(创建springboot工程、数据库表user、实体类User)</p></li><li><p>引入Mybatis的相关依赖，配置Mybatis(数据库连接信息)</p></li><li><p>编写SQL语句(注解&#x2F;XML)</p></li></ol><p>创建springboot工程，并导入 mybatis的起步依赖、mysql的驱动包。</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221209162827242.png" alt="image-20221209162827242"></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221209163123443.png" alt="image-20221209163123443"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>项目工程创建完成后，自动在pom.xml文件中，导入Mybatis依赖和MySQL驱动依赖</p></blockquote><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">&lt;!-- 仅供参考：只粘贴了pom.xml中部分内容 --&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #676E95; font-style: italic">&lt;!-- mybatis起步依赖 --&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.mybatis.spring.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">mybatis-spring-boot-starter</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">2.3.0</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #676E95; font-style: italic">&lt;!-- mysql驱动包依赖 --&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.mysql</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">mysql-connector-j</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">scope</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">runtime</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">scope</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #676E95; font-style: italic">&lt;!-- spring单元测试 (集成了junit) --&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.springframework.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">spring-boot-starter-test</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">scope</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">test</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">scope</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在之前使用图形化客户端工具，连接MySQL数据库时，需要配置：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20240211152818164.png" alt="image-20240211152818164"></p><p>连接数据库的四大参数：</p><ul><li>MySQL驱动类 </li><li>登录名</li><li>密码</li><li>数据库连接字符串</li></ul></blockquote><p>基于上述分析，在Mybatis中要连接数据库，同样也需要以上4个参数配置。</p><p>在springboot项目中，可以编写application.properties文件，配置数据库连接信息。我们要连接数据库，就需要配置数据库连接的基本信息，包括：driver-class-name、url 、username，password。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在入门程序中，大家可以直接这么配置，后面会介绍什么是驱动。</p></blockquote><p>application.properties:</p><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#驱动类名称</span></span><span class="line"><span style="color: #F07178">spring.datasource.driver-class-name</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">com.mysql.cj.jdbc.Driver</span></span><span class="line"><span style="color: #676E95; font-style: italic">#数据库连接的url</span></span><span class="line"><span style="color: #F07178">spring.datasource.url</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">jdbc:mysql://localhost:3306/mybatis</span></span><span class="line"><span style="color: #676E95; font-style: italic">#连接数据库的用户名</span></span><span class="line"><span style="color: #F07178">spring.datasource.username</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">root</span></span><span class="line"><span style="color: #676E95; font-style: italic">#连接数据库的密码</span></span><span class="line"><span style="color: #F07178">spring.datasource.password</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">1234</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>上述的配置，可以直接复制过去，不要敲错了。 全部都是 spring.datasource.xxxx 开头。</p></blockquote><p>在创建出来的springboot工程中，在引导类所在包下，在创建一个包 mapper。在mapper包下创建一个接口 UserMapper ，这是一个持久层接口（Mybatis的持久层接口规范一般都叫 XxxMapper）。</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221209175843651.png" alt="image-20221209175843651"></p><p>UserMapper：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">itheima</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">pojo</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">User</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">apache</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">ibatis</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">annotations</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Mapper</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">apache</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">ibatis</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">annotations</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Select</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">util</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">List</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">UserMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//查询所有用户数据</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Select</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">select id, name, age, gender, phone from user</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">User</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>@Mapper注解：表示是mybatis中的Mapper接口</p><ul><li>程序运行时：框架会自动生成接口的实现类对象(代理对象)，并给交Spring的IOC容器管理</li></ul><p> @Select注解：代表的就是select查询，用于书写select查询语句</p></blockquote><p>在创建出来的SpringBoot工程中，在src下的test目录下，已经自动帮我们创建好了测试类 ，并且在测试类上已经添加了注解 @SpringBootTest，代表该测试类已经与SpringBoot整合。 </p><p>该测试类在运行时，会自动通过引导类加载Spring的环境（IOC容器）。我们要测试那个bean对象，就可以直接通过@Autowired注解直接将其注入进行，然后就可以测试了。 </p><h3 id="1-2-解决SQL警告与提示"><a href="#1-2-解决SQL警告与提示" class="headerlink" title="1.2 解决SQL警告与提示"></a>1.2 解决SQL警告与提示</h3><p>默认我们在UserMapper接口上加的@Select注解中编写SQL语句是没有提示的。 如果想让idea给我们提示对应的SQL语句，我们需要在IDEA中配置与MySQL数据库的链接。 </p><p>默认我们在UserMapper接口上的@Select注解中编写SQL语句是没有提示的。如果想让idea给出提示，可以做如下配置：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210143348119.png" alt="image-20221210143348119"></p><p>配置完成之后，发现SQL语句中的关键字有提示了，但还存在不识别表名(列名)的情况：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210143934318.png" alt="image-20221210143934318"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>产生原因：Idea和数据库没有建立连接，不识别表信息</p><p>解决方案：在Idea中配置MySQL数据库连接</p></blockquote><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210144139792.png" alt="image-20221210144139792"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在配置的时候指定连接那个数据库，如上图所示连接的就是mybatis数据库。</p></blockquote><h2 id="2-JDBC介绍"><a href="#2-JDBC介绍" class="headerlink" title="2.JDBC介绍"></a>2.JDBC介绍</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>通过Mybatis的快速入门，我们明白了，通过Mybatis可以很方便的进行数据库的访问操作。但是大家要明白，其实java语言操作数据库呢，只能通过一种方式：使用sun公司提供的 JDBC 规范。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Mybatis框架，就是对原始的JDBC程序的封装。 </p></blockquote><p>那到底什么是JDBC呢，接下来，我们就来介绍一下。</p><p>JDBC： ( Java DataBase Connectivity )，就是使用Java语言操作关系型数据库的一套API。</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210144811961.png" alt="image-20221210144811961"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>本质：</p><ul><li><p>sun公司官方定义的一套操作所有关系型数据库的规范，即接口。</p></li><li><p>各个数据库厂商去实现这套接口，提供数据库驱动jar包。</p></li><li><p>我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</p></li></ul></blockquote><h3 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h3><p>下面我们看看原始的JDBC程序是如何操作数据库的。操作步骤如下：</p><ol><li>注册驱动</li><li>获取连接对象</li><li>执行SQL语句，返回执行结果</li><li>处理执行结果</li><li>释放资源</li></ol><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在pom.xml文件中已引入MySQL驱动依赖，我们直接编写JDBC代码即可</p></blockquote><p>JDBC具体代码实现：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">itheima</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">pojo</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">User</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">junit</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">jupiter</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">api</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Test</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">sql</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Connection</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">sql</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">DriverManager</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">sql</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">ResultSet</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">sql</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Statement</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">util</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">ArrayList</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">util</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">List</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">JdbcTest</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testJdbc</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #C792EA">throws</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Exception</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//1. 注册驱动</span></span><span class="line"><span style="color: #BABED8">        Class</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forName</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.mysql.cj.jdbc.Driver</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//2. 获取数据库连接</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> url</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">jdbc:mysql://127.0.0.1:3306/mybatis</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> username </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">root</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> password </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1234</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Connection</span><span style="color: #BABED8"> connection </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> DriverManager</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getConnection</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">url</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> username</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> password</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//3. 执行SQL</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Statement</span><span style="color: #BABED8"> statement </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> connection</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">createStatement</span><span style="color: #89DDFF">();</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//操作SQL的对象</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> sql</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">select id,name,age,gender,phone from user</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">ResultSet</span><span style="color: #BABED8"> rs </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> statement</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">executeQuery</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">sql</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">//SQL查询结果会封装在ResultSet对象中</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">User</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> userList </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #C792EA">ArrayList</span><span style="color: #89DDFF">&lt;&gt;();</span><span style="color: #676E95; font-style: italic">//集合对象（用于存储User对象）</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//4. 处理SQL执行结果</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">rs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">next</span><span style="color: #89DDFF">())&#123;</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//取出一行记录中id、name、age、gender、phone下的数据</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> id </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> rs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getInt</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">id</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> rs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getString</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">short</span><span style="color: #BABED8"> age </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> rs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getShort</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">short</span><span style="color: #BABED8"> gender </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> rs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getShort</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">gender</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> phone </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> rs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getString</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">phone</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">//把一行记录中的数据，封装到User对象中</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #C792EA">User</span><span style="color: #BABED8"> user </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">User</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">id</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">name</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">age</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">gender</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">phone</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">            userList</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">user</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">//User对象添加到集合</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//5. 释放资源</span></span><span class="line"><span style="color: #BABED8">        statement</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">close</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        connection</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">close</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        rs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">close</span><span style="color: #89DDFF">();</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//遍历集合</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">User</span><span style="color: #BABED8"> user </span><span style="color: #89DDFF; font-style: italic">:</span><span style="color: #BABED8"> userList</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">            System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">user</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>DriverManager(类)：数据库驱动管理类。</p><ul><li><p>作用：</p><ol><li><p>注册驱动</p></li><li><p>创建java代码和数据库之间的连接，即获取Connection对象</p></li></ol></li></ul><p>Connection(接口)：建立数据库连接的对象</p><ul><li>作用：用于建立java程序和数据库之间的连接</li></ul><p>Statement(接口)： 数据库操作对象(执行SQL语句的对象)。</p><ul><li>作用：用于向数据库发送sql语句</li></ul><p>ResultSet(接口)：结果集对象（一张虚拟表）</p><ul><li>作用：sql查询语句的执行结果会封装在ResultSet中</li></ul></blockquote><p>通过上述代码，我们看到直接基于JDBC程序来操作数据库，代码实现非常繁琐，所以在项目开发中，我们很少使用。  在项目开发中，通常会使用Mybatis这类的高级技术来操作数据库，从而简化数据库操作、提高开发效率。</p><h3 id="2-3-问题分析"><a href="#2-3-问题分析" class="headerlink" title="2.3 问题分析"></a>2.3 问题分析</h3><p>始的JDBC程序，存在以下几点问题：</p><ol><li>数据库链接的四要素(驱动、链接、用户名、密码)全部硬编码在java代码中</li><li>查询结果的解析及封装非常繁琐</li><li>每一次查询数据库都需要获取连接,操作完毕后释放连接, 资源浪费, 性能降低</li></ol><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210153407998.png" alt="image-20221210153407998"></p><h3 id="2-4-技术对比"><a href="#2-4-技术对比" class="headerlink" title="2.4 技术对比"></a>2.4 技术对比</h3><p>分析了JDBC的缺点之后，我们再来看一下在mybatis中，是如何解决这些问题的：</p><ol><li><p>数据库连接四要素(驱动、链接、用户名、密码)，都配置在springboot默认的配置文件 application.properties中</p></li><li><p>查询结果的解析及封装，由mybatis自动完成映射封装，我们无需关注</p></li><li><p>在mybatis中使用了数据库连接池技术，从而避免了频繁的创建连接、销毁连接而带来的资源浪费。</p></li></ol><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>使用SpringBoot+Mybatis的方式操作数据库，能够提升开发效率、降低资源浪费</p></blockquote><p>而对于Mybatis来说，我们在开发持久层程序操作数据库时，需要重点关注以下两个方面：</p><ol><li><p>application.properties</p><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#驱动类名称</span></span><span class="line"><span style="color: #F07178">spring.datasource.driver-class-name</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">com.mysql.cj.jdbc.Driver</span></span><span class="line"><span style="color: #676E95; font-style: italic">#数据库连接的url</span></span><span class="line"><span style="color: #F07178">spring.datasource.url</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">jdbc:mysql://localhost:3306/mybatis</span></span><span class="line"><span style="color: #676E95; font-style: italic">#连接数据库的用户名</span></span><span class="line"><span style="color: #F07178">spring.datasource.username</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">root</span></span><span class="line"><span style="color: #676E95; font-style: italic">#连接数据库的密码</span></span><span class="line"><span style="color: #F07178">spring.datasource.password</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">1234</span></span></code></pre></div></li><li><p>Mapper接口（编写SQL语句）</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">UserMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Select</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">select id, name, age, gender, phone from user</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">User</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></li></ol><h2 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3.数据库连接池"></a>3.数据库连接池</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210160341852.png" alt="image-20221210160341852"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>没有使用数据库连接池：</p><ul><li>客户端执行SQL语句：要先创建一个新的连接对象，然后执行SQL语句，SQL语句执行后又需要关闭连接对象从而释放资源，每次执行SQL时都需要创建连接、销毁链接，这种频繁的重复创建销毁的过程是比较耗费计算机的性能。</li></ul></blockquote><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210161016314.png" alt="image-20221210161016314"></p><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p><ul><li>程序在启动时，会在数据库连接池(容器)中，创建一定数量的Connection对象</li></ul><p>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p><ul><li>客户端在执行SQL时，先从连接池中获取一个Connection对象，然后在执行SQL语句，SQL语句执行完之后，释放Connection时就会把Connection对象归还给连接池（Connection对象可以复用）</li></ul><p>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</p><ul><li>客户端获取到Connection对象了，但是Connection对象并没有去访问数据库(处于空闲)，数据库连接池发现Connection对象的空闲时间 &gt; 连接池中预设的最大空闲时间，此时数据库连接池就会自动释放掉这个连接对象</li></ul><p>数据库连接池的好处：</p><ol><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ol><h3 id="3-2-产品"><a href="#3-2-产品" class="headerlink" title="3.2 产品"></a>3.2 产品</h3><p>要怎么样实现数据库连接池呢？</p><ul><li><p>官方(sun)提供了数据库连接池标准（javax.sql.DataSource接口）</p><ul><li><p>功能：获取连接 </p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Connection</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getConnection</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> throws SQLException</span><span style="color: #89DDFF">;</span></span></code></pre></div></li><li><p>第三方组织必须按照DataSource接口实现</p></li></ul></li></ul><p>常见的数据库连接池：</p><ul><li>C3P0</li><li>DBCP</li><li>Druid</li><li>Hikari (springboot默认)</li></ul><p>现在使用更多的是：Hikari、Druid  （性能更优越）</p><ul><li>Hikari（追光者） [默认的连接池]</li></ul><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901144923251.png" alt="image-20220901144923251"> </p><ul><li><p>Druid（德鲁伊）</p><ul><li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p></li><li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p></li></ul></li></ul><p>​</p><p>如果我们想把默认的数据库连接池切换为Druid数据库连接池，只需要完成以下两步操作即可：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>参考官方地址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p></blockquote><ol><li>在pom.xml文件中引入依赖</li></ol><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">&lt;!-- Druid连接池依赖 --&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.alibaba</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">druid-spring-boot-starter</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.2.8</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><ol start="2"><li>在application.properties中引入数据库连接配置</li></ol><p>方式1：</p><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">spring.datasource.druid.driver-class-name</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">com.mysql.cj.jdbc.Driver</span></span><span class="line"><span style="color: #F07178">spring.datasource.druid.url</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">jdbc:mysql://localhost:3306/mybatis</span></span><span class="line"><span style="color: #F07178">spring.datasource.druid.username</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">root</span></span><span class="line"><span style="color: #F07178">spring.datasource.druid.password</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">1234</span></span></code></pre></div><p>方式2：</p><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F07178">spring.datasource.driver-class-name</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">com.mysql.cj.jdbc.Driver</span></span><span class="line"><span style="color: #F07178">spring.datasource.url</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">jdbc:mysql://localhost:3306/mybatis</span></span><span class="line"><span style="color: #F07178">spring.datasource.username</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">root</span></span><span class="line"><span style="color: #F07178">spring.datasource.password</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">1234</span></span></code></pre></div><h2 id="4-Lombok"><a href="#4-Lombok" class="headerlink" title="4.Lombok"></a>4.Lombok</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>Lombok是一个实用的Java类库，可以通过简单的注解来简化和消除一些必须有但显得很臃肿的Java代码。</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210164641266-17076371552651.png" alt="image-20221210164641266"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p></blockquote><table><thead><tr><th><strong>注解</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的  toString 方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写 equals 方法和  hashCode 方法</td></tr><tr><td>@Data</td><td>提供了更综合的生成代码功能（@Getter  + @Setter + @ToString + @EqualsAndHashCode）</td></tr><tr><td>@NoArgsConstructor</td><td>为实体类生成无参的构造器方法</td></tr><tr><td>@AllArgsConstructor</td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td></tr></tbody></table><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><p>第1步：在pom.xml文件中引入依赖</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">&lt;!-- 在springboot的父工程中，已经集成了lombok并指定了版本号，故当前引入依赖时不需要指定version --&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.projectlombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">lombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>第2步：在实体类上添加注解</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">lombok</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Data</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Data</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">User</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> id</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Short</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Short</span><span style="color: #BABED8"> gender</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> phone</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在实体类上添加了@Data注解，那么这个类在编译时期，就会生成getter&#x2F;setter、equals、hashcode、toString等方法。</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210170733921.png" alt="image-20221210170733921"></p></blockquote><p>说明：@Data注解中不包含全参构造方法，通常在实体类上，还会添加上：全参构造、无参构造</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">lombok</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Data</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Data</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//getter方法、setter方法、toString方法、hashCode方法、equals方法</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">NoArgsConstructor</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//无参构造</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">AllArgsConstructor</span><span style="color: #676E95; font-style: italic">//全参构造</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">User</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> id</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> name</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Short</span><span style="color: #BABED8"> age</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Short</span><span style="color: #BABED8"> gender</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">String</span><span style="color: #BABED8"> phone</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>Lombok的注意事项：</p><ul><li>Lombok会在编译时，会自动生成对应的java代码</li><li>在使用lombok时，还需要安装一个lombok的插件（新版本的IDEA中自带）</li></ul><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210165506359.png" alt="image-20221210165506359"></p><h2 id="5-Mybatis基本操作"><a href="#5-Mybatis基本操作" class="headerlink" title="5.Mybatis基本操作"></a>5.Mybatis基本操作</h2><h3 id="5-1-删除"><a href="#5-1-删除" class="headerlink" title="5.1 删除"></a>5.1 删除</h3><p>页面原型：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210183336095.png" alt="image-20221210183336095"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当我们点击后面的”删除”按钮时，前端页面会给服务端传递一个参数，也就是该行数据的ID。 我们接收到ID后，根据ID删除数据即可。</p></blockquote><p><strong>功能：根据主键删除数据</strong></p><ul><li>SQL语句</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 删除id=17的数据</span></span><span class="line"><span style="color: #babed8">delete from emp where id = 17;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Mybatis框架让程序员更关注于SQL语句</p></blockquote><ul><li>接口方法</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">EmpMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//@Delete(&quot;delete from emp where id = 17&quot;)</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//public void delete();</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//以上delete操作的SQL语句中的id值写成固定的17，就表示只能删除id=17的用户数据</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//SQL语句中的id值不能写成固定数值，需要变为动态的数值</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//解决方案：在delete方法中添加一个参数(用户id)，将方法中的参数，传给SQL语句</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #676E95; font-style: italic">    /**</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * 根据id删除数据</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * </span><span style="color: #F78C6C; font-style: italic">@param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #676E95; font-style: italic">    用户id</span></span><span class="line"><span style="color: #676E95; font-style: italic">     */</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Delete</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">delete from emp where id = #&#123;id&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span><span style="color: #676E95; font-style: italic">//使用#&#123;key&#125;方式获取方法中的参数值</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>@Delete注解：用于编写delete操作的SQL语句</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>如果mapper接口方法形参只有一个普通类型的参数，#{…} 里面的属性名可以随便写，如：#{id}、#{value}。但是建议保持名字一致。</p></blockquote><ul><li>测试<ul><li>在单元测试类中通过@Autowired注解注入EmpMapper类型对象</li></ul></li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootMybatisCrudApplicationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//从Spring的IOC容器中，获取类型是EmpMapper的对象并注入</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EmpMapper</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testDel</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//调用删除方法</span></span><span class="line"><span style="color: #BABED8">        empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">delete</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">16</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h4 id="5-1-1-日志输入"><a href="#5-1-1-日志输入" class="headerlink" title="5.1.1 日志输入"></a>5.1.1 日志输入</h4><p>在Mybatis当中我们可以借助日志，查看到sql语句的执行、执行传递的参数以及执行结果。具体操作如下：</p><ol><li><p>打开application.properties文件</p></li><li><p>开启mybatis的日志，并指定输出到控制台</p></li></ol><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#指定mybatis输出日志的位置, 输出控制台</span></span><span class="line"><span style="color: #F07178">mybatis.configuration.log-impl</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">org.apache.ibatis.logging.stdout.StdOutImpl</span></span></code></pre></div><p>开启日志之后，我们再次运行单元测试，可以看到在控制台中，输出了以下的SQL语句信息：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901164225644.png" alt="image-20220901164225644"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>但是我们发现输出的SQL语句：delete from emp where id &#x3D; ?，我们输入的参数16并没有在后面拼接，id的值是使用?进行占位。那这种SQL语句我们称为预编译SQL。</p></blockquote><h4 id="5-1-2-预编译SQL"><a href="#5-1-2-预编译SQL" class="headerlink" title="5.1.2 预编译SQL"></a>5.1.2 预编译SQL</h4><p>预编译SQL有两个优势：</p><ol><li>性能更高</li><li>更安全(防止SQL注入)</li></ol><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210202222206.png" alt="image-20221210202222206"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>性能更高：预编译SQL，编译一次之后会将编译后的SQL语句缓存起来，后面再次执行这条语句时，不会再次编译。（只是输入的参数不同）</p><p>更安全(防止SQL注入)：将敏感字进行转义，保障SQL的安全性。</p></blockquote><p>SQL注入：是通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行攻击的方法。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>由于没有对用户输入进行充分检查，而SQL又是拼接而成，在用户输入参数时，在参数中添加一些SQL关键字，达到改变SQL运行结果的目的，也可以完成恶意攻击。</p></blockquote><p><strong>测试1：使用资料中提供的程序，来验证SQL注入问题</strong></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210205419634.png" alt="image-20221210205419634"></p><p>第1步：进入到DOS</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221211124744203.png" alt="image-20221211124744203"></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221211124840720.png" alt="image-20221211124840720"></p><p>第2步：执行以下命令，启动程序</p><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#启动存在SQL注入的程序</span></span><span class="line"><span style="color: #BABED8">java </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">jar sql_Injection_demo</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">0.0</span><span style="color: #BABED8">.</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">SNAPSHOT.jar </span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210211605231.png" alt="image-20221210211605231"></p><p>第3步：打开浏览器输入<code>http://localhost:9090/login.html</code></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210212406527.png" alt="image-20221210212406527"></p><p>发现竟然能够登录成功：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210212511915.png" alt="image-20221210212511915"></p><p>以上操作为什么能够登录成功呢？</p><ul><li>由于没有对用户输入内容进行充分检查，而SQL又是字符串拼接方式而成，在用户输入参数时，在参数中添加一些SQL关键字，达到改变SQL运行结果的目的，从而完成恶意攻击。</li></ul><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210213311518.png" alt="image-20221210213311518"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210214431228.png" alt="image-20221210214431228"></p><p>用户在页面提交数据的时候人为的添加一些特殊字符，使得sql语句的结构发生了变化，最终可以在没有用户名或者密码的情况下进行登录。</p></blockquote><p><strong>测试2：使用资料中提供的程序，来验证SQL注入问题</strong></p><p>第1步：进入到DOS</p><p>第2步：执行以下命令，启动程序：</p><div class="language-powershell"><button title="Copy code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#启动解决了SQL注入的程序</span></span><span class="line"><span style="color: #BABED8">java </span><span style="color: #89DDFF">-</span><span style="color: #BABED8">jar sql_prepared_demo</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">0.0</span><span style="color: #BABED8">.</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">SNAPSHOT.jar</span></span></code></pre></div><p>第3步：打开浏览器输入<code>http://localhost:9090/login.html</code></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221210212406527.png" alt="image-20221210212406527"></p><p>发现无法登录：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221211125751981.png" alt="image-20221211125751981"></p><p>以上操作SQL语句的执行：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221211130011973.png" alt="image-20221211130011973"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>把整个<code>&#39; or &#39;1&#39;=&#39;1</code>作为一个完整的参数，赋值给第2个问号（<code>&#39; or &#39;1&#39;=&#39;1</code>进行了转义，只当做字符串使用）</p></blockquote><p>在Mybatis中提供的参数占位符有两种：${…} 、#{…}</p><ul><li><p>#{…}</p><ul><li>执行SQL时，会将#{…}替换为?，生成预编译SQL，会自动设置参数值</li><li>使用时机：参数传递，都使用#{…}</li></ul></li><li><p>${…}</p><ul><li>拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题</li><li>使用时机：如果对表名、列表进行动态设置时使用</li></ul></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：在项目开发中，建议使用#{…}，生成预编译SQL，防止SQL注入安全。</p></blockquote><h3 id="5-2-新增"><a href="#5-2-新增" class="headerlink" title="5.2  新增"></a>5.2  新增</h3><p>SQL语句：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">insert into</span><span style="color: #BABED8"> emp(username, </span><span style="color: #F78C6C">name</span><span style="color: #BABED8">, gender, </span><span style="color: #F78C6C">image</span><span style="color: #BABED8">, job, entrydate, dept_id, create_time, update_time) </span><span style="color: #F78C6C">values</span><span style="color: #BABED8"> (</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">songyuanqiao</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">宋远桥</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span><span style="color: #F78C6C">1</span><span style="color: #BABED8">,</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1.jpg</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span><span style="color: #F78C6C">2</span><span style="color: #BABED8">,</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2012-10-09</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span><span style="color: #F78C6C">2</span><span style="color: #BABED8">,</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2022-10-01 10:00:00</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2022-10-01 10:00:00</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">);</span></span></code></pre></div><p>接口方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">EmpMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Insert</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">emp</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>说明：#{…} 里面写的名称是对象的属性名</p></blockquote><p>测试类：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">itheima</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">mapper</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">EmpMapper</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">com</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">itheima</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">pojo</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Emp</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">junit</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">jupiter</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">api</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Test</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">beans</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">factory</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">annotation</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">Autowired</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">org</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">springframework</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">boot</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">test</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">context</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">SpringBootTest</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">time</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">LocalDate</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F78C6C">import</span><span style="color: #BABED8"> </span><span style="color: #C792EA">java</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">time</span><span style="color: #89DDFF">.</span><span style="color: #C792EA">LocalDateTime</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootMybatisCrudApplicationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EmpMapper</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testInsert</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//创建员工对象</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> emp </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Emp</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setUsername</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">tom</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setName</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">汤姆</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setImage</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.jpg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setGender</span><span style="color: #89DDFF">((</span><span style="color: #C792EA">short</span><span style="color: #89DDFF">)</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setJob</span><span style="color: #89DDFF">((</span><span style="color: #C792EA">short</span><span style="color: #89DDFF">)</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setEntrydate</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">of</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2000</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setCreateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setUpdateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setDeptId</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//调用添加方法</span></span><span class="line"><span style="color: #BABED8">        empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>日志输出：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221211140222240.png" alt="image-20221211140222240"></p></blockquote><p><strong>主键返回</strong></p><p>概念：在数据添加成功后，需要获取插入数据库数据的主键。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>如：添加套餐数据时，还需要维护套餐菜品关系表数据。</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221211150353385.png" alt="image-20221211150353385"></p><p>业务场景：在前面讲解到的苍穹外卖菜品与套餐模块的表结构，菜品与套餐是多对多的关系，一个套餐对应多个菜品。既然是多对多的关系，是不是有一张套餐菜品中间表来维护它们之间的关系。</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212093655389.png" alt="image-20221212093655389"></p><p>在添加套餐的时候，我们需要在界面当中来录入套餐的基本信息，还需要来录入套餐与菜品的关联信息。这些信息录入完毕之后，我们一点保存，就需要将套餐的信息以及套餐与菜品的关联信息都需要保存到数据库当中。其实具体的过程包括两步，首先第一步先需要将套餐的基本信息保存了，接下来第二步再来保存套餐与菜品的关联信息。套餐与菜品的关联信息就是往中间表当中来插入数据，来维护它们之间的关系。而中间表当中有两个外键字段，一个是菜品的ID，就是当前菜品的ID，还有一个就是套餐的ID，而这个套餐的 ID 指的就是此次我所添加的套餐的ID，所以我们在第一步保存完套餐的基本信息之后，就需要将套餐的主键值返回来供第二步进行使用。这个时候就需要用到主键返回功能。</p></blockquote><p>那要如何实现在插入数据之后返回所插入行的主键值呢？</p><ul><li>默认情况下，执行插入操作时，是不会主键值返回的。如果我们想要拿到主键值，需要在Mapper接口中的方法上添加一个Options注解，并在注解中指定属性useGeneratedKeys&#x3D;true和keyProperty&#x3D;”实体类属性名”</li></ul><p>主键返回代码实现：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">EmpMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//会自动将生成的主键值，赋值给emp对象的id属性</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Options</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">useGeneratedKeys</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">true,</span><span style="color: #FFCB6B">keyProperty</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">id</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Insert</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">emp</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>测试：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootMybatisCrudApplicationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EmpMapper</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testInsert</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//创建员工对象</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> emp </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Emp</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setUsername</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">jack</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setName</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">杰克</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setImage</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.jpg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setGender</span><span style="color: #89DDFF">((</span><span style="color: #C792EA">short</span><span style="color: #89DDFF">)</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setJob</span><span style="color: #89DDFF">((</span><span style="color: #C792EA">short</span><span style="color: #89DDFF">)</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setEntrydate</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">of</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2000</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setCreateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setUpdateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setDeptId</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//调用添加方法</span></span><span class="line"><span style="color: #BABED8">        empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">insert</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getDeptId</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h3 id="5-3-更新"><a href="#5-3-更新" class="headerlink" title="5.3 更新"></a>5.3 更新</h3><p>功能：修改员工信息</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212095605863.png" alt="image-20221212095605863"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>点击”编辑”按钮后，会查询所在行记录的员工信息，并把员工信息回显在修改员工的窗体上(下个知识点学习)</p><p>在修改员工的窗体上，可以修改的员工数据：用户名、员工姓名、性别、图像、职位、入职日期、归属部门</p><p>思考：在修改员工数据时，要以什么做为条件呢？</p><p>答案：员工id</p></blockquote><p>SQL语句：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">update</span><span style="color: #BABED8"> emp </span><span style="color: #F78C6C">set</span><span style="color: #BABED8"> username </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">linghushaoxia</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">, </span><span style="color: #F78C6C">name</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">令狐少侠</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">, gender </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8"> , </span><span style="color: #F78C6C">image</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1.jpg</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> , job </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">, entrydate </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2012-01-01</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">, dept_id </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8">, update_time </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2022-10-01 12:12:12</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">where</span><span style="color: #BABED8"> id </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">18</span><span style="color: #BABED8">;</span></span></code></pre></div><p>接口方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">EmpMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #676E95; font-style: italic">    /**</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * 根据id修改员工信息</span></span><span class="line"><span style="color: #676E95; font-style: italic">     * </span><span style="color: #F78C6C; font-style: italic">@param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #BABED8; font-style: italic">emp</span></span><span class="line"><span style="color: #676E95; font-style: italic">     */</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Update</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">update emp set username=#&#123;username&#125;, name=#&#123;name&#125;, gender=#&#123;gender&#125;, image=#&#123;image&#125;, job=#&#123;job&#125;, entrydate=#&#123;entrydate&#125;, dept_id=#&#123;deptId&#125;, update_time=#&#123;updateTime&#125; where id=#&#123;id&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">update</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">emp</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>测试类：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootMybatisCrudApplicationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EmpMapper</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testUpdate</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//要修改的员工信息</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> emp </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Emp</span><span style="color: #89DDFF">();</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setId</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">23</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setUsername</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">songdaxia</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setPassword</span><span style="color: #89DDFF">(null);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setName</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">老宋</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setImage</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">2.jpg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setGender</span><span style="color: #89DDFF">((</span><span style="color: #C792EA">short</span><span style="color: #89DDFF">)</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setJob</span><span style="color: #89DDFF">((</span><span style="color: #C792EA">short</span><span style="color: #89DDFF">)</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setEntrydate</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDate</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">of</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2012</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">));</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setCreateTime</span><span style="color: #89DDFF">(null);</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setUpdateTime</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">LocalDateTime</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #89DDFF">());</span></span><span class="line"><span style="color: #BABED8">        emp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setDeptId</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">//调用方法，修改员工数据</span></span><span class="line"><span style="color: #BABED8">        empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">update</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><h3 id="5-4-查询"><a href="#5-4-查询" class="headerlink" title="5.4 查询"></a>5.4 查询</h3><p>SQL语句：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp;</span></span></code></pre></div><p>接口方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">EmpMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Select</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getById</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">id</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>测试类：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">SpringBootTest</span></span><span class="line"><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">SpringbootMybatisCrudApplicationTests</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Autowired</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">private</span><span style="color: #BABED8"> </span><span style="color: #C792EA">EmpMapper</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testGetById</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> emp </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getById</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行结果：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212103004961.png" alt="image-20221212103004961"></p><p>而在测试的过程中，我们会发现有几个字段(deptId、createTime、updateTime)是没有数据值的</p></blockquote><p>我们看到查询返回的结果中大部分字段是有值的，但是deptId，createTime，updateTime这几个字段是没有值的，而数据库中是有对应的字段值的，这是为什么呢？</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212103124490.png" alt="image-20221212103124490"></p><p>原因如下： </p><ul><li>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。</li><li>如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</li></ul><p> 解决方案：</p><ol><li>起别名</li><li>结果映射</li><li>开启驼峰命名</li></ol><p><strong>起别名</strong>：在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Select</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">select id, username, password, name, gender, image, job, entrydate, </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">dept_id AS deptId, create_time AS createTime, update_time AS updateTime </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">from emp </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">where id=#&#123;id&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getById</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> id</span><span style="color: #89DDFF">);</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>再次执行测试类：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212111027396.png" alt="image-20221212111027396"></p></blockquote><p><strong>手动结果映射</strong>：通过 @Results及@Result 进行手动结果映射</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Results</span><span style="color: #89DDFF">(&#123;@</span><span style="color: #C792EA">Result</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">column</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">dept_id</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">property</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">deptId</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">),</span></span><span class="line"><span style="color: #BABED8">          </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Result</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">column</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">create_time</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">property</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">createTime</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">),</span></span><span class="line"><span style="color: #BABED8">          </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Result</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">column</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">update_time</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">property</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">updateTime</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)&#125;)</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Select</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">getById</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Integer</span><span style="color: #BABED8"> id</span><span style="color: #89DDFF">);</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>@Results源代码：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Documented</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Retention</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">RetentionPolicy</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">RUNTIME</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Target</span><span style="color: #89DDFF">(&#123;</span><span style="color: #BABED8">ElementType</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">METHOD</span><span style="color: #89DDFF">&#125;)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Results</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">id</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">Result</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">value</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;&#125;;</span><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic">//Result类型的数组</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>@Result源代码：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Documented</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Retention</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">RetentionPolicy</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">RUNTIME</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Target</span><span style="color: #89DDFF">(&#123;</span><span style="color: #BABED8">ElementType</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">METHOD</span><span style="color: #89DDFF">&#125;)</span></span><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Repeatable</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">Results</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Result</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #C792EA">boolean</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">id</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">false;</span><span style="color: #676E95; font-style: italic">//表示当前列是否为主键（true:是主键）</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">column</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">//指定表中字段名</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">property</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">//指定类中属性名</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">Class</span><span style="color: #89DDFF">&lt;</span><span style="color: #89DDFF; font-style: italic">?</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">javaType</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> void</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">JdbcType</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">jdbcType</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> JdbcType</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">UNDEFINED</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">Class</span><span style="color: #89DDFF">&lt;</span><span style="color: #89DDFF; font-style: italic">?</span><span style="color: #BABED8"> extends TypeHandler</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">typeHandler</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> UnknownTypeHandler</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">class</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">One</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">one</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">One</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #C792EA">Many</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">many</span><span style="color: #89DDFF">()</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Many</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div></blockquote><p>**开启驼峰命名(推荐)**：如果字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射</p><blockquote><p>驼峰命名规则：   abc_xyz    &#x3D;&gt;   abcXyz</p><ul><li>表中字段名：abc_xyz</li><li>类中属性名：abcXyz</li></ul></blockquote><div class="language-properties"><button title="Copy code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 在application.properties中添加：</span></span><span class="line"><span style="color: #F07178">mybatis.configuration.map-underscore-to-camel-case</span><span style="color: #89DDFF">=</span><span style="color: #BABED8">true</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>要使用驼峰命名前提是 实体类的属性 与 数据库表中的字段名严格遵守驼峰命名。</p></blockquote><p><strong>条件查询</strong></p><p>SQL语句：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">select</span><span style="color: #BABED8"> id, username, </span><span style="color: #F78C6C">password</span><span style="color: #BABED8">, </span><span style="color: #F78C6C">name</span><span style="color: #BABED8">, gender, </span><span style="color: #F78C6C">image</span><span style="color: #BABED8">, job, entrydate, dept_id, create_time, update_time </span></span><span class="line"><span style="color: #F78C6C">from</span><span style="color: #BABED8"> emp </span></span><span class="line"><span style="color: #F78C6C">where</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">name</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">like</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">%张%</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F78C6C">and</span><span style="color: #BABED8"> gender </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">      </span><span style="color: #F78C6C">and</span><span style="color: #BABED8"> entrydate </span><span style="color: #F78C6C">between</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2010-01-01</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">and</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2020-01-01 </span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #F78C6C">order by</span><span style="color: #BABED8"> update_time </span><span style="color: #F78C6C">desc</span><span style="color: #BABED8">;</span></span></code></pre></div><p>接口方法：</p><ul><li>方式一</li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">EmpMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Select</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">select * from emp </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">where name like &#39;%$&#123;name&#125;%&#39; </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">and gender = #&#123;gender&#125; </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">and entrydate between #&#123;begin&#125; and #&#123;end&#125; </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">order by update_time desc</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Emp</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">name</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Short</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">gender</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LocalDate</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">begin</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LocalDate</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">end</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212115149151.png" alt="image-20221212115149151"></p><p>以上方式注意事项：</p><ol><li><p>方法中的形参名和SQL语句中的参数占位符名保持一致</p></li><li><p>模糊查询使用${…}进行字符串拼接，这种方式呢，由于是字符串拼接，并不是预编译的形式，所以效率不高、且存在sql注入风险。</p></li></ol></blockquote><ul><li>方式二（解决SQL注入风险）<ul><li>使用MySQL提供的字符串拼接函数：concat(‘%’ , ‘关键字’ , ‘%’)</li></ul></li></ul><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">EmpMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">@</span><span style="color: #C792EA">Select</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">select * from emp </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">where name like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;) </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">and gender = #&#123;gender&#125; </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">and entrydate between #&#123;begin&#125; and #&#123;end&#125; </span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">+</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">order by update_time desc</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">)</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Emp</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">name</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">Short</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">gender</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LocalDate</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">begin</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">LocalDate</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">end</span><span style="color: #89DDFF">);</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&#125;</span></span><span class="line"></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行结果：生成的SQL都是预编译的SQL语句（性能高、安全）</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212120006242.png" alt="image-20221212120006242"></p></blockquote><p><strong>参数名说明</strong></p><p>在上面我们所编写的条件查询功能中，我们需要保证接口中方法的形参名和SQL语句中的参数占位符名相同。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当方法中的形参名和SQL语句中的占位符参数名不相同时，就会出现以下问题：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212150611796.png" alt="image-20221212150611796"></p></blockquote><p>参数名在不同的SpringBoot版本中，处理方案还不同：</p><ul><li>在springBoot的2.x版本（保证参数名一致）</li></ul><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212151156273.png" alt="image-20221212151156273"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>springBoot的父工程对compiler编译插件进行了默认的参数parameters配置，使得在编译时，会在生成的字节码文件中保留原方法形参的名称，所以#{…}里面可以直接通过形参名获取对应的值</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212151411154.png" alt="image-20221212151411154"></p></blockquote><ul><li>在springBoot的1.x版本&#x2F;单独使用mybatis（使用@Param注解来指定SQL语句中的参数名）</li></ul><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212151628715.png" alt="image-20221212151628715"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在编译时，生成的字节码文件当中，不会保留Mapper接口中方法的形参名称，而是使用var1、var2、…这样的形参名字，此时要获取参数值时，就要通过@Param注解来指定SQL语句中的参数名</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212151736274.png" alt="image-20221212151736274"></p></blockquote><h2 id="6-Mybatis的XML配置文件"><a href="#6-Mybatis的XML配置文件" class="headerlink" title="6.Mybatis的XML配置文件"></a>6.Mybatis的XML配置文件</h2><p>Mybatis的开发有两种方式：</p><ol><li>注解</li><li>XML</li></ol><h3 id="6-1-XML配置文件规范"><a href="#6-1-XML配置文件规范" class="headerlink" title="6.1 XML配置文件规范"></a>6.1 XML配置文件规范</h3><p>使用Mybatis的注解方式，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句，也就是将SQL语句写在XML配置文件中。</p><p>在Mybatis中使用XML映射文件方式开发，需要符合一定的规范：</p><ol><li><p>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）</p></li><li><p>XML映射文件的namespace属性为Mapper接口全限定名一致</p></li><li><p>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。</p></li></ol><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212153529732.png" alt="image-20221212153529732"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>&lt;select&gt;标签：就是用于编写select查询语句的。</p><ul><li>resultType属性，指的是查询返回的单条记录所封装的类型。</li></ul></blockquote><h3 id="6-2-XML配置文件实现"><a href="#6-2-XML配置文件实现" class="headerlink" title="6.2 XML配置文件实现"></a>6.2 XML配置文件实现</h3><p>第1步：创建XML映射文件</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212154908306.png" alt="image-20221212154908306"></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212155304635.png" alt="image-20221212155304635"></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212155544404.png" alt="image-20221212155544404"></p><p>第2步：编写XML映射文件</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>xml映射文件中的dtd约束，直接从mybatis官网复制即可</p></blockquote><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;?</span><span style="color: #F07178">xml</span><span style="color: #C792EA"> version</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA"> encoding</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">UTF-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> ?&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;!</span><span style="color: #F78C6C">DOCTYPE</span><span style="color: #89DDFF"> </span><span style="color: #BABED8">mapper</span></span><span class="line"><span style="color: #89DDFF">  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="line"><span style="color: #89DDFF">  &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">mapper</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">namespace</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">mapper</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>配置：XML映射文件的namespace属性为Mapper接口全限定名</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212160316644.png" alt="image-20221212160316644"></p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;?</span><span style="color: #F07178">xml</span><span style="color: #C792EA"> version</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA"> encoding</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">UTF-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> ?&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;!</span><span style="color: #F78C6C">DOCTYPE</span><span style="color: #89DDFF"> </span><span style="color: #BABED8">mapper</span></span><span class="line"><span style="color: #89DDFF">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="line"><span style="color: #89DDFF">        &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">mapper</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">namespace</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima.mapper.EmpMapper</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">mapper</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>配置：XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212163528787.png" alt="image-20221212163528787"></p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;?</span><span style="color: #F07178">xml</span><span style="color: #C792EA"> version</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA"> encoding</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">UTF-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> ?&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;!</span><span style="color: #F78C6C">DOCTYPE</span><span style="color: #89DDFF"> </span><span style="color: #BABED8">mapper</span></span><span class="line"><span style="color: #89DDFF">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="line"><span style="color: #89DDFF">        &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">mapper</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">namespace</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima.mapper.EmpMapper</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">&lt;!--查询操作--&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">select</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">id</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">list</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">resultType</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima.pojo.Emp</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        select * from emp</span></span><span class="line"><span style="color: #BABED8">        where name like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</span></span><span class="line"><span style="color: #BABED8">              and gender = #&#123;gender&#125;</span></span><span class="line"><span style="color: #BABED8">              and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span></span><span class="line"><span style="color: #BABED8">        order by update_time desc</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">select</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">mapper</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>运行测试类，执行结果：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221212163719534.png" alt="image-20221212163719534"></p></blockquote><h3 id="6-3-MybatisX的使用"><a href="#6-3-MybatisX的使用" class="headerlink" title="6.3 MybatisX的使用"></a>6.3 MybatisX的使用</h3><p>MybatisX是一款基于IDEA的快速开发Mybatis的插件，为效率而生。</p><p>MybatisX的安装：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213120923252.png" alt="image-20221213120923252"></p><p>可以通过MybatisX快速定位：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213121521406.png" alt="image-20221213121521406"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>MybatisX的使用在后续学习中会继续分享</p></blockquote><p>学习了Mybatis中XML配置文件的开发方式了，大家可能会存在一个疑问：到底是使用注解方式开发还是使用XML方式开发？</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>官方说明：<a href="https://mybatis.net.cn/getting-started.html">https://mybatis.net.cn/getting-started.html</a></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901173948645.png" alt="image-20220901173948645"> </p></blockquote><p><strong>结论：</strong>使用Mybatis的注解，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句。</p><h2 id="7-Mybatis动态SQL"><a href="#7-Mybatis动态SQL" class="headerlink" title="7.Mybatis动态SQL"></a>7.Mybatis动态SQL</h2><h3 id="7-1-什么的动态SQL"><a href="#7-1-什么的动态SQL" class="headerlink" title="7.1 什么的动态SQL"></a>7.1 什么的动态SQL</h3><p>在页面原型中，列表上方的条件是动态的，是可以不传递的，也可以只传递其中的1个或者2个或者全部。</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901172933012.png"></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901173203491.png" alt="image-20220901173203491"></p><p>而在我们刚才编写的SQL语句中，我们会看到，我们将三个条件直接写死了。 如果页面只传递了参数姓名name 字段，其他两个字段 性别 和 入职时间没有传递，那么这两个参数的值就是null。</p><p>此时，执行的SQL语句为：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901173431554.png" alt="image-20220901173431554"> </p><p>这个查询结果是不正确的。正确的做法应该是：传递了参数，再组装这个查询条件；如果没有传递参数，就不应该组装这个查询条件。</p><p>比如：如果姓名输入了”张”, 对应的SQL为:</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">select</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">from</span><span style="color: #BABED8"> emp </span><span style="color: #F78C6C">where</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">name</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">like</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">%张%</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">order by</span><span style="color: #BABED8"> update_time </span><span style="color: #F78C6C">desc</span><span style="color: #BABED8">;</span></span></code></pre></div><p>如果姓名输入了”张”,，性别选择了”男”，则对应的SQL为:</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">select</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">from</span><span style="color: #BABED8"> emp </span><span style="color: #F78C6C">where</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">name</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">like</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">%张%</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">and</span><span style="color: #BABED8"> gender </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">order by</span><span style="color: #BABED8"> update_time </span><span style="color: #F78C6C">desc</span><span style="color: #BABED8">;</span></span></code></pre></div><p>SQL语句会随着用户的输入或外部条件的变化而变化，我们称为：<strong>动态SQL</strong>。</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213122623278.png" alt="image-20221213122623278"></p><p>在Mybatis中提供了很多实现动态SQL的标签，我们学习Mybatis中的动态SQL就是掌握这些动态SQL标签。</p><h3 id="7-2-动态SQL-if"><a href="#7-2-动态SQL-if" class="headerlink" title="7.2 动态SQL-if"></a>7.2 动态SQL-if</h3><p><code>&lt;if&gt;</code>：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL。</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">条件表达式</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">   要拼接的sql语句</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>接下来，我们就通过<code>&lt;if&gt;</code>标签来改造之前条件查询的案例。</p><p>示例：把SQL语句改造为动态SQL方式</p><ul><li>原有的SQL语句</li></ul><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">select</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">id</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">list</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">resultType</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima.pojo.Emp</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        select * from emp</span></span><span class="line"><span style="color: #BABED8">        where name like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</span></span><span class="line"><span style="color: #BABED8">              and gender = #&#123;gender&#125;</span></span><span class="line"><span style="color: #BABED8">              and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span></span><span class="line"><span style="color: #BABED8">        order by update_time desc</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">select</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><ul><li>动态SQL语句</li></ul><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">select</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">id</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">list</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">resultType</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima.pojo.Emp</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        select * from emp</span></span><span class="line"><span style="color: #BABED8">        where</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                 name like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">gender != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                 and gender = #&#123;gender&#125;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">begin != null and end != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span></span><span class="line"><span style="color: #BABED8">        order by update_time desc</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">select</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>测试方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testList</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//性别数据为null、开始时间和结束时间也为null</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Emp</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> list </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">张</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> emp </span><span style="color: #89DDFF; font-style: italic">:</span><span style="color: #BABED8"> list</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行的SQL语句： </p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213140353285.png" alt="image-20221213140353285"></p></blockquote><p>下面呢，我们修改测试方法中的代码，再次进行测试，观察执行情况：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testList</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//姓名为null</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Emp</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> list </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">(null,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">short</span><span style="color: #89DDFF">)</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> emp </span><span style="color: #89DDFF; font-style: italic">:</span><span style="color: #BABED8"> list</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>执行结果：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213141139015.png" alt="image-20221213141139015"> </p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213141253355.png" alt="image-20221213141253355"> </p><p>再次修改测试方法中的代码，再次进行测试：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testList</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//传递的数据全部为null</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Emp</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> list </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">(null,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> emp </span><span style="color: #89DDFF; font-style: italic">:</span><span style="color: #BABED8"> list</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>执行的SQL语句：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213143854434.png" alt="image-20221213143854434"></p><p>以上问题的解决方案：使用<code>&lt;where&gt;</code>标签代替SQL语句中的where关键字</p><ul><li><code>&lt;where&gt;</code>只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</li></ul><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">select</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">id</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">list</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">resultType</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima.pojo.Emp</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        select * from emp</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">where</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #676E95; font-style: italic">&lt;!-- if做为where标签的子元素 --&gt;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                 and name like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">gender != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                 and gender = #&#123;gender&#125;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">begin != null and end != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span></span><span class="line"><span style="color: #BABED8">             </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">where</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        order by update_time desc</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">select</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>测试方法：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Test</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">testList</span><span style="color: #89DDFF">()&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//只有性别</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Emp</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> list </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> empMapper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">list</span><span style="color: #89DDFF">(null,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">short</span><span style="color: #89DDFF">)</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null,</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">null);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">Emp</span><span style="color: #BABED8"> emp </span><span style="color: #89DDFF; font-style: italic">:</span><span style="color: #BABED8"> list</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">emp</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行的SQL语句：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213141909455.png" alt="image-20221213141909455"></p></blockquote><ul><li><p><code>&lt;if&gt;</code></p><ul><li><p>用于判断条件是否成立，如果条件为true，则拼接SQL</p></li><li><p>形式：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> … </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div></li></ul></li><li><p><code>&lt;where&gt;</code></p><ul><li>where元素只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</li></ul></li><li><p><code>&lt;set&gt;</code></p><ul><li>动态地在行首插入 SET 关键字，并会删掉额外的逗号。（用在update语句中）</li></ul></li></ul><h3 id="7-3-动态SQL-foreach"><a href="#7-3-动态SQL-foreach" class="headerlink" title="7.3 动态SQL-foreach"></a>7.3 动态SQL-foreach</h3><p>案例：员工删除功能（既支持删除单条记录，又支持批量删除）</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901181751004.png" alt="image-20220901181751004"> </p><p>SQL语句：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">delete from emp where id in (1,2,3);</span></span></code></pre></div><p>Mapper接口：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">@</span><span style="color: #C792EA">Mapper</span></span><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">interface</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">EmpMapper</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//批量删除</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">deleteByIds</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">List</span><span style="color: #89DDFF">&lt;</span><span style="color: #C792EA">Integer</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">ids</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>XML映射文件：</p><ul><li>使用<code>&lt;foreach&gt;</code>遍历deleteByIds方法中传递的参数ids集合</li></ul><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">foreach</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">collection</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">集合名称</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">item</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">集合遍历出来的元素/项</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">separator</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">每一次遍历使用的分隔符</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span></span><span class="line"><span style="color: #89DDFF">         </span><span style="color: #C792EA">open</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">遍历开始前拼接的片段</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">close</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">遍历结束后拼接的片段</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">foreach</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;?</span><span style="color: #F07178">xml</span><span style="color: #C792EA"> version</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">1.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA"> encoding</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">UTF-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> ?&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;!</span><span style="color: #F78C6C">DOCTYPE</span><span style="color: #89DDFF"> </span><span style="color: #BABED8">mapper</span></span><span class="line"><span style="color: #89DDFF">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="line"><span style="color: #89DDFF">        &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">mapper</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">namespace</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima.mapper.EmpMapper</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">&lt;!--删除操作--&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">delete</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">id</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">deleteByIds</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        delete from emp where id in</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">foreach</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">collection</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">ids</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">item</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">id</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">separator</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">,</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">open</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">close</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">)</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            #&#123;id&#125;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">foreach</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">delete</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">mapper</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213165710141.png" alt="image-20221213165710141"></p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>执行的SQL语句：</p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213164957636.png" alt="image-20221213164957636"></p></blockquote><h3 id="7-4-动态SQL-sql-include"><a href="#7-4-动态SQL-sql-include" class="headerlink" title="7.4 动态SQL-sql&amp;include"></a>7.4 动态SQL-sql&amp;include</h3><p>问题分析：</p><ul><li>在xml映射文件中配置的SQL，有时可能会存在很多重复的片段，此时就会存在很多冗余的代码</li></ul><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901182204358.png"></p><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20220901182249421.png"></p><p>我们可以对重复的代码片段进行抽取，将其通过<code>&lt;sql&gt;</code>标签封装到一个SQL片段，然后再通过<code>&lt;include&gt;</code>标签进行引用。</p><ul><li><p><code>&lt;sql&gt;</code>：定义可重用的SQL片段</p></li><li><p><code>&lt;include&gt;</code>：通过属性refid，指定包含的SQL片段</p></li></ul><p><img src="/oranfish.github.io/posts/0/Mybatis%E5%AD%A6%E4%B9%A0/image-20221213171244796.png" alt="image-20221213171244796"></p><p>SQL片段： 抽取重复的代码</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">sql</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">id</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">commonSelect</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">     select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">sql</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>然后通过<code>&lt;include&gt;</code> 标签在原来抽取的地方进行引用。操作如下：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">select</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">id</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">list</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">resultType</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">com.itheima.pojo.Emp</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">include</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">refid</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">commonSelect</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">/&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">where</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">name != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            name like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">gender != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            and gender = #&#123;gender&#125;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">if</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">test</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">begin != null and end != null</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">if</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">where</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    order by update_time desc</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">select</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL知识点总结</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在我们讲解SpringBootWeb基础知识(请求响应案例)的时候，我们讲到在web开发中，为了应用程序职责单一，方便维护，我们一般将web应用程序分为三层，即：Controller、Service、Dao 。</p><p>之前我们的案例中，是这样子的请求流程：浏览器发起请求，先请求Controller；Controller接收到请求之后，调用Service进行业务逻辑处理；Service再调用Dao，Dao再解析user.xml中所存储的数据。</p><p>xml文件中可以存储数据，但是在企业项目开发中不会使用xml文件存储数据，因为不便管理维护，操作难度大。 在真实的企业开发中呢，都会采用数据库来存储和管理数据，那此时，web开发调用流程图如下所示：</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205001346266.png" alt="image-20221205001346266"></p><h2 id="2-初识MySQL"><a href="#2-初识MySQL" class="headerlink" title="2.初识MySQL"></a>2.初识MySQL</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>首先来了解一下什么是数据库。</p><ul><li>数据库：英文为 DataBase，简称DB，它是存储和管理数据的仓库。</li></ul><p>数据是存储在数据库中的，那我们要如何来操作数据库以及数据库中所存放的数据呢？</p><p>那这里呢，会涉及到一个软件：数据库管理系统（<strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem，简称DBMS）</p><ul><li>DBMS是操作和管理数据库的大型软件。将来我们只需要操作这个软件，就可以通过这个软件来操纵和管理数据库了。</li></ul><p>此时又出现一个问题：DBMS这个软件怎么知道要操作的是哪个数据库、哪个数据呢？是对数据做修改还是查询呢？</p><ul><li>需要给DBMS软件发送一条指令，告诉这个软件我们要执行的是什么样的操作，要对哪个数据进行操作。而这个指令就是SQL语句</li></ul><p>SQL（<strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage，简称SQL）：结构化查询语言，它是操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准。我们学习数据库开发，最为重要的就是学习SQL语句 。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>关系型数据库：我们后面会详细讲解，现在大家只需要知道我们学习的数据库属于关系型数据库即可。</p></blockquote><p>结论：程序员给数据库管理系统(DBMS)发送SQL语句，再由数据库管理系统操作数据库当中的数据。</p><p>了解了数据库的一些简单概念之后，接下来我们再来介绍下目前主流的数据库，这里截取了排名前十的数据库：</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205120408757.png" alt="image-20221205120408757"> </p><ul><li>Oracle：大型的收费数据库，Oracle公司产品，价格昂贵。（通常是不差钱的公司会选择使用这个数据库）</li><li>MySQL：开源免费的中小型数据库，后来Sun公司收购了MySQL，而Oracle又收购了Sun公司。目前Oracle推出两个版本的Mysql：社区版(开源免费)、商业版(收费)。</li><li>SQL Server：Microsoft 公司推出的收费的中型数据库，C#、.net等语言常用。</li><li>PostgreSQL：开源免费的中小型数据库。</li><li>DB2：IBM公司的大型收费数据库产品。</li><li>SQLLite：嵌入式的微型数据库。Android内置的数据库采用的就是该数据库。</li><li>MariaDB：开源免费的中小型数据库。是MySQL数据库的另外一个分支、另外一个衍生产品，与MySQL数据库有很好的兼容性。</li></ul><h3 id="2-2-MySQL入门"><a href="#2-2-MySQL入门" class="headerlink" title="2.2 MySQL入门"></a>2.2 MySQL入门</h3><p>MySQL官方提供了两个版本：</p><ul><li><p>商业版本（MySQL Enterprise Edition）</p><ul><li>该版本是收费的，我们可以使用30天。 官方会提供对应的技术支持。</li></ul></li><li><p>社区版本（MySQL Community Server）</p><ul><li>该版本是免费的，但是MySQL不会提供任何的技术支持。</li></ul></li></ul><p>官网下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205140643412.png" alt="image-20221205140643412"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>安装MySQL具体的步骤，参考资料中提供的 《MySQL安装文档》 ，进行软件的安装即可。</p></blockquote><p>MySQL服务器启动完毕后，然后再使用如下指令，来连接MySQL服务器：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">mysql -u用户名 -p密码 [-h数据库服务器的IP地址 -P端口号]</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>-h  参数不加，默认连接的是本地 127.0.0.1 的MySQL服务器</p><p>-P  参数不加，默认连接的端口号是 3306</p></blockquote><p><strong>上述指令，可以有两种形式：</strong></p><ul><li>密码直接在-p参数之后直接指定 （这种方式不安全，密码直接以明文形式出现在命令行）</li></ul><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205143139656.png" alt="image-20221205143139656"></p><ul><li>密码在-p回车之后，在命令行中输入密码，然后回车</li></ul><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205143418632.png" alt="image-20221205143418632"> </p><p>在真实的企业开发中，MySQL数据库服务器是不会在我们本地安装的，是在公司的服务器上安装的，而服务器还需要放置在专门的IDC机房中的，IDC机房呢，就需要保证恒温、恒湿、恒压，而且还要保证网络、电源的可靠性(备用电源及网络)。</p><p>我们在学习阶段，如果想提前体验一下企业中数据库的使用方式，可以借助于VMware虚拟机来实现。我们可以在我们的电脑上安装一个VMware，然后在Vmware虚拟机上在安装一个服务器操作系统Linux，然后再在Linux服务器上安装各种企业级软件。</p><h3 id="2-3-数据模型"><a href="#2-3-数据模型" class="headerlink" title="2.3 数据模型"></a>2.3 数据模型</h3><p><strong>关系型数据库（RDBMS）</strong></p><p>概念：建立在关系模型基础上，由多张相互连接的<strong>二维表</strong>组成的数据库。</p><p>二维表的优点：</p><ul><li><p>使用表存储数据，格式统一，便于维护</p></li><li><p>使用SQL语言操作，标准统一，使用方便，可用于复杂查询</p></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我们之前提到的MySQL、Oracle、DB2、SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。</p><p>结论：基于二维表存储数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库（比如大家后面要学习的Redis，就属于非关系型数据库）。</p></blockquote><p><strong>数据模型</strong></p><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下:</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20220829111741419-17072873537241.png" alt="image-20220829111741419"></p><ul><li>通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库</li><li>使用MySQL客户端，向数据库管理系统发送一条SQL语句，由数据库管理系统根据SQL语句指令去操作数据库中的表结构及数据</li><li>一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包含多行记录。</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在Mysql数据库服务器当中存储数据，你需要：</p><ol><li>先去创建数据库（可以创建多个数据库，之间是相互独立的）</li><li>在数据库下再去创建数据表（一个数据库下可以创建多张表）</li><li>再将数据存放在数据表中（一张表可以存储多行数据）</li></ol></blockquote><h3 id="2-4-SQL简介"><a href="#2-4-SQL简介" class="headerlink" title="2.4 SQL简介"></a>2.4 SQL简介</h3><p>SQL：结构化查询语言。一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。</p><h4 id="2-4-1-SQL通用语法"><a href="#2-4-1-SQL通用语法" class="headerlink" title="2.4.1 SQL通用语法"></a>2.4.1 SQL通用语法</h4><p>1、SQL语句可以单行或多行书写，以分号结尾。</p><p>2、SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</p><p>3、MySQL数据库的SQL语句不区分大小写。</p><p>4、注释：</p><ul><li>单行注释：– 注释内容   或   # 注释内容(MySQL特有)</li><li>多行注释： &#x2F;* 注释内容 *&#x2F;</li></ul><h4 id="2-4-2-分类"><a href="#2-4-2-分类" class="headerlink" title="2.4.2 分类"></a>2.4.2 分类</h4><p>SQL语句根据其功能被分为四大类：DDL、DML、DQL、DCL </p><table><thead><tr><th><strong>分类</strong></th><th><strong>全称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition  Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation  Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control  Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20240207143207850.png" alt="image-20240207143207850"></p><h2 id="3-数据库设计-DDL"><a href="#3-数据库设计-DDL" class="headerlink" title="3.数据库设计-DDL"></a>3.数据库设计-DDL</h2><h3 id="3-1-项目开发流程"><a href="#3-1-项目开发流程" class="headerlink" title="3.1  项目开发流程"></a>3.1  项目开发流程</h3><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20220829112953742.png" alt="image-20220829112953742"></p><p>需求文档：</p><ul><li>在我们开发一个项目或者项目当中的某个模块之前，会先会拿到产品经理给我们提供的页面原型及需求文档。</li></ul><p>设计：</p><ul><li>拿到产品原型和需求文档之后，我们首先要做的不是编码，而是要先进行项目的设计，其中就包括概要设计、详细设计、接口设计、数据库设计等等。</li><li>数据库设计根据产品原型以及需求文档，要分析各个模块涉及到的表结构以及表结构之间的关系，以及表结构的详细信息。最终我们需要将数据库以及数据库当中的表结构设计创建出来。</li></ul><p>开发&#x2F;测试：</p><ul><li>参照页面原型和需求进行编码，实现业务功能。在这个过程当中，我们就需要来操作设计出来的数据库表结构，来完成业务的增删改查操作等。</li></ul><p>部署上线：</p><ul><li>在项目的功能开发测试完成之后，项目就可以上线运行了，后期如果项目遇到性能瓶颈，还需要对项目进行优化。优化很重要的一个部分就是数据库的优化，包括数据库当中索引的建立、SQL 的优化、分库分表等操作。</li></ul><p>在上述的流程当中，针对于数据库来说，主要包括三个阶段：</p><ol><li>数据库设计阶段<ul><li>参照页面原型以及需求文档设计数据库表结构</li></ul></li><li>数据库操作阶段<ul><li>根据业务功能的实现，编写SQL语句对数据表中的数据进行增删改查操作</li></ul></li><li>数据库优化阶段<ul><li>通过数据库的优化来提高数据库的访问性能。优化手段：索引、SQL优化、分库分表等</li></ul></li></ol><h3 id="3-2-数据库操作"><a href="#3-2-数据库操作" class="headerlink" title="3.2 数据库操作"></a>3.2 数据库操作</h3><p>我们在进行数据库设计，需要使用到刚才所介绍SQL分类中的DDL语句。</p><p>DDL英文全称是Data Definition Language(数据定义语言)，用来定义数据库对象(数据库、表)。</p><p>DDL中数据库的常见操作：查询、创建、使用、删除。</p><h4 id="3-2-1-查询数据库"><a href="#3-2-1-查询数据库" class="headerlink" title="3.2.1 查询数据库"></a>3.2.1 查询数据库</h4><p><strong>查询所有数据库：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">show databases;</span></span></code></pre></div><p><strong>查询当前数据库：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select database();</span></span></code></pre></div><p>命令行中执行效果如果：</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205174615074.png" alt="image-20221205174615074"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我们要操作某一个数据库，必须要切换到对应的数据库中。 </p><p>通过指令：select  database() ，就可以查询到当前所处的数据库 </p></blockquote><h4 id="3-2-2-创建数据库"><a href="#3-2-2-创建数据库" class="headerlink" title="3.2.2 创建数据库"></a>3.2.2 创建数据库</h4><p><strong>语法：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">create database [ if not exists ] 数据库名;</span></span></code></pre></div><p>&#x3D;&#x3D;注意：在同一个数据库服务器中，不能创建两个名称相同的数据库，否则将会报错。&#x3D;&#x3D;</p><ul><li>可以使用if not exists来避免这个问题</li></ul><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">-- 数据库不存在,则创建该数据库；如果存在则不创建</span></span><span class="line"><span style="color: #F78C6C">create</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">database</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">if</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">not</span><span style="color: #BABED8"> extists itcast; </span></span></code></pre></div><h4 id="3-2-3-使用数据库"><a href="#3-2-3-使用数据库" class="headerlink" title="3.2.3 使用数据库"></a>3.2.3 使用数据库</h4><p><strong>语法：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">use 数据库名 ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则不能操作。</p></blockquote><h4 id="3-2-4-删除数据库"><a href="#3-2-4-删除数据库" class="headerlink" title="3.2.4 删除数据库"></a>3.2.4 删除数据库</h4><p><strong>语法：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">drop database [ if exists ] 数据库名 ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>如果删除一个不存在的数据库，将会报错。</p><p>可以加上参数 if exists ，如果数据库存在，再执行删除，否则不执行删除。</p></blockquote><p>说明：上述语法中的database，也可以替换成 schema</p><ul><li>如：create schema db01;</li><li>如：show schemas;</li></ul><h3 id="3-3-图形化工具"><a href="#3-3-图形化工具" class="headerlink" title="3.3 图形化工具"></a>3.3 图形化工具</h3><h4 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h4><p>在项目开发当中，通常为了提高开发效率，都会借助于现成的图形化管理工具来操作数据库。</p><p>目前MySQL主流的图形化界面工具有以下几种：</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205184802646.png" alt="image-20221205184802646"></p><p>DataGrip是JetBrains旗下的一款数据库管理工具，是管理和开发MySQL、Oracle、PostgreSQL的理想解决方案。</p><p>官网： <a href="https://www.jetbrains.com/zh-cn/datagrip/">https://www.jetbrains.com/zh-cn/datagrip/</a></p><h4 id="3-3-2-安装"><a href="#3-3-2-安装" class="headerlink" title="3.3.2 安装"></a>3.3.2 安装</h4><p>安装： 参考资料中提供的《DataGrip安装手册》</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>说明：DataGrip这款工具可以不用安装，因为Jetbrains公司已经将DataGrip这款工具的功能已经集成到了 IDEA当中，所以我们就可以使用IDEA来作为一款图形化界面工具来操作Mysql数据库。</p></blockquote><h4 id="3-3-3-使用"><a href="#3-3-3-使用" class="headerlink" title="3.3.3 使用"></a>3.3.3 使用</h4><p><strong>连接数据库</strong></p><p>1、打开IDEA自带的Database</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205190929756.png" alt="image-20221205190929756"></p><p>2、配置MySQL</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205191143072.png" alt="image-20221205191143072"></p><p>3、输入相关信息</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205192606038.png" alt="image-20221205192606038"> </p><p>4、下载MySQL连接驱动</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205192847190.png" alt="image-20221205192847190"></p><p>5、测试数据库连接</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205193304124.png" alt="image-20221205193304124"></p><p>6、保存配置</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205193409856.png" alt="image-20221205193409856"></p><p><strong>创建数据库：</strong></p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205195346655.png" alt="image-20221205195346655"></p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205195510716.png" alt="image-20221205195510716"></p><p><strong>查看所有数据库：</strong></p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205195128343.png" alt="image-20221205195128343"></p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205195833439.png" alt="image-20221205195833439"></p><h3 id="3-4-表操作"><a href="#3-4-表操作" class="headerlink" title="3.4 表操作"></a>3.4 表操作</h3><p>关于表结构的操作也是包含四个部分：创建表、查询表、修改表、删除表。</p><h4 id="3-4-1-创建"><a href="#3-4-1-创建" class="headerlink" title="3.4.1 创建"></a>3.4.1 创建</h4><h5 id="3-4-1-1-语法"><a href="#3-4-1-1-语法" class="headerlink" title="3.4.1.1 语法"></a>3.4.1.1 语法</h5><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">create table  表名(</span></span><span class="line"><span style="color: #babed8">    字段1  字段1类型 [约束]  [comment  字段1注释 ],</span></span><span class="line"><span style="color: #babed8">    字段2  字段2类型 [约束]  [comment  字段2注释 ],</span></span><span class="line"><span style="color: #babed8">    ......</span></span><span class="line"><span style="color: #babed8">    字段n  字段n类型 [约束]  [comment  字段n注释 ] </span></span><span class="line"><span style="color: #babed8">) [ comment  表注释 ] ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意： [ ] 中的内容为可选参数； 最后一个字段后面没有逗号</p></blockquote><ul><li>建表语句：</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">create table tb_user (</span></span><span class="line"><span style="color: #babed8">    id int comment &#39;ID,唯一标识&#39;,   # id是一行数据的唯一标识（不能重复）</span></span><span class="line"><span style="color: #babed8">    username varchar(20) comment &#39;用户名&#39;,</span></span><span class="line"><span style="color: #babed8">    name varchar(10) comment &#39;姓名&#39;,</span></span><span class="line"><span style="color: #babed8">    age int comment &#39;年龄&#39;,</span></span><span class="line"><span style="color: #babed8">    gender char(1) comment &#39;性别&#39;</span></span><span class="line"><span style="color: #babed8">) comment &#39;用户表&#39;;</span></span></code></pre></div><ul><li>其实我们现在创建表结构的时候， id这个字段我们只加了一个备注信息说明它是一个唯一标识，但是在数据库层面呢，并没有去限制字段存储的数据。所以id这个字段没有起到唯一标识的作用。</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>想要限制字段所存储的数据，就需要用到数据库中的约束。</p></blockquote><h5 id="3-4-1-2-约束"><a href="#3-4-1-2-约束" class="headerlink" title="3.4.1.2 约束"></a>3.4.1.2 约束</h5><p>概念：所谓约束就是作用在表中字段上的规则，用于限制存储在表中的数据。</p><p>作用：就是来保证数据库当中数据的正确性、有效性和完整性。（后面的学习会验证这些）</p><p>在MySQL数据库当中，提供了以下5种约束：</p><table><thead><tr><th><strong>约束</strong></th><th><strong>描述</strong></th><th><strong>关键字</strong></th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段值，则采用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p></blockquote><p>id字段下存储的值，如果由我们自己来维护会比较麻烦(必须保证值的唯一性)。MySQL数据库为了解决这个问题，给我们提供了一个关键字：<strong>auto_increment</strong>（自动增长）</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>主键自增：auto_increment</p><ul><li>每次插入新的行记录时，数据库自动生成id字段(主键)下的值</li><li>具有auto_increment的数据列是一个正数序列开始增长(从1开始自增)</li></ul></blockquote><h5 id="3-4-1-3-数据类型"><a href="#3-4-1-3-数据类型" class="headerlink" title="3.4.1.3 数据类型"></a>3.4.1.3 数据类型</h5><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><p><strong>数值类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td>INT&#x2F;INTEGER</td><td>4bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4bytes</td><td>(-3.402823466 E+38，3.402823466351 E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度)的值</td><td></td><td></td></tr></tbody></table><p><strong>字符串类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p><strong>日期时间类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至  9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至  838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td></td></tr></tbody></table><h5 id="3-4-1-4-案例"><a href="#3-4-1-4-案例" class="headerlink" title="3.4.1.4 案例"></a>3.4.1.4 案例</h5><p>使用SQL创建表：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">create</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">emp</span><span style="color: #BABED8"> (</span></span><span class="line"><span style="color: #BABED8">  id </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> unsigned </span><span style="color: #C792EA">primary key</span><span style="color: #BABED8"> auto_increment comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ID</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  username </span><span style="color: #C792EA">varchar</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">20</span><span style="color: #BABED8">) </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">unique</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">用户名</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F78C6C">password</span><span style="color: #BABED8"> </span><span style="color: #C792EA">varchar</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">32</span><span style="color: #BABED8">) </span><span style="color: #C792EA">default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">123456</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">密码</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F78C6C">name</span><span style="color: #BABED8"> </span><span style="color: #C792EA">varchar</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">10</span><span style="color: #BABED8">) </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">姓名</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  gender </span><span style="color: #F78C6C">tinyint</span><span style="color: #BABED8"> unsigned </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">性别, 说明: 1 男, 2 女</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F78C6C">image</span><span style="color: #BABED8"> </span><span style="color: #C792EA">varchar</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">300</span><span style="color: #BABED8">) comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">图像</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  job </span><span style="color: #F78C6C">tinyint</span><span style="color: #BABED8"> unsigned comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  entrydate </span><span style="color: #C792EA">date</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">入职时间</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  create_time </span><span style="color: #F78C6C">datetime</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">创建时间</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  update_time </span><span style="color: #F78C6C">datetime</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">修改时间</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8">) comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">员工表</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">;</span></span></code></pre></div><p>除了使用SQL语句创建表外，我们还可以借助于图形化界面来创建表结构，这种创建方式会更加直观、更加方便。</p><p>操作步骤如下：</p><ol><li>在指定操作的数据库上，右键New &#x3D;&#x3D;&gt; Table</li></ol><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205230447721.png" alt="image-20221205230447721"></p><ol start="2"><li>编辑表结构的相关信息</li></ol><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205231846161.png" alt="image-20221205231846161"></p><h5 id="3-4-1-5-设计表流程"><a href="#3-4-1-5-设计表流程" class="headerlink" title="3.4.1.5 设计表流程"></a>3.4.1.5 设计表流程</h5><p>通过上面的案例，我们明白了，设计一张表，基本的流程如下：</p><ol><li><p>阅读页面原型及需求文档</p></li><li><p>基于页面原则和需求文档，确定原型字段(类型、长度限制、约束)</p></li><li><p>再增加表设计所需要的业务基础字段(id主键、插入时间、修改时间)</p></li></ol><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221205232253088.png" alt="image-20221205232253088"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>说明：</p><ul><li><p>create_time：记录的是当前这条数据插入的时间。 </p></li><li><p>update_time：记录当前这条数据最后更新的时间。</p></li></ul></blockquote><h4 id="3-4-2-查询"><a href="#3-4-2-查询" class="headerlink" title="3.4.2 查询"></a>3.4.2 查询</h4><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>关于表结构的查询操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p><strong>查询当前数据库所有表</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">show tables;</span></span></code></pre></div><p><strong>查看指定表结构</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">desc 表名 ;#可以查看指定表的字段、字段的类型、是否可以为NULL、是否存在默认值等信息</span></span></code></pre></div><p><strong>查询指定表的建表语句</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">show create table 表名 ;</span></span></code></pre></div><h4 id="3-4-3-修改"><a href="#3-4-3-修改" class="headerlink" title="3.4.3 修改"></a>3.4.3 修改</h4><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>关于表结构的修改操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p><strong>添加字段</strong></p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">alter</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> 表名 </span><span style="color: #F78C6C">add</span><span style="color: #BABED8">  字段名  类型(长度)  [comment 注释]  [约束];</span></span></code></pre></div><p><strong>修改数据类型</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">alter table 表名 modify  字段名  新数据类型(长度);</span></span></code></pre></div><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">alter</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> 表名 change  旧字段名  新字段名  类型(长度)  [comment 注释]  [约束];</span></span></code></pre></div><p><strong>删除字段</strong></p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">alter</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> 表名 </span><span style="color: #F78C6C">drop</span><span style="color: #BABED8"> 字段名;</span></span></code></pre></div><p><strong>修改表名</strong></p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">rename </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> 表名 </span><span style="color: #F78C6C">to</span><span style="color: #BABED8">  新表名;</span></span></code></pre></div><h4 id="3-4-4-删除"><a href="#3-4-4-删除" class="headerlink" title="3.4.4 删除"></a>3.4.4 删除</h4><p>删除表语法：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">drop</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> [ if exists ]  表名;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>if exists ：只有表名存在时才会删除该表，表名不存在，则不执行删除操作(如果不加该参数项，删除一张不存在的表，执行将会报错)。</p></blockquote><h2 id="4-数据库操作-DML"><a href="#4-数据库操作-DML" class="headerlink" title="4.数据库操作-DML"></a>4.数据库操作-DML</h2><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进行增、删、改操作。</p><ul><li>添加数据（INSERT）</li><li>修改数据（UPDATE）</li><li>删除数据（DELETE）</li></ul><h3 id="4-1-添加（insert）"><a href="#4-1-添加（insert）" class="headerlink" title="4.1 添加（insert）"></a>4.1 添加（insert）</h3><p><strong>insert语法：</strong></p><ul><li><p>向指定字段添加数据</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">insert into 表名 (字段名1, 字段名2) values (值1, 值2);</span></span></code></pre></div></li><li><p>全部字段添加数据</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">insert into 表名 values (值1, 值2, ...);</span></span></code></pre></div></li><li><p>批量添加数据（指定字段）</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">insert into 表名 (字段名1, 字段名2) values (值1, 值2), (值1, 值2);</span></span></code></pre></div></li><li><p>批量添加数据（全部字段）</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">insert into 表名 values (值1, 值2, ...), (值1, 值2, ...);</span></span></code></pre></div></li></ul><p>Insert操作的注意事项：</p><ol><li><p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</p></li><li><p>字符串和日期型数据应该包含在引号中。</p></li><li><p>插入的数据大小，应该在字段的规定范围内。</p></li></ol><h3 id="4-2-修改（update）"><a href="#4-2-修改（update）" class="headerlink" title="4.2 修改（update）"></a>4.2 修改（update）</h3><p>update语法：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">update</span><span style="color: #BABED8"> 表名 </span><span style="color: #F78C6C">set</span><span style="color: #BABED8"> 字段名1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> 值1 , 字段名2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> 值2 , .... [where 条件] ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><ol><li><p>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p></li><li><p>在修改数据时，一般需要同时修改公共字段update_time，将其修改为当前操作时间。</p></li></ol></blockquote><h3 id="4-3-删除（delete）"><a href="#4-3-删除（delete）" class="headerlink" title="4.3 删除（delete）"></a>4.3 删除（delete）</h3><p>delete语法：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">delete</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">from</span><span style="color: #BABED8"> 表名  [where  条件] ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><p>​• DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</p><p>​• DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即可)。</p><p>​• 当进行删除全部数据操作时，会提示询问是否确认删除所有数据，直接点击Execute即可。 </p></blockquote><h2 id="5-数据库操作-DQL"><a href="#5-数据库操作-DQL" class="headerlink" title="5.数据库操作-DQL"></a>5.数据库操作-DQL</h2><h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><p>DQL英文全称是Data Query Language(数据查询语言)，用来查询数据库表中的记录。</p><p>查询关键字：SELECT</p><p>查询操作是所有SQL语句当中最为常见，也是最为重要的操作。在一个正常的业务系统中，查询操作的使用频次是要远高于增删改操作的。当我们打开某个网站或APP所看到的展示信息，都是通过从数据库中查询得到的，而在这个查询过程中，还会涉及到条件、排序、分页等操作。</p><h3 id="5-2-语法"><a href="#5-2-语法" class="headerlink" title="5.2 语法"></a>5.2 语法</h3><p>DQL查询语句，语法结构如下：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">SELECT</span></span><span class="line"><span style="color: #babed8">    字段列表</span></span><span class="line"><span style="color: #babed8">FROM</span></span><span class="line"><span style="color: #babed8">    表名列表</span></span><span class="line"><span style="color: #babed8">WHERE</span></span><span class="line"><span style="color: #babed8">    条件列表</span></span><span class="line"><span style="color: #babed8">GROUP  BY</span></span><span class="line"><span style="color: #babed8">    分组字段列表</span></span><span class="line"><span style="color: #babed8">HAVING</span></span><span class="line"><span style="color: #babed8">    分组后条件列表</span></span><span class="line"><span style="color: #babed8">ORDER BY</span></span><span class="line"><span style="color: #babed8">    排序字段列表</span></span><span class="line"><span style="color: #babed8">LIMIT</span></span><span class="line"><span style="color: #babed8">    分页参数</span></span></code></pre></div><h3 id="5-3-基本查询"><a href="#5-3-基本查询" class="headerlink" title="5.3 基本查询"></a>5.3 基本查询</h3><p>在基本查询的DQL语句中，不带任何的查询条件，语法如下：</p><ul><li><p>查询多个字段</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select 字段1, 字段2, 字段3 from  表名;</span></span></code></pre></div></li><li><p>查询所有字段（通配符）</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select *  from  表名;</span></span></code></pre></div></li><li><p>设置别名</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select 字段1 [ as 别名1 ] , 字段2 [ as 别名2 ]  from  表名;</span></span></code></pre></div></li><li><p>去除重复记录</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select distinct 字段列表 from  表名;</span></span></code></pre></div></li></ul><h3 id="5-4-条件查询"><a href="#5-4-条件查询" class="headerlink" title="5.4 条件查询"></a>5.4 条件查询</h3><p><strong>语法：</strong></p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">select</span><span style="color: #BABED8">  字段列表  </span><span style="color: #F78C6C">from</span><span style="color: #BABED8">   表名   </span><span style="color: #F78C6C">where</span><span style="color: #BABED8">   条件列表 ; </span><span style="color: #676E95; font-style: italic">-- 条件列表：意味着可以有多个条件</span></span></code></pre></div><p>学习条件查询就是学习条件的构建方式，而在SQL语句当中构造条件的运算符分为两类：</p><ul><li>比较运算符</li><li>逻辑运算符</li></ul><p>常用的比较运算符如下: </p><table><thead><tr><th><strong>比较运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between …  and …</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>is null</td><td>是null</td></tr></tbody></table><p>常用的逻辑运算符如下:</p><table><thead><tr><th><strong>逻辑运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>or 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>not 或 !</td><td>非 , 不是</td></tr></tbody></table><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span></span><span class="line"><span style="color: #babed8">from tb_emp</span></span><span class="line"><span style="color: #babed8">where id &lt;=5;</span></span></code></pre></div><h3 id="5-5-聚合函数"><a href="#5-5-聚合函数" class="headerlink" title="5.5 聚合函数"></a>5.5 聚合函数</h3><p>之前我们做的查询都是横向查询，就是根据条件一行一行的进行判断，而使用聚合函数查询就是纵向查询，它是对一列的值进行计算，然后返回一个结果值。（将一列数据作为一个整体，进行纵向计算）</p><p>语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  聚合函数(字段列表)  from  表名 ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意 : 聚合函数会忽略空值，对NULL值不作为统计。</p></blockquote><p>常用聚合函数：</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>count ：按照列去统计有多少行数据。</p><ul><li>在根据指定的列统计的时候，如果这一列中有null的行，该行不会被统计在其中。</li></ul><p>sum ：计算指定列的数值和，如果不是数值类型，那么计算结果为0</p><p>max ：计算指定列的最大值</p><p>min ：计算指定列的最小值</p><p>avg ：计算指定列的平均值</p></blockquote><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8"># count(字段)</span></span><span class="line"><span style="color: #babed8">select count(id) from tb_emp;-- 结果：29</span></span><span class="line"><span style="color: #babed8">select count(job) from tb_emp;-- 结果：28 （聚合函数对NULL值不做计算）</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"># count(常量)</span></span><span class="line"><span style="color: #babed8">select count(0) from tb_emp;</span></span><span class="line"><span style="color: #babed8">select count(&#39;A&#39;) from tb_emp;</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"># count(*)  推荐此写法（MySQL底层进行了优化）</span></span><span class="line"><span style="color: #babed8">select count(*) from tb_emp;</span></span></code></pre></div><h3 id="5-6-分组查询"><a href="#5-6-分组查询" class="headerlink" title="5.6 分组查询"></a>5.6 分组查询</h3><p>分组： 按照某一列或者某几列，把相同的数据进行合并输出。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>分组其实就是按列进行分类(指定列下相同的数据归为一类)，然后可以对分类完的数据进行合并计算。</p><p>分组查询通常会使用聚合函数进行计算。</p></blockquote><p>语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表  from  表名  [where 条件]  group by 分组字段名  [having 分组后过滤条件];</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><p>​• 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</p><p>​• 执行顺序：where &gt; 聚合函数 &gt; having </p></blockquote><p><strong>where与having区别（面试题）</strong></p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select job, count(*)</span></span><span class="line"><span style="color: #babed8">from tb_emp</span></span><span class="line"><span style="color: #babed8">where entrydate &lt;= &#39;2015-01-01&#39;   -- 分组前条件</span></span><span class="line"><span style="color: #babed8">group by job                      -- 按照job字段分组</span></span><span class="line"><span style="color: #babed8">having count(*) &gt;= 2;             -- 分组后条件</span></span></code></pre></div><h3 id="5-7-排序查询"><a href="#5-7-排序查询" class="headerlink" title="5.7 排序查询"></a>5.7 排序查询</h3><p>排序在日常开发中是非常常见的一个操作，有升序排序，也有降序排序。</p><p>语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表  </span></span><span class="line"><span style="color: #babed8">from   表名   </span></span><span class="line"><span style="color: #babed8">[where  条件列表] </span></span><span class="line"><span style="color: #babed8">[group by  分组字段 ] </span></span><span class="line"><span style="color: #babed8">order  by  字段1  排序方式1 , 字段2  排序方式2 … ;</span></span></code></pre></div><ul><li><p>排序方式：</p><ul><li>ASC ：升序（默认值）</li><li>DESC：降序</li></ul></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 </p></blockquote><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span></span><span class="line"><span style="color: #babed8">from tb_emp</span></span><span class="line"><span style="color: #babed8">order by entrydate DESC; -- 按照entrydate字段下的数据进行降序排序</span></span></code></pre></div><h3 id="5-8-分页查询"><a href="#5-8-分页查询" class="headerlink" title="5.8 分页查询"></a>5.8 分页查询</h3><p>分页操作在业务系统开发时，也是非常常见的一个功能，日常我们在网站中看到的各种各样的分页条，后台也都需要借助于数据库的分页操作。</p><p>分页查询语法：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">select</span><span style="color: #BABED8">  字段列表  </span><span style="color: #F78C6C">from</span><span style="color: #BABED8">   表名  </span><span style="color: #F78C6C">limit</span><span style="color: #BABED8">  起始索引, 查询记录数 ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><ol><li>起始索引从0开始。        计算公式 ：   起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit  条数</li></ol></blockquote><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span></span><span class="line"><span style="color: #babed8">from tb_emp</span></span><span class="line"><span style="color: #babed8">limit 0 , 5; -- 从索引0开始，向后取5条记录</span></span></code></pre></div><h2 id="6-多表设计"><a href="#6-多表设计" class="headerlink" title="6.多表设计"></a>6.多表设计</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li><p>一对多(多对一)</p></li><li><p>多对多</p></li><li><p>一对一</p></li></ul><h3 id="6-1-一对多"><a href="#6-1-一对多" class="headerlink" title="6.1 一对多"></a>6.1 一对多</h3><p>员工表 - 部门表之间的关系：</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221206230156403.png" alt="image-20221206230156403"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>一对多关系实现：在数据库表中多的一方，添加字段，来关联属于一这方的主键。</strong></p></blockquote><p><strong>外键约束</strong></p><p>目前上述的两张表(员工表、部门表)，在数据库层面，并未建立关联，所以是无法保证数据的一致性和完整性的</p><p>想解决上述的问题呢，我们就可以通过数据库中的 <strong>外键约束</strong> 来解决。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>外键约束：让两张表的数据建立连接，保证数据的一致性和完整性。  </p><p>对应的关键字：foreign key</p></blockquote><p>外键约束的语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 创建表时指定</span></span><span class="line"><span style="color: #babed8">create table 表名(</span></span><span class="line"><span style="color: #babed8">    字段名    数据类型,</span></span><span class="line"><span style="color: #babed8">    ...</span></span><span class="line"><span style="color: #babed8">    [constraint]   [外键名称]  foreign  key (外键字段名)   references   主表 (主表列名)</span></span><span class="line"><span style="color: #babed8">);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 建完表后，添加外键</span></span><span class="line"><span style="color: #babed8">alter table  表名  add constraint  外键名称  foreign key(外键字段名) references 主表(主表列名);</span></span></code></pre></div><p>方式1：通过SQL语句操作</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 修改表： 添加外键约束</span></span><span class="line"><span style="color: #babed8">alter table tb_emp  </span></span><span class="line"><span style="color: #babed8">add  constraint  fk_dept_id  foreign key (dept_id)  references  tb_dept(id);</span></span></code></pre></div><p>方式2：图形化界面操作</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221206232750376.png" alt="image-20221206232750376"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当我们添加外键约束时，我们得保证当前数据库表中的数据是完整的。 所以，我们需要将之前删除掉的数据再添加回来。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当我们添加了外键之后，再删除ID为1的部门，就会发现，此时数据库报错了，不允许删除。</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20220831205523647.png"></p><p>外键约束（foreign key）：保证了数据的完整性和一致性。</p></blockquote><p><strong>物理外键和逻辑外键</strong></p><ul><li><p>物理外键</p><ul><li>概念：使用foreign key定义外键关联另外一张表。</li><li>缺点：<ul><li>影响增、删、改的效率（需要检查外键关系）。</li><li>仅用于单节点数据库，不适用与分布式、集群场景。</li><li>容易引发数据库的死锁问题，消耗性能。</li></ul></li></ul></li><li><p>逻辑外键</p><ul><li>概念：在业务层逻辑中，解决外键关联。</li><li>通过逻辑外键，就可以很方便的解决上述问题。</li></ul></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>**在现在的企业开发中，很少会使用物理外键，都是使用逻辑外键。 甚至在一些数据库开发规范中，会明确指出禁止使用物理外键 foreign key **</p></blockquote><h3 id="6-2-一对一"><a href="#6-2-一对一" class="headerlink" title="6.2 一对一"></a>6.2 一对一</h3><p>一对一关系表在实际开发中应用起来比较简单，通常是用来做单表的拆分，也就是将一张大表拆分成两张小表，将大表中的一些基础字段放在一张表当中，将其他的字段放在另外一张表当中，以此来提高数据的操作效率。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>一对一的应用场景： 用户表(基本信息+身份信息)</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221207104508080.png" alt="image-20221207104508080"></p><ul><li>基本信息：用户的ID、姓名、性别、手机号、学历</li><li>身份信息：民族、生日、身份证号、身份证签发机关，身份证的有效期(开始时间、结束时间)</li></ul></blockquote><p>其实一对一我们可以看成一种特殊的一对多。一对多我们是怎么设计表关系的？是不是在多的一方添加外键。同样我们也可以通过外键来体现一对一之间的关系，我们只需要在任意一方来添加一个外键就可以了。</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221207105632634.png" alt="image-20221207105632634"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>一对一 ：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p></blockquote><h3 id="6-3-多对多"><a href="#6-3-多对多" class="headerlink" title="6.3 多对多"></a>6.3 多对多</h3><p>多对多的关系在开发中属于也比较常见的。比如：学生和老师的关系，一个学生可以有多个授课老师，一个授课老师也可以有多个学生。在比如：学生和课程的关系，一个学生可以选修多门课程，一个课程也可以供多个学生选修。</p><p>案例：学生与课程的关系</p><ul><li><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p></li><li><p>实现关系：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p></li></ul><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221207113341028.png" alt="image-20221207113341028"></p><h2 id="7-多表查询"><a href="#7-多表查询" class="headerlink" title="7.多表查询"></a>7.多表查询</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><p>多表查询：查询时从多张表中获取所需数据</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>单表查询的SQL语句：select  字段列表  from  表名;</p><p>那么要执行多表查询，只需要使用逗号分隔多张表即可，如： select   字段列表  from  表1, 表2;</p></blockquote><p>查询用户表和部门表中的数据：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select * from  tb_emp , tb_dept;</span></span></code></pre></div><p>此时,我们看到查询结果中包含了大量的结果集，总共85条记录，而这其实就是员工表所有的记录(17行)与部门表所有记录(5行)的所有组合情况，这种现象称之为笛卡尔积。</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合(A集合和B集合)的所有组合情况。</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221207155509696.png" alt="image-20221207155509696"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在多表查询时，需要消除无效的笛卡尔积，只保留表关联部分的数据</p></blockquote><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20220901093756992.png"></p><p>在SQL语句中，如何去除无效的笛卡尔积呢？只需要给多表查询加上连接查询的条件即可。</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select * from tb_emp , tb_dept where tb_emp.dept_id = tb_dept.id ;</span></span></code></pre></div><h3 id="7-2-内连接"><a href="#7-2-内连接" class="headerlink" title="7.2 内连接"></a>7.2 内连接</h3><ul><li>内连接：相当于查询A、B交集部分数据</li></ul><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221207165446062.png" alt="image-20221207165446062"> </p><p>内连接查询：查询两表或多表中交集部分数据。</p><p>内连接从语法上可以分为：</p><ul><li><p>隐式内连接</p></li><li><p>显式内连接</p></li></ul><p>隐式内连接语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表   from   表1 , 表2   where  条件 ... ;</span></span></code></pre></div><p>显式内连接语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表   from   表1  [ inner ]  join 表2  on  连接条件 ... ;</span></span></code></pre></div><p>多表查询时给表起别名：</p><ul><li>tableA  as  别名1  ,  tableB  as  别名2 ;</li><li>tableA  别名1  ,  tableB  别名2 ;</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><p>一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段。</p></blockquote><ul><li>隐式内连接实现</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select tb_emp.name , tb_dept.name -- 分别查询两张表中的数据</span></span><span class="line"><span style="color: #babed8">from tb_emp , tb_dept -- 关联两张表</span></span><span class="line"><span style="color: #babed8">where tb_emp.dept_id = tb_dept.id; -- 消除笛卡尔积</span></span></code></pre></div><ul><li>显式内连接实现</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select tb_emp.name , tb_dept.name</span></span><span class="line"><span style="color: #babed8">from tb_emp inner join tb_dept</span></span><span class="line"><span style="color: #babed8">on tb_emp.dept_id = tb_dept.id;</span></span></code></pre></div><h3 id="7-3-外连接"><a href="#7-3-外连接" class="headerlink" title="7.3 外连接"></a>7.3 外连接</h3><p>外连接</p><ul><li><p>左外连接：查询左表所有数据(包括两张表交集部分数据)</p></li><li><p>右外连接：查询右表所有数据(包括两张表交集部分数据)</p></li></ul><p>左外连接语法结构：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表   from   表1  left  [ outer ]  join 表2  on  连接条件 ... ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>右外连接语法结构：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表   from   表1  right  [ outer ]  join 表2  on  连接条件 ... ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：</p><p>左外连接和右外连接是可以相互替换的，只需要调整连接查询时SQL语句中表的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p></blockquote><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 左外连接：以left join关键字左边的表为主表，查询主表中所有数据，以及和主表匹配的右边表中的数据</span></span><span class="line"><span style="color: #babed8">select emp.name , dept.name</span></span><span class="line"><span style="color: #babed8">from tb_emp AS emp left join tb_dept AS dept </span></span><span class="line"><span style="color: #babed8">     on emp.dept_id = dept.id;</span></span></code></pre></div><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 右外连接</span></span><span class="line"><span style="color: #babed8">select dept.name , emp.name</span></span><span class="line"><span style="color: #babed8">from tb_emp AS emp right join  tb_dept AS dept</span></span><span class="line"><span style="color: #babed8">     on emp.dept_id = dept.id;</span></span></code></pre></div><h3 id="7-4-子查询"><a href="#7-4-子查询" class="headerlink" title="7.4 子查询"></a>7.4 子查询</h3><h4 id="7-4-1-介绍"><a href="#7-4-1-介绍" class="headerlink" title="7.4.1 介绍"></a>7.4.1 介绍</h4><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询。</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">SELECT</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">*</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">FROM</span><span style="color: #BABED8">   t1   </span><span style="color: #F78C6C">WHERE</span><span style="color: #BABED8">  column1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8">  ( </span><span style="color: #F78C6C">SELECT</span><span style="color: #BABED8">  column1  </span><span style="color: #F78C6C">FROM</span><span style="color: #BABED8">  t2 ... );</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>子查询外部的语句可以是insert &#x2F; update &#x2F; delete &#x2F; select 的任何一个，最常见的是 select。</p></blockquote><p>根据子查询结果的不同分为：</p><ol><li><p>标量子查询（子查询结果为单个值[一行一列]）</p></li><li><p>列子查询（子查询结果为一列，但可以是多行）</p></li><li><p>行子查询（子查询结果为一行，但可以是多列）</p></li><li><p>表子查询（子查询结果为多行多列[相当于子查询结果是一张表]）</p></li></ol><p>子查询可以书写的位置：</p><ol><li>where之后</li><li>from之后</li><li>select之后</li></ol><h4 id="7-4-2-标量子查询"><a href="#7-4-2-标量子查询" class="headerlink" title="7.4.2 标量子查询"></a>7.4.2 标量子查询</h4><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查询称为标量子查询。</p><p>常用的操作符： &#x3D;   &lt;&gt;   &gt;    &gt;&#x3D;    &lt;   &lt;&#x3D;   </p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 1.查询&quot;教研部&quot;部门ID</span></span><span class="line"><span style="color: #babed8">select id from tb_dept where name = &#39;教研部&#39;;    #查询结果：2</span></span><span class="line"><span style="color: #babed8">-- 2.根据&quot;教研部&quot;部门ID, 查询员工信息</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where dept_id = 2;</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 合并出上两条SQL语句</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where dept_id = (select id from tb_dept where name = &#39;教研部&#39;);</span></span></code></pre></div><h4 id="7-4-3-列子查询"><a href="#7-4-3-列子查询" class="headerlink" title="7.4.3 列子查询"></a>7.4.3 列子查询</h4><p>子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询。</p><p>常用的操作符：</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr></tbody></table><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 1.查询&quot;销售部&quot;和&quot;市场部&quot;的部门ID</span></span><span class="line"><span style="color: #babed8">select id from tb_dept where name = &#39;教研部&#39; or name = &#39;咨询部&#39;;    #查询结果：3,2</span></span><span class="line"><span style="color: #babed8">-- 2.根据部门ID, 查询员工信息</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where dept_id in (3,2);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 合并以上两条SQL语句</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where dept_id in (select id from tb_dept where name = &#39;教研部&#39; or name = &#39;咨询部&#39;);</span></span></code></pre></div><h4 id="7-4-4-行子查询"><a href="#7-4-4-行子查询" class="headerlink" title="7.4.4 行子查询"></a>7.4.4 行子查询</h4><p>子查询返回的结果是一行(可以是多列)，这种子查询称为行子查询。</p><p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 查询&quot;韦一笑&quot;的入职日期 及 职位</span></span><span class="line"><span style="color: #babed8">select entrydate , job from tb_emp where name = &#39;韦一笑&#39;;  #查询结果： 2007-01-01 , 2</span></span><span class="line"><span style="color: #babed8">-- 查询与&quot;韦一笑&quot;的入职日期及职位相同的员工信息</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where (entrydate,job) = (&#39;2007-01-01&#39;,2);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 合并以上两条SQL语句</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where (entrydate,job) = (select entrydate , job from tb_emp where name = &#39;韦一笑&#39;);</span></span></code></pre></div><h4 id="7-4-5-表子查询"><a href="#7-4-5-表子查询" class="headerlink" title="7.4.5 表子查询"></a>7.4.5 表子查询</h4><p>子查询返回的结果是多行多列，常作为临时表，这种子查询称为表子查询。</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select * from emp where entrydate &gt; &#39;2006-01-01&#39;;</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">select e.*, d.* from (select * from emp where entrydate &gt; &#39;2006-01-01&#39;) e left join dept d on e.dept_id = d.id ;</span></span></code></pre></div><h2 id="8-事务"><a href="#8-事务" class="headerlink" title="8.事务"></a>8.事务</h2><h3 id="8-1-介绍"><a href="#8-1-介绍" class="headerlink" title="8.1 介绍"></a>8.1 介绍</h3><p>在实际的业务开发中，有些业务操作要多次访问数据库。一个业务要发送多条SQL语句给数据库执行。需要将多次访问数据库的操作视为一个整体来执行，要么所有的SQL语句全部执行成功。如果其中有一条SQL语句失败，就进行事务的回滚，所有的SQL语句全部执行失败。</p><p>简而言之：事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>事务作用：保证在一个事务中多次操作数据库表中数据时，要么全都成功,要么全都失败。</p><h3 id="8-2-操作"><a href="#8-2-操作" class="headerlink" title="8.2 操作"></a>8.2 操作</h3><p>MYSQL中有两种方式进行事务的操作：</p><ol><li>自动提交事务：即执行一条sql语句提交一次事务。（默认MySQL的事务是自动提交）</li><li>手动提交事务：先开启，再提交</li></ol><p>事务操作有关的SQL语句：</p><table><thead><tr><th>SQL语句</th><th>描述</th></tr></thead><tbody><tr><td>start transaction;  &#x2F;  begin ;</td><td>开启手动控制事务</td></tr><tr><td>commit;</td><td>提交事务</td></tr><tr><td>rollback;</td><td>回滚事务</td></tr></tbody></table><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>手动提交事务使用步骤：</p><ul><li>第1种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  成功  &#x3D;&gt;  提交事务</li><li>第2种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  失败  &#x3D;&gt;  回滚事务</li></ul></blockquote><p>使用事务控制删除部门和删除该部门下的员工的操作：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">-- 开启事务</span></span><span class="line"><span style="color: #F78C6C">start transaction</span><span style="color: #BABED8"> ;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">-- 删除学工部</span></span><span class="line"><span style="color: #F78C6C">delete</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">from</span><span style="color: #BABED8"> tb_dept </span><span style="color: #F78C6C">where</span><span style="color: #BABED8"> id </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8">;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">-- 删除学工部的员工</span></span><span class="line"><span style="color: #F78C6C">delete</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">from</span><span style="color: #BABED8"> tb_emp </span><span style="color: #F78C6C">where</span><span style="color: #BABED8"> dept_id </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8">;</span></span></code></pre></div><ul><li>上述的这组SQL语句，如果如果执行成功，则提交事务</li></ul><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">-- 提交事务 (成功时执行)</span></span><span class="line"><span style="color: #F78C6C">commit</span><span style="color: #BABED8"> ;</span></span></code></pre></div><ul><li>上述的这组SQL语句，如果如果执行失败，则回滚事务</li></ul><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">-- 回滚事务 (出错时执行)</span></span><span class="line"><span style="color: #F78C6C">rollback</span><span style="color: #BABED8"> ;</span></span></code></pre></div><h3 id="8-3-四大特性"><a href="#8-3-四大特性" class="headerlink" title="8.3 四大特性"></a>8.3 四大特性</h3><p>面试题：事务有哪些特性？</p><ul><li>原子性（Atomicity）：事务是不可分割的最小单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>事务的四大特性简称为：ACID</p></blockquote><ul><li><p><strong>原子性（Atomicity）</strong> ：原子性是指事务包装的一组sql是一个不可分割的工作单元，事务中的操作要么全部成功，要么全部失败。</p></li><li><p><strong>一致性（Consistency）</strong>：一个事务完成之后数据都必须处于一致性状态。</p></li></ul><p>​如果事务成功的完成，那么数据库的所有变化将生效。</p><p>​如果事务执行出现错误，那么数据库的所有变化将会被回滚(撤销)，返回到原始状态。</p><ul><li><strong>隔离性（Isolation）</strong>：多个用户并发的访问数据库时，一个用户的事务不能被其他用户的事务干扰，多个并发的事务之间要相互隔离。</li></ul><p>​一个事务的成功或者失败对于其他的事务是没有影响。</p><ul><li><strong>持久性（Durability）</strong>：一个事务一旦被提交或回滚，它对数据库的改变将是永久性的，哪怕数据库发生异常，重启之后数据亦然存在。</li></ul><h2 id="9-索引"><a href="#9-索引" class="headerlink" title="9.索引"></a>9.索引</h2><h3 id="9-1-介绍"><a href="#9-1-介绍" class="headerlink" title="9.1 介绍"></a>9.1 介绍</h3><p>索引(index)：是帮助数据库高效获取数据的数据结构 。</p><ul><li>简单来讲，就是使用索引可以提高查询的效率。</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 添加索引</span></span><span class="line"><span style="color: #babed8">create index idx_sku_sn on tb_sku (sn);  #在添加索引时，也需要消耗时间</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 查询数据（使用了索引）</span></span><span class="line"><span style="color: #babed8">select * from tb_sku where sn = &#39;100000003145008&#39;;</span></span></code></pre></div><p>优点：</p><ol><li>提高数据查询的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</li></ol><p>缺点：</p><ol><li>索引会占用存储空间。</li><li>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率。</li></ol><h3 id="9-2-结构"><a href="#9-2-结构" class="headerlink" title="9.2 结构"></a>9.2 结构</h3><p>MySQL数据库支持的索引结构有很多，如：Hash索引、B+Tree索引、Full-Text索引等。</p><p>我们平常所说的索引，如果没有特别指明，都是指默认的 B+Tree 结构组织的索引。</p><p>在没有了解B+Tree结构前，我们先回顾下之前所学习的树结构：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>二叉查找树：左边的子节点比父节点小，右边的子节点比父节点大</p></blockquote><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221208174135229-170729986151811.png" alt="image-20221208174135229"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当我们向二叉查找树保存数据时，是按照从大到小(或从小到大)的顺序保存的，此时就会形成一个单向链表，搜索性能会打折扣。</p></blockquote><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221208174859866-170729986151914.png" alt="image-20221208174859866"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>可以选择平衡二叉树或者是红黑树来解决上述问题。（红黑树也是一棵平衡的二叉树）</p></blockquote><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221209100647867-170729986151912.png" alt="image-20221209100647867"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>但是在Mysql数据库中并没有使用二叉搜索数或二叉平衡数或红黑树来作为索引的结构。</p></blockquote><p>思考：采用二叉搜索树或者是红黑树来作为索引的结构有什么问题？</p><details>    <summary>答案</summary>    最大的问题就是在数据量大的情况下，树的层级比较深，会影响检索速度。因为不管是二叉搜索数还是红黑数，一个节点下面只能有两个子节点。此时在数据量大的情况下，就会造成数的高度比较高，树的高度一旦高了，检索速度就会降低。</details><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>说明：如果数据结构是红黑树，那么查询1000万条数据，根据计算树的高度大概是23左右，这样确实比之前的方式快了很多，但是如果高并发访问，那么一个用户有可能需要23次磁盘IO，那么100万用户，那么会造成效率极其低下。所以为了减少红黑树的高度，那么就得增加树的宽度，就是不再像红黑树一样每个节点只能保存一个数据，可以引入另外一种数据结构，一个节点可以保存多个数据，这样宽度就会增加从而降低树的高度。这种数据结构例如BTree就满足。</p></blockquote><p>下面我们来看看B+Tree(多路平衡搜索树)结构中如何避免这个问题：</p><p><img src="/oranfish.github.io/posts/0/MySQL%E5%AD%A6%E4%B9%A0/image-20221208181315728-170729986151913.png" alt="image-20221208181315728"></p><p>B+Tree结构：</p><ul><li>每一个节点，可以存储多个key（有n个key，就有n个指针）</li><li>节点分为：叶子节点、非叶子节点<ul><li>叶子节点，就是最后一层子节点，所有的数据都存储在叶子节点上</li><li>非叶子节点，不是树结构最下面的节点，用于索引数据，存储的的是：key+指针</li></ul></li><li>为了提高范围查询效率，叶子节点形成了一个双向链表，便于数据的排序及区间范围查询</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>拓展：</strong></p><p>非叶子节点都是由key+指针域组成的，一个key占8字节，一个指针占6字节，而一个节点总共容量是16KB，那么可以计算出一个节点可以存储的元素个数：16*1024字节 &#x2F; (8+6)&#x3D;1170个元素。</p><ul><li>查看mysql索引节点大小：show global status like ‘innodb_page_size’;    – 节点大小：16384</li></ul><p>当根节点中可以存储1170个元素，那么根据每个元素的地址值又会找到下面的子节点，每个子节点也会存储1170个元素，那么第二层即第二次IO的时候就会找到数据大概是：1170*1170&#x3D;135W。也就是说B+Tree数据结构中只需要经历两次磁盘IO就可以找到135W条数据。</p><p>对于第二层每个元素有指针，那么会找到第三层，第三层由key+数据组成，假设key+数据总大小是1KB，而每个节点一共能存储16KB，所以一个第三层一个节点大概可以存储16个元素(即16条记录)。那么结合第二层每个元素通过指针域找到第三层的节点，第二层一共是135W个元素，那么第三层总元素大小就是：135W*16结果就是2000W+的元素个数。</p><p>结合上述分析B+Tree有如下优点：</p><ul><li>千万条数据，B+Tree可以控制在小于等于3的高度</li><li>所有的数据都存储在叶子节点上，并且底层已经实现了按照索引进行排序，还可以支持范围查询，叶子节点是一个双向链表，支持从小到大或者从大到小查找</li></ul></blockquote><h3 id="9-3-语法"><a href="#9-3-语法" class="headerlink" title="9.3 语法"></a>9.3 语法</h3><p><strong>创建索引</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">create  [ unique ]  index 索引名 on  表名 (字段名,... ) ;</span></span></code></pre></div><p><strong>查看索引</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">show  index  from  表名;</span></span></code></pre></div><p><strong>删除索引</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">drop  index  索引名  on  表名;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：</p><ul><li><p>主键字段，在建表时，会自动创建主键索引</p></li><li><p>添加唯一约束时，数据库实际上会添加唯一索引</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven知识点总结</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-初始Maven"><a href="#1-初始Maven" class="headerlink" title="1.初始Maven"></a>1.初始Maven</h2><h3 id="1-1-什么是Maven"><a href="#1-1-什么是Maven" class="headerlink" title="1.1 什么是Maven"></a>1.1 什么是Maven</h3><p>Maven是Apache旗下的一个开源项目，<strong>是一款用于管理和构建java项目的工具</strong>。</p><h3 id="1-2-Maven的作用"><a href="#1-2-Maven的作用" class="headerlink" title="1.2 Maven的作用"></a>1.2 Maven的作用</h3><p>使用Maven能够做什么：</p><ol><li>依赖管理</li><li>统一项目结构</li><li>项目构建</li></ol><p><strong>依赖管理</strong>：</p><ul><li>方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题</li></ul><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205205927138.png" alt="image-20240205205927138"></p><p>当使用maven进行项目依赖(jar包)管理，则很方便的可以解决这个问题。 我们只需要在maven项目的pom.xml文件中，添加一段如下图所示的配置即可实现。</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205210109723.png" alt="image-20240205210109723"></p><p>**统一项目结构 : **</p><ul><li>提供标准、统一的项目结构</li></ul><p>在项目开发中，当你使用不同的开发工具 (如：Eclipse、Idea)，创建项目工程时：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205210130908.png" alt="image-20240205210130908"></p><p>若我们创建的是一个maven工程，是可以帮我们自动生成统一、标准的项目目录结构：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205210136330.png" alt="image-20240205210136330"></p><p>具体的统一结构如下：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205210147390.png" alt="image-20240205210147390"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>目录说明： </p><ul><li>src&#x2F;main&#x2F;java: java源代码目录</li><li>src&#x2F;main&#x2F;resources:  配置文件信息</li><li>src&#x2F;test&#x2F;java: 测试代码</li><li>src&#x2F;test&#x2F;resources: 测试配置文件信息</li></ul></blockquote><p><strong>项目构建 :</strong> </p><ul><li>maven提供了标准的、跨平台(Linux、Windows、MacOS) 的自动化项目构建方式</li></ul><p>代码需要进行编译、测试、打包、发布，这些操作如果需要反复进行就显得特别麻烦，而Maven提供了一套简单的命令来完成项目构建。</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205210213617.png" alt="image-20240205210213617"></p><h2 id="2-Maven概述"><a href="#2-Maven概述" class="headerlink" title="2.Maven概述"></a>2.Maven概述</h2><h3 id="2-1-Maven介绍"><a href="#2-1-Maven介绍" class="headerlink" title="2.1 Maven介绍"></a>2.1 Maven介绍</h3><p>Apache Maven是一个项目管理和构建工具，它基于项目对象模型(Project Object Model , 简称: POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档。</p><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p>Maven的作用： </p><ol><li>方便的依赖管理</li><li>统一的项目结构</li><li>标准的项目构建流程</li></ol><h3 id="2-2-Maven模型"><a href="#2-2-Maven模型" class="headerlink" title="2.2 Maven模型"></a>2.2 Maven模型</h3><ul><li>项目对象模型 (Project Object Model)</li><li>依赖管理模型(Dependency)</li><li>构建生命周期&#x2F;阶段(Build lifecycle &amp; phases)</li></ul><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205210326217.png" alt="image-20240205210326217"></p><h3 id="2-3-Maven仓库"><a href="#2-3-Maven仓库" class="headerlink" title="2.3 Maven仓库"></a>2.3 Maven仓库</h3><p>仓库：用于存储资源，管理各种jar包</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>仓库的本质就是一个目录(文件夹)，这个目录被用来存储开发中所有依赖(就是jar包)和插件</p></blockquote><p>Maven仓库分为：</p><ul><li>本地仓库：自己计算机上的一个目录(用来存储jar包)</li><li>中央仓库：由Maven团队维护的全球唯一的。仓库地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li><li>远程仓库(私服)：一般由公司团队搭建的私有仓库</li></ul><p>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包</p><ul><li><p>如果有，则在项目直接引用</p></li><li><p>如果没有，则去中央仓库中下载对应的jar包到本地仓库</p></li></ul><p>如果还可以搭建远程仓库(私服)，将来jar包的查找顺序则变为： 本地仓库 –&gt; 远程仓库–&gt; 中央仓库</p><h3 id="2-4-Maven安装"><a href="#2-4-Maven安装" class="headerlink" title="2.4 Maven安装"></a>2.4 Maven安装</h3><p>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>Maven安装配置步骤：</p><ol><li>解压安装</li><li>配置仓库</li><li>配置Maven环境变量</li></ol><p><strong>1、解压 apache-maven-3.6.1-bin.zip（解压即安装）</strong></p><ul><li>bin目录 ： 存放的是可执行命令。（mvn 命令重点关注）</li><li>conf目录 ：存放Maven的配置文件。（settings.xml配置文件后期需要修改）</li><li>lib目录 ：存放Maven依赖的jar包。（Maven也是使用java开发的，所以它也依赖其他的jar包）</li></ul><p><strong>2、配置本地仓库</strong></p><p>在自己计算机上新一个目录（本地仓库，用来存储jar包）</p><p>进入到conf目录下修改settings.xml配置文件 </p><p>1). 使用超级记事本软件，打开settings.xml文件，定位到53行</p><p>2). 复制<localRepository>标签，粘贴到注释的外面（55行）</localRepository></p><p>3). 复制之前新建的用来存储jar包的路径，替换掉<localRepository>标签体内容</localRepository></p><p><strong>3、配置阿里云私服</strong></p><p>由于中央仓库在国外，所以下载jar包速度可能比较慢，而阿里公司提供了一个远程仓库，里面基本也都有开源项目的jar包。</p><p>进入到conf目录下修改settings.xml配置文件：</p><p>1). 使用超级记事本软件，打开settings.xml文件，定位到160行左右</p><p>2). 在&#x2F;<mirrors>标签下为其添加子标签&#x2F;<mirror>，内容如下：</mirror></mirrors></p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">mirror</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">id</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">alimaven</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">id</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">name</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">aliyun maven</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">name</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">url</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">http://maven.aliyun.com/nexus/content/groups/public/</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">url</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">mirrorOf</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">central</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">mirrorOf</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">          </span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">mirror</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>&#x3D;&#x3D;注:  只可配置一个<mirror>(另一个要注释!) ，不然两个可能发生冲突，导致jar包无法下载!!!!!!!&#x3D;&#x3D;</mirror></p><p><strong>4、配置环境变量</strong></p><p>1). 在系统变量处新建一个变量MAVEN_HOME</p><ul><li>MAVEN_HOME环境变量的值，设置为maven的解压安装目录</li></ul><p>2). 在Path中进行配置</p><ul><li>PATH环境变量的值，设置为：%MAVEN_HOME%\bin</li></ul><p>3). 打开DOS命令提示符进行验证，出现如图所示表示安装成功</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">mvn -v</span></span></code></pre></div><h2 id="3-IDEA集成Maven"><a href="#3-IDEA集成Maven" class="headerlink" title="3. IDEA集成Maven"></a>3. IDEA集成Maven</h2><h3 id="3-1-配置Maven环境"><a href="#3-1-配置Maven环境" class="headerlink" title="3.1 配置Maven环境"></a>3.1 配置Maven环境</h3><p>1、选择 IDEA中 File  &#x3D;&gt;  Settings  &#x3D;&gt;  Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205214819606.png" alt="image-20240205214819606"></p><p>2、设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205214825555.png" alt="image-20240205214825555"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Maven home path ：指定当前Maven的安装目录</p><p>User settings file ：指定当前Maven的settings.xml配置文件的存放路径</p><p>Local repository ：指定Maven的本地仓库的路径 (如果指定了settings.xml, 这个目录会自动读取出来, 可以不用手动指定)</p></blockquote><p>3、配置工程的编译版本为11</p><ul><li>Maven默认使用的编译版本为5（版本过低）</li></ul><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205214837969.png" alt="image-20240205214837969"></p><h3 id="3-2-全局设置"><a href="#3-2-全局设置" class="headerlink" title="3.2 全局设置"></a>3.2 全局设置</h3><p>1、进入到IDEA欢迎页面</p><ul><li>选择 IDEA中 File  &#x3D;&gt;  close project</li></ul><p>2、打开 All settings , 选择 Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p><p>3、配置工程的编译版本为11</p><p>这里所设置的maven的环境信息，并未指定任何一个project，此时设置的信息就属于全局配置信息。 以后，我们再创建project，默认就是使用我们全局配置的信息。</p><h3 id="3-3-Maven项目"><a href="#3-3-Maven项目" class="headerlink" title="3.3 Maven项目"></a>3.3 Maven项目</h3><p>1、创建一个空项目 </p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205214926612.png" alt="image-20240205214926612"></p><p>2、创建模块，选择Maven，点击Next</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205214936989.png" alt="image-20240205214936989"></p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205214941313.png" alt="image-20240205214941313"></p><p>3、填写模块名称，坐标信息，点击finish，创建完成</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205214952458.png" alt="image-20240205214952458"></p><p>4、在Maven工程下，创建HelloWorld类</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205215001910.png" alt="image-20240205215001910"></p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205215006868.png" alt="image-20240205215006868"></p><p>5、编写 HelloWorld，并运行</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HelloWorld</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Hello Maven ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li><p>Maven项目的目录结构:</p><p>maven-project01<br>|—  src  (源代码目录和测试代码目录)<br>        |—  main (源代码目录)<br>                   |— java (源代码java文件目录)<br>                   |— resources (源代码配置文件目录)<br>        |—  test (测试代码目录)<br>                   |— java (测试代码java目录)<br>                   |— resources (测试代码配置文件目录)<br>|— target (编译、打包生成文件存放目录)</p></li></ul></blockquote><h3 id="3-4-POM配置"><a href="#3-4-POM配置" class="headerlink" title="3.4 POM配置"></a>3.4 POM配置</h3><p>POM (Project Object Model) ：指的是项目对象模型，用来描述当前的maven项目。</p><ul><li>使用pom.xml文件来实现</li></ul><p>pom文件详解：</p><ul><li><project> ：pom文件的根标签，表示当前maven项目</project></li><li><modelVersion> ：声明项目描述遵循哪一个POM模型版本<ul><li>虽然模型本身的版本很少改变，但它仍然是必不可少的。目前POM模型版本是4.0.0</li></ul></modelVersion></li><li>坐标 ：<groupId>、<artifactId>、<version><ul><li>定位项目在本地仓库中的位置，由以上三个标签组成一个坐标</li></ul></version></artifactId></groupId></li><li><packaging> ：maven项目的打包方式，通常设置为jar或war（默认值：jar）</packaging></li></ul><h3 id="3-5-Maven坐标"><a href="#3-5-Maven坐标" class="headerlink" title="3.5 Maven坐标"></a>3.5 Maven坐标</h3><p>什么是坐标？</p><ul><li>Maven中的坐标是&#x3D;&#x3D;资源的唯一标识&#x3D;&#x3D; , 通过该坐标可以唯一定位资源位置</li><li>使用坐标来定义项目或引入项目中需要的依赖</li></ul><p>Maven坐标主要组成</p><ul><li><p>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</p></li><li><p>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</p></li><li><p>version：定义当前项目版本号</p></li><li><p><strong>注意：</strong></p><ul><li>上面所说的资源可以是插件、依赖、当前项目。</li><li>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</li></ul></li></ul><h3 id="3-6-导入Mavem项目"><a href="#3-6-导入Mavem项目" class="headerlink" title="3.6 导入Mavem项目"></a>3.6 导入Mavem项目</h3><ul><li><strong>方式1：使用Maven面板，快速导入项目</strong></li></ul><p>打开IDEA，选择右侧Maven面板，点击 + 号，选中对应项目的pom.xml文件，双击即可</p><p>说明：如果没有Maven面板，选择 View  &#x3D;&gt;  Appearance  &#x3D;&gt;  Tool Window Bars</p><ul><li><strong>方式2：使用idea导入模块项目</strong></li></ul><p>File  &#x3D;&gt;  Project Structure  &#x3D;&gt;  Modules  &#x3D;&gt;  +  &#x3D;&gt;  Import Module</p><p>找到要导入工程的pom.xml</p><h2 id="4-依赖管理"><a href="#4-依赖管理" class="headerlink" title="4.依赖管理"></a>4.依赖管理</h2><h3 id="4-1-依赖配置"><a href="#4-1-依赖配置" class="headerlink" title="4.1 依赖配置"></a>4.1 依赖配置</h3><p>依赖：指当前项目运行所需要的jar包。一个项目中可以引入多个依赖：</p><p>例如：在当前工程中，我们需要用到logback来记录日志，此时就可以在maven工程的pom.xml文件中，引入logback的依赖。具体步骤如下：</p><ol><li>在pom.xml中编写<dependencies>标签</dependencies></li><li>在<dependencies>标签中使用<dependency>引入坐标</dependency></dependencies></li><li>定义坐标的 groupId、artifactId、version</li><li>点击刷新按钮，引入最新加入的坐标</li></ol><ul><li>刷新依赖：保证每一次引入新的依赖，或者修改现有的依赖配置，都可以加入最新的坐标</li></ul><p>注意事项：</p><ol><li>如果引入的依赖，在本地仓库中不存在，将会连接远程仓库 &#x2F; 中央仓库，然后下载依赖（这个过程会比较耗时，耐心等待）</li><li>如果不知道依赖的坐标信息，可以到mvn的中央仓库（<a href="https://mvnrepository.com/%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/）中搜索</a></li></ol><p><strong>添加依赖的几种方式：</strong></p><ol><li>利用中央仓库搜索的依赖坐标</li><li>利用IDEA工具搜索依赖</li><li>熟练上手maven后，快速导入依赖</li></ol><h3 id="4-2-依赖传递"><a href="#4-2-依赖传递" class="headerlink" title="4.2 依赖传递"></a>4.2 依赖传递</h3><p>依赖传递可以分为：</p><ol><li><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系</p></li><li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</p></li></ol><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205215444194.png" alt="image-20240205215444194"></p><p>比如以上图中：</p><ul><li>projectA依赖了projectB。对于projectA 来说，projectB 就是直接依赖。</li><li>而projectB依赖了projectC及其他jar包。 那么此时，在projectA中也会将projectC的依赖传递下来。对于projectA 来说，projectC就是间接依赖。</li></ul><p>在pom.xml文件中只添加了logback-classic依赖，但由于maven的依赖具有传递性，所以会自动把所依赖的其他jar包也一起导入。</p><h3 id="4-3-排除依赖"><a href="#4-3-排除依赖" class="headerlink" title="4.3 排除依赖"></a>4.3 排除依赖</h3><p>问题：之前我们讲了依赖具有传递性。那么A依赖B，B依赖C，如果A不想将C依赖进来，是否可以做到？ </p><p>答案：在maven项目中，我们可以通过排除依赖来实现。</p><p>什么是排除依赖？</p><ul><li>排除依赖：指主动断开依赖的资源。（被排除的资源无需指定版本）</li></ul><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.itheima</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">maven-projectB</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.0-SNAPSHOT</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">   </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">&lt;!--排除依赖, 主动断开依赖的资源--&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">exclusions</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">exclusion</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">junit</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">junit</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">exclusion</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">exclusions</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><h3 id="4-4-依赖范围"><a href="#4-4-依赖范围" class="headerlink" title="4.4 依赖范围"></a>4.4 依赖范围</h3><p>在项目中导入依赖的jar包后，默认情况下，可以在任何地方使用。</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205215620227.png" alt="image-20240205215620227"></p><p>如果希望限制依赖的使用范围，可以通过<scope>标签设置其作用范围。</scope></p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205215628711.png" alt="image-20240205215628711"></p><p>作用范围：</p><ol><li><p>主程序范围有效（main文件夹范围内）</p></li><li><p>测试程序范围有效（test文件夹范围内）</p></li><li><p>是否参与打包运行（package指令范围内）</p></li></ol><p>scope标签的取值范围：</p><table><thead><tr><th><strong>scope</strong>值</th><th><strong>主程序</strong></th><th><strong>测试程序</strong></th><th><strong>打包（运行）</strong></th><th><strong>范例</strong></th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><h3 id="4-5-生命周期"><a href="#4-5-生命周期" class="headerlink" title="4.5 生命周期"></a>4.5 生命周期</h3><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。 描述了一次项目构建，经历哪些阶段。</p><p>Maven从大量项目和构建工具中学习和反思，然后总结了一套高度完美的，易扩展的项目构建生命周期。这个生命周期包含了项目的清理，初始化，编译，测试，打包，集成测试，验证，部署和站点生成等几乎所有构建步骤。</p><p>Maven对项目构建的生命周期划分为3套（相互独立）：</p><ul><li><p>clean：清理工作。</p></li><li><p>default：核心工作。如：编译、测试、打包、安装、部署等。</p></li><li><p>site：生成报告、发布站点等。</p></li></ul><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205215723855.png" alt="image-20240205215723855"></p><p>• clean：移除上一次构建生成的文件</p><p>• compile：编译项目源代码</p><p>• test：使用合适的单元测试框架运行测试(junit)</p><p>• package：将编译后的文件打包，如：jar、war等</p><p>• install：安装项目到本地仓库</p><p>Maven的生命周期是抽象的，这意味着生命周期本身不做任何实际工作。<strong>在Maven的设计中，实际任务（如源代码编译）都交由插件来完成。</strong></p><p>IDEA工具为了方便程序员使用maven生命周期，在右侧的maven工具栏中，已给出快速访问通道</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205215746827.png" alt="image-20240205215746827"></p><p>生命周期的顺序是：clean –&gt; validate –&gt; compile –&gt; test –&gt; package –&gt; verify –&gt; install –&gt; site –&gt; deploy </p><p>我们需要关注的就是：clean –&gt;  compile –&gt; test –&gt; package  –&gt; install </p><p>4.6 执行</p><p>在日常开发中，当我们要执行指定的生命周期时，有两种执行方式：</p><ol><li>在idea工具右侧的maven工具栏中，选择对应的生命周期，双击执行</li><li>在DOS命令行中，通过maven命令执行</li></ol><p><strong>方式一：在idea中执行生命周期</strong></p><ul><li>选择对应的生命周期，双击执行</li></ul><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205215815327.png" alt="image-20240205215815327"></p><p>test：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20221201164627403.png" alt="image-20221201164627403"></p><p>package：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20221201165801341.png" alt="image-20221201165801341"></p><p>install：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20221201170830837.png" alt="image-20221201170830837"></p><p>clean：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20221201171529382.png" alt="image-20221201171529382"></p><p><strong>方式二：在命令行中执行生命周期</strong></p><ol><li>进入到DOS命令行</li></ol><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20221201172210253.png" alt="image-20221201172210253"></p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20221201172914648.png" alt="image-20221201172914648"> </p><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h2><h3 id="5-1-更新依赖索引"><a href="#5-1-更新依赖索引" class="headerlink" title="5.1 更新依赖索引"></a>5.1 更新依赖索引</h3><p>有时候给idea配置完maven仓库信息后，在idea中依然搜索不到仓库中的jar包。这是因为仓库中的jar包索引尚未更新到idea中。这个时候我们就需要更新idea中maven的索引了，具体做法如下：</p><p> 打开设置—-搜索maven—-Repositories—-选中本地仓库—–点击Update</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/1537786634456-1582625518984.png" alt="1537786634456"></p><h3 id="5-2-清理maven仓库"><a href="#5-2-清理maven仓库" class="headerlink" title="5.2 清理maven仓库"></a>5.2 清理maven仓库</h3><p>初始情况下，我们的本地仓库是没有任何jar包的，此时会从私服去下载（如果没有配置，就直接从中央仓库去下载），可能由于网络的原因，jar包下载不完全，这些不完整的jar包都是以lastUpdated结尾。此时，maven不会再重新帮你下载，需要你删除这些以lastUpdated结尾的文件，然后maven才会再次自动下载这些jar包。</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/lastUpdated-1582625518983.png" alt="lastUpdate"></p><p>如果本地仓库中有很多这样的以lastUpadted结尾的文件，可以定义一个批处理文件，在其中编写如下脚本来删除： </p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">set REPOSITORY_PATH=E:\develop\apache-maven-3.6.1\mvn_repo</span></span><span class="line"><span style="color: #babed8">rem 正在搜索...</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">del /s /q %REPOSITORY_PATH%\*.lastUpdated</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">rem 搜索完毕</span></span><span class="line"><span style="color: #babed8">pause</span></span></code></pre></div><p>操作步骤如下：</p><p>1). 定义批处理文件del_lastUpdated.bat  (直接创建一个文本文件，命名为del_lastUpdated，后缀名直接改为bat即可 )</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20221214154949482.png" alt="image-20221214154949482"> </p><p>2). 在上面的bat文件上<strong>右键—》编辑</strong> 。修改文件：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20221214154559817.png" alt="image-20221214154559817"> </p><p>修改完毕后，双击运行即可删除maven仓库中的残留文件。</p><h2 id="6-Maven高级"><a href="#6-Maven高级" class="headerlink" title="6.Maven高级"></a>6.Maven高级</h2><p>Maven高级内容包括:</p><ul><li>分模块设计与开发</li><li>继承与聚合</li><li>私服</li></ul><h3 id="6-1-分模块设计与开发"><a href="#6-1-分模块设计与开发" class="headerlink" title="6.1 分模块设计与开发"></a>6.1 分模块设计与开发</h3><p>所谓分模块设计，顾名思义指的就是我们在设计一个 Java 项目的时候，将一个 Java 项目拆分成多个模块进行开发。</p><p><strong>1). 未分模块设计的问题</strong> </p><p>如果项目不分模块，也就意味着所有的业务代码是不是都写在这一个 Java 项目当中。随着这个项目的业务扩张，项目当中的业务功能可能会越来越多。</p><p><strong>总结起来，主要两点问题：不方便项目的维护和管理、项目中的通用组件难以复用。</strong></p><p><strong>2). 分模块设计</strong></p><p>分模块设计我们在进行项目设计阶段，就可以将一个大的项目拆分成若干个模块，每一个模块都是独立的。</p><p><strong>分模块设计就是将项目按照功能&#x2F;结构拆分成若干个子模块，方便项目的管理维护、拓展，也方便模块键的相互调用、资源共享。</strong></p><p>注意：分模块开发需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分。</p><p><strong>例子：</strong></p><p><strong>1.创建maven模块 tlias-pojo，存放实体类</strong></p><p>A. 创建一个正常的Maven模块，模块名tlias-pojo</p><p>B. 然后在tlias-pojo中创建一个包 com.itheima.pojo (和原来案例项目中的pojo包名一致)</p><p>C. 将原来案例项目 tlias-web-management 中的pojo包下的实体类，复制到tlias-pojo模块中</p><p>D. 在 tlias-pojo 模块的pom.xml文件中引入依赖</p><p>E. 删除原有案例项目tlias-web-management的pojo包【直接删除不要犹豫，我们已经将该模块拆分出去了】，然后在pom.xml中引入 tlias-pojo的依赖</p><p><strong>2. 创建Maven模块 tlias-utils，存放相关工具类</strong></p><p>A. 创建一个正常的Maven模块，模块名tlias-utils</p><p>B. 然后在 tlias-utils 中创建一个包 com.itheima.utils (和原来案例项目中的utils包名一致)</p><p>C. 将原来案例项目 tlias-web-management 中的utils包下的实体类，复制到tlias-utils模块中</p><p>D. 在 tlias-utils 模块的pom.xml文件中引入依赖</p><p>E. 删除原有案例项目tlias-web-management的utils包【直接删除不要犹豫，我们已经将该模块拆分出去了】，然后在pom.xml中引入 tlias-utils的依赖</p><p><strong>到此呢，就已经完成了模块的拆分，拆分出了 tlias-pojo、tlias-utils、tlias-web-management ，如果其他项目中需要用到 pojo，或者 utils工具类，就可以直接引入依赖。</strong> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>1). 什么是分模块设计：将项目按照功能拆分成若干个子模块</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>2). 为什么要分模块设计：方便项目的管理维护、扩展，也方便模块间的相互调用，资源共享</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>3). 注意事项：分模块设计需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分</p></blockquote><h3 id="6-2-继承"><a href="#6-2-继承" class="headerlink" title="6.2 继承"></a>6.2 继承</h3><ul><li><p>概念：继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</p></li><li><p>作用：简化依赖配置、统一管理依赖</p></li><li><p>实现：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">...</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">...</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">...</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">....</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div></li></ul><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20240205222420698.png" alt="image-20240205222420698"></p><p>1). 创建maven模块 tlias-parent ，该工程为父工程，设置打包方式pom(默认jar)。</p><p>工程结构如下：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20230113120517216-17071432622601.png" alt="image-20230113120517216"></p><p>父工程tlias-parent的pom.xml文件配置如下：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.springframework.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">spring-boot-starter-parent</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">2.7.5</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">/&gt;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">&lt;!-- lookup parent from repository --&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.itheima</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">tlias-parent</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.0-SNAPSHOT</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">packaging</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">pom</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">packaging</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Maven打包方式：</p><ul><li>jar：普通模块打包，springboot项目基本都是jar包（内嵌tomcat运行）</li><li>war：普通web程序打包，需要部署在外部的tomcat服务器中运行</li><li>pom：父工程或聚合工程，该模块不写代码，仅进行依赖管理</li></ul></blockquote><p>2). 在子工程的pom.xml文件中，配置继承关系。</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.itheima</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">tlias-parent</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.0-SNAPSHOT</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">../tlias-parent/pom.xml</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">tlias-utils</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.0-SNAPSHOT</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>这里是以 tlias-utils 为例，指定了其父工程。其他的模块，都是相同的配置方式。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：</p><ul><li>在子工程中，配置了继承关系之后，坐标中的groupId是可以省略的，因为会自动继承父工程的 。</li><li>relativePath指定父工程的pom文件的相对位置（如果不指定，将从本地仓库&#x2F;远程仓库查找该工程）。<ul><li>..&#x2F; 代表的上一级目录</li></ul></li></ul></blockquote><p>3). 在父工程中配置各个工程共有的依赖（子工程会自动继承父工程的依赖）。</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.projectlombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">lombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.18.24</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>此时，我们已经将各个子工程中共有的依赖（lombok），都定义在了父工程中，子工程中的这一项依赖，就可以直接删除了。删除之后，我们会看到父工程中配置的依赖 lombok，子工程直接继承下来了。</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20230113120408661.png" alt="image-20230113120408661"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>工程结构说明：</strong></p><ul><li><p>我们当前的项目结构为：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20230113120636912.png" alt="image-20230113120636912"> </p><p>因为我们是项目开发完毕之后，给大家基于现有项目拆分的各个模块，tlias-web-management已经存在了，然后再创建各个模块与父工程，所以父工程与模块之间是平级的。</p></li><li><p>而实际项目中，可能还会见到下面的工程结构：</p><p><img src="/oranfish.github.io/posts/0/Maven%E5%AD%A6%E4%B9%A0/image-20230113120728680.png" alt="image-20230113120728680"> </p><p>而在真实的企业开发中，都是先设计好模块之后，再开始创建模块，开发项目。 那此时呢，一般都会先创建父工程 tlias-parent，然后将创建的各个子模块，都放在父工程parent下面。 这样层级结构会更加清晰一些。 </p><p><strong>PS：上面两种工程结构，都是可以正常使用的，没有一点问题。 只不过，第二种结构，看起来，父子工程结构更加清晰、更加直观。</strong></p></li></ul></blockquote><p><strong>版本锁定</strong></p><p>那假如说，我们项目要升级，要使用到jwt最新版本 0.9.2 中的一个新功能，那此时需要将依赖的版本升级到0.9.2，那此时该怎么做呢 ？</p><p>第一步：去找当前项目中所有的模块的pom.xml配置文件，看哪些模块用到了jwt的依赖。</p><p>第二步：找到这个依赖之后，将其版本version，更换为 0.9.2。</p><p><strong>问题：如果项目拆分的模块比较多，每一次更换版本，我们都得找到这个项目中的每一个模块，一个一个的更改。 很容易就会出现，遗漏掉一个模块，忘记更换版本的情况。</strong></p><p>那我们又该如何来解决这个问题，如何来统一管理各个依赖的版本呢？ </p><p>答案：Maven的版本锁定功能。</p><p>在maven中，可以在父工程的pom文件中通过 <code>&lt;dependencyManagement&gt;</code> 来统一管理依赖版本。</p><p>父工程：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">&lt;!--统一管理依赖版本--&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencyManagement</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #676E95; font-style: italic">&lt;!--JWT令牌--&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">io.jsonwebtoken</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">jjwt</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">0.9.1</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencyManagement</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>子工程：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">&lt;!--JWT令牌--&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">io.jsonwebtoken</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">jjwt</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：</p><ul><li><p>在父工程中所配置的 <code>&lt;dependencyManagement&gt;</code> 只能统一管理依赖版本，并不会将这个依赖直接引入进来。 这点和 <code>&lt;dependencies&gt;</code> 是不同的。</p></li><li><p>子工程要使用这个依赖，还是需要引入的，只是此时就无需指定 <code>&lt;version&gt;</code> 版本号了，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</p></li></ul></blockquote><p>接下来，我们就可以将tlias-utils模块中单独配置的依赖，将其版本统一交给 tlias-parent 进行统一管理。</p><p>如果依赖的版本已经在父工程进行了统一管理，所以在子工程中就无需再配置依赖的版本了。</p><p>我们也可以通过自定义属性及属性引用的形式，在父工程中将依赖的版本号进行集中管理维护。 </p><p>版本集中管理之后，我们要想修改依赖的版本，就只需要在父工程中自定义属性的位置，修改对应的属性值即可。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>面试题：<code>&lt;dependencyManagement&gt;</code> 与 <code>&lt;dependencies&gt;</code> 的区别是什么?</strong></p><ul><li><code>&lt;dependencies&gt;</code> 是直接依赖，在父工程配置了依赖，子工程会直接继承下来。 </li><li><code>&lt;dependencyManagement&gt;</code> 是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖(无需指定版本)</li></ul></blockquote><h3 id="6-3-聚合"><a href="#6-3-聚合" class="headerlink" title="6.3 聚合"></a>6.3 聚合</h3><p>分模块设计与开发之后啊，我们的项目被拆分为多个模块，而模块之间的关系，可能错综复杂。 那就比如我们当前的案例项目，结构如下（相对还是比较简单的）：</p><img src="/oranfish.github.io/posts/0/image-20230113142520463.png" alt="image-20230113142520463" style="zoom:67%;"><p>那此时，大家试想一下，如果开发一个大型项目，拆分的模块很多，模块之间的依赖关系错综复杂，那此时要进行项目的打包、安装操作，是非常繁琐的。 而我们接下来，要讲解的maven的聚合就是来解决这个问题的，通过maven的聚合就可以轻松实现项目的一键构建（清理、编译、测试、打包、安装等）。</p><img src="/oranfish.github.io/posts/0/image-20230113151533948.png" alt="image-20230113151533948" style="zoom:80%;"> <ul><li><strong>聚合：</strong>将多个模块组织成一个整体，同时进行项目的构建。</li><li><strong>聚合工程：</strong>一个不具有业务功能的“空”工程（有且仅有一个pom文件） 【PS：一般来说，继承关系中的父工程与聚合关系中的聚合工程是同一个】</li><li><strong>作用：</strong>快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）</li></ul><p>在maven中，我们可以在聚合工程中通过 <code>&lt;moudules&gt;</code> 设置当前聚合工程所包含的子模块的名称。我们可以在 tlias-parent中，添加如下配置，来指定当前聚合工程，需要聚合的模块：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;!--</span><span style="color: #BABED8">聚合其他模块</span><span style="color: #89DDFF">--&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">modules</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;../</span><span style="color: #BABED8">tlias</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">pojo</span><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;../</span><span style="color: #BABED8">tlias</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">utils</span><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;../</span><span style="color: #BABED8">tlias</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">web</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">management</span><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">modules</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>那此时，我们要进行编译、打包、安装操作，就无需在每一个模块上操作了。只需要在聚合工程上，统一进行操作就可以了。</p><p><strong>继承与聚合对比</strong></p><ul><li><p><strong>作用</strong></p><ul><li><p>聚合用于快速构建项目</p></li><li><p>继承用于简化依赖配置、统一管理依赖</p></li></ul></li><li><p><strong>相同点：</strong></p><ul><li><p>聚合与继承的pom.xml文件打包方式均为pom，通常将两种关系制作到同一个pom文件中</p></li><li><p>聚合与继承均属于设计型模块，并无实际的模块内容</p></li></ul></li><li><p><strong>不同点：</strong></p><ul><li><p>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些</p></li><li><p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</p></li></ul></li></ul><h3 id="6-4-私服"><a href="#6-4-私服" class="headerlink" title="6.4 私服"></a>6.4 私服</h3><p>私服其实就是架设在公司局域网内部的一台服务器，就是一种特殊的远程仓库。</p><p>有了私服之后，各个团队就可以直接来连接私服了。 A 连接上私服之后，他就可以把jar包直接上传到私服当中。我公司自己内部搭建的服务器，我是不是有权限操作呀，把jar包上传到私服之后，我让 B 团队的所有开发人员也连接同一台私服。连接上这一台私服之后，他就会根据坐标的信息，直接从私服当中将对应的jar包下载到自己的本地仓库，这样就可以使用到依赖当中所提供的一些工具类了。这样我们就可以通过私服来完成资源的共享。</p><ul><li><strong>私服：</strong>是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</li><li><strong>依赖查找顺序：</strong><ul><li>本地仓库</li><li>私服仓库</li><li>中央仓库</li></ul></li><li><strong>注意事项：</strong>私服在企业项目开发中，一个项目&#x2F;公司，只需要一台即可（无需我们自己搭建，会使用即可）。</li></ul><p><strong>资源的上传与下载</strong></p><p>资源上传与下载，我们需要做三步配置，执行一条指令。</p><p>第一步配置：在maven的配置文件中配置访问私服的用户名、密码。</p><p>第二步配置：在maven的配置文件中配置连接私服的地址(url地址)。</p><p>第三步配置：在项目的pom.xml文件中配置上传资源的位置(url地址)。</p><p>配置好了上述三步之后，要上传资源到私服仓库，就执行执行maven生命周期：deploy。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>私服仓库说明：</p><ul><li>RELEASE：存储自己开发的RELEASE发布版本的资源。</li><li>SNAPSHOT：存储自己开发的SNAPSHOT发布版本的资源。</li><li>Central：存储的是从中央仓库下载下来的依赖。</li></ul></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>项目版本说明：</p><ul><li>RELEASE(发布版本)：功能趋于稳定、当前更新停止，可以用于发行的版本，存储在私服中的RELEASE仓库中。</li><li>SNAPSHOT(快照版本)：功能不稳定、尚处于开发中的版本，即快照版本，存储在私服的SNAPSHOT仓库中。</li></ul></blockquote><p>1.设置私服的访问用户名&#x2F;密码（在自己maven安装目录下的conf&#x2F;settings.xml中的servers中配置）</p><p>2.设置私服依赖下载的仓库组地址（在自己maven安装目录下的conf&#x2F;settings.xml中的mirrors、profiles中配置）</p><p>3.IDEA的maven工程的pom文件中配置上传（发布）地址(直接在tlias-parent中配置发布地址)</p><p>配置完成之后，我们就可以在tlias-parent中执行<strong>deploy</strong>生命周期，将项目发布到私服仓库中。 </p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb前端速通</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Javaweb前端速通"><a href="#Javaweb前端速通" class="headerlink" title="Javaweb前端速通"></a>Javaweb前端速通</h1><h2 id="1-前端开发介绍"><a href="#1-前端开发介绍" class="headerlink" title="1.前端开发介绍"></a>1.前端开发介绍</h2><p>前端开发，主要的职责就是将数据以好看的样式呈现出来。说白了，就是开发网页程序。</p><h2 id="2-web标准"><a href="#2-web标准" class="headerlink" title="2.web标准"></a>2.web标准</h2><p><strong>Web标准</strong>也称为<strong>网页标准</strong>，由一系列的标准组成，大部分由W3C（ World Wide Web Consortium，万维网联盟）负责制定。由三个组成部分：</p><ul><li><p>HTML：负责网页的结构（页面元素和内容）。</p></li><li><p>CSS：负责网页的表现（页面元素的外观、位置等页面样式，如：颜色、大小等）。</p></li><li><p>JavaScript：负责网页的行为（交互效果）。</p></li></ul><p>随着技术的发展，我们为了更加快速的开发，现在也出现了很多前端开发的高级技术。例如：vue、elementui、Axios等等。</p><h2 id="3-HTML-CSS"><a href="#3-HTML-CSS" class="headerlink" title="3.HTML&amp;CSS"></a>3.HTML&amp;CSS</h2><p><strong>HTML&amp;CSS基本学习同前端知识点总结一文</strong></p><p>**HTML: **HyperText Markup Language，超文本标记语言。</p><ul><li><p>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</p></li><li><p>标记语言：由标签构成的语言</p></li></ul><p><strong>CSS:</strong> Cascading Style Sheet，层叠样式表，用于控制页面的样式（表现）。</p><p><strong>盒子模型</strong>：</p><ul><li>盒子：页面中所有的元素（标签），都可以看做是一个 盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</li><li>盒子模型组成：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）</li></ul><h2 id="4-文档查阅"><a href="#4-文档查阅" class="headerlink" title="4.文档查阅"></a>4.文档查阅</h2><p>文档地址: <a href="https://www.w3school.com.cn/index.html">https://www.w3school.com.cn/index.html</a></p><h2 id="5-JavaScript"><a href="#5-JavaScript" class="headerlink" title="5.JavaScript"></a>5.JavaScript</h2><p>通过<strong>代码&#x2F;js效果演示</strong>提供资料进行效果演示，通过浏览器打开，我们点击主题5按钮，页面的主题发生了变化，所以js可以让我们的页面更加的智能，让页面和用户进行交互。</p><h3 id="5-1-引入方式"><a href="#5-1-引入方式" class="headerlink" title="5.1 引入方式"></a>5.1 引入方式</h3><p><strong>第一种方式：</strong>内部脚本，将JS代码定义在HTML页面中</p><ul><li>JavaScript代码必须位于&lt;script&gt;&lt;&#x2F;script&gt;标签之间</li><li>在HTML文档中，可以在任意地方，放置任意数量的&lt;script&gt;</li><li>一般会把脚本置于&lt;body&gt;元素的底部，可改善显示速度</li></ul><p><strong>第二种方式：</strong>外部脚本将， JS代码定义在外部 JS文件中，然后引入到 HTML页面中</p><ul><li>外部JS文件中，只包含JS代码，不包含&amp;ltscript&gt;标签</li><li>引入外部js的&lt;script&gt;标签，必须是双标签</li></ul><h3 id="5-2-语法"><a href="#5-2-语法" class="headerlink" title="5.2 语法"></a>5.2 语法</h3><p><strong>基础语法：</strong></p><ul><li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的</p></li><li><p>每行结尾的分号可有可无</p></li><li><p>大括号表示代码块</p></li></ul><table><thead><tr><th>api</th><th>描述</th></tr></thead><tbody><tr><td>window.alert()</td><td>警告框</td></tr><tr><td>document.write()</td><td>在HTML 输出内容</td></tr><tr><td>console.log()</td><td>写入浏览器控制台</td></tr></tbody></table><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>var</td><td>早期ECMAScript5中用于变量声明的关键字</td></tr><tr><td>let</td><td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td></tr><tr><td>const</td><td>声明常量的，常量一旦声明，不能修改</td></tr></tbody></table><ul><li>JavaScript 是一门弱类型语言，变量可以存放不同类型的值 。</li><li>变量名需要遵循如下规则：<ul><li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul></li></ul><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>数字（整数、小数、NaN(Not a Number)）</td></tr><tr><td>string</td><td>字符串，单双引皆可</td></tr><tr><td>boolean</td><td>布尔。true，false</td></tr><tr><td>null</td><td>对象为空</td></tr><tr><td>undefined</td><td>当声明的变量未初始化时，该变量的默认值是 undefined</td></tr></tbody></table><table><thead><tr><th>运算规则</th><th>运算符</th></tr></thead><tbody><tr><td>算术运算符</td><td>+ , - , * , &#x2F; , % , ++ , –</td></tr><tr><td>赋值运算符</td><td>&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , %&#x3D;</td></tr><tr><td>比较运算符</td><td>&gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; , !&#x3D; , &#x3D;&#x3D; , &#x3D;&#x3D;&#x3D;   注意     &#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp; , || , !</td></tr><tr><td>三元运算符</td><td>条件表达式 ? true_value: false_value</td></tr></tbody></table><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">函数名</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">参数1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">参数2..</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">要执行的代码</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>因为JavaScript是弱数据类型的语言，所以有如下几点需要注意：</p><ul><li>形式参数不需要声明类型，并且JavaScript中不管什么类型都是let或者var去声明，加上也没有意义。</li><li>返回值也不需要声明类型，直接return即可</li></ul><p>第二种可以通过let去定义函数的名字，具体格式如下：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> functionName </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">参数1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">参数2..</span><span style="color: #89DDFF">)&#123;</span><span style="color: #F07178">   </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//要执行的代码</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>接下来我们按照上述的格式，修改代码如下：只需要将第一种定义方式注释掉，替换成第二种定义方式即可，函数的调用不变</p><h3 id="5-3-JS对象"><a href="#5-3-JS对象" class="headerlink" title="5.3 JS对象"></a>5.3 JS对象</h3><p><strong>基本对象：Array对象</strong></p><p>Array对象时用来定义数组的。常用语法格式有如下2种：</p><p>方式1：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 变量名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Array</span><span style="color: #BABED8">(元素列表)</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span></span></code></pre></div><p>方式2：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 变量名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> [ 元素列表 ]</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span></span></code></pre></div><p>与java中不一样的是，JavaScript中数组相当于java中的集合，数组的长度是可以变化的。而且JavaScript是弱数据类型的语言，所以数组中可以存储任意数据类型的值。接下来我们通过代码来演示上述特点。</p><p>属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">设置或返回数组中元素的数量。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th align="left">方法方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">forEach()</td><td align="left">遍历数组中的每个有值得元素，并调用一次传入的函数</td></tr><tr><td align="left">push()</td><td align="left">将新元素添加到数组的末尾，并返回新的长度</td></tr><tr><td align="left">splice()</td><td align="left">从数组中删除元素</td></tr></tbody></table><p><strong>forEach()函数</strong></p><p>首先我们学习forEach()方法，顾名思义，这是用来遍历的，那么遍历做什么事呢？所以这个方法的参数，需要传递一个函数，而且这个函数接受一个参数，就是遍历时数组的值。修改之前的遍历代码如下：</p><p><strong>push()函数</strong></p><p>push()函数是用于向数组的末尾添加元素的，其中函数的参数就是需要添加的元素，编写如下代码：向数组的末尾添加3个元素</p><p><strong>splice()函数</strong></p><p>splice()函数用来数组中的元素，函数中填入2个参数。</p><p>参数1：表示从哪个索引位置删除</p><p>参数2：表示删除元素的个数</p><p><strong>String对象</strong></p><p>String对象的创建方式有2种：</p><p>方式1：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 变量名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">String</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">…</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">) </span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//方式一</span></span></code></pre></div><p>方式2：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 变量名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">…</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//方式二</span></span></code></pre></div><p>String对象也提供了一些常用的属性和方法，如下表格所示：</p><p>属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>字符串的长度。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回在指定位置的字符。</td></tr><tr><td>indexOf()</td><td>检索字符串。</td></tr><tr><td>trim()</td><td>去除字符串两边的空格</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr></tbody></table><ul><li><p><strong>charAt()函数：</strong></p><p>charAt()函数用于返回在指定索引位置的字符，函数的参数就是索引。</p></li><li><p><strong>indexOf()函数：</strong></p><p>indexOf()函数用于检索指定内容在字符串中的索引位置的，返回值是索引，参数是指定的内容。</p></li><li><p><strong>trim()函数：</strong></p><p>trim()函数用于去除字符串两边的空格的。</p></li><li><p><strong>substring()函数：</strong></p><p>substring()函数用于截取字符串的，函数有2个参数。</p><p>参数1：表示从那个索引位置开始截取。包含</p><p>参数2：表示到那个索引位置结束。不包含</p></li></ul><p><strong>JSON对象</strong></p><p>在 JavaScript 中自定义对象特别简单，其语法格式如下：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 对象名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">属性名1</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> 属性值1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">属性名2</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> 属性值2</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">属性名3</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> 属性值3</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #82AAFF">函数名称</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">形参列表</span><span style="color: #89DDFF">)&#123;&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;;</span></span><span class="line"></span></code></pre></div><p>我们可以通过如下语法调用属性：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">对象名</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">属性名</span></span></code></pre></div><p>通过如下语法调用函数：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">对象名</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">函数名</span><span style="color: #BABED8">()</span></span></code></pre></div><p>JSON对象：<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript对象标记法。是通过JavaScript标记法书写的文本。其格式如下：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">key</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">:</span><span style="color: #BABED8">value</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">key</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">:</span><span style="color: #BABED8">value</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">key</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">:</span><span style="color: #BABED8">value</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>其中，<strong>key必须使用引号并且是双引号标记，value可以是任意数据类型。</strong></p><p>那么json这种数据格式的文本到底应用在企业开发的什么地方呢？– 经常用来作为前后台交互的数据载体</p><p>前后台交互时，我们需要传输数据，但是java中的对象我们该怎么去描述呢？我们可以使用如图所示的xml格式，可以清晰的描述java中需要传递给前端的java对象。</p><p>但是xml格式存在如下问题：</p><ul><li>标签需要编写双份，占用带宽，浪费资源</li><li>解析繁琐</li></ul><p>所以我们可以使用json来替代。</p><p><strong>BOM对象</strong></p><p>BOM的全称是Browser Object Model,翻译过来是浏览器对象模型。也就是JavaScript将浏览器的各个组成部分封装成了对象。我们要操作浏览器的部分功能，可以通过操作BOM对象的相关属性或者函数来完成。</p><p>BOM中提供了如下5个对象：</p><table><thead><tr><th align="left">对象名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Window</td><td align="left">浏览器窗口对象</td></tr><tr><td align="left">Navigator</td><td align="left">浏览器对象</td></tr><tr><td align="left">Screen</td><td align="left">屏幕对象</td></tr><tr><td align="left">History</td><td align="left">历史记录对象</td></tr><tr><td align="left">Location</td><td align="left">d地址栏对象</td></tr></tbody></table><p><strong>1.Window对象</strong> </p><p>window对象指的是浏览器窗口对象，是JavaScript的全部对象，所以对于window对象，我们可以直接使用，并且对于window对象的方法和属性，我们可以省略window.</p><p>window对象提供了获取其他BOM对象的属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>history</td><td>用于获取history对象</td></tr><tr><td>location</td><td>用于获取location对象</td></tr><tr><td>Navigator</td><td>用于获取Navigator对象</td></tr><tr><td>Screen</td><td>用于获取Screen对象</td></tr></tbody></table><p>window也提供了一些常用的函数，如下表格所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>alert()</td><td>显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td>comfirm()</td><td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr></tbody></table><p>setInterval(fn,毫秒值)：定时器，用于周期性的执行某个功能，并且是<strong>循环执行</strong>。该函数需要传递2个参数：</p><p>fn:函数，需要周期性执行的功能代码</p><p>毫秒值：间隔时间</p><p>setTimeout(fn,毫秒值) ：定时器，只会在一段时间后<strong>执行一次功能</strong>。参数和上述setInterval一致</p><p><strong>2.Location对象</strong></p><p>location是指代浏览器的地址栏对象，对于这个对象，我们常用的是href属性，用于获取或者设置浏览器的地址信息。</p><p><strong>DOM对象</strong></p><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。</p><p>DOM 其实我们并不陌生，之前在学习 XML 就接触过，只不过 XML 文档中的标签需要我们写代码解析，而 HTML 文档是浏览器解析。封装的对象分为</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><p>那么我们学习DOM技术有什么用呢？主要作用如下：</p><ul><li>改变 HTML 元素的内容</li><li>改变 HTML 元素的样式（CSS）</li><li>对 HTML DOM 事件作出反应</li><li>添加和删除 HTML 元素</li></ul><p>HTML中的Element对象可以通过Document对象获取，而Document对象是通过window对象获取的。document对象提供的用于获取Element元素对象的api如下表所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>根据id属性值获取，返回单个Element对象</td></tr><tr><td>document.getElementsByTagName()</td><td>根据标签名称获取，返回Element对象数组</td></tr><tr><td>document.getElementsByName()</td><td>根据name属性值获取，返回Element对象数组</td></tr><tr><td>document.getElementsByClassName()</td><td>根据class属性值获取，返回Element对象数组</td></tr></tbody></table><h3 id="5-4-JS对象"><a href="#5-4-JS对象" class="headerlink" title="5.4 JS对象"></a>5.4 JS对象</h3><p>什么是事件呢？HTML事件是发生在HTML元素上的 “事情”，例如：</p><ul><li>按钮被点击</li><li>鼠标移到元素上</li><li>输入框失去焦点</li><li>……..</li></ul><p><strong>事件绑定</strong> </p><p>JavaScript对于事件的绑定提供了2种方式：</p><ul><li><p>方式1：通过html标签中的事件属性进行绑定</p><p>例如一个按钮，我们对于按钮可以绑定单机事件，可以借助标签的onclick属性，属性值指向一个函数。</p></li><li><p>方式2：通过DOM中Element元素的事件属性进行绑定</p><p>依据我们学习过得DOM的知识点，我们知道html中的标签被加载成element对象，所以我们也可以通过element对象的属性来操作标签的属性。</p></li></ul><p><strong>需要注意的是：事件绑定的函数，只有在事件被触发时，函数才会被调用。</strong></p><p><strong>常见事件</strong></p><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table><h2 id="6-Vue"><a href="#6-Vue" class="headerlink" title="6. Vue"></a>6. Vue</h2><p>一个完整的html页面包括了视图和数据，数据是通过请求 从后台获取的，那么意味着我们需要将后台获取到的数据呈现到页面上，很明显， 这就需要我们使用DOM操作。正因为这种开发流程，所以我们引入了一种叫做<strong>MVVM(Model-View-ViewModel)的前端开发思想</strong>，即让我们开发者更加关注数据，而非数据绑定到视图这种机械化的操作。</p><p>MVVM:其实是Model-View-ViewModel的缩写，有3个单词，具体释义如下：</p><ul><li>Model: 数据模型，特指前端中通过请求从后台获取的数据</li><li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据</li><li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上</li></ul><p>Vue.js（读音 &#x2F;vjuː&#x2F;, 类似于 <strong>view</strong>） 是一套构建用户界面的 <strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。Vue.js 的目标是通过尽可能简单的 API 实现<strong>响应的数据绑定</strong>和<strong>组合的视图组件</strong>。</p><p>框架即是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。基于框架进行开发，更加快捷、更加高效。</p><p>在创建vue对象时，有几个常用的属性：</p><ul><li>el:  用来指定哪儿些标签受 Vue 管理。 该属性取值 <code>#app</code> 中的 <code>app</code> 需要是受管理的标签的id属性值</li><li>data: 用来定义数据模型</li><li>methods: 用来定义函数。这个我们在后面就会用到</li></ul><h3 id="6-1-常用指令"><a href="#6-1-常用指令" class="headerlink" title="6.1 常用指令"></a>6.1 常用指令</h3><p>在vue中，通过大量的指令来实现数据绑定到视图的，所以接下来我们需要学习vue的常用指令，如下表所示：</p><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置  href , css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td>v-else</td><td></td></tr><tr><td>v-else-if</td><td></td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><p>v-bind:  为HTML标签绑定属性值，如设置  href , css样式等。当vue对象中的数据模型发生变化时，标签的属性值会随之发生变化。</p><p>v-model： 在表单元素上创建双向数据绑定。什么是双向？</p><ul><li>vue对象的data属性中的数据变化，视图展示会一起变化</li><li>视图数据发生变化，vue对象的data属性中的数据也会随着变化。</li></ul><p><strong>双向绑定的作用：可以获取表单的数据的值，然后提交给服务器</strong></p><p>v-on: 用来给html标签绑定事件的。<strong>需要注意的是如下2点</strong>：</p><ul><li>v-on语法给标签的事件绑定的函数，必须是vue对象种声明的函数</li><li>v-on语法绑定事件时，事件名相比较js中的事件名，没有on</li></ul><h3 id="6-2-生命周期"><a href="#6-2-生命周期" class="headerlink" title="6.2 生命周期"></a>6.2 生命周期</h3><p>vue的生命周期：指的是vue对象从创建到销毁的过程。vue的生命周期包含8个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也被称为钩子方法。其完整的生命周期如下图所示：</p><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><p>mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。<strong>以后我们一般用于页面初始化自动的ajax请求后台数据</strong></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法性能分析</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1.时间复杂度"></a>1.时间复杂度</h2><h3 id="1-1-什么是时间复杂度"><a href="#1-1-什么是时间复杂度" class="headerlink" title="1.1 什么是时间复杂度"></a>1.1 什么是时间复杂度</h3><p><strong>时间复杂度是一个函数，它定性描述该算法的运行时间</strong>。</p><p>通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认CPU的每个单元运行消耗的时间都是相同的。假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))。</p><h3 id="1-2-什么是大O"><a href="#1-2-什么是大O" class="headerlink" title="1.2 什么是大O"></a>1.2 什么是大O</h3><p>算法导论给出的解释：<strong>大O用来表示上界的</strong>，当用它作为算法的最坏情况运行时间的上界，就是对任意数据输入的运行时间的上界。</p><p>快速排序是O(nlogn)，但是当数据已经有序情况下，快速排序的时间复杂度是O(n^2) 的，**所以严格从大O的定义来讲，快速排序的时间复杂度应该是O(n^2)**。</p><p><strong>但是我们依然说快速排序是O(nlogn)的时间复杂度，这个就是业内的一个默认规定，这里说的O代表的就是一般情况，而不是严格的上界</strong>。</p><h3 id="1-3-不同数据规模的差异"><a href="#1-3-不同数据规模的差异" class="headerlink" title="1.3 不同数据规模的差异"></a>1.3 不同数据规模的差异</h3><p><strong>大O就是数据量级突破一个点且数据量级非常大的情况下所表现出的时间复杂度，这个数据量也就是常数项系数已经不起决定性作用的数据量</strong>。</p><p><strong>我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示</strong>：</p><p>O(1)常数阶 &lt; O(logn)对数阶 &lt; O(n)线性阶 &lt; O(nlogn)线性对数阶 &lt; O(n^2)平方阶 &lt; O(n^3)立方阶 &lt; O(2^n)指数阶</p><h3 id="1-4-例子"><a href="#1-4-例子" class="headerlink" title="1.4 例子"></a>1.4 例子</h3><p>题目描述：找出n个字符串中相同的两个字符串（假设这里只有两个相同的字符串）。</p><p>1）可能会忽略了字符串比较的时间消耗，这里并不像int 型数字做比较那么简单，除了n^2 次的遍历次数外，字符串比较依然要消耗m次操作（m也就是字母串的长度），所以时间复杂度是O(m × n × n)。</p><p>2）先排对n个字符串按字典序来排序，排序后n个字符串就是有序的，意味着两个相同的字符串就是挨在一起，然后在遍历一遍n个字符串，这样就找到两个相同的字符串了。</p><p>那看看这种算法的时间复杂度，快速排序时间复杂度为O(nlogn)，依然要考虑字符串的长度是m，那么快速排序每次的比较都要有m次的字符比较的操作，就是O(m × n × log n) 。</p><p>之后还要遍历一遍这n个字符串找出两个相同的字符串，别忘了遍历的时候依然要比较字符串，所以总共的时间复杂度是 O(m × n × logn + n × m)。</p><p>我们对O(m × n × log n + n × m) 进行简化操作，把m × n提取出来变成 O(m × n × (logn + 1))，再省略常数项最后的时间复杂度是 O(m × n × log n)。</p><p>ps：例子仅用于讲解示范时间复杂度。</p><h2 id="2-算法为什么会超时"><a href="#2-算法为什么会超时" class="headerlink" title="2.算法为什么会超时"></a>2.算法为什么会超时</h2><h3 id="2-1-超时怎么来"><a href="#2-1-超时怎么来" class="headerlink" title="2.1 超时怎么来"></a>2.1 超时怎么来</h3><p>程序运行的时间超过了规定的时间，一般OJ（online judge）的超时时间就是1s，也就是用例数据输入后最多要1s内得到结果，暂时还不清楚leetcode的判题规则，下文为了方便讲解，暂定超时时间就是1s。</p><p>如果写出了一个$O(n)$的算法 ，其实可以估算出来n是多大的时候算法的执行时间就会超过1s了。</p><p>如果n的规模已经足够让$O(n)$的算法运行时间超过了1s，就应该考虑log(n)的解法了。</p><h2 id="3-递归算法的时间复杂度"><a href="#3-递归算法的时间复杂度" class="headerlink" title="3.递归算法的时间复杂度"></a>3.递归算法的时间复杂度</h2><p>面试题：求x的n次方</p><p>最直观的方式应该就是，一个for循环求出结果，代码如下：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function1</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">n</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">  // 注意 任何数的0次方等于1</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> n</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">        result </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> result </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> result</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>时间复杂度为O(n)，此时面试官会说，有没有效率更好的算法呢。</p><p><strong>如果此时没有思路，不要说：我不会，我不知道了等等</strong>。</p><p>可以和面试官探讨一下，询问：“可不可以给点提示”。面试官提示：“考虑一下递归算法”。</p><p>那么就可以写出了如下这样的一个递归的算法，使用递归解决了这个问题。</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function2</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">n</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic"> // return 1 同样是因为0次方是等于1的</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function2</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> n </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>一些同学可能一看到递归就想到了O(log n)，其实并不是这样，递归算法的时间复杂度本质上是要看: <strong>递归的次数 * 每次递归中的操作次数</strong>。</p><p>每次n-1，递归了n次时间复杂度是O(n)，每次进行了一个乘法操作，乘法操作的时间复杂度一个常数项O(1)，所以这份代码的时间复杂度是 n × 1 &#x3D; O(n)。</p><p>这个时间复杂度就没有达到面试官的预期。于是又写出了如下的递归算法的代码：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">n</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> x</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">%</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #F07178">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> n </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #F07178">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> n </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">)*</span><span style="color: #F07178">x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> n </span><span style="color: #89DDFF">/</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> n </span><span style="color: #89DDFF">/</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>**时间复杂度忽略掉常数项<code>-1</code>之后，这个递归算法的时间复杂度依然是O(n)**。对，你没看错，依然是O(n)的时间复杂度！</p><p>于是又写出如下递归算法的代码：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function4</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">n</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> t </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function4</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> n </span><span style="color: #89DDFF">/</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">// 这里相对于function3，是把这个递归操作抽取出来</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">%</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> t </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> t </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> t </span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> t</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>依然还是看他递归了多少次，可以看到这里仅仅有一个递归调用，且每次都是n&#x2F;2 ，所以这里我们一共调用了log以2为底n的对数次。</p><p>**每次递归了做都是一次乘法操作，这也是一个常数项的操作，那么这个递归算法的时间复杂度才是真正的O(logn)**。</p><h2 id="4-空间复杂度分析"><a href="#4-空间复杂度分析" class="headerlink" title="4.空间复杂度分析"></a>4.空间复杂度分析</h2><h3 id="4-1-什么是空间复杂度"><a href="#4-1-什么是空间复杂度" class="headerlink" title="4.1 什么是空间复杂度"></a>4.1 什么是空间复杂度</h3><p>是对一个算法在运行过程中占用内存空间大小的量度，记做S(n)&#x3D;O(f(n)。</p><p>空间复杂度(Space Complexity)记作S(n) 依然使用大O来表示。利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。</p><p>关注空间复杂度有两个常见的相关问题</p><p>空间复杂度是考虑程序（可执行文件）的大小么？</p><p><strong>空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。</strong></p><p>空间复杂度是准确算出程序运行时所占用的内存么？</p><p>不要以为空间复杂度就已经精准的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。</p><p>所以空间复杂度是预先大体评估程序内存使用的大小。</p><p>说到空间复杂度，我想同学们在OJ（online judge）上应该遇到过这种错误，就是超出内存限制，一般OJ对程序运行时的所消耗的内存都有一个限制。</p><p>为了避免内存超出限制，这也需要我们对算法占用多大的内存有一个大体的预估。</p><p>同样在工程实践中，计算机的内存空间也不是无限的，需要工程师对软件运行时所使用的内存有一个大体评估，这都需要用到算法空间复杂度的分析。</p><h3 id="4-2-例子"><a href="#4-2-例子" class="headerlink" title="4.2 例子"></a>4.2 例子</h3><p>什么时候的空间复杂度是$O(1)$呢，C++代码如下：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> j </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> n</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    j</span><span style="color: #89DDFF">++;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>第一段代码可以看出，随着n的变化，所需开辟的内存空间并不会随着n的变化而变化。即此算法空间复杂度为一个常量，所以表示为大O(1)。</p><p>什么时候的空间复杂度是O(n)？</p><p>当消耗空间和输入参数n保持线性增长，这样的空间复杂度为O(n)，来看一下这段C++代码</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> n</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">a</span><span style="color: #89DDFF">[</span><span style="color: #F07178">i</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> i</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>我们定义了一个数组出来，这个数组占用的大小为n，虽然有一个for循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，随着n的增大，开辟的内存大小呈线性增长，即 O(n)。</p><h2 id="5-代码内存消耗"><a href="#5-代码内存消耗" class="headerlink" title="5.代码内存消耗"></a>5.代码内存消耗</h2><h3 id="5-1-不同语言的内存管理"><a href="#5-1-不同语言的内存管理" class="headerlink" title="5.1 不同语言的内存管理"></a>5.1 不同语言的内存管理</h3><p>不同的编程语言各自的内存管理方式。</p><ul><li>C&#x2F;C++这种内存堆空间的申请和释放完全靠自己管理</li><li>Java 依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出</li><li>Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有堆空间中。程序员没有访问堆的权限，只有解释器才能操作。</li></ul><p>例如Python万物皆对象，并且将内存操作封装的很好，<strong>所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存</strong>，例如，我们都知道存储int型数据需要四个字节，但是使用Python 申请一个对象来存放数据的话，所用空间要远大于四个字节。</p><h3 id="5-2-内存对齐"><a href="#5-2-内存对齐" class="headerlink" title="5.2 内存对齐"></a>5.2 内存对齐</h3><p>再介绍一下内存管理中另一个重要的知识点：<strong>内存对齐</strong>。</p><p><strong>不要以为只有C&#x2F;C++才会有内存对齐，只要可以跨平台的编程语言都需要做内存对齐，Java、Python都是一样的</strong>。</p><p>而且这是面试中面试官非常喜欢问到的问题，就是：<strong>为什么会有内存对齐？</strong></p><p>主要是两个原因</p><ol><li>平台原因：不是所有的硬件平台都能访问任意内存地址上的任意数据，某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。为了同一个程序可以在多平台运行，需要内存对齐。</li><li>硬件原因：经过内存对齐后，CPU访问内存的速度大大提升。</li></ol><p>参考学习自<a href="https://programmercarl.com/">代码随想录</a></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+gitee博客搭建流程</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本博客只是讲述安装流程，并不是纯面向小白的安装教程，在b站上有许多hexo的安装教程视频，可以参考b站教程进行安装。Hexo可以算是入门门槛最低的一种博客搭建手段了。这篇博客只是防止我以后忘记安装流程而编写，安装如遇到问题可以wx交流一下，不保证能解决。搭建环境开发项目是一件需要耐心的事情，可能会遇到各种各样的问题，要学会灵活网络搜索，你遇到的问题基本上都能解决，保持耐心，说不定马上你的问题就迎刃而解了。</p><hr><h2 id="1-node-js的安装和环境配置"><a href="#1-node-js的安装和环境配置" class="headerlink" title="1.node js的安装和环境配置"></a>1.node js的安装和环境配置</h2><p>（由Ryan Dahl开发，是一个基于<a href="https://baike.baidu.com/item/chrome">Chrome</a><a href="https://baike.baidu.com/item/v8">V8</a>引擎的<a href="https://baike.baidu.com/item/JavaScript/321142">JavaScript</a>运行环境，</p><p>使用了一个事件驱动、非阻塞式I&#x2F;O模型，让JavaScript 运行在服务端的开发平台，</p><p>它让JavaScript成为与<a href="https://baike.baidu.com/item/php">PHP</a>、<a href="https://baike.baidu.com/item/Python">Python</a>、<a href="https://baike.baidu.com/item/perl">Perl</a>、<a href="https://baike.baidu.com/item/Ruby">Ruby</a>等服务端语言平起平坐的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a></p><details><summary><font size="5"><b>node 安装过程截图</b></font></summary><img src="/oranfish.github.io/posts/0/node.jpg"><img src="/oranfish.github.io/posts/0/node2.png"><img src="/oranfish.github.io/posts/0/node5-1.jpg"> </details><p><strong>安装可以无脑下一步</strong>，注意安装路径就行，不会有问题，如果不放心的话可以参考原文章的安装过程截图，有详细步骤，由于本文篇幅较长，这里就不再转载了。</p><h3 id="1-1-测试是否安装成功"><a href="#1-1-测试是否安装成功" class="headerlink" title="1.1 测试是否安装成功"></a>1.1 测试是否安装成功</h3><p><code>node -v</code></p><p><code>npm -v</code></p><p><strong>成功截图如下</strong>：<img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/node&npm.png" alt="1"></p><p>解决npm查询不到版本号，方法一：<a href="https://past-taleggio-288.notion.site/node-24b6cf34d5c24186b7ef1ea7028b7fda">https://past-taleggio-288.notion.site/node-24b6cf34d5c24186b7ef1ea7028b7fda</a></p><h3 id="1-2-配置环境变量"><a href="#1-2-配置环境变量" class="headerlink" title="1.2 配置环境变量"></a>1.2 配置环境变量</h3><details><summary><font size="5"><b>详细截图</b></font></summary>在刚才安装nodejs的根目录下，创建node_global，node_cache文件夹<br><img src="/oranfish.github.io/posts/0/node_deploy1.png"><br>以管理员身份打开cmd，配置路径<br><p>`npm config set prefix "E:\develop\nodejs\node_global"`</p><p>`npm config set cache "E:\develop\nodejs\node_cache"`</p>修改全局路径 node_global, 修改缓存路径 node_cache<br><b>内路径需要根据自己实际情况来进行修改</b><br><b>修改全局安装路径后，需要在系统环境变量Path中添加该路径，否则之后使用npm install –global xxx，xxx都报错找不到命令。</b><br> 找到电脑环境配置 <br> win10和win11：右键此电脑-属性-高级系统设置-高级-环境变量<br>win11 还可以：点设置-系统-关于-高级系统设置-高级-环境变量<br><img src="/oranfish.github.io/posts/0/environment1.png"><br>完成以上操作后，在用户变量中创建NODE_PATH变量，变量值为node_modeules路径地址<img src="/oranfish.github.io/posts/0/environment2.png"><br>在系统变量中选择Path添加如下属性：<img src="/oranfish.github.io/posts/0/environment3.png"><br></details><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><h3 id="2-1-下载git"><a href="#2-1-下载git" class="headerlink" title="2.1 下载git"></a>2.1 下载git</h3><p>官网<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>找到首页下方的Downloads</p><p>下载对应系统（MAC、Windows、Linux&#x2F;Unix）安装包</p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/git_downloads.png" alt="git_downloads"></p><h3 id="2-2-安装git"><a href="#2-2-安装git" class="headerlink" title="2.2 安装git"></a>2.2 安装git</h3><details><summary><font size="5"><b>安装git过程</b></font></summary><img src="/oranfish.github.io/posts/0/{51D5EE5D-49F2-4151-80CB-A2581ED1DED3}.png"><br><img src="/oranfish.github.io/posts/0/{C6E6D133-E25A-4e1e-B095-62B66BC1D994}.png"><br><img src="/oranfish.github.io/posts/0/{C9094AA4-D4AB-42a3-BBFB-B54D3D1DE21F}.png"><br><img src="/oranfish.github.io/posts/0/{B5212BB6-71B9-44e8-AC17-245DE8ED861C}.png"><br><img src="/oranfish.github.io/posts/0/{EBE09308-C1B5-4093-A1B9-9141192F04E3}.png"><br><img src="/oranfish.github.io/posts/0/{CE53F588-61C3-48a3-84A6-4FA58C5361C1}.png"><br></details><h2 id="3-hexo下载"><a href="#3-hexo下载" class="headerlink" title="3.hexo下载"></a>3.hexo下载</h2><p><code>npm install hexo-cli -g #安装hexo</code></p><h2 id="4-检查已安装各框架的版本"><a href="#4-检查已安装各框架的版本" class="headerlink" title="4.检查已安装各框架的版本"></a>4.检查已安装各框架的版本</h2><p><strong>git</strong>：</p><p><code>git --version</code></p><p><strong>hexo</strong>:</p><p><code>hexo -v</code></p><p><strong>安装成功效果</strong></p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/edition.jpg" alt="edition"></p><h2 id="5-创建仓库及配置SSH连接"><a href="#5-创建仓库及配置SSH连接" class="headerlink" title="5.创建仓库及配置SSH连接"></a>5.创建仓库及配置SSH连接</h2><h3 id="5-1-创建gitee仓库（github同理）"><a href="#5-1-创建gitee仓库（github同理）" class="headerlink" title="5.1  创建gitee仓库（github同理）"></a>5.1  创建gitee仓库（github同理）</h3><p>利用gitee仓库，存放静态网站资源，达到挂载网站的目的</p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/%7B203AB318-6AE2-47b6-B9BC-95E6688E139E%7D.png" alt="{203AB318-6AE2-47b6-B9BC-95E6688E139E}"></p><p>需要注意的是作为网站访问的这个仓库，仓库名称一定是，<strong>拥有者名+gitee.io</strong></p><h3 id="5-2-生成ssh-keys"><a href="#5-2-生成ssh-keys" class="headerlink" title="5.2  生成ssh keys"></a>5.2  生成ssh keys</h3><p>在博客文件夹根目录下，右键，调用<strong>git bash here</strong>功能</p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/ssh-1.png" alt="ssh-1"></p><p>先输入<code>ssh</code><br>查看是否已经安装<code>ssh</code>，git默认有安装</p><p>本地生成<strong>ssh keys</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/ssh-2.png" alt="ssh-2"></p><p><strong>在本地电脑中找到.ssh文件夹</strong></p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/ssh-3.png" alt="ssh-3"></p><p>一般默认都是，C:\Users\用户名.ssh.pub文件</p><p>找到秘钥的位置，并用记事本打开**.pub文件**，复制其内容 (<code>ctrl+a</code>全选，<code>ctrl+c</code>复制，<code>ctrl+v</code>粘贴)</p><p>打开gitee，头像下拉选项设置，找到SSH公钥（新建ssh秘钥）</p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/%7BC3E82722-4B79-4d2f-9D53-3C5009A8F337%7D.png" alt="{C3E82722-4B79-4d2f-9D53-3C5009A8F337}"></p><p>把在本地生成的秘钥内容粘贴至此秘钥处，标题可以随便取。</p><p>测试ssh是否绑定成功（在git里操作）</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">ssh -T git@gitee.com</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/ssh-6.png" alt="ssh-6"></p><p>如果问你（yes or no），直接yes就可以得到上面这段话</p><h2 id="6-搭建本地博客"><a href="#6-搭建本地博客" class="headerlink" title="6.搭建本地博客"></a>6.搭建本地博客</h2><p>创建一个放置博客文件夹的文件，在里面启用<strong>Git Bash Here</strong></p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/hexo-1.png" alt="hexo-1"></p><p><strong>初始化hexo</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo init</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/hexo-2.png" alt="hexo-2"></p><ul><li><strong>生成hexo本地页面</strong></li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo s</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/hexo-3.png" alt="hexo-3"></p><ul><li><strong>复制粘贴该地址到浏览器中，即可访问本地搭建的博客</strong> <a href="http://localhost:4000/">http://localhost:4000</a></li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo cl #clean #清理编译文件</span></span><span class="line"><span style="color: #babed8">hexo g #generate #编译项目</span></span><span class="line"><span style="color: #babed8">hexo s #server #本地预览运行项目</span></span></code></pre></div><h2 id="7-上传本地博客至gitee"><a href="#7-上传本地博客至gitee" class="headerlink" title="7.上传本地博客至gitee"></a>7.上传本地博客至gitee</h2><h3 id="7-1-修改配置文件"><a href="#7-1-修改配置文件" class="headerlink" title="7.1 修改配置文件"></a>7.1 修改配置文件</h3><p>在创建博客文件夹的根目录下修改-config.yml文件</p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/yml-1.png" alt="yml-1"></p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/yml-2.png" alt="yml-2"></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">deploy:  </span></span><span class="line"><span style="color: #babed8">   type: git  </span></span><span class="line"><span style="color: #babed8">   repository: 你的gitee地址  </span></span><span class="line"><span style="color: #babed8">   branch: main</span></span></code></pre></div><h3 id="7-2-安装hexo-deployer-git-自动部署发布工具"><a href="#7-2-安装hexo-deployer-git-自动部署发布工具" class="headerlink" title="7.2 安装hexo-deployer-git 自动部署发布工具"></a>7.2 安装hexo-deployer-git 自动部署发布工具</h3><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/hexo-d-1.png" alt="hexo-d-1"></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">npm install hexo-deployer-git --save</span></span></code></pre></div><h3 id="7-3-编译文件生成界面"><a href="#7-3-编译文件生成界面" class="headerlink" title="7.3  编译文件生成界面"></a>7.3  编译文件生成界面</h3><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/%7B6A46E6F6-29CC-40da-99D8-8196376EA195%7D.png" alt="{6A46E6F6-29CC-40da-99D8-8196376EA195}"></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo g</span></span></code></pre></div><h3 id="7-4-本地文件上传到Gitee"><a href="#7-4-本地文件上传到Gitee" class="headerlink" title="7.4  本地文件上传到Gitee"></a>7.4  本地文件上传到Gitee</h3><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/hexo-d-2.png" alt="hexo-d-2"></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo d</span></span></code></pre></div><p>成功后</p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/ok-1.bmp" alt="ok-1"></p><p>可以直接访问仓库名如:</p><p> <a href="https://xxx.gitee.io/">https://xxx.gitee.io</a></p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/ok-2.png" alt="ok-2"></p><p>出现如图画面，恭喜你完成了hexo的博客搭建。</p><h2 id="8-安装Aurora主题"><a href="#8-安装Aurora主题" class="headerlink" title="8.安装Aurora主题"></a>8.安装Aurora主题</h2><p><strong>本步骤非必须，可以在<a href="https://hexo.io/">hexo的官方网站</a>寻找自己喜欢的主题进行安装，安装流程大致相似，每个主题也可能有自己独特的地方需要设置，具体参照对应主题自己的官方文档进行参考</strong></p><p>Aurora官方文档参考：<a href="https://aurora.tridiamond.tech/zh/guide">https://aurora.tridiamond.tech/zh/guide</a></p><p>建议直接参照官方文档进行设置，官方文档更加详细。</p><h3 id="8-1-配置"><a href="#8-1-配置" class="headerlink" title="8.1  配置"></a>8.1  配置</h3><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">npm install hexo-theme-aurora --save #进入hexo初始化目录用git执行</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/aurora-1.png" alt="aurora-1"></p><p>安装好之后，我们需要自己创建一个配置文件。</p><p>我们可以到 node_modules文件夹 下找到 hexo-theme-aurora文件夹。</p><p>里面将_config.yml 复制一份 F2 重命名为_config.aurora.yml</p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/aurora-01.png" alt="aurora-01"></p><p>然后将 _config.aurora.yml 移动到你的博客根目录下</p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/%7B206D60BF-F48A-4004-B24E-34464E0254DE%7D.png" alt="{206D60BF-F48A-4004-B24E-34464E0254DE}"></p><h3 id="8-2-修改配置"><a href="#8-2-修改配置" class="headerlink" title="8.2 修改配置"></a>8.2 修改配置</h3><p>打开_comfig.yml</p><p>由默认主题改为<strong>Aurora</strong></p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/aurora-4.png" alt="aurora-4"></p><p>由于Aurora是vue3项目</p><p>打开根目录下的_config.yml</p><p>修改路由方式</p><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/aurora-5.png" alt="aurora-5"></p><p>运行</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo clean &amp; hexo g &amp; hexo server</span></span></code></pre></div><p>我的习惯是分开来：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo cl</span></span><span class="line"><span style="color: #babed8">hexo g</span></span><span class="line"><span style="color: #babed8">hexo s</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/aurora-6.png" alt="aurora-6"></p><h3 id="8-3-上传并覆盖gitee仓库"><a href="#8-3-上传并覆盖gitee仓库" class="headerlink" title="8.3 上传并覆盖gitee仓库"></a>8.3 上传并覆盖gitee仓库</h3><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo d</span></span></code></pre></div><p>可以使用</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo s</span></span></code></pre></div><p>进行本地预览</p><p>打开你的Gitee网页地址，比如<a href="https://orangefish-cyc.gitee.io/">本博客</a>主题配置成功</p><h2 id="9-博客参考"><a href="#9-博客参考" class="headerlink" title="9.博客参考"></a>9.博客参考</h2><p>[搭建博客-图文教程-Luiyang](<a href="https://luiyang08.github.io/post/Build">https://luiyang08.github.io/post/Build</a> Blog)</p><p><a href="https://blog.sxlz.org/post/hexo-aurora-github%E6%90%AD%E5%BB%BA">hexo+aurora+github搭建-叁鄉浪子</a></p><p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p><p><a href="https://aurora.tridiamond.tech/cn/guide/getting-started.html">Aurora官方文档</a></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>搭建完成后的文章编写也会有许多的问题，后续有空再写一下关于文章编写的问题吧，以及一些aurora主题的各种自定义样式修改例如网站图标，个人头像，文章头图等，各类组件的开关安装，编写博客实在需要很多时间，可以网上搜索参考官方文档和他人的教程，这些问题都能得到解决，最重要的是有坚持不懈的心。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCAU2023CSAPP期末知识点总结</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSAPP知识点"><a href="#CSAPP知识点" class="headerlink" title="CSAPP知识点"></a>CSAPP知识点</h2><ol><li><p>进制数转换：十进制转二进制、二进制转十进制、十进制转十六进制、十六进制转十进制、二进制转十六进制、十六进制转二进制。</p></li><li><p>布尔运算：&amp;与（0&amp;0&#x3D;0 0&amp;1&#x3D;0 1&amp;1&#x3D;1） |或（0|0&#x3D;0 0|1&#x3D;1 1|1&#x3D;1）~非（取反）^异或（0^0&#x3D;0 0^1&#x3D;1 1^1&#x3D;0）</p></li><li><p>位及运算：获取最低有效字节的值（&amp;0xFF）</p></li><li><p>逻辑运算（&amp;&amp; || ！）：非0参数都位true（0x01）、参数0表示false(0x00)<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231142847904.png" alt="image-20231231142847904"></p></li><li><p>移位运算：左移（丢弃左位在最右端补0）逻辑右移（丢弃右位在最左端补0）算数右移（最高位等于0时候与逻辑右移一样、最高位等于1时则是在最高位补1）有符号数为算数右移、无符号数为逻辑右移。</p></li><li><p>映射(B2U)有符号数无符号数的编码方式：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229224849495.png" alt="image-20231229224849495"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229224936181.png" alt="image-20231229224936181"></p></li><li><p>补码编码映射(B2T)：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229225343729.png" alt="image-20231229225343729"></p></li><li><p>有符号数和无符号数的转换：位模式不变、解释位的方式变化。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229230022395.png" alt="image-20231229230022395"></p></li><li><p>强制类型转换、影响关系运算的结果：程序运行有符号数会强转成无符号数运算。较大数据类型转较小会损失。</p></li><li><p>无符号数的转换更大数据类型-扩展：无符号数末尾带有U<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229230424810.png" alt="image-20231229230424810"></p></li><li><p>有符号数的转换更大数据类型-扩展：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229230510034.png" alt="image-20231229230510034"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229230541611.png" alt="image-20231229230541611"></p></li><li><p>截断的基本规则：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229230703918.png" alt="image-20231229230703918"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229230959005.png" alt="image-20231229230959005"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229231009760.png" alt="image-20231229231009760"></p></li><li><p>无符号数加法：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229231207996.png" alt="image-20231229231207996"></p></li><li><p>有符号数加法：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229231422676.png" alt="image-20231229231422676"></p></li><li><p>补码的加法：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229231808426.png"></p></li><li><p>使用移位、加法运算的组合代表乘以常数因子：除法无法除尽时候会向0方向舍入、除法为右移<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231229232537896.png" alt="image-20231229232537896"></p></li><li><p>浮点数的权重：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230181622574.png" alt="image-20231230181622574"></p></li><li><p>浮点数格式（符号、阶码、尾数）：符号位s（为0时为正数、为1时为负数）阶码exp、尾数M与frac相关<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230181842487.png" alt="image-20231230181842487"></p></li><li><p>浮点数规格化的值、非规格化的值、特殊值：阶码exp决定了这个数是哪一类<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182004657.png" alt="image-20231230182004657"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9%5Cimage-20231230182010253.png" alt="image-20231230182010253"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182024020.png" alt="image-20231230182024020"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9%5Cimage-20231230182030206.png" alt="image-20231230182030206"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182051725.png" alt="image-20231230182051725"></p></li><li><p>规格化的值和非规格化的值：阶码域全为0的时候E&#x3D;1-bias。M&#x3D;f。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182232580.png" alt="image-20231230182232580"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182252618.png" alt="image-20231230182252618"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182348270.png" alt="image-20231230182348270"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231162411155.png" alt="image-20231231162411155"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231162434945.png" alt="image-20231231162434945"></p></li><li><p>单精度浮点数的二进制表示：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182445201.png" alt="image-20231230182445201"></p></li><li><p>向上舍入、向下舍入、向0舍入、向偶数舍入：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182529726.png" alt="image-20231230182529726"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182559083.png" alt="image-20231230182559083"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230182631677.png" alt="image-20231230182631677"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9%5Cimage-20231230182711496.png" alt="image-20231230182711496"></p></li><li><p>int转化为float不会溢出可能会被舍入、int&#x2F;float转化为double可以保留、double转化为float类型可能会发生溢出转换后可能被舍入、float&#x2F;double转化为int可能向0舍入也可能溢出。</p></li><li><p>操作数的寄存器：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230183049058.png" alt="image-20231230183049058"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230183320641.png" alt="image-20231230183320641"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230183330717.png" alt="image-20231230183330717"></p></li><li><p>操作码和操作数以及内存引用：立即数用$表示、内存引用需要加上括号<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230183421375.png" alt="image-20231230183421375"></p></li><li><p>操作数：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230183924532.png" alt="image-20231230183924532"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230183948153.png" alt="image-20231230183948153"></p></li><li><p>汇编后缀表示：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230183202158.png" alt="image-20231230183202158"></p></li><li><p>数据传送指令mov：后缀不同操作的数大小不同，当movq指令的源操作数为立即数时、该立即数只能是32位的补码表示、然后对该数值进行符号位扩展后、讲得到的64位数传送。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230184023893.png" alt="image-20231230184023893"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230184051204.png" alt="image-20231230184051204"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230184343430.png" alt="image-20231230184343430"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230184432087.png" alt="image-20231230184432087"></p></li><li><p>压入和弹出栈：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230184746749.png" alt="image-20231230184746749"></p></li><li><p>算数和逻辑指令leaq：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230184915042.png" alt="image-20231230184915042"></p></li><li><p>通过leaq指令实现算术运算：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230184958915.png" alt="image-20231230184958915"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230185611222.png" alt="image-20231230185611222"></p></li><li><p>一元操作：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230185026113.png" alt="image-20231230185026113"></p></li><li><p>二元操作：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230185042859.png" alt="image-20231230185042859"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230185433997.png" alt="image-20231230185433997"></p></li><li><p>移位运算：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230185456972.png" alt="image-20231230185456972"></p></li><li><p>其他运算：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230185640650.png" alt="image-20231230185640650"></p></li><li><p>常用条件码：CF-进位标志，当CPU最近执行的一条指令最高位产生了进位时，CF会被置1，可以用来检查无符号数的溢出。ZF-零标志，当最近操作的结果为0时，零标志会被置1。SF-符号标志，当最近的操作结果小于0的时候，符号标志会被置1。OF-溢出标志，最近的操作导致正溢出或负溢出时候会被置1。</p></li><li><p>cmp指令和test指令：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190435637.png" alt="image-20231230190435637"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190243370.png" alt="image-20231230190243370"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190253321.png" alt="image-20231230190253321"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190306501.png" alt="image-20231230190306501"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190333468.png" alt="image-20231230190333468"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190518671.png" alt="image-20231230190518671"></p></li><li><p>条件控制分支if-else以及条件传送：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190616651.png" alt="image-20231230190616651"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190631968.png" alt="image-20231230190631968"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190657506.png" alt="image-20231230190657506"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190709521.png" alt="image-20231230190709521"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190741192.png" alt="image-20231230190741192"></p></li><li><p>循环指令：循环语句是通过条件测试与跳转的结合来实现的。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190840109.png" alt="image-20231230190840109"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190909938.png" alt="image-20231230190909938"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230190922352.png" alt="image-20231230190922352"></p></li><li><p>switch语句：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230191117390.png" alt="image-20231230191117390"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230191126080.png" alt="image-20231230191126080"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230191145052.png"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230191223681.png" alt="image-20231230191223681"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230191228563.png" alt="image-20231230191228563"></p></li><li><p>理解过程，理解“过程 P 调用过程 Q，Q 执行后返回到 P”包含的三个机制（传递控制、</p><p>传递数据、分配和释放内存）：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230192713527.png" alt="image-20231230192713527"></p><p>栈帧：当函数执行所需要的存储空间超出寄存器能够存放的大小时，会借助栈上的存储空间，这部分存储空间就叫做栈帧。</p><p>对于函数P调用函数Q的例子，包括较早的帧、调用函数P的帧、还要正在执行函数Q的帧。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230193048269.png" alt="image-20231230193048269"></p><p>当函数P调用函数Q时，会把返回地址压入栈中，该地址殖知名了函数Q执行结束返回时要从函数P的哪个位置继续进行。这个返回地址的压栈操作并不是由指令push来执行的，而是由函数调用指令call实现的。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230193632124.png" alt="image-20231230193632124"></p></li><li><p>数组的分配与访问： short数组2个字节、int数组4个字节、double数组8个字节、指针数组8个字节<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230202311482.png" alt="image-20231230202311482"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230202617125.png" alt="image-20231230202617125"></p><p>二维数组（嵌套数组）：Xd表示数组的起始地址、L表示数组T的大小、Cij都是常数。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230203134301.png" alt="image-20231230203134301"></p></li><li><p>理解内存越界的引用和缓冲区溢出：缓冲区溢出会导致返回时会随机返回到系统的任意位置。对抗缓冲区溢出攻击的方法：栈随机化（ASLR 栈的位置在每次运行时地址都变化）、栈破坏检测（在缓冲区与栈保存的状态值之间存储一个特殊值，这个值被称为金丝雀值、检测金丝雀值是否变化判断是否遭受攻击）、限制可执行代码区域。</p></li><li><p>消除循环的低效率：CPE表示每个元素执行所需要的周期数（度量效率）。比较操作和分支操作不直接影响程序的数据流，将两个操作以及寄存器rax删除，只保留循环寄存器以及关键操作。将这个视作一个模板重复n次。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230210532940.png" alt="image-20231230210532940"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230210739863.png" alt="image-20231230210739863"></p></li><li><p>减少过程调用（循环展开）：多路并行，10路时接近吞吐界限。</p></li><li><p>消除不必要的内存引用（加载操作延迟）：加载操作会受存储引用和计算影响。</p></li><li><p>动态RAM（DRAM）： 电容充电维持信息存储、每个bit位的存储对应一个电容和晶体管，对干扰十分敏感，内存采用DRAM，不断刷新才能保持数据，使用超单元一词来表示DRAM的存储单元，可以通过类似坐标的方式寻址，寻址所需位数关系2的n次方等于行数&#x2F;列数，n即为寻址位数。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230212710024.png" alt="image-20231230212710024"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230212823195.png" alt="image-20231230212823195"></p></li><li><p>磁盘容量和磁盘访问时间的计算：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231204301009.png" alt="image-20231231204301009"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230214234653.png" alt="image-20231230214234653"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230214350043.png" alt="image-20231230214350043"></p></li><li><p>局部性（时间局部性、空间局部性）：时间局部性（被引用的内存位置在不远的将来还可能被多次引用）、空间局部性（一个内存被引用了一次，程序很可能在不远的将来引用附近的一个内存位置）如两层嵌套的循环遍历二重数组的例子。</p></li><li><p>高速缓存的参数：基于SRAM，有效位（valid 长1bit 表示当前cache line存储的信息是否有效 1表示有效0表示无效）、标记（tag 确定目标数据是否存在于当前的cache line中） 、数据块（cache block一小部分内存数据的副本，大小用B表示）<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230221622544.png" alt="image-20231230221622544"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231212238903.png" alt="image-20231231212238903"></p></li><li><p>高速缓存的三种地址的映射方式：根据每个set所包含的cache line的行数不同，cache被分为不同的类。</p><p>直接缓存（E&#x3D;1 组选择<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230222138879.png" alt="image-20231230222138879"> 行匹配<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230222217927.png" alt="image-20231230222217927"> 字抽取 根据偏移量来确定目标数据的确切位置，从什么位置开始抽取数据 命中：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230222309859.png" alt="image-20231230222309859">不命中：cache需要从存储器层次结构的下一层取出被请求的块)</p><p>例子：S表示有几个set、E表示每个set有几行、B表示每个数据块包含几个字节、其中地址m是多少位<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230222441061.png" alt="image-20231230222441061"></p><p>组相联（E&#x3D;2）：字抽取不命中（随机替换、最不常使用、最近最少使用）<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230223300375.png" alt="image-20231230223300375"></p><p>全相联（E&#x3D;C&#x2F;B）：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230223232884.png" alt="image-20231230223232884"></p></li><li><p>编写高速缓存友好代码：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230223616995.png" alt="image-20231230223616995"></p></li><li><p>理解符号类型和符号解析：全局符号（由该模块定义、同时能被其他模块引用的全局符号）、外部符号（被其他模块定义、同时被该模块引用的全局符号）、局部符号（只能被该模块定义和引用的局部符号 static）<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240102184035977.png" alt="image-20240102184035977"></p><p>COMMON是未初始化的全局变量，注意和.bss区分<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240102171724014.png" alt="image-20240102171724014"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240102171716051.png" alt="image-20240102171716051"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240102172429048.png" alt="image-20240102172429048"></p></li><li><p>强符号和弱符号：强符号（函数和已初始化的全局变量  连接器不允许有多个同名的强符号一起出现）、弱符号（未初始化的全局变量）。</p></li><li><p>重定位：重定位条目（告诉链接器在合成可执行文件时候应该如何修改这个引用）链接器合并输入模块，并为每个符号分配运行时地址<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230232108230.png" alt="image-20231230232108230"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230230935813.png" alt="image-20231230230935813"></p><p>重定位相对引用<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230232653038.png" alt="image-20231230232653038"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230232425883.png" alt="image-20231230232425883"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230232521426.png" alt="image-20231230232521426"></p><p>绝对地址引用<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230232601746.png" alt="image-20231230232601746"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230232608217.png" alt="image-20231230232608217"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231230232628696.png" alt="image-20231230232628696"></p></li><li><p>异常控制流的分类：中断（异步）、陷阱、故障和终止<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231103554346.png" alt="image-20231231103554346"></p></li><li><p>并发流：一个逻辑流的执行在时间上和另一个流重叠的情况成为并发流，两个流的执行被成为并发运行。（并行是两个进程在不同的处理器核上同时运行）并发是交替运行的，并行是同时运行的。</p></li><li><p>进程的状态<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231125806624.png" alt="image-20231231125806624"></p></li><li><p>进程的创建：创建进程时使用的系统函数-fork。父进程调用fork函数创建一个子进程。fork函数一次调用返回两次。父进程和子进程二者并发执行，它们的输出结果都打印出来。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231125849393.png" alt="image-20231231125849393"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231130005986.png" alt="image-20231231130005986"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231130355291.png" alt="image-20231231130355291"></p></li><li><p>函数execve：调用加载器，在执行可执行程序的main函数之前。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231130510239.png" alt="image-20231231130510239"></p></li><li><p>zombie僵死进程：终止运行但是还未回收的进程称为僵死进程，仍在消耗内存。</p></li><li><p>子进程的回收：父进程通过函数waitpid来等待它的子进程终止或者停止。当第一个参数pid等于0表示等待的进程是一个单独的子进程，pid&#x3D;-1表示等待的进程是由父进程创建的所有子进程组成的集合。statusp是非空，函数waitpid在status上放上导致返回的子进程的状态信息，status就是statusp的值。正常回收返回true，否则未false。</p></li><li><p>信号所引发事件：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231131827546.png" alt="image-20231231131827546"></p></li><li><p>进程组的概念：每个进程都只属于一个进程组，每个进程组都有自己的ID值来唯一标识，通过函数getpgrp来获取当前进程所属的进程组ID值。setpgrp可以进行更改ID</p></li><li><p>发送信号的方式：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231131956601.png" alt="image-20231231131956601"></p><p>发送信号的&#x2F;kill方式：通过&#x2F;bin目录中的kill程序可以向其他的进程发送任意的信号。</p><p>从键盘发送信号：当我们在键盘上输入Ctrl+C键会导致内容发送一个中断信号到前台进程组中的所有进程中。</p><p>调用函数kill：调用函数发送信号给其他进程，也包括给自己发送信号。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231132524879.png" alt="image-20231231132524879"></p><p>使用函数alarm函数：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231132517316.png" alt="image-20231231132517316"></p></li><li><p>接收信号：一个待处理信号最多只能接收一次，一种类型的信号最多只能有一次待处理信号。如果一个类型为k的信号有待处理信号，那接下来这个进程中类型为k的信号都不用排队等待，会被简单地丢弃。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231132616297.png" alt="image-20231231132616297"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231132720760.png" alt="image-20231231132720760"></p></li><li><p>虚拟内存：自动完成内存管理的相关工作，可以创建和释放内存空间，将内存空间映射到磁盘文件的某个部分，共享内存。虚拟内存使用不当会使程序产生错误。</p></li><li><p>物理寻址：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231133921969.png" alt="image-20231231133921969"></p></li><li><p>虚拟寻址：将一个虚拟地址转换成物理地址的任务叫做地址翻译<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231134038499.png" alt="image-20231231134038499"></p></li><li><p>地址空间：地址空间是一个非负整数的有序集合，如果地址空间中的整数是连续的，那么我们说它是一个线性地址空间，一个地址空间的大小是由标识最大地址所需要的位数来描述的。最大可能的虚拟地址是虚拟地址数-1。<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240101102502741.png" alt="image-20240101102502741"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231134227145.png" alt="image-20231231134227145"></p></li><li><p>虚拟页（存在于磁盘上）和物理页：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231134359183.png" alt="image-20231231134359183"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231134930776.png" alt="image-20231231134930776"></p></li><li><p>页表：是一个页表条目PTE的数组存在于物理内存之中，将虚拟页地址映射到物理页地址。页表条目PTE&#x3D;2的n-p次方，n为虚拟地址大小、页大小P&#x3D;2的p次方。</p></li><li><p>页命中：虚拟内存中的一个字存在于物理内存中（即DRAM缓存命中）</p></li><li><p>缺页：引用虚拟内存中的字，不在物理内存中 (DRAM 缓存不命中)<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231135028888.png" alt="image-20231231135028888"></p></li><li><p>分配页面：分配一个新的虚拟内存页 (VP 5).内核在磁盘上分配VP5， 并且将PTE5指向这个新的位置</p></li><li><p>使用SRAM缓存来表示CPU与内存之间的L1L2L3这三级高速缓存。DRAM表示虚拟内存系统的缓存。</p></li><li><p>地址翻译：<img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231135237207.png" alt="image-20231231135237207"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20231231135250059.png" alt="image-20231231135250059"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240101103951186.png" alt="image-20240101103951186"><img src="/oranfish.github.io/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9/image-20240101152349030.png" alt="image-20240101152349030"></p></li><li><p>P&#x3D;1K&#x3D;2的10次方可以得到p&#x3D;10。虚拟页偏移量VPO&#x3D;物理页偏移量PPO&#x3D;p。虚拟页号VPN&#x3D;虚拟地址空间-虚拟页偏移量VPO。物理页号PPN&#x3D;物理地址-物理页偏移量PPO。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端部分知识点</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><h3 id="1-html结构"><a href="#1-html结构" class="headerlink" title="1. html结构"></a>1. html结构</h3><p>1.html：根标签</p><p>2.head： 头部标签</p><p>3.body： 主体标签</p><p>4.title：标题标签</p><p>5.DOCTYPE： 声明文档类型</p><p>6.lang &#x3D; “en”：页面的语言类型</p><p>7.charset&#x3D;“UTF-8”编码格式</p><h3 id="2-html标签"><a href="#2-html标签" class="headerlink" title="2. html标签"></a>2. html标签</h3><ol><li>标题标h： &lt;h1&gt; ~ &lt;h6&gt; 不同字号大小</li><li>段落标签p</li><li>水平线标签  &lt;hr&#x2F;&gt; 单标签</li><li>换行标签  &lt;br&#x2F;&gt;</li><li>span 文字标签：一行上可以放多个 \<span> 小盒子</span></li><li>div标签： 一行上只能放一个&lt;div&gt;大盒子 </li><li>加粗标签：&lt;strong&gt; 和  &lt;b&gt; 前者语义更强烈</li><li>倾斜标签：&lt;em&gt; 和 &lt;i&gt; 前者语义更强烈</li><li>删除线：&lt;del&gt; 和  &lt;s&gt;  前者语义更强烈</li><li>下划线：&lt;ins&gt; 和 &lt;u&gt; 前者语义更强烈</li></ol><h3 id="3-图片标签"><a href="#3-图片标签" class="headerlink" title="3.图片标签&lt;img&gt;"></a>3.图片标签&lt;img&gt;</h3><ol><li>src：当前图片的路径</li><li>alt：当图片错误加载时候显示的文字</li><li>title：当鼠标悬停在图片上显示的文字</li><li>height： 图片的高度</li><li>width： 图片的宽度</li><li>border：图片的边框</li></ol><h3 id="4-连接标签"><a href="#4-连接标签" class="headerlink" title="4.连接标签&lt;a&gt;"></a>4.连接标签&lt;a&gt;</h3><ol><li>外部链接  &lt;a href&#x3D;”<a href="http://www.baidu.com">\">http://www.baidu.com&quot;&gt;\</a>  写完整的 协议  域名   网址</li><li>内部链接 &lt;a href&#x3D;”index.html”&gt;&lt;&#x2F;a&gt;   直接写文件名即可</li><li>href:指定跳转的页面</li><li>title：鼠标悬停显示的文字</li><li>target:  _self(默认会覆盖原来的窗口)   _blank(会以新的窗口打开)    窗口的打开方式</li><li>#：会阻止页面跳转但是会刷新页面</li><li>绝对路径：目录下的绝对位置，通常从盘符开始</li><li>相对路径：在同一个文件夹直接找名字、向上一级  ..&#x2F; 、向下 &#x2F;</li></ol><h3 id="5-表格"><a href="#5-表格" class="headerlink" title="5.表格"></a>5.表格</h3><ol><li>表格：&lt;table&gt;是用于定义表格的标签。</li><li>行：&lt;tr&gt;标签用于定义表格中的行，必须嵌套在 &lt;table&gt; 标签中。</li><li>单元格：&lt;td&gt; 用于定义表格中的单元格，必须嵌套在&lt;tr&gt;标签中。</li><li>表头&lt;th&gt; 加粗加黑自动居中。</li><li>表格的标题：&lt;caption&gt;表格的标题   写在内部  显示外部  居中</li><li>结构头：&lt;thead&gt; 结构头</li><li>结构底：&lt;tfoot&gt;结构底</li><li>结构体：&lt;tbody&gt;结构体</li><li>表格边框border</li><li>宽度 width</li><li>高度 height</li><li>单元格与单元格之间距离 cellspacing</li><li>单元格与内容之间的距离 cellspadding</li><li>居中 align ： left&#x2F; center&#x2F; right </li><li>列合并 colspan</li><li>行合并 rowspan</li></ol><h3 id="6-列表"><a href="#6-列表" class="headerlink" title="6.列表"></a>6.列表</h3><ol><li>无序列表 : &lt;ul&gt; &lt;li&gt;</li><li>有序列表 : &lt;ol&gt;&lt;li&gt;</li><li>自定义列表：&lt;dl&gt; &lt;dt&gt; &lt;dd&gt;</li></ol><h3 id="7-表单"><a href="#7-表单" class="headerlink" title="7. 表单"></a>7. 表单</h3><h4 id="1-input属性"><a href="#1-input属性" class="headerlink" title="1. input属性 &lt;input type &#x3D; “属性值”&gt;"></a>1. input属性 &lt;input type &#x3D; “属性值”&gt;</h4><ol><li>text：文本框</li><li>password：密码框</li><li>radio：单选按钮</li><li>checkbox：复选框</li><li>button：普通按钮</li><li>reset：重置按钮  需要配合form表单才有作用</li><li>submit：提交按钮</li><li>image   属性  src</li><li>file 文件按钮   上传图片</li></ol><h4 id="2-其他属性"><a href="#2-其他属性" class="headerlink" title="2.其他属性"></a>2.其他属性</h4><ol><li>name属性：定义input元素的名称</li><li>value：规定input氧元素的值</li><li>checked：规定input元素首次加载时应当被选中</li><li>maxlength： 输入字段字符的最大长度</li><li>label</li><li>textarea：用户留言 cols&#x3D;“每行中的字符数” ，rows&#x3D;“显示的行数”</li><li>select：下拉菜单</li><li>form表单：收集用户信息，action：  提交后台的地址 method&#x3D;”get&#x2F;post”   提交（传输）后台的方式 name &#x3D;“a” 告诉服务器  由哪个表单提交过来的</li></ol><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h3 id="1-css引入方式"><a href="#1-css引入方式" class="headerlink" title="1.css引入方式"></a>1.css引入方式</h3><ol><li>行内样式：&lt;标签 style&#x3D;”属性:属性值;”&gt;&lt;&#x2F;标签&gt;</li><li>内部样式：选择器{属性:属性值;属性：属性值}</li><li>外部样式：通过link引入外部css文件  &lt;link  rel&#x3D;”stylesheet”   href&#x3D;”外部css文件”  &#x2F;&gt;</li><li>href与src   href 是引用   src下载资源到当前页面</li></ol><h3 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h3><ol><li>标签选择器：标签{属性：属性值}</li><li>class（类选择器）：html：&lt;div class&#x3D;”名字”&gt;  css：  .名字{属性：属性值}  .nav{color: red}</li><li>id选择器：html：&lt;div id&#x3D;”名字”&gt;&lt;&#x2F;div&gt;   css：  #名字{属性：属性值} id与class选择器的区别：  id的名字是唯一的（体现在js里面） class名字可以任意多个  #nav{color： red}</li><li>通配符选择器：选择所有的标签 *{color：red}</li></ol><h3 id="3-字体属性"><a href="#3-字体属性" class="headerlink" title="3.字体属性"></a>3.字体属性</h3><ol><li>字体大小：font-size </li><li>字体类型：font-family</li><li>字体粗度：font-weight   normal默认值400（不加粗）bold粗体700（加粗的）</li><li>文本风格：font-style:字体倾斜：italic（倾斜）&#x2F;normal（正常）</li><li>文字阴影： text-shadow  水平距离   垂直距离  模糊程度   阴影颜色   </li><li>字体连写：  font:font-style font-weight font-size&#x2F;line-height font-family</li><li>字体颜色：color</li><li>水平对齐方式：text-align:left&#x2F;center&#x2F;right（注意：1.div  h。。标题会居中   span   em  i。。。。不会居中）</li><li>行高：line-height</li><li>首行缩进：text-indent:  em   1em&#x3D;16px</li><li>去掉a链接默认的下划线 ：text-decoration： none(去掉下划线)&#x2F; undefined(添加下划线)</li></ol><h3 id="4-快速生成HTML结构语法"><a href="#4-快速生成HTML结构语法" class="headerlink" title="4.快速生成HTML结构语法"></a>4.快速生成HTML结构语法</h3><ul><li>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 &lt;div&gt;&lt;&#x2F;div&gt;</li><li>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</li><li>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</li><li>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </li><li>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</li><li>如果生成的div 类名是有顺序的， 可以用 自增符号  $ </li><li>如果想要在生成的标签内部写内容可以用  { }  表示</li></ul><h3 id="5-快速生成CSS样式语法"><a href="#5-快速生成CSS样式语法" class="headerlink" title="5.快速生成CSS样式语法"></a>5.快速生成CSS样式语法</h3><p>CSS 基本采取简写形式即可</p><p>​比如 w200   按tab  可以 生成  width: 200px;</p><p>​比如 lh26px   按tab  可以生成  line-height: 26px;‘</p><h3 id="6-复合选择器"><a href="#6-复合选择器" class="headerlink" title="6.复合选择器"></a>6.复合选择器</h3><ol><li>后代选择器：元素1 元素2 {样式}   ul li{color：red} 选择ul里面所有的li标签元素</li><li>子选择器：元素1&gt;元素2 {样式}  div &gt; p {样式声明} 选择div里面所有最近一级的p标签元素</li><li>并集选择器：元素1，元素2 {样式声明}  ul，div{样式}  选择ul和div标签元素</li><li>伪类选择器：     （ :hover）</li><li>链接伪类选择器：给某些选择器增加特殊的效果：a:hover鼠标经过的那个链接</li><li>:focus 伪类选择器：用于选取获得焦点的表单元素</li></ol><h3 id="7-CSS的显示模式"><a href="#7-CSS的显示模式" class="headerlink" title="7.CSS的显示模式"></a>7.CSS的显示模式</h3><ol><li>块元素：&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;  比较霸道，自己独占一行。高度，宽度、外边距以及内边距都可以控制。宽度默认是容器（父级宽度）的100%。是一个容器及盒子，里面可以放行内或者块级元素。</li><li>行内元素：&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt; 相邻行内元素在一行上，一行可以显示多个。默认宽度就是它本身内容的宽度。</li><li>行内块元素：&lt;img &#x2F;&gt;、&lt;input &#x2F;&gt;、&lt;td&gt;  同时具有块元素和行内元素的特点。</li><li>元素显示模块转换：转换为块元素：display:block;  转换为行内元素：display:inline;  转换为行内块：display: inline-block;</li><li>让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中</li></ol><h3 id="8-CSS的背景"><a href="#8-CSS的背景" class="headerlink" title="8.CSS的背景"></a>8.CSS的背景</h3><ol><li>背景颜色：background-color：颜色值；元素背景颜色默认值是 transparent（透明）</li><li>背景图片：background-image：none | url ；</li><li>背景平铺：background-repeat： repeat在纵向和横向上平铺 | no-repeat不平铺 | repeat-x横向 | repeat-y纵向</li><li>背景图片位置：background-position 属性可以改变图片在背景中的位置</li><li>背景图片固定：background-attachment    scroll随对象内容滚动  fixed 背景图像固定</li><li>背景样式合写：background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</li><li>背景色半透明：background： rgba（0，0，0，0.3） 最后一个参数是 alpha 透明度，取值范围在 0~1之间</li></ol><h3 id="9-优先级"><a href="#9-优先级" class="headerlink" title="9.优先级"></a>9.优先级</h3><ol><li>继承或者* 0，0，0，0</li><li>元素选择器 0，0，0，1</li><li>类选择器，伪类选择器 0，0，1，0</li><li>ID选择器  0，1，0，0</li><li>行内样式 style&#x3D;“” 1，0，0，0</li><li>！important 重要的 无穷大</li></ol><h3 id="10-盒子模型——边框border"><a href="#10-盒子模型——边框border" class="headerlink" title="10.盒子模型——边框border"></a>10.盒子模型——边框border</h3><ol><li>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></li><li>定义边框粗细：border-width： 单位是px</li><li>边框的样式：border-style  none：没有边框即忽略所有边框的宽度（默认值）solid：边框为单实线(最为常用的) dashed：边框为虚线   dotted：边框为点线</li><li>表格的细线边框：border-collapse </li><li>border-collapse: collapse; 表示相邻边框合并在一起</li><li>内边距 padding</li><li>外边距 margin</li><li>圆角边框：border-radius 用于设置元素的外边框圆角。</li><li>盒子阴影： box-shadow: h-shadow水平阴影 v-shadow垂直阴影 blur模糊距离 spread阴影的尺寸 color阴影颜色 inset外部阴影改为内部阴影;</li><li>文字阴影：  text-shadow: h-shadow水平阴影 v-shadow垂直阴影 blur模糊距离 color阴影颜色;</li></ol><h3 id="11-浮动"><a href="#11-浮动" class="headerlink" title="11.浮动"></a>11.浮动</h3><ol><li>浮动：float：none不浮动   left向左浮动   right向右浮动</li><li>清除浮动： 选择器{clear:属性值;}   left 不允许左侧有浮动   right 不允许右侧有浮动  both 同时清除左右两侧浮动</li><li>额外标签法清除浮动：例如 &lt;div style&#x3D;”clear:both”&gt;&lt;&#x2F;div&gt;，或者其他标签（如&lt;br &#x2F;&gt;等）。</li><li>父级添加 overflow 属性 （溢出）hidden | auto | scroll</li><li>父级添加after伪元素</li></ol><h3 id="12-定位（position）"><a href="#12-定位（position）" class="headerlink" title="12.定位（position）"></a>12.定位（position）</h3><ol><li><p>边偏移 有 top、bottom、left 和 right  4 个属性。</p></li><li><p><code>position</code> 属性定义元素的<strong>定位模式</strong>  选择器 { position: 属性值; } <code>static</code>  <strong>静态</strong>定位 <code>relative</code>  <strong>相对</strong>定位            <code>absolute</code>  <strong>绝对</strong>定位<code>fixed</code>  <strong>固定</strong>定位</p></li><li><p>静态定位(static) ：无定位</p></li><li><p>相对定位(relative) ：移动位置的时候相对于自己原来的位置来说的，在原来位置继续占有</p></li><li><p>绝对定位(absolute)：绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的，完全不占位置，父元素要有定位</p></li><li><p><strong>子绝父相</strong></p></li><li><p>固定定位(fixed)：固定于浏览器可视区的位置，不随滚动条滚动，不占位置</p></li><li><p>粘性定位(sticky) ：相对定位和固定定位的混合，占位置</p><table><thead><tr><th><strong>定位模式</strong></th><th><strong>是否脱标</strong></th><th><strong>移动位置</strong></th><th><strong>是否常用</strong></th></tr></thead><tbody><tr><td>static   静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative 相对定位</strong></td><td><strong>否 (占有位置)</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>基本单独使用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>要和定位父级元素搭配使用</strong></td></tr><tr><td><strong>fixed 固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>单独使用，不需要父级</strong></td></tr><tr><td>sticky 粘性定位</td><td>否   (占有位置)</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table></li><li><p>堆叠顺序（z-index）：正整数、负整数或 0，默认值是 0，数值越大，盒子越靠上；</p></li><li><p>绝对定位的盒子居中：<code>left: 50%;</code>  <code>margin-left: -100px;</code></p></li><li><p>脱标的盒子不会触发外边距塌陷</p></li><li><p>绝对定位（固定定位）会完全压住盒子</p></li></ol><h3 id="13-元素显示隐藏"><a href="#13-元素显示隐藏" class="headerlink" title="13.元素显示隐藏"></a>13.元素显示隐藏</h3><ol><li><p>显示display：display: none 隐藏对象  display：block 除了转换为块级元素之外，同时还有显示元素的意思。隐藏后不再占有原本位置</p></li><li><p>可见性 visibility：visibility：visible ; 　元素可视   visibility：hidden; 　  元素隐藏</p></li><li><p>overflow 溢出：</p></li><li><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table></li></ol><h3 id="14-精灵图"><a href="#14-精灵图" class="headerlink" title="14.精灵图"></a>14.精灵图</h3><ol><li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li><li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li><li>移动背景图片位置， 此时可以使用 background-position 。</li><li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li><li>因为一般情况下都是往上往左移动，所以数值是负值。</li><li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li></ol><h3 id="15-字体应用"><a href="#15-字体应用" class="headerlink" title="15.字体应用"></a>15.字体应用</h3><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8"> @font-face &#123;</span></span><span class="line"><span style="color: #babed8">   font-family: &#39;icomoon&#39;;</span></span><span class="line"><span style="color: #babed8">   src:  url(&#39;fonts/icomoon.eot?7kkyc2&#39;);</span></span><span class="line"><span style="color: #babed8">   src:  url(&#39;fonts/icomoon.eot?7kkyc2#iefix&#39;) format(&#39;embedded-opentype&#39;),</span></span><span class="line"><span style="color: #babed8">     url(&#39;fonts/icomoon.ttf?7kkyc2&#39;) format(&#39;truetype&#39;),</span></span><span class="line"><span style="color: #babed8">     url(&#39;fonts/icomoon.woff?7kkyc2&#39;) format(&#39;woff&#39;),</span></span><span class="line"><span style="color: #babed8">     url(&#39;fonts/icomoon.svg?7kkyc2#icomoon&#39;) format(&#39;svg&#39;);</span></span><span class="line"><span style="color: #babed8">   font-weight: normal;</span></span><span class="line"><span style="color: #babed8">   font-style: normal;</span></span><span class="line"><span style="color: #babed8"> &#125;</span></span><span class="line"><span style="color: #babed8"></span></span></code></pre></div><p>定义字体： span {   font-family: “icomoon”;}</p><h3 id="16-CSS界面样式"><a href="#16-CSS界面样式" class="headerlink" title="16.CSS界面样式"></a>16.CSS界面样式</h3><ol><li>鼠标样式 cursor：default 小白默认 pointer小手 move 移动 text文本 not-allowed禁止</li><li>轮廓线 outline：none 去掉默认蓝色边框</li><li>防止拖拽文本域 resize：none</li><li>文字对齐 vertical-align ：baseline默认，放在父元素基线，top 行中最高元素顶端对齐 middle 放在父元素中部 bottom最低元素的顶端对齐</li><li>单行文本溢出显示省略号：先强制一行内显示文本  white-space: nowrap; 超出的部分隐藏  overflow: hidden;  文字用省略号替代超出的部分  text-overflow: ellipsis;</li></ol><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="1-语义化标签"><a href="#1-语义化标签" class="headerlink" title="1.语义化标签"></a>1.语义化标签</h3><ol><li><code>&lt;header&gt;</code> 头部标签</li><li><code>&lt;nav&gt;</code> 导航标签</li><li><code>&lt;article&gt;</code> 内容标签</li><li><code>&lt;section&gt;</code> 定义文档某个区域</li><li><code>&lt;aside&gt;</code> 侧边栏标签</li><li><code>&lt;footer&gt;</code> 尾部标签</li></ol><h3 id="2-多媒体标签"><a href="#2-多媒体标签" class="headerlink" title="2.多媒体标签"></a>2.多媒体标签</h3><ol><li>音频 <strong>audio</strong> 和视频 <strong>video</strong> 两个标签</li><li>autoplay 视频就绪自动播放</li><li>width height</li><li>loop 视频播放完毕是否循环播放</li><li>preload auto预先加载 none不预先</li><li>url地址</li><li>poster 加载等待的画面图片</li><li>muted 静音播放</li><li>controls 显示控件</li></ol><h3 id="3-新增表单元素"><a href="#3-新增表单元素" class="headerlink" title="3.新增表单元素"></a>3.新增表单元素</h3><ol><li>email  </li><li>url</li><li>date</li><li>time</li><li>month</li><li>week</li><li>number</li><li>tel</li><li>search</li><li>color</li></ol><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="1-新增选择器"><a href="#1-新增选择器" class="headerlink" title="1.新增选择器"></a>1.新增选择器</h3><ol><li><img src="/oranfish.github.io/posts/0/%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20231123105019298.png" alt="image-20231123105019298"></li><li><img src="/oranfish.github.io/posts/0/%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20231123105040370.png" alt="image-20231123105040370"></li><li><img src="/oranfish.github.io/posts/0/%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20231123105106444.png" alt="image-20231123105106444"></li></ol><h3 id="2-盒子模型"><a href="#2-盒子模型" class="headerlink" title="2.盒子模型"></a>2.盒子模型</h3><ol><li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li><li>box-sizing: border-box  盒子大小为 width</li><li>如果盒子模型我们改为了box-sizing: border-box  ， 那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）</li></ol><h3 id="3-其他特性"><a href="#3-其他特性" class="headerlink" title="3.其他特性"></a>3.其他特性</h3><ol><li>模糊滤镜filter ：filter:   函数(); –&gt;  例如： filter: blur(5px);  –&gt;  blur模糊处理  数值越大越模糊</li><li>计算盒子宽度 – calc 函数：width: calc(100% - 80px);</li></ol><h3 id="4-CSS3过渡"><a href="#4-CSS3过渡" class="headerlink" title="4.CSS3过渡"></a>4.CSS3过渡</h3><ol><li><strong>过渡动画：</strong> 是从一个状态 渐渐的过渡到另外一个状态</li><li>transition: 要过渡的属性  花费时间  运动曲线  何时开始;</li></ol><h3 id="5-2D转换"><a href="#5-2D转换" class="headerlink" title="5.2D转换"></a>5.2D转换</h3><ol><li>转换 移动：translate  旋转：rotate  缩放：scale</li><li>旋转 translate：transform：translate（x,y）</li><li>缩放 retate：transform：retate（度数）</li><li>2D转换中心点：transform-origin： x， y；</li><li>缩放 transform：scale（x,y）</li></ol><h3 id="6-动画"><a href="#6-动画" class="headerlink" title="6.动画"></a>6.动画</h3><ol><li>keyframes定义动画  @keyframes动画名称</li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园课表微信小程序接口文档示例</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于uni-app框架开发的微信小程序接口文档"><a href="#基于uni-app框架开发的微信小程序接口文档" class="headerlink" title="基于uni-app框架开发的微信小程序接口文档"></a>基于uni-app框架开发的微信小程序接口文档</h1><h2 id="一-关系型数据库设计"><a href="#一-关系型数据库设计" class="headerlink" title="一. 关系型数据库设计"></a>一. 关系型数据库设计</h2><h3 id="1-数据列表"><a href="#1-数据列表" class="headerlink" title="1.数据列表"></a>1.数据列表</h3><h6 id="1-student-表"><a href="#1-student-表" class="headerlink" title="1.student 表"></a>1.student 表</h6><table><thead><tr><th>student_id</th><th>real_student_id</th><th>name</th><th>college</th><th>major</th><th>classNum</th><th>grade</th></tr></thead><tbody><tr><td>1</td><td>202225220801</td><td>张三</td><td>数信</td><td>软件工程</td><td>5班</td><td>2022</td></tr><tr><td>2</td><td>202325310802</td><td>李四</td><td>材能</td><td>材料</td><td>1班</td><td>2023</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><h6 id="2-courses表"><a href="#2-courses表" class="headerlink" title="2. courses表"></a>2. courses表</h6><table><thead><tr><th>course_id</th><th>name</th><th>teacher</th><th>time</th><th>location</th><th>day_of_week</th></tr></thead><tbody><tr><td>101</td><td>数据库原理</td><td>王老师</td><td>周一1-2节</td><td>4210</td><td>1</td></tr><tr><td>102</td><td>数据结构</td><td>张老师</td><td>周三1-2节</td><td>3302</td><td>3</td></tr><tr><td>103</td><td>面向对象程序设计</td><td>宋老师</td><td>周四3-4节</td><td>4502</td><td>4</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td></td></tr></tbody></table><h6 id="3-enrollments表"><a href="#3-enrollments表" class="headerlink" title="3.enrollments表"></a>3.enrollments表</h6><table><thead><tr><th>enrollment_id</th><th>student_id</th><th>course_id</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>101</td></tr><tr><td>2</td><td>1</td><td>102</td></tr><tr><td>3</td><td>2</td><td>101</td></tr><tr><td>4</td><td>2</td><td>103</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h6 id="4-tasks表"><a href="#4-tasks表" class="headerlink" title="4.tasks表"></a>4.tasks表</h6><table><thead><tr><th>task_id</th><th>real_student_id</th><th>description</th><th>status</th><th>create_time</th><th>update_time</th></tr></thead><tbody><tr><td>1</td><td>202225220501</td><td>完成作业</td><td>未完成(0)</td><td>…</td><td>…</td></tr><tr><td>2</td><td>202325310502</td><td>准备考试</td><td>完成(1)</td><td>…</td><td>…</td></tr><tr><td>3</td><td>202225310702</td><td>提交报告</td><td>未完成(0)</td><td>…</td><td>…</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td></td><td></td></tr></tbody></table><h6 id="生成语句"><a href="#生成语句" class="headerlink" title="生成语句"></a>生成语句</h6><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 学生表格</span></span><span class="line"><span style="color: #babed8">create table students (</span></span><span class="line"><span style="color: #babed8">    student_id int unsigned primary key auto_increment comment &#39;主键学生id&#39;,</span></span><span class="line"><span style="color: #babed8">    real_student_id varchar(20) not null comment &#39;学号&#39;,</span></span><span class="line"><span style="color: #babed8">    name varchar(10) not null comment &#39;名字&#39;,</span></span><span class="line"><span style="color: #babed8">    college varchar(20) not null comment &#39;学院&#39;,</span></span><span class="line"><span style="color: #babed8">    major varchar(20) not null comment &#39;专业&#39;,</span></span><span class="line"><span style="color: #babed8">    class int not null comment &#39;班级&#39;,</span></span><span class="line"><span style="color: #babed8">    grade int not null comment &#39;年级&#39;</span></span><span class="line"><span style="color: #babed8">)comment &#39;学生表格&#39;;</span></span><span class="line"><span style="color: #babed8">CREATE INDEX idx_real_student_id ON students(real_student_id);</span></span><span class="line"><span style="color: #babed8">-- 学生表测试数据</span></span><span class="line"><span style="color: #babed8">insert into students(student_id, real_student_id, name, college, major, class, grade) values(1, &#39;202225220503&#39;, &#39;冯焯炫&#39;, &#39;软件学院&#39;, &#39;软件工程&#39;, 5, 2022),</span></span><span class="line"><span style="color: #babed8">                                                                                            (2, &#39;202225220504&#39;, &#39;郭文杰&#39;, &#39;软件学院&#39;, &#39;软件工程&#39;, 5, 2022),</span></span><span class="line"><span style="color: #babed8">                                                                                            (3, &#39;202225220901&#39;, &#39;张三&#39;, &#39;软件学院&#39;, &#39;软件工程&#39;, 9, 2022),</span></span><span class="line"><span style="color: #babed8">                                                                                            (4, &#39;202325220904&#39;, &#39;李四&#39;, &#39;软件学院&#39;, &#39;软件工程&#39;, 9, 2023),</span></span><span class="line"><span style="color: #babed8">                                                                                            (5, &#39;202225310902&#39;, &#39;王五&#39;, &#39;数学与信息学院&#39;, &#39;计算机科学与技术&#39;, 9, 2022);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 课程表格</span></span><span class="line"><span style="color: #babed8">create table courses(</span></span><span class="line"><span style="color: #babed8">    course_id int unsigned primary key auto_increment comment &#39;主键课程id&#39;,</span></span><span class="line"><span style="color: #babed8">    name varchar(20) not null comment &#39;课程名字&#39;,</span></span><span class="line"><span style="color: #babed8">    teacher varchar(10) not null comment &#39;教师名字&#39;,</span></span><span class="line"><span style="color: #babed8">    time varchar(20) not null comment &#39;上课时间&#39;,</span></span><span class="line"><span style="color: #babed8">    location varchar(20) not null comment &#39;上课地点&#39;,</span></span><span class="line"><span style="color: #babed8">    day_of_week int not null comment &#39;星期几上课&#39;</span></span><span class="line"><span style="color: #babed8">)comment &#39;课程表格&#39;;</span></span><span class="line"><span style="color: #babed8">-- 课程表测试数据</span></span><span class="line"><span style="color: #babed8">insert into courses(course_id, name, teacher, time, location, day_of_week) values(101, &#39;数据结构&#39;, &#39;张老师&#39;, &#39;周一第1-2节&#39;, &#39;4201&#39;, 1),</span></span><span class="line"><span style="color: #babed8">                                                                                 (102, &#39;数据库&#39;, &#39;陈老师&#39;, &#39;周三第1-2节&#39;, &#39;4311&#39;, 3),</span></span><span class="line"><span style="color: #babed8">                                                                                 (103, &#39;面向对象程序设计&#39;, &#39;王老师&#39;, &#39;周四第3-4节&#39;, &#39;4403&#39;, 4),</span></span><span class="line"><span style="color: #babed8">                                                                                 (104, &#39;C语言程序设计&#39;, &#39;周老师&#39;, &#39;周二第7-8节&#39;, &#39;4402&#39;, 2),</span></span><span class="line"><span style="color: #babed8">                                                                                 (105, &#39;高等数学&#39;, &#39;王老师&#39;, &#39;周四第3-4节&#39;, &#39;3201&#39;, 4),</span></span><span class="line"><span style="color: #babed8">                                                                                 (106, &#39;大学英语&#39;, &#39;冯老师&#39;, &#39;周一第7-8节&#39;, &#39;3311&#39;, 1),</span></span><span class="line"><span style="color: #babed8">                                                                                 (107, &#39;数据结构&#39;, &#39;张老师&#39;, &#39;周三第1-2节&#39;, &#39;4301&#39;, 3),</span></span><span class="line"><span style="color: #babed8">                                                                                 (108, &#39;计算机组成原理&#39;, &#39;黄老师&#39;, &#39;周五第5-6节&#39;, &#39;1502&#39;, 5),</span></span><span class="line"><span style="color: #babed8">                                                                                 (109, &#39;数字电路&#39;, &#39;王老师&#39;, &#39;周二第1-2节&#39;, &#39;3301&#39;, 2),</span></span><span class="line"><span style="color: #babed8">                                                                                 (110, &#39;近代史纲要&#39;, &#39;陈老师&#39;, &#39;周五第5-6节&#39;, &#39;5c501&#39;, 5),</span></span><span class="line"><span style="color: #babed8">                                                                                 (111, &#39;离散结构&#39;, &#39;李老师&#39;, &#39;周四第1-2节&#39;, &#39;5a601&#39;, 4);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 选课表格</span></span><span class="line"><span style="color: #babed8">create table enrollments(</span></span><span class="line"><span style="color: #babed8">    enrollment_id int unsigned primary key auto_increment comment &#39;主键选课id&#39;,</span></span><span class="line"><span style="color: #babed8">    student_id int unsigned not null comment &#39;学生id&#39;,</span></span><span class="line"><span style="color: #babed8">    course_id int unsigned not null comment &#39;课程id&#39;,</span></span><span class="line"><span style="color: #babed8">    FOREIGN KEY (student_id) REFERENCES students(student_id),</span></span><span class="line"><span style="color: #babed8">    FOREIGN KEY (course_id) REFERENCES courses(course_id)</span></span><span class="line"><span style="color: #babed8">)comment &#39;选课表格&#39;;</span></span><span class="line"><span style="color: #babed8">-- 选课表测试数据</span></span><span class="line"><span style="color: #babed8">insert into enrollments(enrollment_id, student_id, course_id) values(1, 1, 101),</span></span><span class="line"><span style="color: #babed8">                                                                    (2, 1, 102),</span></span><span class="line"><span style="color: #babed8">                                                                    (3, 1, 103),</span></span><span class="line"><span style="color: #babed8">                                                                    (4, 1, 106),</span></span><span class="line"><span style="color: #babed8">                                                                    (5, 1, 107),</span></span><span class="line"><span style="color: #babed8">                                                                    (6, 1, 109),</span></span><span class="line"><span style="color: #babed8">                                                                    (7, 2, 101),</span></span><span class="line"><span style="color: #babed8">                                                                    (8, 2, 102),</span></span><span class="line"><span style="color: #babed8">                                                                    (9, 2, 103),</span></span><span class="line"><span style="color: #babed8">                                                                    (10, 2, 106),</span></span><span class="line"><span style="color: #babed8">                                                                    (11, 2, 107),</span></span><span class="line"><span style="color: #babed8">                                                                    (12, 2, 109),</span></span><span class="line"><span style="color: #babed8">                                                                    (13, 3, 103),</span></span><span class="line"><span style="color: #babed8">                                                                    (14, 3, 111),</span></span><span class="line"><span style="color: #babed8">                                                                    (15, 3, 101),</span></span><span class="line"><span style="color: #babed8">                                                                    (16, 3, 107),</span></span><span class="line"><span style="color: #babed8">                                                                    (17, 3, 106),</span></span><span class="line"><span style="color: #babed8">                                                                    (18, 3, 102),</span></span><span class="line"><span style="color: #babed8">                                                                    (19, 4, 104),</span></span><span class="line"><span style="color: #babed8">                                                                    (20, 4, 110),</span></span><span class="line"><span style="color: #babed8">                                                                    (21, 4, 109),</span></span><span class="line"><span style="color: #babed8">                                                                    (22, 4, 108),</span></span><span class="line"><span style="color: #babed8">                                                                    (23, 5, 103),</span></span><span class="line"><span style="color: #babed8">                                                                    (24, 5, 108),</span></span><span class="line"><span style="color: #babed8">                                                                    (25, 5, 109),</span></span><span class="line"><span style="color: #babed8">                                                                    (26, 5, 111),</span></span><span class="line"><span style="color: #babed8">                                                                    (27, 5, 106);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 待办表格</span></span><span class="line"><span style="color: #babed8">create table tasks(</span></span><span class="line"><span style="color: #babed8">    task_id int unsigned primary key auto_increment comment &#39;主键任务id&#39;,</span></span><span class="line"><span style="color: #babed8">    real_student_id varchar(20) not null comment &#39;学号&#39;,</span></span><span class="line"><span style="color: #babed8">    description varchar(100) not null comment &#39;任务描述&#39;,</span></span><span class="line"><span style="color: #babed8">    status tinyint(1) not null comment &#39;任务状态&#39;,</span></span><span class="line"><span style="color: #babed8">    create_time datetime not null comment &#39;创建时间&#39;,</span></span><span class="line"><span style="color: #babed8">    update_time datetime not null comment &#39;更新时间&#39;,</span></span><span class="line"><span style="color: #babed8">    FOREIGN KEY (real_student_id) REFERENCES students(real_student_id)</span></span><span class="line"><span style="color: #babed8">)comment &#39;待办表格&#39;;</span></span><span class="line"><span style="color: #babed8">-- 待办表测试数据</span></span><span class="line"><span style="color: #babed8">insert into tasks(task_id, real_student_id, description, status, create_time, update_time) values (1, &#39;202225220503&#39;, &#39;完成Java实验任务&#39;, 0, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (2, &#39;202225220503&#39;, &#39;完成C语言实验任务&#39;, 1, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (3, &#39;202225220504&#39;, &#39;完成数据结构课程设计&#39;, 0, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (4, &#39;202225220504&#39;, &#39;完成Java实验任务&#39;, 1, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (5, &#39;202225220901&#39;, &#39;完成高等数学周末作业&#39;, 0, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (6, &#39;202325220904&#39;, &#39;完成大学英语周末作业&#39;, 0, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (7, &#39;202225310902&#39;, &#39;完成数据库实验任务&#39;, 1, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (8, &#39;202225310902&#39;, &#39;完成Java实验任务&#39;, 0, now(), now());</span></span></code></pre></div><h2 id="二-接口文档"><a href="#二-接口文档" class="headerlink" title="二.接口文档"></a>二.接口文档</h2><h3 id="1-课程管理"><a href="#1-课程管理" class="headerlink" title="1.课程管理"></a>1.课程管理</h3><h4 id="1-1-课程列表查询"><a href="#1-1-课程列表查询" class="headerlink" title="1.1 课程列表查询"></a>1.1 课程列表查询</h4><h5 id="1-1-1-基本信息"><a href="#1-1-1-基本信息" class="headerlink" title="1.1.1 基本信息"></a>1.1.1 基本信息</h5><p>​| 请求路径：&#x2F;courses&#x2F;{realStudentId}</p><p>​        | 请求方式：GET</p><p>​        | 接口描述：该接口用于根据学号进行学生课表数据查询</p><h5 id="1-1-2-请求参数"><a href="#1-1-2-请求参数" class="headerlink" title="1.1.2 请求参数"></a>1.1.2 请求参数</h5><p>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">/courses/202225220503</span></span></code></pre></div><h5 id="1-1-3响应数据"><a href="#1-1-3响应数据" class="headerlink" title="1.1.3响应数据"></a>1.1.3响应数据</h5><p>参数格式： application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr><tr><td>|- courseId</td><td>number</td><td>非必须</td><td>课程id</td></tr><tr><td>|- name</td><td>string</td><td>非必须</td><td>课程名称</td></tr><tr><td>|- teacher</td><td>string</td><td>非必须</td><td>老师名称</td></tr><tr><td>|- time</td><td>string</td><td>非必须</td><td>上课时间</td></tr><tr><td>|- location</td><td>string</td><td>非必须</td><td>上课地点</td></tr><tr><td>|- dayOfWeek</td><td>number</td><td>非必须</td><td>上课时间是星期几</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: [</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 101,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;数据结构&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;张老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周一第1-2节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;4201&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 1</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 102,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;数据库&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;陈老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周三第1-2节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;4311&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 3</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 103,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;面向对象程序设计&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;王老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周四第3-4节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;4403&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 4</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 106,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;大学英语&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;冯老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周一第7-8节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;3311&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 1</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 107,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;数据结构&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;张老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周三第1-2节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;4301&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 3</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 109,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;数字电路&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;王老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周二第1-2节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;3301&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 2</span></span><span class="line"><span style="color: #babed8">        &#125;</span></span><span class="line"><span style="color: #babed8">    ]</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h3 id="2-待办管理"><a href="#2-待办管理" class="headerlink" title="2.待办管理"></a>2.待办管理</h3><h4 id="1-1查询待办"><a href="#1-1查询待办" class="headerlink" title="1.1查询待办"></a>1.1查询待办</h4><h5 id="1-1-1基本信息"><a href="#1-1-1基本信息" class="headerlink" title="1.1.1基本信息"></a>1.1.1基本信息</h5><p>​        | 请求路径：&#x2F;tasks&#x2F;{realStudentId}</p><p>​        | 请求方式：GET</p><p>​        | 接口描述：该接口用于根据学号进行待办事项数据查询</p><h5 id="1-1-2请求参数"><a href="#1-1-2请求参数" class="headerlink" title="1.1.2请求参数"></a>1.1.2请求参数</h5><p>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">/tasks/202225220503</span></span></code></pre></div><h5 id="1-1-3响应数据-1"><a href="#1-1-3响应数据-1" class="headerlink" title="1.1.3响应数据"></a>1.1.3响应数据</h5><p>参数格式： application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr><tr><td>|- taskId</td><td>number</td><td>非必须</td><td>待办id</td></tr><tr><td>|- description</td><td>string</td><td>非必须</td><td>待办内容</td></tr><tr><td>|- status</td><td>number</td><td>非必须</td><td>完成状态，0代表未完成，1代表完成</td></tr><tr><td>|- createTime</td><td>string</td><td>非必须</td><td>创建时间</td></tr><tr><td>|- updateTime</td><td>string</td><td>非必须</td><td>更新时间</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: [</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;taskId&quot;: 1,</span></span><span class="line"><span style="color: #babed8">            &quot;description&quot;: &quot;完成Java实验任务&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;status&quot;: 0,</span></span><span class="line"><span style="color: #babed8">            &quot;createTime&quot;: &quot;2023-11-05T21:36:43&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;updateTime&quot;: &quot;2023-11-05T21:36:43&quot;</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;taskId&quot;: 2,</span></span><span class="line"><span style="color: #babed8">            &quot;description&quot;: &quot;完成C语言实验任务&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;status&quot;: 1,</span></span><span class="line"><span style="color: #babed8">            &quot;createTime&quot;: &quot;2023-11-05T21:36:43&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;updateTime&quot;: &quot;2023-11-05T21:36:43&quot;</span></span><span class="line"><span style="color: #babed8">        &#125;</span></span><span class="line"><span style="color: #babed8">    ]</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h4 id="1-2-删除待办"><a href="#1-2-删除待办" class="headerlink" title="1.2 删除待办"></a>1.2 删除待办</h4><h5 id="1-2-1-基本信息"><a href="#1-2-1-基本信息" class="headerlink" title="1.2.1 基本信息"></a>1.2.1 基本信息</h5><p>​| 请求路径： &#x2F;tasks&#x2F;{taskId}</p><p>​        | 请求方式：DELETE</p><p>​        | 接口描述：该接口用于根据待办事项ID删除待办事项数据</p><h5 id="1-2-2-请求参数"><a href="#1-2-2-请求参数" class="headerlink" title="1.2.2 请求参数"></a>1.2.2 请求参数</h5><p>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>taskId</td><td>number</td><td>必须</td><td>待办事项ID</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">/tasks/9</span></span></code></pre></div><h5 id="1-2-3-响应数据"><a href="#1-2-3-响应数据" class="headerlink" title="1.2.3 响应数据"></a>1.2.3 响应数据</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: null</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h4 id="1-3-添加待办"><a href="#1-3-添加待办" class="headerlink" title="1.3 添加待办"></a>1.3 添加待办</h4><h5 id="1-3-1-基本信息"><a href="#1-3-1-基本信息" class="headerlink" title="1.3.1 基本信息"></a>1.3.1 基本信息</h5><p>​| 请求路径： &#x2F;tasks</p><p>​        | 请求方式：POST</p><p>​        | 接口描述：该接口用于添加待办事项数据</p><h5 id="1-3-2-请求参数"><a href="#1-3-2-请求参数" class="headerlink" title="1.3.2 请求参数"></a>1.3.2 请求参数</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号，必须是student表里有的学号</td></tr><tr><td>description</td><td>string</td><td>必须</td><td>待办事项</td></tr><tr><td>status</td><td>number</td><td>必须</td><td>完成状态，0代表未完成，1代表完成</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">   &quot;realStudentId&quot;: &quot;202225220503&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;description&quot;: &quot;完成Java实验任务&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;status&quot;: 0</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h5 id="1-3-3-响应数据"><a href="#1-3-3-响应数据" class="headerlink" title="1.3.3 响应数据"></a>1.3.3 响应数据</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: null</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h4 id="1-4-修改待办"><a href="#1-4-修改待办" class="headerlink" title="1.4 修改待办"></a>1.4 修改待办</h4><h5 id="1-4-1-基本信息"><a href="#1-4-1-基本信息" class="headerlink" title="1.4.1 基本信息"></a>1.4.1 基本信息</h5><p>​| 请求路径： &#x2F;tasks&#x2F;{taskId}</p><p>​        | 请求方式：PUT</p><p>​        | 接口描述：该接口用于修改待办事项数据</p><h5 id="1-4-2-请求参数"><a href="#1-4-2-请求参数" class="headerlink" title="1.4.2 请求参数"></a>1.4.2 请求参数</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号，必须是student表里有的学号</td></tr><tr><td>description</td><td>string</td><td>必须</td><td>待办事项</td></tr><tr><td>status</td><td>number</td><td>必须</td><td>完成状态，0代表未完成，1代表完成</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">   &quot;realStudentId&quot;: &quot;202225220503&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;description&quot;: &quot;完成Java实验任务&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;status&quot;: 0</span></span><span class="line"><span style="color: #babed8">&#125;,</span></span></code></pre></div><h5 id="1-4-3-响应数据"><a href="#1-4-3-响应数据" class="headerlink" title="1.4.3 响应数据"></a>1.4.3 响应数据</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: null</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h3 id="3-学生管理"><a href="#3-学生管理" class="headerlink" title="3.学生管理"></a>3.学生管理</h3><h4 id="3-1-添加学生"><a href="#3-1-添加学生" class="headerlink" title="3.1 添加学生"></a>3.1 添加学生</h4><h6 id="3-1-1-基本信息"><a href="#3-1-1-基本信息" class="headerlink" title="3.1.1 基本信息"></a>3.1.1 基本信息</h6><p>​| 请求路径： &#x2F;students</p><p>​        | 请求方式：POST</p><p>​        | 接口描述：该接口用于添加待办事项数据</p><h6 id="3-1-2-请求参数"><a href="#3-1-2-请求参数" class="headerlink" title="3.1.2 请求参数"></a>3.1.2 请求参数</h6><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号</td></tr><tr><td>name</td><td>string</td><td>必须</td><td>学生姓名</td></tr><tr><td>college</td><td>string</td><td>必须</td><td>学院</td></tr><tr><td>major</td><td>string</td><td>必须</td><td>专业</td></tr><tr><td>classNum</td><td>number</td><td>必须</td><td>班级</td></tr><tr><td>grade</td><td>number</td><td>必须</td><td>年级</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">   &quot;realStudentId&quot;: &quot;202225220505&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;name&quot;: &quot;何泳泳&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;college&quot;: &quot;软件学院&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;major&quot;: &quot;软件工程&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;classNum&quot;: 5,</span></span><span class="line"><span style="color: #babed8">   &quot;grade&quot;: 2022</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h6 id="3-1-3响应数据"><a href="#3-1-3响应数据" class="headerlink" title="3.1.3响应数据"></a>3.1.3响应数据</h6><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: null</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6神，启动！</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>本文旨在测试博客图片上传功能，为了解决博客上传图片失败问题努力了几个小时后终于发现了问题所在，在hexo中的 hexo-asset-image 图片模块和 hexo-abbrlink 不兼容导致。</p><p>解决方法：在node_modules&#x2F;hexo-asset-image&#x2F;index.js中将代码中的”var endPos &#x3D; link.length - 1”改为”-5”即可解决。</p><hr><h2 id="6神，启动！"><a href="#6神，启动！" class="headerlink" title="6神，启动！"></a>6神，启动！</h2><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/IMG_20231003_103115.jpg" alt="IMG_20231003_103115"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/IMG_20231005_001738.jpg" alt="IMG_20231005_001738"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/IMG_20231110_200055.jpg" alt="IMG_20231110_200055"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/IMG_20231211_223334.jpg" alt="IMG_20231211_223334"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/img-1696674810542b938000ebdd92c29bc9e4cedc912280a4d52fec133f96ba929d38287bbb777cd.jpg" alt="img-1696674810542b938000ebdd92c29bc9e4cedc912280a4d52fec133f96ba929d38287bbb777cd"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/img-1696674816616e87dd3b0b5538d91c1cf4afb60d539ac656c741f0ef77f0c68fa8c9ae3293041.jpg" alt="img-1696674816616e87dd3b0b5538d91c1cf4afb60d539ac656c741f0ef77f0c68fa8c9ae3293041"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/img-1699261717243a2e3ed9ecf2e4f1423b4c77d6f0eefcc366984d4e928975fa61708a114115039.jpg" alt="img-1699261717243a2e3ed9ecf2e4f1423b4c77d6f0eefcc366984d4e928975fa61708a114115039"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/img-1698500159523b964171cff67018b21a47ae2ee01f51b987e325471de82188a390de7788f9b07.jpg" alt="img-1698500159523b964171cff67018b21a47ae2ee01f51b987e325471de82188a390de7788f9b07"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/SNH48_130d3086-9069-47f5-8ef2-c163935f7fc8.png" alt="SNH48_130d3086-9069-47f5-8ef2-c163935f7fc8"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/SNH48_97455466-f732-43a4-9be0-8698cd0eb906.png" alt="SNH48_97455466-f732-43a4-9be0-8698cd0eb906"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/SNH48_ac919d55-0076-4063-a9a8-dc1cc425d855.png" alt="SNH48_ac919d55-0076-4063-a9a8-dc1cc425d855"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/SNH48_59c354e4-a671-4b33-bacf-8cad13ee5e46.png" alt="SNH48_59c354e4-a671-4b33-bacf-8cad13ee5e46"></p><p><img src="/oranfish.github.io/posts/0/6%E7%A5%9E%EF%BC%8C%E5%90%AF%E5%8A%A8%EF%BC%81/SNH48_45b87273-fd90-42f3-8cf5-8336799ca355.png" alt="SNH48_45b87273-fd90-42f3-8cf5-8336799ca355"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黄怡慈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用学习</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h2><h3 id="1-1-版本管理工具概念"><a href="#1-1-版本管理工具概念" class="headerlink" title="1.1 版本管理工具概念"></a>1.1 版本管理工具概念</h3><p>如果有一个软件能记录我们对文档的所有修改,所有版本,那么上面的问题讲迎刃而解.而这类软件我们一般叫做版本控制工具</p><p>版本管理工具一般具有如下特性:</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">1) 能够记录历史版本,回退历史版本</span></span><span class="line"><span style="color: #babed8">2) 团队开发,方便代码合并</span></span></code></pre></div><h3 id="1-2-版本管理工具介绍"><a href="#1-2-版本管理工具介绍" class="headerlink" title="1.2 版本管理工具介绍"></a>1.2 版本管理工具介绍</h3><p>现在比较流行的版本管理工具是git ,但是实际上git 是近几年才发展起来的,可能有一些老的项目,还在用一些老的软件,比如svn</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240306223938402.png" alt="image-20240306223938402"></p><h4 id="1-2-1-SVN"><a href="#1-2-1-SVN" class="headerlink" title="1.2.1 SVN"></a>1.2.1 SVN</h4><p>工作流程</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">SVN是集中式版本控制系统，版本库是集中放在中央服务器的.</span></span><span class="line"><span style="color: #babed8">工作流程如下:</span></span><span class="line"><span style="color: #babed8">    1.从中央服务器远程仓库下载代码</span></span><span class="line"><span style="color: #babed8">    2.修改后将代码提交到中央服务器远程仓库</span></span></code></pre></div><p>优缺点:</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8"> 优点: 简单,易操作</span></span><span class="line"><span style="color: #babed8"> 缺点:所有代码必须放在中央服务器  </span></span><span class="line"><span style="color: #babed8">         1.服务器一旦宕机无法提交代码,即容错性较差</span></span><span class="line"><span style="color: #babed8">       2.离线无法提交代码,无法及时记录我们的提交行为</span></span></code></pre></div><p>svn流程图</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/svn.jpg"></p><h4 id="1-2-2-Git"><a href="#1-2-2-Git" class="headerlink" title="1.2.2 Git"></a>1.2.2 Git</h4><p>工作流程</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS），分为两种类型的仓库：</span></span><span class="line"><span style="color: #babed8">本地仓库和远程仓库</span></span><span class="line"><span style="color: #babed8">工作流程如下</span></span><span class="line"><span style="color: #babed8">    1．从远程仓库中克隆或拉取代码到本地仓库(clone/pull)</span></span><span class="line"><span style="color: #babed8">    2．从本地进行代码修改</span></span><span class="line"><span style="color: #babed8">    3．在提交前先将代码提交到暂存区</span></span><span class="line"><span style="color: #babed8">    4．提交到本地仓库。本地仓库中保存修改的各个历史版本</span></span><span class="line"><span style="color: #babed8">    5．修改完成后，需要和团队成员共享代码时，将代码push到远程仓库</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/git.png"></p><p>总结:git和svn的区别</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">1. svn 是集中式版本控制工具,git 是分布式版本控制工具</span></span><span class="line"><span style="color: #babed8">2. svn 不支持离线提交,git 支持离线提交代码</span></span></code></pre></div><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308104054199.png" alt="image-20240308104054199"></p><p>命令如下： </p><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库 </li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订 </li><li>add（添加）: 在提交前先将代码提交到暂存区 </li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本 </li><li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。 </li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于 fetch+merge </li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h3 id="1-3-Git发展简史"><a href="#1-3-Git发展简史" class="headerlink" title="1.3 Git发展简史"></a>1.3 Git发展简史</h3><p>Linus  本人 花了10天的时间Git 出来了,一个月之内，Linux系统的源码已经由Git管理了！</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/1571988966446.png" alt="Linus 采访记录"></p><p>Git 出来以后毕竟是一个人做的,开始并不好用(刚开始只能用勉强可以用来形容), 还是很多人抱怨,发展了很多年都没有干过其他软件.</p><p>直到 2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub,从此git 迎来了飞速发展,当下git 已经成为了最流行的版本控制工具</p><h2 id="2-Git-的安装和常用命令"><a href="#2-Git-的安装和常用命令" class="headerlink" title="2.Git 的安装和常用命令"></a>2.Git 的安装和常用命令</h2><p>本教程里的git命令例子都是在Git Bash中演示的，会用到一些基本的linux命令，在此为大家提前列举：</p><ul><li>ls&#x2F;ll 查看当前目录 </li><li>cat 查看文件内容 </li><li>touch 创建文件 </li><li>vi vi编辑器（使用vi编辑器是为了方便展示效果，学员可以记事本、editPlus、notPad++等其它编 辑器）</li></ul><h3 id="2-1-Git环境配置"><a href="#2-1-Git环境配置" class="headerlink" title="2.1 Git环境配置"></a>2.1 Git环境配置</h3><h4 id="2-1-1-下载与安装"><a href="#2-1-1-下载与安装" class="headerlink" title="2.1.1 下载与安装"></a>2.1.1 下载与安装</h4><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><strong><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308104326822.png" alt="image-20240308104326822"></strong></p><p>下载完成后可以得到如下安装文件：</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308104345047.png" alt="image-20240308104345047"></p><p>双击下载的安装文件来安装Git。安装完成后在电脑桌面（也可以是其他目录）点击右键，如果能够看 到如下两个菜单则说明Git安装成功。</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308104404827.png" alt="image-20240308104404827"></p><p>备注： </p><ul><li>Git GUI：Git提供的图形界面工具 </li><li>Git Bash：Git提供的命令行工具 </li><li>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用 该用户信息</li></ul><h4 id="2-1-2-Git基本配置"><a href="#2-1-2-Git基本配置" class="headerlink" title="2.1.2 Git基本配置"></a>2.1.2 Git基本配置</h4><p>1.打开Git Bash </p><p>2.设置用户信息 </p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">config</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--global</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">user.name</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">“itcast”</span><span style="color: #BABED8">    </span><span style="color: #C3E88D">这里是设置用户名</span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">config</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--global</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">user.email</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">“</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">hello@itcast.cn”</span><span style="color: #BABED8">     </span><span style="color: #C3E88D">这里是设置自己的email地址</span></span></code></pre></div><p>查看配置信息 </p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">config</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--global</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">user.name</span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">config</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--global</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">user.email</span></span></code></pre></div><h4 id="2-1-3-为常用指令配置别名（可选）"><a href="#2-1-3-为常用指令配置别名（可选）" class="headerlink" title="2.1.3 为常用指令配置别名（可选）"></a>2.1.3 为常用指令配置别名（可选）</h4><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。 </p><p>1.打开用户目录，创建 .bashrc 文件 </p><p>部分windows系统不允许用户创建点号开头的文件，可以打开gitBash,执行  <code>touch ~/.bashrc</code> </p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308105750316.png" alt="image-20240308105750316"></p><p>2.在 .bashrc 文件中输入如下内容：</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#用于输出git提交日志</span></span><span class="line"><span style="color: #C792EA">alias</span><span style="color: #BABED8"> git-log</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">git log --pretty=oneline --all --graph --abbrev-commit</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #676E95; font-style: italic">#用于输出当前目录所有文件及基本信息</span></span><span class="line"><span style="color: #C792EA">alias</span><span style="color: #BABED8"> ll</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ls -al</span></span></code></pre></div><p>3.打开gitBash，执行 <code>source ~/.bashrc</code></p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308110054495.png" alt="image-20240308110054495"></p><h4 id="2-1-4-解决GitBash乱码问题"><a href="#2-1-4-解决GitBash乱码问题" class="headerlink" title="2.1.4 解决GitBash乱码问题"></a>2.1.4 解决GitBash乱码问题</h4><p>1.打开GitBash执行下面命令</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">config</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--global</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">core.quotepath</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">false</span></span></code></pre></div><p>2.<code>$&#123;git_home&#125;/etc/bash.bashrc</code> 文件最后加入下面两行 </p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">export</span><span style="color: #BABED8"> LANG</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">zh_CN.UTF-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #C792EA">export</span><span style="color: #BABED8"> LC_ALL</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">zh_CN.UTF-8</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span></span></code></pre></div><h3 id="2-2-获取本地仓库"><a href="#2-2-获取本地仓库" class="headerlink" title="2.2 获取本地仓库"></a>2.2 获取本地仓库</h3><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库 </p><p>1）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库 </p><p>2）进入这个目录中，点击右键打开Git bash窗口 </p><p>3）执行命令git init </p><p>4）如果创建成功后可在文件夹下看到隐藏的.git目录。</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308110459089.png" alt="image-20240308110459089"></p><h3 id="2-3-基础操作指令"><a href="#2-3-基础操作指令" class="headerlink" title="2.3 基础操作指令"></a>2.3 基础操作指令</h3><p>Git工作目录下对于文件的修改(增加、删除、更新)会存在几个状态，这些修改的状态会随着我们执行Git 的命令而发生变化。</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308110802022.png" alt="image-20240308110802022"></p><p>本章节主要讲解如何使用命令来控制这些状态之间的转换： </p><ol><li>git add (工作区 –&gt; 暂存区) </li><li>git commit (暂存区 –&gt; 本地仓库)</li></ol><h4 id="2-3-1-查看修改的状态（status）"><a href="#2-3-1-查看修改的状态（status）" class="headerlink" title="2.3.1 查看修改的状态（status）"></a>2.3.1 查看修改的状态（status）</h4><ul><li>作用：查看的修改的状态（暂存区、工作区）</li><li>命令形式：git status</li></ul><h4 id="2-3-2-添加工作区到暂存区（add）"><a href="#2-3-2-添加工作区到暂存区（add）" class="headerlink" title="2.3.2 添加工作区到暂存区（add）"></a>2.3.2 添加工作区到暂存区（add）</h4><ul><li>作用：添加工作区一个或多个文件的修改到暂存区</li><li>命令行事：git add 单个文件名|通配符</li><li>将所有修改加入暂存区：git add .</li></ul><h4 id="2-3-3-提交暂存区到本地仓库（commit）"><a href="#2-3-3-提交暂存区到本地仓库（commit）" class="headerlink" title="2.3.3 提交暂存区到本地仓库（commit）"></a>2.3.3 提交暂存区到本地仓库（commit）</h4><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：git commit -m ‘注释内容’</li></ul><h4 id="2-3-4-查看提交日志（log）"><a href="#2-3-4-查看提交日志（log）" class="headerlink" title="2.3.4 查看提交日志（log）"></a>2.3.4 查看提交日志（log）</h4><ul><li>作用：查看提交记录</li><li>命令形式：git log [option]</li><li>options<ul><li>–all 显示所有分支</li><li>–pretty&#x3D;oneline 将提交信息显示为一行</li><li>–abbrev-commit 使得输出的commitld更简短</li><li>–graph以图的形式显示</li></ul></li></ul><h4 id="2-3-5-版本回退"><a href="#2-3-5-版本回退" class="headerlink" title="2.3.5 版本回退"></a>2.3.5 版本回退</h4><ul><li>作用：版本切换</li><li>命令形式：git reset –hard commitID<ul><li>commitID 可以使用 git-log 或者 git log指令查看</li></ul></li><li>如何查看已经删除的记录？<ul><li>git reflog</li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><h4 id="2-3-6-添加文件至忽略列表"><a href="#2-3-6-添加文件至忽略列表" class="headerlink" title="2.3.6 添加文件至忽略列表"></a>2.3.6 添加文件至忽略列表</h4><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动 生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录 中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># no .a files</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">*.a</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># but do track lib.a, even though you&#39;re ignoring .a files above</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #89DDFF">!</span><span style="color: #FFCB6B">lib.a</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># only ignore the TODO file in the current directory, not subdir/TODO</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">/TODO</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># ignore all files in the build/ directory</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">build/</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># ignore doc/notes.txt, but not doc/server/arch.txt</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">doc/*.txt</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># ignore all .pdf files in the doc/ directory</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">doc/**/*.pdf</span></span></code></pre></div><p><strong>基础操作：</strong></p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#####################仓库初始化######################</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 创建目录（git_test01）并在目录下打开gitbash</span></span><span class="line"><span style="color: #FFCB6B">略</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 初始化git仓库</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">init</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">#####################创建文件并提交#####################</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 目录下创建文件 file01.txt</span></span><span class="line"><span style="color: #FFCB6B">略</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 将修改加入暂存区</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">add</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">.</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 将修改提交到本地仓库，提交记录内容为：commit 001</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">commit</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-m</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">commit 001</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 查看日志</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">log</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">####################修改文件并提交######################</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 修改file01的内容为：count=1</span></span><span class="line"><span style="color: #FFCB6B">略</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 将修改加入暂存区</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">add</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">.</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># # 将修改提交到本地仓库，提交记录内容为：update file01</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">commit</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--m</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">update file01</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 查看日志</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">log</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 以精简的方式显示提交记录</span></span><span class="line"><span style="color: #FFCB6B">git-log</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">####################将最后一次修改还原##################</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 查看提交记录</span></span><span class="line"><span style="color: #FFCB6B">git-log</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 找到倒数第2次提交的commitID</span></span><span class="line"><span style="color: #FFCB6B">略</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 版本回退</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">reset</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">commitID</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--hard</span></span></code></pre></div><h3 id="2-4-分支"><a href="#2-4-分支" class="headerlink" title="2.4 分支"></a>2.4 分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离 开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><h4 id="2-4-1-查看本地分支"><a href="#2-4-1-查看本地分支" class="headerlink" title="2.4.1 查看本地分支"></a>2.4.1 查看本地分支</h4><ul><li>命令：<code>git branch</code></li></ul><h4 id="2-4-2-创建本地分支"><a href="#2-4-2-创建本地分支" class="headerlink" title="2.4.2 创建本地分支"></a>2.4.2 创建本地分支</h4><ul><li>命令：<code>git branch 分支名</code></li></ul><h4 id="2-4-3-切换分支"><a href="#2-4-3-切换分支" class="headerlink" title="2.4.3 切换分支"></a>2.4.3 切换分支</h4><ul><li>命令：<code>git checkout 分支名</code></li></ul><p>我们还可以直接切换到一个不存在的分支（创建并切换）</p><ul><li>命令：<code>git checkout -b 分支名</code></li></ul><h4 id="2-4-4-合并分支"><a href="#2-4-4-合并分支" class="headerlink" title="2.4.4 合并分支"></a>2.4.4 合并分支</h4><p>一个分支上的提交可以合并到另一个分支</p><ul><li>命令：<code>git merge 分支名称</code></li></ul><h4 id="2-4-5-删除分支"><a href="#2-4-5-删除分支" class="headerlink" title="2.4.5 删除分支"></a>2.4.5 删除分支</h4><p><strong>不能删除当前分支，只能删除其他分支</strong></p><p><code>git branch -d b1</code> 删除分支时，需要做各种检查</p><p><code>git branch -D b1</code> 不做任何检查，强制删除</p><h4 id="2-4-6-解决冲突"><a href="#2-4-6-解决冲突" class="headerlink" title="2.4.6 解决冲突"></a>2.4.6 解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解 决冲突，解决冲突步骤如下： </p><p>1.处理文件中冲突的地方 </p><p>2.将解决完冲突的文件加入暂存区(add) </p><p>3.提交到仓库(commit) </p><p>冲突部分的内容处理如下所示： </p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308112529148.png" alt="image-20240308112529148"></p><h4 id="2-4-7-开发中分支使用原则和流程"><a href="#2-4-7-开发中分支使用原则和流程" class="headerlink" title="2.4.7 开发中分支使用原则和流程"></a>2.4.7 开发中分支使用原则和流程</h4><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离 开来进行重大的Bug修改、开发新的功能，以免影响开发主线。 </p><p>在开发中，一般有如下分支使用原则与流程： </p><ul><li><p>master （生产） 分支 </p><p>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支； </p></li><li><p>develop（开发）分支 </p><p>是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线 要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。 </p></li><li><p>feature&#x2F;xxxx分支 </p><p>从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完 成后合并到develop分支。 </p></li><li><p>hotfix&#x2F;xxxx分支 </p><p>从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、 develop分支。 </p></li><li><p>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等 等。 黑马程序员 北京昌</p></li></ul><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308112722628.png" alt="image-20240308112722628"></p><p><strong>分支操作：</strong></p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">###########################创建并切换到dev01分支，在dev01分支提交</span></span><span class="line"><span style="color: #676E95; font-style: italic"># [master]创建分支dev01</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">branch</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dev01</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [master]切换到dev01</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">checkout</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dev01</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [dev01]创建文件file02.txt</span></span><span class="line"><span style="color: #FFCB6B">略</span></span><span class="line"><span style="color: #676E95; font-style: italic"># [dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">add</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">.</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">commit</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-m</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">add file02 on dev</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [dev01]以精简的方式显示提交记录</span></span><span class="line"><span style="color: #FFCB6B">git-log</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">###########################切换到master分支，将dev01合并到master分支</span></span><span class="line"><span style="color: #676E95; font-style: italic"># [dev01]切换到master分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">checkout</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">master</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [master]合并dev01到master分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">merge</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dev01</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [master]以精简的方式显示提交记录</span></span><span class="line"><span style="color: #FFCB6B">git-log</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [master]查看文件变化(目录下也出现了file02.txt)</span></span><span class="line"><span style="color: #FFCB6B">略</span></span><span class="line"><span style="color: #676E95; font-style: italic">##########################删除dev01分支</span></span><span class="line"><span style="color: #676E95; font-style: italic"># [master]删除dev01分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">branch</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-d</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">dev01</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [master]以精简的方式显示提交记录</span></span><span class="line"><span style="color: #FFCB6B">git-log</span></span></code></pre></div><h2 id="3-Git远程仓库"><a href="#3-Git远程仓库" class="headerlink" title="3.Git远程仓库"></a>3.Git远程仓库</h2><h3 id="3-1-常用的托管服务-远程仓库"><a href="#3-1-常用的托管服务-远程仓库" class="headerlink" title="3.1 常用的托管服务[远程仓库]"></a>3.1 常用的托管服务[远程仓库]</h3><p>前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库 呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。 gitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名gitHub 码云（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快 GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用Git作 为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。</p><h3 id="3-2-注册码云gitee"><a href="#3-2-注册码云gitee" class="headerlink" title="3.2 注册码云gitee"></a>3.2 注册码云gitee</h3><p>要想使用码云的相关服务，需要注册账号（地址：  <a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</p><h3 id="3-3-创建远程仓库"><a href="#3-3-创建远程仓库" class="headerlink" title="3.3 创建远程仓库"></a>3.3 创建远程仓库</h3><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308113701817.png" alt="image-20240308113701817"></p><p>仓库创建完成之后就可以看到仓库地址</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308113725036.png" alt="image-20240308113725036"></p><h3 id="3-4-配置SSH公钥"><a href="#3-4-配置SSH公钥" class="headerlink" title="3.4 配置SSH公钥"></a>3.4 配置SSH公钥</h3><ul><li><p>生成SSH公钥</p><ul><li>ssh-key-gen-t rsa</li><li>不断回车，如果公钥已经存在，则自动覆盖</li></ul></li><li><p>Gitee设置账户公钥</p><ul><li>获取公钥<ul><li>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</li></ul></li></ul><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308114017973.png" alt="image-20240308114017973"></p></li><li><p>验证是否配置成功</p><ul><li>ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#101;&#x65;&#46;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#101;&#x65;&#46;&#99;&#x6f;&#109;</a></li></ul></li></ul><h3 id="3-5-操作远程仓库"><a href="#3-5-操作远程仓库" class="headerlink" title="3.5 操作远程仓库"></a>3.5 操作远程仓库</h3><h4 id="3-5-1-添加远程仓库"><a href="#3-5-1-添加远程仓库" class="headerlink" title="3.5.1 添加远程仓库"></a>3.5.1 添加远程仓库</h4><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p><ul><li>命令： git remote add &lt;远端名称&gt; &lt;仓库路径&gt; </li><li>远端名称，默认是origin，取决于远端服务器设置 </li><li>仓库路径，从远端服务器获取此URL </li><li>例如: git remote add origin  <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#x65;&#101;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#x65;&#101;&#46;&#99;&#111;&#x6d;</a>:czbk_zhang_meng&#x2F;git_test.git</li></ul><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308114542272.png" alt="image-20240308114542272"></p><h4 id="3-5-2-查看远程仓库"><a href="#3-5-2-查看远程仓库" class="headerlink" title="3.5.2 查看远程仓库"></a>3.5.2 查看远程仓库</h4><ul><li>命令：<code>git remote</code></li></ul><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308114621441.png" alt="image-20240308114621441"></p><h4 id="3-5-3-推送到远程仓库"><a href="#3-5-3-推送到远程仓库" class="headerlink" title="3.5.3 推送到远程仓库"></a>3.5.3 推送到远程仓库</h4><ul><li><p>命令：git push [-f] [–set-upstream] [远端名称 [本地分支名][:远端分支名] ] </p><ul><li>如果远程分支名和本地分支名称相同，则可以只写本地分支 </li><li><code>git push origin master</code></li><li><code>-f</code> 表示强制覆盖</li><li><code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。 </li><li><code>git push --set-upstream origin master</code> </li><li>如果当前分支已经和远端分支关联，则可以省略分支名和远端名。</li><li><code> git push</code> 将master分支推送到已关联的远端分支。</li></ul><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308114801413.png" alt="image-20240308114801413"></p></li></ul><p>查询远程仓库</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308114817282.png" alt="image-20240308114817282"></p><h4 id="3-5-4-本地分支与远程分支的关联关系"><a href="#3-5-4-本地分支与远程分支的关联关系" class="headerlink" title="3.5.4 本地分支与远程分支的关联关系"></a>3.5.4 本地分支与远程分支的关联关系</h4><ul><li>查看关联关系我们可以使用 <code>git branch -vv</code>命令</li></ul><h4 id="3-5-5-从远程仓库克隆"><a href="#3-5-5-从远程仓库克隆" class="headerlink" title="3.5.5 从远程仓库克隆"></a>3.5.5 从远程仓库克隆</h4><p>如果已经有一个远端仓库，我们可以直接clone到本地。 </p><ul><li>命令: git clone &lt;仓库路径&gt; [本地目录] </li><li>本地目录可以省略，会自动生成一个目录</li></ul><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308114934066.png" alt="image-20240308114934066"></p><h4 id="3-5-6-从远程仓库中抓取和拉取"><a href="#3-5-6-从远程仓库中抓取和拉取" class="headerlink" title="3.5.6 从远程仓库中抓取和拉取"></a>3.5.6 从远程仓库中抓取和拉取</h4><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本 地，再进行操作。</p><ul><li><p>抓取 命令：git fetch [remote name] [branch name] </p></li><li><p>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</p></li><li><p>如果不指定远端名称和分支名，则抓取所有分支。</p></li><li><p>拉取 命令：git pull [remote name] [branch name]</p></li><li><p>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge </p></li><li><p>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</p></li></ul><p>1.在test01这个本地仓库进行一次提交并推送到远程仓库</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308115209511.png" alt="image-20240308115209511"></p><p>2.在另一个仓库将远程提交的代码拉取到本地仓库</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308115244375.png" alt="image-20240308115244375"></p><h4 id="3-5-7-解决合并冲突"><a href="#3-5-7-解决合并冲突" class="headerlink" title="3.5.7 解决合并冲突"></a>3.5.7 解决合并冲突</h4><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。 </p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要 推送到远程仓库，此时B用户晚于A用户，故需要先拉取远程仓库的提交，经过合并后才能推送到远端分 支,如下图所示。</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308115321066.png" alt="image-20240308115321066"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同，在此不再赘述。</p><p><strong>远程仓库操作：</strong></p><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">##########################1-将本地仓库推送到远程仓库</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 完成4.1、4.2、4.3、4.4的操作</span></span><span class="line"><span style="color: #FFCB6B">略</span></span><span class="line"><span style="color: #676E95; font-style: italic"># [git_test01]添加远程仓库</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">remote</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">add</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">origin</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">git@gitee.com/</span><span style="color: #BABED8">**</span><span style="color: #C3E88D">/</span><span style="color: #BABED8">**</span><span style="color: #C3E88D">.git</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">push</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--set-upstream</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">origin</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">master</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">###########################2-将远程仓库克隆到本地</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 将远程仓库克隆到本地git_test02目录下</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">clone</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">git@gitee.com/</span><span style="color: #BABED8">**</span><span style="color: #C3E88D">/</span><span style="color: #BABED8">**</span><span style="color: #C3E88D">.git</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">git_test02</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [git_test02]以精简的方式显示提交记录</span></span><span class="line"><span style="color: #FFCB6B">git-log</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">###########################3-将本地修改推送到远程仓库</span></span><span class="line"><span style="color: #676E95; font-style: italic"># [git_test01]创建文件file03.txt</span></span><span class="line"><span style="color: #FFCB6B">略</span></span><span class="line"><span style="color: #676E95; font-style: italic"># [git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file03</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">add</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">.</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">commit</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-m</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">add file03</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># [git_test01]将master分支的修改推送到远程仓库</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">push</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">origin</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">master</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">###########################4-将远程仓库的修改更新到本地</span></span><span class="line"><span style="color: #676E95; font-style: italic"># [git_test02]将远程仓库修改再拉取到本地</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">pull</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 以精简的方式显示提交记录</span></span><span class="line"><span style="color: #FFCB6B">git-log</span></span><span class="line"><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic"># 查看文件变化(目录下也出现了file03.txt)</span></span><span class="line"><span style="color: #FFCB6B">略</span></span></code></pre></div><h2 id="4-在Idea中使用Git"><a href="#4-在Idea中使用Git" class="headerlink" title="4.在Idea中使用Git"></a>4.在Idea中使用Git</h2><h3 id="4-1-在Idea中配置Git"><a href="#4-1-在Idea中配置Git" class="headerlink" title="4.1 在Idea中配置Git"></a>4.1 在Idea中配置Git</h3><p>安装好IntelliJ IDEA后，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安 装位置则需要手动配置下Git的路径。选择File→Settings打开设置窗口，找到Version Control下的git选项：</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125159514.png" alt="image-20240308125159514"></p><p>点击Test按钮,现在执行成功，配置完成</p><h3 id="4-2-在Idea中操作Git"><a href="#4-2-在Idea中操作Git" class="headerlink" title="4.2 在Idea中操作Git"></a>4.2 在Idea中操作Git</h3><p>场景：本地已经有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员继续一起协作开发。</p><h4 id="4-2-1-创建项目远程仓库"><a href="#4-2-1-创建项目远程仓库" class="headerlink" title="4.2.1 创建项目远程仓库"></a>4.2.1 创建项目远程仓库</h4><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125358967.png" alt="image-20240308125358967"></p><h4 id="4-2-2-初始化本地仓库"><a href="#4-2-2-初始化本地仓库" class="headerlink" title="4.2.2 初始化本地仓库"></a>4.2.2 初始化本地仓库</h4><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125417476.png" alt="image-20240308125417476"></p><h4 id="4-2-3-设置远程仓库"><a href="#4-2-3-设置远程仓库" class="headerlink" title="4.2.3 设置远程仓库"></a>4.2.3 设置远程仓库</h4><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125437939.png" alt="image-20240308125437939"></p><h4 id="4-2-4-提交到本地仓库"><a href="#4-2-4-提交到本地仓库" class="headerlink" title="4.2.4 提交到本地仓库"></a>4.2.4 提交到本地仓库</h4><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125455485.png" alt="image-20240308125455485"></p><h4 id="4-2-5-推送到远程仓库"><a href="#4-2-5-推送到远程仓库" class="headerlink" title="4.2.5 推送到远程仓库"></a>4.2.5 推送到远程仓库</h4><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125518470.png" alt="image-20240308125518470"></p><h4 id="4-2-6-克隆远程仓库到本地"><a href="#4-2-6-克隆远程仓库到本地" class="headerlink" title="4.2.6 克隆远程仓库到本地"></a>4.2.6 克隆远程仓库到本地</h4><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125538014.png" alt="image-20240308125538014"></p><h4 id="4-2-7-创建分支"><a href="#4-2-7-创建分支" class="headerlink" title="4.2.7 创建分支"></a>4.2.7 创建分支</h4><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125604512.png" alt="image-20240308125604512"></p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125617048.png" alt="image-20240308125617048"></p><h4 id="4-2-8-切换分支及其他分支相关操作"><a href="#4-2-8-切换分支及其他分支相关操作" class="headerlink" title="4.2.8 切换分支及其他分支相关操作"></a>4.2.8 切换分支及其他分支相关操作</h4><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125639133.png" alt="image-20240308125639133"></p><h4 id="4-2-9-解决冲突"><a href="#4-2-9-解决冲突" class="headerlink" title="4.2.9 解决冲突"></a>4.2.9 解决冲突</h4><p>1.执行merge或pull操作时，可能发生冲突</p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125749252.png" alt="image-20240308125749252"></p><p>2.冲突解决后加入暂存区</p><p>3.提交到本地仓库</p><p>4.推送到远程仓库</p><h3 id="4-3-Idea常用Git操作入口"><a href="#4-3-Idea常用Git操作入口" class="headerlink" title="4.3 Idea常用Git操作入口"></a>4.3 Idea常用Git操作入口</h3><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125826947.png" alt="image-20240308125826947"></p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125831746.png" alt="image-20240308125831746"></p><h2 id="5-附录"><a href="#5-附录" class="headerlink" title="5.附录"></a>5.附录</h2><h3 id="5-1-windows下看不到隐藏的文件（-bashrc、-gitignore）"><a href="#5-1-windows下看不到隐藏的文件（-bashrc、-gitignore）" class="headerlink" title="5.1 windows下看不到隐藏的文件（.bashrc、.gitignore）"></a>5.1 windows下看不到隐藏的文件（.bashrc、.gitignore）</h3><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308125943815.png" alt="image-20240308125943815"></p><h3 id="5-2-windows下无法创建-ignore-bashrc文件"><a href="#5-2-windows下无法创建-ignore-bashrc文件" class="headerlink" title="5.2 windows下无法创建.ignore|.bashrc文件"></a>5.2 windows下无法创建.ignore|.bashrc文件</h3><p>这里以创建 .ignore 文件为例： </p><p>在git目录下打开gitbash </p><p>执行指令 touch .gitignore </p><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308130006999.png" alt="image-20240308130006999"></p><h3 id="5-3-IDEA集成GitBash作为Terminal"><a href="#5-3-IDEA集成GitBash作为Terminal" class="headerlink" title="5.3 IDEA集成GitBash作为Terminal"></a>5.3 IDEA集成GitBash作为Terminal</h3><p><img src="/oranfish.github.io/posts/0/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20240308130026973.png" alt="image-20240308130026973"></p><h3 id="5-4-命令"><a href="#5-4-命令" class="headerlink" title="5.4 命令"></a>5.4 命令</h3><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">#设置用户信息 </span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">config</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--global</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">user.name</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">“itcast”</span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">config</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--global</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">user.email</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">“itcast@itcast.cn”</span></span><span class="line"><span style="color: #676E95; font-style: italic">#查看配置信息</span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">config</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--list</span></span><span class="line"><span style="color: #BABED8">   </span><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">config</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">user.name</span></span><span class="line"><span style="color: #676E95; font-style: italic">#通过上面的命令设置的信息会保存在~/.gitconfig文件中</span></span><span class="line"></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 初始化仓库带工作区</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">init</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 初始化仓库不带工作区</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">init</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">--bare</span><span style="color: #BABED8">  </span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 从远程仓库克隆</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">clone</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">远程Git仓库地址</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #FFCB6B">例如:</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">clone</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">https://gitee.com/itcast/gittest.git</span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 查看状态</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">status</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #676E95; font-style: italic">#查看状态 使输出信息更加简洁</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">status</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">–s</span><span style="color: #BABED8"> </span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 将未跟踪的文件加入暂存区</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">add</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">文件</span><span style="color: #BABED8">名</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #676E95; font-style: italic"># 将暂存区的文件取消暂存 (取消 add )</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">reset</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">文件</span><span style="color: #BABED8">名</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># git commit 将暂存区的文件修改提交到本地仓库</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">commit</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-m</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">日志信息</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">文件</span><span style="color: #BABED8">名</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 从本地工作区 删除文件</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">rm</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">文件</span><span style="color: #BABED8">名</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #676E95; font-style: italic"># 如果本工作区库误删, 想要回退</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">checkout</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">head</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">文件</span><span style="color: #BABED8">名</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 查看远程  列出指定的每一个远程服务器的简写</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">remote</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #676E95; font-style: italic"># 查看远程 , 列出 简称和地址</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">remote</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">-v</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #676E95; font-style: italic"># 查看远程仓库详细地址</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">remote</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">show</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">仓库简</span><span style="color: #BABED8">称</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 添加远程仓库</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">remote</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">add</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">shortnam</span><span style="color: #BABED8">e</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">ur</span><span style="color: #BABED8">l</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 移除远程仓库和本地仓库的关系(只是从本地移除远程仓库的关联关系，并不会真正影响到远程仓库)</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">remote</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">rm</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">shortnam</span><span style="color: #BABED8">e</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 从远程仓库克隆</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">clone</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">ur</span><span style="color: #BABED8">l</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #676E95; font-style: italic"># 从远程仓库拉取 (拉取到.git 目录,不会合并到工作区,工作区发生变化)</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">fetch</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">shortnam</span><span style="color: #BABED8">e</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支名</span><span style="color: #BABED8">称</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 手动合并  把某个版本的某个分支合并到当前工作区</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">merge</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">shortnam</span><span style="color: #BABED8">e</span><span style="color: #89DDFF">&gt;</span><span style="color: #C3E88D">/</span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支名</span><span style="color: #BABED8">称</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 从远程仓库拉取 (拉取到.git 目录,合并到工作区,工作区不发生变化) = fetch+merge</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">pull</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">shortnam</span><span style="color: #BABED8">e</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支名</span><span style="color: #BABED8">称</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">pull</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">shortnam</span><span style="color: #BABED8">e</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支名</span><span style="color: #BABED8">称</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span><span style="color: #C3E88D">--allow-unrelated-histories</span><span style="color: #BABED8">  </span><span style="color: #676E95; font-style: italic">#  强制拉取合并</span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 将本地仓库推送至远程仓库的某个分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">push</span><span style="color: #BABED8"> [remote-name] </span><span style="color: #89DDFF">[</span><span style="color: #BABED8">branch-name</span><span style="color: #89DDFF">]</span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 默认 分支名称为 master</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 列出所有本地分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">branch</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 列出所有远程分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">branch</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-r</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 列出所有本地分支和远程分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">branch</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-a</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 创建分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">branch</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支</span><span style="color: #BABED8">名</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 切换分支 </span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">checkout</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支</span><span style="color: #BABED8">名</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 删除分支(如果分支已经修改过,则不允许删除)</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">branch</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-d</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支</span><span style="color: #BABED8">名</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 强制删除分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">branch</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-D</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支</span><span style="color: #BABED8">名</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 提交分支至远程仓库</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">push</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">仓库简</span><span style="color: #BABED8">称</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支名</span><span style="color: #BABED8">称</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8"></span></span><span class="line"><span style="color: #676E95; font-style: italic"># 合并分支 将其他分支合并至当前工作区</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">merge</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #C3E88D">分支名</span><span style="color: #BABED8">称</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 删除远程仓库分支</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">push</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">origin</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">–d</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">branchName</span></span></code></pre></div><div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic"># 列出所有tag</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">tag</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 查看tag详细信息 </span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">show</span><span style="color: #BABED8"> [tagName]</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 新建一个tag</span></span><span class="line"><span style="color: #FFCB6B">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">tag</span><span style="color: #BABED8"> [tagName]</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 提交指定tag</span></span><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">push</span><span style="color: #BABED8"> [仓库简称] </span><span style="color: #89DDFF">[</span><span style="color: #BABED8">tagName</span><span style="color: #89DDFF">]</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 新建一个分支，指向某个tag</span></span><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">checkout</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-b</span><span style="color: #BABED8"> [branch] </span><span style="color: #89DDFF">[</span><span style="color: #BABED8">tag</span><span style="color: #89DDFF">]</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 删除本地tag</span></span><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">tag</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">-d</span><span style="color: #BABED8"> [tag]</span></span><span class="line"><span style="color: #676E95; font-style: italic"># 删除远程tag (注意 空格)</span></span><span class="line"><span style="color: #FFCB6B">$</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">git</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">push</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">origin</span><span style="color: #BABED8"> </span><span style="color: #C3E88D">:refs/tags/[tag]</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCAU软件工程经济学知识点</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="SCAU软件工程经济学知识点"><a href="#SCAU软件工程经济学知识点" class="headerlink" title="SCAU软件工程经济学知识点"></a>SCAU软件工程经济学知识点</h2><p>*<strong>有哪些分类，有哪些方法，有哪些特点*</strong></p><p><strong>第一章</strong></p><p>1.<strong>软件的定义</strong>：它是包括程序、数据及其相关文档的完整集合。</p><p>2.按软件功能分类：系统、支撑、应用。</p><p>3.按规模分类：微型、小型、中型、大型、超大型、极大型。</p><p>4.按标准化程度分类：标准化、半定制、软件服务（定制软件）。</p><p>5.按硬件或软件关联分类：嵌入型、组织型、半独立型。</p><p>6.按工作方式：实时处理、多用户分时处理、交互式、批处理。</p><p>7.软件特点：信息产品、从头开始生产、知识结晶、手工方式生产、无需库存成本、壁垒低、对用户有粘性。</p><p>8.<strong>软件产业</strong>是指软件产品和软件服务相关的一切经济活动和关系的总称。</p><p>9.软件产业特点：高技术高附加值高效益、高度关联性、国际化、专业化分工、规模化经济效益。</p><p>10.发展模式：“全面领先”技术与服务领导型——美国，“整机带动”嵌入式系统开发型——日韩，“软件集散”生产本地化型——爱尔兰，“外包服务”国际加工服务型——印度。</p><p>11.产业不足：关键核心缺乏、自主创新能力弱、企业规模小、产权保护力度弱。</p><p>12.软件企业：分为软件产品企业和软件服务企业。</p><p>13.软件工程生产过程方法论：技术学、经济学、管理学。 </p><p>14.软件生产周期：从概念形成开始，经过开发、使用和维护，直到最后退役的全过程。</p><p>15.<strong>计算题：功能点计算方法</strong></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image002.gif" alt="截图.png"></p><p>W为加权系数，d为基本信息量。</p><p>wd为题目表格中数据相乘后相加。</p><p>Fi环境复杂度参数（题目给出）</p><p>16.衡量产品质量高低的指标：技术性能指标（处理能力）和可靠性指标（持久能力）。</p><p>17.软件的可靠性是关系到系统成败的重要因素。</p><p>18.<strong>软件工程经济学四个部分：</strong></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image004.gif" alt="截图.png"></p><p><strong>第二章</strong></p><p>1.沉没成本：已经发生的不可收回的支出。</p><p>2.任何对软件项目的工程经济分析与研究都必须从实体维、时间维和要素维等三个维度展开。</p><p>3.经济活动分析与评价特征：系统分析的目的是为了提高工程经济活动的经济效果，经济效果大多与“未来”有关，系统分析强调的是在技术可行性基础上的经济分析，系统评价是通过“比较”来完成的，统评价应是各利益主体目标的相互协调与均衡。</p><p>4.投资：实现目标而进行资金投放或运行的经济活动。</p><p>5.投资活动包括：生产性投资（保证生产运行）和非生产性投资（证券投资）。</p><p>6.建设项目投资包括：固定资产投资（设备）、流动资金投资（工资原材料）、无形资产投资（使用权）。</p><p>7.筹资和资金运用、项目可行性、市场调查。</p><p>8.项目的可行性分析：必要性、可实现性、效果性与风险性。</p><p>9.总成本费用：生产成本、管理费用、财务费用和销售费用。</p><p>10.收入：销售收入、劳务收入、使用费收入、股利收入及利息收入。</p><p>11.税金：增值税（增值额）、营业税、企业所得税（生产经营）、城乡维护建设税（维护公共设施）、教育费附加。</p><p>12.所得税：企业所得税与个人所得税。</p><p>13.利润：</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image006.gif" alt="截图.png"></p><p>14.资金的时间价值：绝对金额随时间转移后其增加或减少的金额部分。</p><p>15.<strong>计算题：年利率（本利和）的计算</strong>。</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image008.gif" alt="截图.png"></p><p>16.<strong>现金流量图</strong>：箭头向上者表示现金流入(或正现金流)，箭头向下者表示现金流出(或负现金流)。<strong>注意现金流量图对象！</strong></p><p>17.<strong>计算题：初值和本利的计算</strong>。</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image010.gif" alt="截图.png"></p><p>例题：</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image012.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image014.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image016.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image018.gif" alt="截图.png"></p><p>18.***<strong>计算题：等额系列现金流</strong>。</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image020.jpg" alt="IMG_20230629_201331.jpg"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image022.gif" alt="截图.png"></p><p>A为每年等额偿还&#x2F;存储的金额。Sn为最后一年金额。P0为首年金额。</p><p>A&#x3D;P0 × CRF（偿还）</p><p>A&#x3D;Sn × SFF （存储）</p><p>例题：</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image024.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image026.gif" alt="截图.png"></p><p>19.招标与投标的特征：组织性（招标特有）、公开性、一次性决定、公平性。</p><p>20.招标类型：按公开程度和参加人数的限制条件分类，可划分为竞争性招标（公开招标）和有限招标（邀请招标），按合同的条件分类，可分为自动条件招标、随机条件招标、谈判招标。</p><p> <strong>第三章</strong></p><p>1.成本的经济内容：劳动资料方面的消耗、劳动对象方面的消耗、人工方面的消费的消耗。</p><p>2.成本的特点：消耗性、补偿性、目的性、综合性、代偿性。</p><p>3.成本的分类：按企业主要经营活动——研究与开发成本、采购成本、生产成本、经营成本、管理费用。按成本与产量的对应关系——变动成本与固定成本。按成本的确定时间——预测成本、定额成本、计划成本、实际成本。</p><p>4.软件成本构成：硬件购置费用、网络通信费用、软件购置费用、基建费用、人力资源费用、硬件生产测试费、软件开发&#x2F;测试费用、水、电、运输费用、消耗材料及废品损失费用、培训费用、系统营销费用、管理费用、其他费用。</p><p>5.减少成本测算误差的策略。</p><p>6.<strong>计算题：功能分解法（不考大题）</strong></p><p>最小可能值ai、最大可能值bi、最可能值mi、平均规模Ej</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image028.gif" alt="截图.png"></p><p>成本费用Coi、劳动生产率Eoi、各子系统模块成本Ci、各子系统工作量Mi</p><p>软件总成本Cs、总工作量Es（Ms）</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image030.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image032.jpg" alt="IMG_20230629_185330.jpg"></p><p>例题：习题三第3题</p><p>7.<strong>计算题：影响因子法与COCOMO模型</strong></p><p>U为综合影响要素</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image034.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image036.gif" alt="截图.png"></p><p>Cs软件开发成本、a工时费用率、Ms修正工作量、Mo基本工作量</p><p>L软件开发规模、Td工期、rkhd形式参数（根据类型判断）。</p><p>组织性：程序规模较小；嵌入型：硬件软件限制条件下运行；半独立型：规模较大。</p><p>例题：</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image038.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image040.gif" alt="截图.png"></p><p>8.<strong>计算题：类比法估计目标软件成本</strong></p><p>改变调整系数AAF、原软件开发规模La、新软件开发规模Lb</p><p>DM设计修改百分比、CM代码修改百分比、IM集成修改百分比</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image042.gif" alt="截图.png"></p><p>W1 &#x3D; 0.4、 W2 &#x3D; W3 &#x3D; 0.3</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image044.gif" alt="截图.png"></p><p>9.ABC分类法</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image046.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image048.gif" alt="截图.png"></p><p>成本控制的重点研究对象：ABC分类（从大到小排序）</p><p>10.<strong>计算题：挣值管理法</strong></p><p>四个关键指标：总预算成本TBC、累计预算成本CBC、累计实现成本CAC、累计实现价值CEV。</p><p>四个绩效评价参数：成本偏差CV：CV&#x3D;CEV-CAC、成本绩效CPI：CPI&#x3D;CEV&#x2F;CAC、进度偏差SV：SV&#x3D;CEV-CBC、进度绩效SPI：SPI&#x3D;CEV&#x2F;CBC。</p><p>完工预测成本FCAC：FCAC&#x3D;TBC&#x2F;CPI、FCAC&#x3D;CAC+(TBC-CEV)、FCAC&#x3D;CAC+重估剩余工程预算。</p><p>11.软件产品的定价和营销是软件生存周期中的两项重要工程经济活动。</p><p>12.产品价格是由其价值所决定的。</p><p>13.软件价格的影响因素：用户需求、产品成本、市场竞争和垄断及环境因素。</p><p>14.软件的定价目标：利润导向、收益导向、销售导向、竞争导向、品牌导向、维持生存导向。</p><p>15.<strong>软件的定价方法</strong>：成本导向定价法、需求导向定价法、竞争导向定价法。</p><p>16.软件的定价策略：撇脂和渗透定价策略，捆绑定价策略，免费使用策略，歧视定价策略。</p><p>17.软件的市场营销过程一般包括： ① 目标市场定位 ② 确定产品策略③ 确定定价策略④ 确定(销售)渠道策略 ⑤ 确定促销策略⑥ 确定服务策略。</p><p><strong>第四章</strong></p><p>1.项目评价：净现值法、内部收益率法和投资回收期法。</p><p>2.<strong>计算题：净现值法NPV</strong></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image050.gif" alt="截图.png"></p><p>Bt寿命期内收益、Ct支出（成本）、Dt残值、Kt投资额、i基准贴现率、N使用年限</p><p>NPV&gt;0 投资可行 NPV&lt;&#x3D;0投资不可行</p><p>3.<strong>计算题：内部收益法（不要求计算）了解原理</strong>：求NPV(IRR)（对分法）。</p><p>4.<strong>计算题：投资回收期法</strong></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image052.gif" alt="截图.png"></p><p>5.<strong>计算题：净现值法进行多方案比较</strong></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image054.gif" alt="截图.png"></p><p>6.<strong>计算题：净年值法进行多方案比较</strong></p><p>CRF资金回收系数</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image056.gif" alt="截图.png"></p><p>7.<strong>计算题：研究期法（是否承认未使用价值）</strong></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image058.jpg" alt="IMG_20230629_201257.jpg"></p><p>8.计算题：费用现值法</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image060.jpg" alt="IMG_20230629_201309.jpg"></p><p>9.计算题：年费用现值法</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image062.jpg" alt="IMG_20230629_201318.jpg"></p><p>10.效益的分类：成本与支出费用的节省、社会财富的增加、服务水平的提高、管理水平的提高。</p><p>11.对软件项目实际效益与预测效益评价常采用系统运行前后对比法和参数估计法。</p><p>12.软件的社会效益评价：系统评价以定性分析为主、社会评价无通用方法、对社会的贡献以间接效益、无形效果和外部效果为主。</p><p>13.软件项目的风险：</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image064.gif" alt="截图.png"></p><p><strong>第五章（略）</strong></p><p><strong>第六章</strong></p><p>1.软件的开发的产品目标：质量、成本、进度和团队。</p><p>2.<strong>计划网络图与关键路径！！！</strong></p><p>特征：有向性和不可逆转性、连通性、封闭性。</p><p>当计划网络出现多个起始结点或多个终止结点时，应引入虚活动。</p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image066.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image068.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image070.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image072.gif" alt="截图.png"></p><p>3.<strong>软件开发团队的组织建设</strong></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image074.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image076.gif" alt="截图.png"></p><p><img src="/oranfish.github.io/posts/0/SCAU%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%8F%E6%B5%8E%E5%AD%A6/clip_image078.gif" alt="截图.png"></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应状态码</title>
      <link href="/oranfish.github.io/posts/0.html"/>
      <url>/oranfish.github.io/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、状态码大类"><a href="#一、状态码大类" class="headerlink" title="一、状态码大类"></a>一、状态码大类</h2><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><h2 id="二、常见的响应状态码"><a href="#二、常见的响应状态码" class="headerlink" title="二、常见的响应状态码"></a>二、常见的响应状态码</h2><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;200&#x3D;&#x3D;</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>&#x3D;&#x3D;404&#x3D;&#x3D;</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td>指示用户在给定时间内发送了<strong>太多请求</strong>（“限速”），配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code> Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>&#x3D;&#x3D;500&#x3D;&#x3D;</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr></tbody></table><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/oranfish.github.io/about/index.html"/>
      <url>/oranfish.github.io/about/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="博客简介"><a href="#博客简介" class="headerlink" title="博客简介"></a>博客简介</h3><p>个人文章存档，生活记录，主打一个玩。</p><h3 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h3><p>学Java死路一条。</p>]]></content>
      
    </entry>
    
    
  
</search>
