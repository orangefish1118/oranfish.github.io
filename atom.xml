<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oranfish&#39;s Blog</title>
  
  <subtitle>学而无知、无知而学</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-02-07T13:11:56.412Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fioransh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL知识点总结</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-02-07T09:58:12.000Z</published>
    <updated>2024-02-07T13:11:56.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在我们讲解SpringBootWeb基础知识(请求响应案例)的时候，我们讲到在web开发中，为了应用程序职责单一，方便维护，我们一般将web应用程序分为三层，即：Controller、Service、Dao 。</p><p>之前我们的案例中，是这样子的请求流程：浏览器发起请求，先请求Controller；Controller接收到请求之后，调用Service进行业务逻辑处理；Service再调用Dao，Dao再解析user.xml中所存储的数据。</p><p>xml文件中可以存储数据，但是在企业项目开发中不会使用xml文件存储数据，因为不便管理维护，操作难度大。 在真实的企业开发中呢，都会采用数据库来存储和管理数据，那此时，web开发调用流程图如下所示：</p><p><img src="/posts/0/image-20221205001346266.png" alt="image-20221205001346266"></p><h2 id="2-初识MySQL"><a href="#2-初识MySQL" class="headerlink" title="2.初识MySQL"></a>2.初识MySQL</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>首先来了解一下什么是数据库。</p><ul><li>数据库：英文为 DataBase，简称DB，它是存储和管理数据的仓库。</li></ul><p>数据是存储在数据库中的，那我们要如何来操作数据库以及数据库中所存放的数据呢？</p><p>那这里呢，会涉及到一个软件：数据库管理系统（<strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem，简称DBMS）</p><ul><li>DBMS是操作和管理数据库的大型软件。将来我们只需要操作这个软件，就可以通过这个软件来操纵和管理数据库了。</li></ul><p>此时又出现一个问题：DBMS这个软件怎么知道要操作的是哪个数据库、哪个数据呢？是对数据做修改还是查询呢？</p><ul><li>需要给DBMS软件发送一条指令，告诉这个软件我们要执行的是什么样的操作，要对哪个数据进行操作。而这个指令就是SQL语句</li></ul><p>SQL（<strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage，简称SQL）：结构化查询语言，它是操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准。我们学习数据库开发，最为重要的就是学习SQL语句 。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>关系型数据库：我们后面会详细讲解，现在大家只需要知道我们学习的数据库属于关系型数据库即可。</p></blockquote><p>结论：程序员给数据库管理系统(DBMS)发送SQL语句，再由数据库管理系统操作数据库当中的数据。</p><p>了解了数据库的一些简单概念之后，接下来我们再来介绍下目前主流的数据库，这里截取了排名前十的数据库：</p><p><img src="/posts/0/image-20221205120408757.png" alt="image-20221205120408757"> </p><ul><li>Oracle：大型的收费数据库，Oracle公司产品，价格昂贵。（通常是不差钱的公司会选择使用这个数据库）</li><li>MySQL：开源免费的中小型数据库，后来Sun公司收购了MySQL，而Oracle又收购了Sun公司。目前Oracle推出两个版本的Mysql：社区版(开源免费)、商业版(收费)。</li><li>SQL Server：Microsoft 公司推出的收费的中型数据库，C#、.net等语言常用。</li><li>PostgreSQL：开源免费的中小型数据库。</li><li>DB2：IBM公司的大型收费数据库产品。</li><li>SQLLite：嵌入式的微型数据库。Android内置的数据库采用的就是该数据库。</li><li>MariaDB：开源免费的中小型数据库。是MySQL数据库的另外一个分支、另外一个衍生产品，与MySQL数据库有很好的兼容性。</li></ul><h3 id="2-2-MySQL入门"><a href="#2-2-MySQL入门" class="headerlink" title="2.2 MySQL入门"></a>2.2 MySQL入门</h3><p>MySQL官方提供了两个版本：</p><ul><li><p>商业版本（MySQL Enterprise Edition）</p><ul><li>该版本是收费的，我们可以使用30天。 官方会提供对应的技术支持。</li></ul></li><li><p>社区版本（MySQL Community Server）</p><ul><li>该版本是免费的，但是MySQL不会提供任何的技术支持。</li></ul></li></ul><p>官网下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="/posts/0/image-20221205140643412.png" alt="image-20221205140643412"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>安装MySQL具体的步骤，参考资料中提供的 《MySQL安装文档》 ，进行软件的安装即可。</p></blockquote><p>MySQL服务器启动完毕后，然后再使用如下指令，来连接MySQL服务器：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">mysql -u用户名 -p密码 [-h数据库服务器的IP地址 -P端口号]</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>-h  参数不加，默认连接的是本地 127.0.0.1 的MySQL服务器</p><p>-P  参数不加，默认连接的端口号是 3306</p></blockquote><p><strong>上述指令，可以有两种形式：</strong></p><ul><li>密码直接在-p参数之后直接指定 （这种方式不安全，密码直接以明文形式出现在命令行）</li></ul><p><img src="/posts/0/image-20221205143139656.png" alt="image-20221205143139656"></p><ul><li>密码在-p回车之后，在命令行中输入密码，然后回车</li></ul><p><img src="/posts/0/image-20221205143418632.png" alt="image-20221205143418632"> </p><p>在真实的企业开发中，MySQL数据库服务器是不会在我们本地安装的，是在公司的服务器上安装的，而服务器还需要放置在专门的IDC机房中的，IDC机房呢，就需要保证恒温、恒湿、恒压，而且还要保证网络、电源的可靠性(备用电源及网络)。</p><p>我们在学习阶段，如果想提前体验一下企业中数据库的使用方式，可以借助于VMware虚拟机来实现。我们可以在我们的电脑上安装一个VMware，然后在Vmware虚拟机上在安装一个服务器操作系统Linux，然后再在Linux服务器上安装各种企业级软件。</p><h3 id="2-3-数据模型"><a href="#2-3-数据模型" class="headerlink" title="2.3 数据模型"></a>2.3 数据模型</h3><p><strong>关系型数据库（RDBMS）</strong></p><p>概念：建立在关系模型基础上，由多张相互连接的<strong>二维表</strong>组成的数据库。</p><p>二维表的优点：</p><ul><li><p>使用表存储数据，格式统一，便于维护</p></li><li><p>使用SQL语言操作，标准统一，使用方便，可用于复杂查询</p></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我们之前提到的MySQL、Oracle、DB2、SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。</p><p>结论：基于二维表存储数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库（比如大家后面要学习的Redis，就属于非关系型数据库）。</p></blockquote><p><strong>数据模型</strong></p><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下:</p><p><img src="/posts/0/image-20220829111741419-17072873537241.png" alt="image-20220829111741419"></p><ul><li>通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库</li><li>使用MySQL客户端，向数据库管理系统发送一条SQL语句，由数据库管理系统根据SQL语句指令去操作数据库中的表结构及数据</li><li>一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包含多行记录。</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在Mysql数据库服务器当中存储数据，你需要：</p><ol><li>先去创建数据库（可以创建多个数据库，之间是相互独立的）</li><li>在数据库下再去创建数据表（一个数据库下可以创建多张表）</li><li>再将数据存放在数据表中（一张表可以存储多行数据）</li></ol></blockquote><h3 id="2-4-SQL简介"><a href="#2-4-SQL简介" class="headerlink" title="2.4 SQL简介"></a>2.4 SQL简介</h3><p>SQL：结构化查询语言。一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。</p><h4 id="2-4-1-SQL通用语法"><a href="#2-4-1-SQL通用语法" class="headerlink" title="2.4.1 SQL通用语法"></a>2.4.1 SQL通用语法</h4><p>1、SQL语句可以单行或多行书写，以分号结尾。</p><p>2、SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</p><p>3、MySQL数据库的SQL语句不区分大小写。</p><p>4、注释：</p><ul><li>单行注释：– 注释内容   或   # 注释内容(MySQL特有)</li><li>多行注释： &#x2F;* 注释内容 *&#x2F;</li></ul><h4 id="2-4-2-分类"><a href="#2-4-2-分类" class="headerlink" title="2.4.2 分类"></a>2.4.2 分类</h4><p>SQL语句根据其功能被分为四大类：DDL、DML、DQL、DCL </p><table><thead><tr><th><strong>分类</strong></th><th><strong>全称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition  Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation  Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control  Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><p><img src="/posts/0/image-20240207143207850.png" alt="image-20240207143207850"></p><h2 id="3-数据库设计-DDL"><a href="#3-数据库设计-DDL" class="headerlink" title="3.数据库设计-DDL"></a>3.数据库设计-DDL</h2><h3 id="3-1-项目开发流程"><a href="#3-1-项目开发流程" class="headerlink" title="3.1  项目开发流程"></a>3.1  项目开发流程</h3><p><img src="/posts/0/image-20220829112953742.png" alt="image-20220829112953742"></p><p>需求文档：</p><ul><li>在我们开发一个项目或者项目当中的某个模块之前，会先会拿到产品经理给我们提供的页面原型及需求文档。</li></ul><p>设计：</p><ul><li>拿到产品原型和需求文档之后，我们首先要做的不是编码，而是要先进行项目的设计，其中就包括概要设计、详细设计、接口设计、数据库设计等等。</li><li>数据库设计根据产品原型以及需求文档，要分析各个模块涉及到的表结构以及表结构之间的关系，以及表结构的详细信息。最终我们需要将数据库以及数据库当中的表结构设计创建出来。</li></ul><p>开发&#x2F;测试：</p><ul><li>参照页面原型和需求进行编码，实现业务功能。在这个过程当中，我们就需要来操作设计出来的数据库表结构，来完成业务的增删改查操作等。</li></ul><p>部署上线：</p><ul><li>在项目的功能开发测试完成之后，项目就可以上线运行了，后期如果项目遇到性能瓶颈，还需要对项目进行优化。优化很重要的一个部分就是数据库的优化，包括数据库当中索引的建立、SQL 的优化、分库分表等操作。</li></ul><p>在上述的流程当中，针对于数据库来说，主要包括三个阶段：</p><ol><li>数据库设计阶段<ul><li>参照页面原型以及需求文档设计数据库表结构</li></ul></li><li>数据库操作阶段<ul><li>根据业务功能的实现，编写SQL语句对数据表中的数据进行增删改查操作</li></ul></li><li>数据库优化阶段<ul><li>通过数据库的优化来提高数据库的访问性能。优化手段：索引、SQL优化、分库分表等</li></ul></li></ol><h3 id="3-2-数据库操作"><a href="#3-2-数据库操作" class="headerlink" title="3.2 数据库操作"></a>3.2 数据库操作</h3><p>我们在进行数据库设计，需要使用到刚才所介绍SQL分类中的DDL语句。</p><p>DDL英文全称是Data Definition Language(数据定义语言)，用来定义数据库对象(数据库、表)。</p><p>DDL中数据库的常见操作：查询、创建、使用、删除。</p><h4 id="3-2-1-查询数据库"><a href="#3-2-1-查询数据库" class="headerlink" title="3.2.1 查询数据库"></a>3.2.1 查询数据库</h4><p><strong>查询所有数据库：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">show databases;</span></span></code></pre></div><p><strong>查询当前数据库：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select database();</span></span></code></pre></div><p>命令行中执行效果如果：</p><p><img src="/posts/0/image-20221205174615074.png" alt="image-20221205174615074"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我们要操作某一个数据库，必须要切换到对应的数据库中。 </p><p>通过指令：select  database() ，就可以查询到当前所处的数据库 </p></blockquote><h4 id="3-2-2-创建数据库"><a href="#3-2-2-创建数据库" class="headerlink" title="3.2.2 创建数据库"></a>3.2.2 创建数据库</h4><p><strong>语法：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">create database [ if not exists ] 数据库名;</span></span></code></pre></div><p>&#x3D;&#x3D;注意：在同一个数据库服务器中，不能创建两个名称相同的数据库，否则将会报错。&#x3D;&#x3D;</p><ul><li>可以使用if not exists来避免这个问题</li></ul><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">-- 数据库不存在,则创建该数据库；如果存在则不创建</span></span><span class="line"><span style="color: #F78C6C">create</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">database</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">if</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">not</span><span style="color: #BABED8"> extists itcast; </span></span></code></pre></div><h4 id="3-2-3-使用数据库"><a href="#3-2-3-使用数据库" class="headerlink" title="3.2.3 使用数据库"></a>3.2.3 使用数据库</h4><p><strong>语法：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">use 数据库名 ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则不能操作。</p></blockquote><h4 id="3-2-4-删除数据库"><a href="#3-2-4-删除数据库" class="headerlink" title="3.2.4 删除数据库"></a>3.2.4 删除数据库</h4><p><strong>语法：</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">drop database [ if exists ] 数据库名 ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>如果删除一个不存在的数据库，将会报错。</p><p>可以加上参数 if exists ，如果数据库存在，再执行删除，否则不执行删除。</p></blockquote><p>说明：上述语法中的database，也可以替换成 schema</p><ul><li>如：create schema db01;</li><li>如：show schemas;</li></ul><h3 id="3-3-图形化工具"><a href="#3-3-图形化工具" class="headerlink" title="3.3 图形化工具"></a>3.3 图形化工具</h3><h4 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h4><p>在项目开发当中，通常为了提高开发效率，都会借助于现成的图形化管理工具来操作数据库。</p><p>目前MySQL主流的图形化界面工具有以下几种：</p><p><img src="/posts/0/image-20221205184802646.png" alt="image-20221205184802646"></p><p>DataGrip是JetBrains旗下的一款数据库管理工具，是管理和开发MySQL、Oracle、PostgreSQL的理想解决方案。</p><p>官网： <a href="https://www.jetbrains.com/zh-cn/datagrip/">https://www.jetbrains.com/zh-cn/datagrip/</a></p><h4 id="3-3-2-安装"><a href="#3-3-2-安装" class="headerlink" title="3.3.2 安装"></a>3.3.2 安装</h4><p>安装： 参考资料中提供的《DataGrip安装手册》</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>说明：DataGrip这款工具可以不用安装，因为Jetbrains公司已经将DataGrip这款工具的功能已经集成到了 IDEA当中，所以我们就可以使用IDEA来作为一款图形化界面工具来操作Mysql数据库。</p></blockquote><h4 id="3-3-3-使用"><a href="#3-3-3-使用" class="headerlink" title="3.3.3 使用"></a>3.3.3 使用</h4><p><strong>连接数据库</strong></p><p>1、打开IDEA自带的Database</p><p><img src="/posts/0/image-20221205190929756.png" alt="image-20221205190929756"></p><p>2、配置MySQL</p><p><img src="/posts/0/image-20221205191143072.png" alt="image-20221205191143072"></p><p>3、输入相关信息</p><p><img src="/posts/0/image-20221205192606038.png" alt="image-20221205192606038"> </p><p>4、下载MySQL连接驱动</p><p><img src="/posts/0/image-20221205192847190.png" alt="image-20221205192847190"></p><p>5、测试数据库连接</p><p><img src="/posts/0/image-20221205193304124.png" alt="image-20221205193304124"></p><p>6、保存配置</p><p><img src="/posts/0/image-20221205193409856.png" alt="image-20221205193409856"></p><p><strong>创建数据库：</strong></p><p><img src="/posts/0/image-20221205195346655.png" alt="image-20221205195346655"></p><p><img src="/posts/0/image-20221205195510716.png" alt="image-20221205195510716"></p><p><strong>查看所有数据库：</strong></p><p><img src="/posts/0/image-20221205195128343.png" alt="image-20221205195128343"></p><p><img src="/posts/0/image-20221205195833439.png" alt="image-20221205195833439"></p><h3 id="3-4-表操作"><a href="#3-4-表操作" class="headerlink" title="3.4 表操作"></a>3.4 表操作</h3><p>关于表结构的操作也是包含四个部分：创建表、查询表、修改表、删除表。</p><h4 id="3-4-1-创建"><a href="#3-4-1-创建" class="headerlink" title="3.4.1 创建"></a>3.4.1 创建</h4><h5 id="3-4-1-1-语法"><a href="#3-4-1-1-语法" class="headerlink" title="3.4.1.1 语法"></a>3.4.1.1 语法</h5><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">create table  表名(</span></span><span class="line"><span style="color: #babed8">    字段1  字段1类型 [约束]  [comment  字段1注释 ],</span></span><span class="line"><span style="color: #babed8">    字段2  字段2类型 [约束]  [comment  字段2注释 ],</span></span><span class="line"><span style="color: #babed8">    ......</span></span><span class="line"><span style="color: #babed8">    字段n  字段n类型 [约束]  [comment  字段n注释 ] </span></span><span class="line"><span style="color: #babed8">) [ comment  表注释 ] ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意： [ ] 中的内容为可选参数； 最后一个字段后面没有逗号</p></blockquote><ul><li>建表语句：</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">create table tb_user (</span></span><span class="line"><span style="color: #babed8">    id int comment &#39;ID,唯一标识&#39;,   # id是一行数据的唯一标识（不能重复）</span></span><span class="line"><span style="color: #babed8">    username varchar(20) comment &#39;用户名&#39;,</span></span><span class="line"><span style="color: #babed8">    name varchar(10) comment &#39;姓名&#39;,</span></span><span class="line"><span style="color: #babed8">    age int comment &#39;年龄&#39;,</span></span><span class="line"><span style="color: #babed8">    gender char(1) comment &#39;性别&#39;</span></span><span class="line"><span style="color: #babed8">) comment &#39;用户表&#39;;</span></span></code></pre></div><ul><li>其实我们现在创建表结构的时候， id这个字段我们只加了一个备注信息说明它是一个唯一标识，但是在数据库层面呢，并没有去限制字段存储的数据。所以id这个字段没有起到唯一标识的作用。</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>想要限制字段所存储的数据，就需要用到数据库中的约束。</p></blockquote><h5 id="3-4-1-2-约束"><a href="#3-4-1-2-约束" class="headerlink" title="3.4.1.2 约束"></a>3.4.1.2 约束</h5><p>概念：所谓约束就是作用在表中字段上的规则，用于限制存储在表中的数据。</p><p>作用：就是来保证数据库当中数据的正确性、有效性和完整性。（后面的学习会验证这些）</p><p>在MySQL数据库当中，提供了以下5种约束：</p><table><thead><tr><th><strong>约束</strong></th><th><strong>描述</strong></th><th><strong>关键字</strong></th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段值，则采用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p></blockquote><p>id字段下存储的值，如果由我们自己来维护会比较麻烦(必须保证值的唯一性)。MySQL数据库为了解决这个问题，给我们提供了一个关键字：<strong>auto_increment</strong>（自动增长）</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>主键自增：auto_increment</p><ul><li>每次插入新的行记录时，数据库自动生成id字段(主键)下的值</li><li>具有auto_increment的数据列是一个正数序列开始增长(从1开始自增)</li></ul></blockquote><h5 id="3-4-1-3-数据类型"><a href="#3-4-1-3-数据类型" class="headerlink" title="3.4.1.3 数据类型"></a>3.4.1.3 数据类型</h5><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><p><strong>数值类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td>INT&#x2F;INTEGER</td><td>4bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4bytes</td><td>(-3.402823466 E+38，3.402823466351 E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度)的值</td><td></td><td></td></tr></tbody></table><p><strong>字符串类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p><strong>日期时间类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至  9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至  838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td></td></tr></tbody></table><h5 id="3-4-1-4-案例"><a href="#3-4-1-4-案例" class="headerlink" title="3.4.1.4 案例"></a>3.4.1.4 案例</h5><p>使用SQL创建表：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">create</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">emp</span><span style="color: #BABED8"> (</span></span><span class="line"><span style="color: #BABED8">  id </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> unsigned </span><span style="color: #C792EA">primary key</span><span style="color: #BABED8"> auto_increment comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ID</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  username </span><span style="color: #C792EA">varchar</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">20</span><span style="color: #BABED8">) </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">unique</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">用户名</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F78C6C">password</span><span style="color: #BABED8"> </span><span style="color: #C792EA">varchar</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">32</span><span style="color: #BABED8">) </span><span style="color: #C792EA">default</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">123456</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">密码</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F78C6C">name</span><span style="color: #BABED8"> </span><span style="color: #C792EA">varchar</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">10</span><span style="color: #BABED8">) </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">姓名</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  gender </span><span style="color: #F78C6C">tinyint</span><span style="color: #BABED8"> unsigned </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">性别, 说明: 1 男, 2 女</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  </span><span style="color: #F78C6C">image</span><span style="color: #BABED8"> </span><span style="color: #C792EA">varchar</span><span style="color: #BABED8">(</span><span style="color: #F78C6C">300</span><span style="color: #BABED8">) comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">图像</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  job </span><span style="color: #F78C6C">tinyint</span><span style="color: #BABED8"> unsigned comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  entrydate </span><span style="color: #C792EA">date</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">入职时间</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  create_time </span><span style="color: #F78C6C">datetime</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">创建时间</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">,</span></span><span class="line"><span style="color: #BABED8">  update_time </span><span style="color: #F78C6C">datetime</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">not null</span><span style="color: #BABED8"> comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">修改时间</span><span style="color: #89DDFF">&#39;</span></span><span class="line"><span style="color: #BABED8">) comment </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">员工表</span><span style="color: #89DDFF">&#39;</span><span style="color: #BABED8">;</span></span></code></pre></div><p>除了使用SQL语句创建表外，我们还可以借助于图形化界面来创建表结构，这种创建方式会更加直观、更加方便。</p><p>操作步骤如下：</p><ol><li>在指定操作的数据库上，右键New &#x3D;&#x3D;&gt; Table</li></ol><p><img src="/posts/0/image-20221205230447721.png" alt="image-20221205230447721"></p><ol start="2"><li>编辑表结构的相关信息</li></ol><p><img src="/posts/0/image-20221205231846161.png" alt="image-20221205231846161"></p><h5 id="3-4-1-5-设计表流程"><a href="#3-4-1-5-设计表流程" class="headerlink" title="3.4.1.5 设计表流程"></a>3.4.1.5 设计表流程</h5><p>通过上面的案例，我们明白了，设计一张表，基本的流程如下：</p><ol><li><p>阅读页面原型及需求文档</p></li><li><p>基于页面原则和需求文档，确定原型字段(类型、长度限制、约束)</p></li><li><p>再增加表设计所需要的业务基础字段(id主键、插入时间、修改时间)</p></li></ol><p><img src="/posts/0/image-20221205232253088.png" alt="image-20221205232253088"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>说明：</p><ul><li><p>create_time：记录的是当前这条数据插入的时间。 </p></li><li><p>update_time：记录当前这条数据最后更新的时间。</p></li></ul></blockquote><h4 id="3-4-2-查询"><a href="#3-4-2-查询" class="headerlink" title="3.4.2 查询"></a>3.4.2 查询</h4><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>关于表结构的查询操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p><strong>查询当前数据库所有表</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">show tables;</span></span></code></pre></div><p><strong>查看指定表结构</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">desc 表名 ;#可以查看指定表的字段、字段的类型、是否可以为NULL、是否存在默认值等信息</span></span></code></pre></div><p><strong>查询指定表的建表语句</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">show create table 表名 ;</span></span></code></pre></div><h4 id="3-4-3-修改"><a href="#3-4-3-修改" class="headerlink" title="3.4.3 修改"></a>3.4.3 修改</h4><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>关于表结构的修改操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p><strong>添加字段</strong></p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">alter</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> 表名 </span><span style="color: #F78C6C">add</span><span style="color: #BABED8">  字段名  类型(长度)  [comment 注释]  [约束];</span></span></code></pre></div><p><strong>修改数据类型</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">alter table 表名 modify  字段名  新数据类型(长度);</span></span></code></pre></div><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">alter</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> 表名 change  旧字段名  新字段名  类型(长度)  [comment 注释]  [约束];</span></span></code></pre></div><p><strong>删除字段</strong></p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">alter</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> 表名 </span><span style="color: #F78C6C">drop</span><span style="color: #BABED8"> 字段名;</span></span></code></pre></div><p><strong>修改表名</strong></p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">rename </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> 表名 </span><span style="color: #F78C6C">to</span><span style="color: #BABED8">  新表名;</span></span></code></pre></div><h4 id="3-4-4-删除"><a href="#3-4-4-删除" class="headerlink" title="3.4.4 删除"></a>3.4.4 删除</h4><p>删除表语法：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">drop</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">table</span><span style="color: #BABED8"> [ if exists ]  表名;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>if exists ：只有表名存在时才会删除该表，表名不存在，则不执行删除操作(如果不加该参数项，删除一张不存在的表，执行将会报错)。</p></blockquote><h2 id="4-数据库操作-DML"><a href="#4-数据库操作-DML" class="headerlink" title="4.数据库操作-DML"></a>4.数据库操作-DML</h2><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进行增、删、改操作。</p><ul><li>添加数据（INSERT）</li><li>修改数据（UPDATE）</li><li>删除数据（DELETE）</li></ul><h3 id="4-1-添加（insert）"><a href="#4-1-添加（insert）" class="headerlink" title="4.1 添加（insert）"></a>4.1 添加（insert）</h3><p><strong>insert语法：</strong></p><ul><li><p>向指定字段添加数据</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">insert into 表名 (字段名1, 字段名2) values (值1, 值2);</span></span></code></pre></div></li><li><p>全部字段添加数据</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">insert into 表名 values (值1, 值2, ...);</span></span></code></pre></div></li><li><p>批量添加数据（指定字段）</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">insert into 表名 (字段名1, 字段名2) values (值1, 值2), (值1, 值2);</span></span></code></pre></div></li><li><p>批量添加数据（全部字段）</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">insert into 表名 values (值1, 值2, ...), (值1, 值2, ...);</span></span></code></pre></div></li></ul><p>Insert操作的注意事项：</p><ol><li><p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</p></li><li><p>字符串和日期型数据应该包含在引号中。</p></li><li><p>插入的数据大小，应该在字段的规定范围内。</p></li></ol><h3 id="4-2-修改（update）"><a href="#4-2-修改（update）" class="headerlink" title="4.2 修改（update）"></a>4.2 修改（update）</h3><p>update语法：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">update</span><span style="color: #BABED8"> 表名 </span><span style="color: #F78C6C">set</span><span style="color: #BABED8"> 字段名1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> 值1 , 字段名2 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> 值2 , .... [where 条件] ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><ol><li><p>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p></li><li><p>在修改数据时，一般需要同时修改公共字段update_time，将其修改为当前操作时间。</p></li></ol></blockquote><h3 id="4-3-删除（delete）"><a href="#4-3-删除（delete）" class="headerlink" title="4.3 删除（delete）"></a>4.3 删除（delete）</h3><p>delete语法：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">delete</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">from</span><span style="color: #BABED8"> 表名  [where  条件] ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><p>​• DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</p><p>​• DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即可)。</p><p>​• 当进行删除全部数据操作时，会提示询问是否确认删除所有数据，直接点击Execute即可。 </p></blockquote><h2 id="5-数据库操作-DQL"><a href="#5-数据库操作-DQL" class="headerlink" title="5.数据库操作-DQL"></a>5.数据库操作-DQL</h2><h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><p>DQL英文全称是Data Query Language(数据查询语言)，用来查询数据库表中的记录。</p><p>查询关键字：SELECT</p><p>查询操作是所有SQL语句当中最为常见，也是最为重要的操作。在一个正常的业务系统中，查询操作的使用频次是要远高于增删改操作的。当我们打开某个网站或APP所看到的展示信息，都是通过从数据库中查询得到的，而在这个查询过程中，还会涉及到条件、排序、分页等操作。</p><h3 id="5-2-语法"><a href="#5-2-语法" class="headerlink" title="5.2 语法"></a>5.2 语法</h3><p>DQL查询语句，语法结构如下：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">SELECT</span></span><span class="line"><span style="color: #babed8">    字段列表</span></span><span class="line"><span style="color: #babed8">FROM</span></span><span class="line"><span style="color: #babed8">    表名列表</span></span><span class="line"><span style="color: #babed8">WHERE</span></span><span class="line"><span style="color: #babed8">    条件列表</span></span><span class="line"><span style="color: #babed8">GROUP  BY</span></span><span class="line"><span style="color: #babed8">    分组字段列表</span></span><span class="line"><span style="color: #babed8">HAVING</span></span><span class="line"><span style="color: #babed8">    分组后条件列表</span></span><span class="line"><span style="color: #babed8">ORDER BY</span></span><span class="line"><span style="color: #babed8">    排序字段列表</span></span><span class="line"><span style="color: #babed8">LIMIT</span></span><span class="line"><span style="color: #babed8">    分页参数</span></span></code></pre></div><h3 id="5-3-基本查询"><a href="#5-3-基本查询" class="headerlink" title="5.3 基本查询"></a>5.3 基本查询</h3><p>在基本查询的DQL语句中，不带任何的查询条件，语法如下：</p><ul><li><p>查询多个字段</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select 字段1, 字段2, 字段3 from  表名;</span></span></code></pre></div></li><li><p>查询所有字段（通配符）</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select *  from  表名;</span></span></code></pre></div></li><li><p>设置别名</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select 字段1 [ as 别名1 ] , 字段2 [ as 别名2 ]  from  表名;</span></span></code></pre></div></li><li><p>去除重复记录</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select distinct 字段列表 from  表名;</span></span></code></pre></div></li></ul><h3 id="5-4-条件查询"><a href="#5-4-条件查询" class="headerlink" title="5.4 条件查询"></a>5.4 条件查询</h3><p><strong>语法：</strong></p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">select</span><span style="color: #BABED8">  字段列表  </span><span style="color: #F78C6C">from</span><span style="color: #BABED8">   表名   </span><span style="color: #F78C6C">where</span><span style="color: #BABED8">   条件列表 ; </span><span style="color: #676E95; font-style: italic">-- 条件列表：意味着可以有多个条件</span></span></code></pre></div><p>学习条件查询就是学习条件的构建方式，而在SQL语句当中构造条件的运算符分为两类：</p><ul><li>比较运算符</li><li>逻辑运算符</li></ul><p>常用的比较运算符如下: </p><table><thead><tr><th><strong>比较运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between …  and …</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>is null</td><td>是null</td></tr></tbody></table><p>常用的逻辑运算符如下:</p><table><thead><tr><th><strong>逻辑运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>or 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>not 或 !</td><td>非 , 不是</td></tr></tbody></table><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span></span><span class="line"><span style="color: #babed8">from tb_emp</span></span><span class="line"><span style="color: #babed8">where id &lt;=5;</span></span></code></pre></div><h3 id="5-5-聚合函数"><a href="#5-5-聚合函数" class="headerlink" title="5.5 聚合函数"></a>5.5 聚合函数</h3><p>之前我们做的查询都是横向查询，就是根据条件一行一行的进行判断，而使用聚合函数查询就是纵向查询，它是对一列的值进行计算，然后返回一个结果值。（将一列数据作为一个整体，进行纵向计算）</p><p>语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  聚合函数(字段列表)  from  表名 ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意 : 聚合函数会忽略空值，对NULL值不作为统计。</p></blockquote><p>常用聚合函数：</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>count ：按照列去统计有多少行数据。</p><ul><li>在根据指定的列统计的时候，如果这一列中有null的行，该行不会被统计在其中。</li></ul><p>sum ：计算指定列的数值和，如果不是数值类型，那么计算结果为0</p><p>max ：计算指定列的最大值</p><p>min ：计算指定列的最小值</p><p>avg ：计算指定列的平均值</p></blockquote><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8"># count(字段)</span></span><span class="line"><span style="color: #babed8">select count(id) from tb_emp;-- 结果：29</span></span><span class="line"><span style="color: #babed8">select count(job) from tb_emp;-- 结果：28 （聚合函数对NULL值不做计算）</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"># count(常量)</span></span><span class="line"><span style="color: #babed8">select count(0) from tb_emp;</span></span><span class="line"><span style="color: #babed8">select count(&#39;A&#39;) from tb_emp;</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"># count(*)  推荐此写法（MySQL底层进行了优化）</span></span><span class="line"><span style="color: #babed8">select count(*) from tb_emp;</span></span></code></pre></div><h3 id="5-6-分组查询"><a href="#5-6-分组查询" class="headerlink" title="5.6 分组查询"></a>5.6 分组查询</h3><p>分组： 按照某一列或者某几列，把相同的数据进行合并输出。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>分组其实就是按列进行分类(指定列下相同的数据归为一类)，然后可以对分类完的数据进行合并计算。</p><p>分组查询通常会使用聚合函数进行计算。</p></blockquote><p>语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表  from  表名  [where 条件]  group by 分组字段名  [having 分组后过滤条件];</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><p>​• 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</p><p>​• 执行顺序：where &gt; 聚合函数 &gt; having </p></blockquote><p><strong>where与having区别（面试题）</strong></p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select job, count(*)</span></span><span class="line"><span style="color: #babed8">from tb_emp</span></span><span class="line"><span style="color: #babed8">where entrydate &lt;= &#39;2015-01-01&#39;   -- 分组前条件</span></span><span class="line"><span style="color: #babed8">group by job                      -- 按照job字段分组</span></span><span class="line"><span style="color: #babed8">having count(*) &gt;= 2;             -- 分组后条件</span></span></code></pre></div><h3 id="5-7-排序查询"><a href="#5-7-排序查询" class="headerlink" title="5.7 排序查询"></a>5.7 排序查询</h3><p>排序在日常开发中是非常常见的一个操作，有升序排序，也有降序排序。</p><p>语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表  </span></span><span class="line"><span style="color: #babed8">from   表名   </span></span><span class="line"><span style="color: #babed8">[where  条件列表] </span></span><span class="line"><span style="color: #babed8">[group by  分组字段 ] </span></span><span class="line"><span style="color: #babed8">order  by  字段1  排序方式1 , 字段2  排序方式2 … ;</span></span></code></pre></div><ul><li><p>排序方式：</p><ul><li>ASC ：升序（默认值）</li><li>DESC：降序</li></ul></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 </p></blockquote><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span></span><span class="line"><span style="color: #babed8">from tb_emp</span></span><span class="line"><span style="color: #babed8">order by entrydate DESC; -- 按照entrydate字段下的数据进行降序排序</span></span></code></pre></div><h3 id="5-8-分页查询"><a href="#5-8-分页查询" class="headerlink" title="5.8 分页查询"></a>5.8 分页查询</h3><p>分页操作在业务系统开发时，也是非常常见的一个功能，日常我们在网站中看到的各种各样的分页条，后台也都需要借助于数据库的分页操作。</p><p>分页查询语法：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">select</span><span style="color: #BABED8">  字段列表  </span><span style="color: #F78C6C">from</span><span style="color: #BABED8">   表名  </span><span style="color: #F78C6C">limit</span><span style="color: #BABED8">  起始索引, 查询记录数 ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><ol><li>起始索引从0开始。        计算公式 ：   起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit  条数</li></ol></blockquote><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span></span><span class="line"><span style="color: #babed8">from tb_emp</span></span><span class="line"><span style="color: #babed8">limit 0 , 5; -- 从索引0开始，向后取5条记录</span></span></code></pre></div><h2 id="6-多表设计"><a href="#6-多表设计" class="headerlink" title="6.多表设计"></a>6.多表设计</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li><p>一对多(多对一)</p></li><li><p>多对多</p></li><li><p>一对一</p></li></ul><h3 id="6-1-一对多"><a href="#6-1-一对多" class="headerlink" title="6.1 一对多"></a>6.1 一对多</h3><p>员工表 - 部门表之间的关系：</p><p><img src="/posts/0/image-20221206230156403.png" alt="image-20221206230156403"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>一对多关系实现：在数据库表中多的一方，添加字段，来关联属于一这方的主键。</strong></p></blockquote><p><strong>外键约束</strong></p><p>目前上述的两张表(员工表、部门表)，在数据库层面，并未建立关联，所以是无法保证数据的一致性和完整性的</p><p>想解决上述的问题呢，我们就可以通过数据库中的 <strong>外键约束</strong> 来解决。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>外键约束：让两张表的数据建立连接，保证数据的一致性和完整性。  </p><p>对应的关键字：foreign key</p></blockquote><p>外键约束的语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 创建表时指定</span></span><span class="line"><span style="color: #babed8">create table 表名(</span></span><span class="line"><span style="color: #babed8">    字段名    数据类型,</span></span><span class="line"><span style="color: #babed8">    ...</span></span><span class="line"><span style="color: #babed8">    [constraint]   [外键名称]  foreign  key (外键字段名)   references   主表 (主表列名)</span></span><span class="line"><span style="color: #babed8">);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 建完表后，添加外键</span></span><span class="line"><span style="color: #babed8">alter table  表名  add constraint  外键名称  foreign key(外键字段名) references 主表(主表列名);</span></span></code></pre></div><p>方式1：通过SQL语句操作</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 修改表： 添加外键约束</span></span><span class="line"><span style="color: #babed8">alter table tb_emp  </span></span><span class="line"><span style="color: #babed8">add  constraint  fk_dept_id  foreign key (dept_id)  references  tb_dept(id);</span></span></code></pre></div><p>方式2：图形化界面操作</p><p><img src="/posts/0/image-20221206232750376.png" alt="image-20221206232750376"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当我们添加外键约束时，我们得保证当前数据库表中的数据是完整的。 所以，我们需要将之前删除掉的数据再添加回来。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当我们添加了外键之后，再删除ID为1的部门，就会发现，此时数据库报错了，不允许删除。</p><p><img src="/posts/0/image-20220831205523647.png"></p><p>外键约束（foreign key）：保证了数据的完整性和一致性。</p></blockquote><p><strong>物理外键和逻辑外键</strong></p><ul><li><p>物理外键</p><ul><li>概念：使用foreign key定义外键关联另外一张表。</li><li>缺点：<ul><li>影响增、删、改的效率（需要检查外键关系）。</li><li>仅用于单节点数据库，不适用与分布式、集群场景。</li><li>容易引发数据库的死锁问题，消耗性能。</li></ul></li></ul></li><li><p>逻辑外键</p><ul><li>概念：在业务层逻辑中，解决外键关联。</li><li>通过逻辑外键，就可以很方便的解决上述问题。</li></ul></li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>**在现在的企业开发中，很少会使用物理外键，都是使用逻辑外键。 甚至在一些数据库开发规范中，会明确指出禁止使用物理外键 foreign key **</p></blockquote><h3 id="6-2-一对一"><a href="#6-2-一对一" class="headerlink" title="6.2 一对一"></a>6.2 一对一</h3><p>一对一关系表在实际开发中应用起来比较简单，通常是用来做单表的拆分，也就是将一张大表拆分成两张小表，将大表中的一些基础字段放在一张表当中，将其他的字段放在另外一张表当中，以此来提高数据的操作效率。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>一对一的应用场景： 用户表(基本信息+身份信息)</p><p><img src="/posts/0/image-20221207104508080.png" alt="image-20221207104508080"></p><ul><li>基本信息：用户的ID、姓名、性别、手机号、学历</li><li>身份信息：民族、生日、身份证号、身份证签发机关，身份证的有效期(开始时间、结束时间)</li></ul></blockquote><p>其实一对一我们可以看成一种特殊的一对多。一对多我们是怎么设计表关系的？是不是在多的一方添加外键。同样我们也可以通过外键来体现一对一之间的关系，我们只需要在任意一方来添加一个外键就可以了。</p><p><img src="/posts/0/image-20221207105632634.png" alt="image-20221207105632634"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>一对一 ：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p></blockquote><h3 id="6-3-多对多"><a href="#6-3-多对多" class="headerlink" title="6.3 多对多"></a>6.3 多对多</h3><p>多对多的关系在开发中属于也比较常见的。比如：学生和老师的关系，一个学生可以有多个授课老师，一个授课老师也可以有多个学生。在比如：学生和课程的关系，一个学生可以选修多门课程，一个课程也可以供多个学生选修。</p><p>案例：学生与课程的关系</p><ul><li><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p></li><li><p>实现关系：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p></li></ul><p><img src="/posts/0/image-20221207113341028.png" alt="image-20221207113341028"></p><h2 id="7-多表查询"><a href="#7-多表查询" class="headerlink" title="7.多表查询"></a>7.多表查询</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><p>多表查询：查询时从多张表中获取所需数据</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>单表查询的SQL语句：select  字段列表  from  表名;</p><p>那么要执行多表查询，只需要使用逗号分隔多张表即可，如： select   字段列表  from  表1, 表2;</p></blockquote><p>查询用户表和部门表中的数据：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select * from  tb_emp , tb_dept;</span></span></code></pre></div><p>此时,我们看到查询结果中包含了大量的结果集，总共85条记录，而这其实就是员工表所有的记录(17行)与部门表所有记录(5行)的所有组合情况，这种现象称之为笛卡尔积。</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合(A集合和B集合)的所有组合情况。</p><p><img src="/posts/0/image-20221207155509696.png" alt="image-20221207155509696"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在多表查询时，需要消除无效的笛卡尔积，只保留表关联部分的数据</p></blockquote><p><img src="/posts/0/image-20220901093756992.png"></p><p>在SQL语句中，如何去除无效的笛卡尔积呢？只需要给多表查询加上连接查询的条件即可。</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select * from tb_emp , tb_dept where tb_emp.dept_id = tb_dept.id ;</span></span></code></pre></div><h3 id="7-2-内连接"><a href="#7-2-内连接" class="headerlink" title="7.2 内连接"></a>7.2 内连接</h3><ul><li>内连接：相当于查询A、B交集部分数据</li></ul><p><img src="/posts/0/image-20221207165446062.png" alt="image-20221207165446062"> </p><p>内连接查询：查询两表或多表中交集部分数据。</p><p>内连接从语法上可以分为：</p><ul><li><p>隐式内连接</p></li><li><p>显式内连接</p></li></ul><p>隐式内连接语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表   from   表1 , 表2   where  条件 ... ;</span></span></code></pre></div><p>显式内连接语法：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表   from   表1  [ inner ]  join 表2  on  连接条件 ... ;</span></span></code></pre></div><p>多表查询时给表起别名：</p><ul><li>tableA  as  别名1  ,  tableB  as  别名2 ;</li><li>tableA  别名1  ,  tableB  别名2 ;</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项:</p><p>一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段。</p></blockquote><ul><li>隐式内连接实现</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select tb_emp.name , tb_dept.name -- 分别查询两张表中的数据</span></span><span class="line"><span style="color: #babed8">from tb_emp , tb_dept -- 关联两张表</span></span><span class="line"><span style="color: #babed8">where tb_emp.dept_id = tb_dept.id; -- 消除笛卡尔积</span></span></code></pre></div><ul><li>显式内连接实现</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select tb_emp.name , tb_dept.name</span></span><span class="line"><span style="color: #babed8">from tb_emp inner join tb_dept</span></span><span class="line"><span style="color: #babed8">on tb_emp.dept_id = tb_dept.id;</span></span></code></pre></div><h3 id="7-3-外连接"><a href="#7-3-外连接" class="headerlink" title="7.3 外连接"></a>7.3 外连接</h3><p>外连接</p><ul><li><p>左外连接：查询左表所有数据(包括两张表交集部分数据)</p></li><li><p>右外连接：查询右表所有数据(包括两张表交集部分数据)</p></li></ul><p>左外连接语法结构：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表   from   表1  left  [ outer ]  join 表2  on  连接条件 ... ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>右外连接语法结构：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select  字段列表   from   表1  right  [ outer ]  join 表2  on  连接条件 ... ;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：</p><p>左外连接和右外连接是可以相互替换的，只需要调整连接查询时SQL语句中表的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p></blockquote><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 左外连接：以left join关键字左边的表为主表，查询主表中所有数据，以及和主表匹配的右边表中的数据</span></span><span class="line"><span style="color: #babed8">select emp.name , dept.name</span></span><span class="line"><span style="color: #babed8">from tb_emp AS emp left join tb_dept AS dept </span></span><span class="line"><span style="color: #babed8">     on emp.dept_id = dept.id;</span></span></code></pre></div><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 右外连接</span></span><span class="line"><span style="color: #babed8">select dept.name , emp.name</span></span><span class="line"><span style="color: #babed8">from tb_emp AS emp right join  tb_dept AS dept</span></span><span class="line"><span style="color: #babed8">     on emp.dept_id = dept.id;</span></span></code></pre></div><h3 id="7-4-子查询"><a href="#7-4-子查询" class="headerlink" title="7.4 子查询"></a>7.4 子查询</h3><h4 id="7-4-1-介绍"><a href="#7-4-1-介绍" class="headerlink" title="7.4.1 介绍"></a>7.4.1 介绍</h4><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询。</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #F78C6C">SELECT</span><span style="color: #BABED8">  </span><span style="color: #89DDFF">*</span><span style="color: #BABED8">  </span><span style="color: #F78C6C">FROM</span><span style="color: #BABED8">   t1   </span><span style="color: #F78C6C">WHERE</span><span style="color: #BABED8">  column1 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8">  ( </span><span style="color: #F78C6C">SELECT</span><span style="color: #BABED8">  column1  </span><span style="color: #F78C6C">FROM</span><span style="color: #BABED8">  t2 ... );</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>子查询外部的语句可以是insert &#x2F; update &#x2F; delete &#x2F; select 的任何一个，最常见的是 select。</p></blockquote><p>根据子查询结果的不同分为：</p><ol><li><p>标量子查询（子查询结果为单个值[一行一列]）</p></li><li><p>列子查询（子查询结果为一列，但可以是多行）</p></li><li><p>行子查询（子查询结果为一行，但可以是多列）</p></li><li><p>表子查询（子查询结果为多行多列[相当于子查询结果是一张表]）</p></li></ol><p>子查询可以书写的位置：</p><ol><li>where之后</li><li>from之后</li><li>select之后</li></ol><h4 id="7-4-2-标量子查询"><a href="#7-4-2-标量子查询" class="headerlink" title="7.4.2 标量子查询"></a>7.4.2 标量子查询</h4><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查询称为标量子查询。</p><p>常用的操作符： &#x3D;   &lt;&gt;   &gt;    &gt;&#x3D;    &lt;   &lt;&#x3D;   </p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 1.查询&quot;教研部&quot;部门ID</span></span><span class="line"><span style="color: #babed8">select id from tb_dept where name = &#39;教研部&#39;;    #查询结果：2</span></span><span class="line"><span style="color: #babed8">-- 2.根据&quot;教研部&quot;部门ID, 查询员工信息</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where dept_id = 2;</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 合并出上两条SQL语句</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where dept_id = (select id from tb_dept where name = &#39;教研部&#39;);</span></span></code></pre></div><h4 id="7-4-3-列子查询"><a href="#7-4-3-列子查询" class="headerlink" title="7.4.3 列子查询"></a>7.4.3 列子查询</h4><p>子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询。</p><p>常用的操作符：</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr></tbody></table><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 1.查询&quot;销售部&quot;和&quot;市场部&quot;的部门ID</span></span><span class="line"><span style="color: #babed8">select id from tb_dept where name = &#39;教研部&#39; or name = &#39;咨询部&#39;;    #查询结果：3,2</span></span><span class="line"><span style="color: #babed8">-- 2.根据部门ID, 查询员工信息</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where dept_id in (3,2);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 合并以上两条SQL语句</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where dept_id in (select id from tb_dept where name = &#39;教研部&#39; or name = &#39;咨询部&#39;);</span></span></code></pre></div><h4 id="7-4-4-行子查询"><a href="#7-4-4-行子查询" class="headerlink" title="7.4.4 行子查询"></a>7.4.4 行子查询</h4><p>子查询返回的结果是一行(可以是多列)，这种子查询称为行子查询。</p><p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 查询&quot;韦一笑&quot;的入职日期 及 职位</span></span><span class="line"><span style="color: #babed8">select entrydate , job from tb_emp where name = &#39;韦一笑&#39;;  #查询结果： 2007-01-01 , 2</span></span><span class="line"><span style="color: #babed8">-- 查询与&quot;韦一笑&quot;的入职日期及职位相同的员工信息</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where (entrydate,job) = (&#39;2007-01-01&#39;,2);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 合并以上两条SQL语句</span></span><span class="line"><span style="color: #babed8">select * from tb_emp where (entrydate,job) = (select entrydate , job from tb_emp where name = &#39;韦一笑&#39;);</span></span></code></pre></div><h4 id="7-4-5-表子查询"><a href="#7-4-5-表子查询" class="headerlink" title="7.4.5 表子查询"></a>7.4.5 表子查询</h4><p>子查询返回的结果是多行多列，常作为临时表，这种子查询称为表子查询。</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">select * from emp where entrydate &gt; &#39;2006-01-01&#39;;</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">select e.*, d.* from (select * from emp where entrydate &gt; &#39;2006-01-01&#39;) e left join dept d on e.dept_id = d.id ;</span></span></code></pre></div><h2 id="8-事务"><a href="#8-事务" class="headerlink" title="8.事务"></a>8.事务</h2><h3 id="8-1-介绍"><a href="#8-1-介绍" class="headerlink" title="8.1 介绍"></a>8.1 介绍</h3><p>在实际的业务开发中，有些业务操作要多次访问数据库。一个业务要发送多条SQL语句给数据库执行。需要将多次访问数据库的操作视为一个整体来执行，要么所有的SQL语句全部执行成功。如果其中有一条SQL语句失败，就进行事务的回滚，所有的SQL语句全部执行失败。</p><p>简而言之：事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>事务作用：保证在一个事务中多次操作数据库表中数据时，要么全都成功,要么全都失败。</p><h3 id="8-2-操作"><a href="#8-2-操作" class="headerlink" title="8.2 操作"></a>8.2 操作</h3><p>MYSQL中有两种方式进行事务的操作：</p><ol><li>自动提交事务：即执行一条sql语句提交一次事务。（默认MySQL的事务是自动提交）</li><li>手动提交事务：先开启，再提交</li></ol><p>事务操作有关的SQL语句：</p><table><thead><tr><th>SQL语句</th><th>描述</th></tr></thead><tbody><tr><td>start transaction;  &#x2F;  begin ;</td><td>开启手动控制事务</td></tr><tr><td>commit;</td><td>提交事务</td></tr><tr><td>rollback;</td><td>回滚事务</td></tr></tbody></table><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>手动提交事务使用步骤：</p><ul><li>第1种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  成功  &#x3D;&gt;  提交事务</li><li>第2种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  失败  &#x3D;&gt;  回滚事务</li></ul></blockquote><p>使用事务控制删除部门和删除该部门下的员工的操作：</p><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">-- 开启事务</span></span><span class="line"><span style="color: #F78C6C">start transaction</span><span style="color: #BABED8"> ;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">-- 删除学工部</span></span><span class="line"><span style="color: #F78C6C">delete</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">from</span><span style="color: #BABED8"> tb_dept </span><span style="color: #F78C6C">where</span><span style="color: #BABED8"> id </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8">;</span></span><span class="line"></span><span class="line"><span style="color: #676E95; font-style: italic">-- 删除学工部的员工</span></span><span class="line"><span style="color: #F78C6C">delete</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">from</span><span style="color: #BABED8"> tb_emp </span><span style="color: #F78C6C">where</span><span style="color: #BABED8"> dept_id </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #BABED8">;</span></span></code></pre></div><ul><li>上述的这组SQL语句，如果如果执行成功，则提交事务</li></ul><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">-- 提交事务 (成功时执行)</span></span><span class="line"><span style="color: #F78C6C">commit</span><span style="color: #BABED8"> ;</span></span></code></pre></div><ul><li>上述的这组SQL语句，如果如果执行失败，则回滚事务</li></ul><div class="language-sql"><button title="Copy code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">-- 回滚事务 (出错时执行)</span></span><span class="line"><span style="color: #F78C6C">rollback</span><span style="color: #BABED8"> ;</span></span></code></pre></div><h3 id="8-3-四大特性"><a href="#8-3-四大特性" class="headerlink" title="8.3 四大特性"></a>8.3 四大特性</h3><p>面试题：事务有哪些特性？</p><ul><li>原子性（Atomicity）：事务是不可分割的最小单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>事务的四大特性简称为：ACID</p></blockquote><ul><li><p><strong>原子性（Atomicity）</strong> ：原子性是指事务包装的一组sql是一个不可分割的工作单元，事务中的操作要么全部成功，要么全部失败。</p></li><li><p><strong>一致性（Consistency）</strong>：一个事务完成之后数据都必须处于一致性状态。</p></li></ul><p>​如果事务成功的完成，那么数据库的所有变化将生效。</p><p>​如果事务执行出现错误，那么数据库的所有变化将会被回滚(撤销)，返回到原始状态。</p><ul><li><strong>隔离性（Isolation）</strong>：多个用户并发的访问数据库时，一个用户的事务不能被其他用户的事务干扰，多个并发的事务之间要相互隔离。</li></ul><p>​一个事务的成功或者失败对于其他的事务是没有影响。</p><ul><li><strong>持久性（Durability）</strong>：一个事务一旦被提交或回滚，它对数据库的改变将是永久性的，哪怕数据库发生异常，重启之后数据亦然存在。</li></ul><h2 id="9-索引"><a href="#9-索引" class="headerlink" title="9.索引"></a>9.索引</h2><h3 id="9-1-介绍"><a href="#9-1-介绍" class="headerlink" title="9.1 介绍"></a>9.1 介绍</h3><p>索引(index)：是帮助数据库高效获取数据的数据结构 。</p><ul><li>简单来讲，就是使用索引可以提高查询的效率。</li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 添加索引</span></span><span class="line"><span style="color: #babed8">create index idx_sku_sn on tb_sku (sn);  #在添加索引时，也需要消耗时间</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 查询数据（使用了索引）</span></span><span class="line"><span style="color: #babed8">select * from tb_sku where sn = &#39;100000003145008&#39;;</span></span></code></pre></div><p>优点：</p><ol><li>提高数据查询的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</li></ol><p>缺点：</p><ol><li>索引会占用存储空间。</li><li>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率。</li></ol><h3 id="9-2-结构"><a href="#9-2-结构" class="headerlink" title="9.2 结构"></a>9.2 结构</h3><p>MySQL数据库支持的索引结构有很多，如：Hash索引、B+Tree索引、Full-Text索引等。</p><p>我们平常所说的索引，如果没有特别指明，都是指默认的 B+Tree 结构组织的索引。</p><p>在没有了解B+Tree结构前，我们先回顾下之前所学习的树结构：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>二叉查找树：左边的子节点比父节点小，右边的子节点比父节点大</p></blockquote><p><img src="/posts/0/image-20221208174135229-170729986151811.png" alt="image-20221208174135229"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>当我们向二叉查找树保存数据时，是按照从大到小(或从小到大)的顺序保存的，此时就会形成一个单向链表，搜索性能会打折扣。</p></blockquote><p><img src="/posts/0/image-20221208174859866-170729986151914.png" alt="image-20221208174859866"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>可以选择平衡二叉树或者是红黑树来解决上述问题。（红黑树也是一棵平衡的二叉树）</p></blockquote><p><img src="/posts/0/image-20221209100647867-170729986151912.png" alt="image-20221209100647867"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>但是在Mysql数据库中并没有使用二叉搜索数或二叉平衡数或红黑树来作为索引的结构。</p></blockquote><p>思考：采用二叉搜索树或者是红黑树来作为索引的结构有什么问题？</p><details>    <summary>答案</summary>    最大的问题就是在数据量大的情况下，树的层级比较深，会影响检索速度。因为不管是二叉搜索数还是红黑数，一个节点下面只能有两个子节点。此时在数据量大的情况下，就会造成数的高度比较高，树的高度一旦高了，检索速度就会降低。</details><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>说明：如果数据结构是红黑树，那么查询1000万条数据，根据计算树的高度大概是23左右，这样确实比之前的方式快了很多，但是如果高并发访问，那么一个用户有可能需要23次磁盘IO，那么100万用户，那么会造成效率极其低下。所以为了减少红黑树的高度，那么就得增加树的宽度，就是不再像红黑树一样每个节点只能保存一个数据，可以引入另外一种数据结构，一个节点可以保存多个数据，这样宽度就会增加从而降低树的高度。这种数据结构例如BTree就满足。</p></blockquote><p>下面我们来看看B+Tree(多路平衡搜索树)结构中如何避免这个问题：</p><p><img src="/posts/0/image-20221208181315728-170729986151913.png" alt="image-20221208181315728"></p><p>B+Tree结构：</p><ul><li>每一个节点，可以存储多个key（有n个key，就有n个指针）</li><li>节点分为：叶子节点、非叶子节点<ul><li>叶子节点，就是最后一层子节点，所有的数据都存储在叶子节点上</li><li>非叶子节点，不是树结构最下面的节点，用于索引数据，存储的的是：key+指针</li></ul></li><li>为了提高范围查询效率，叶子节点形成了一个双向链表，便于数据的排序及区间范围查询</li></ul><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>拓展：</strong></p><p>非叶子节点都是由key+指针域组成的，一个key占8字节，一个指针占6字节，而一个节点总共容量是16KB，那么可以计算出一个节点可以存储的元素个数：16*1024字节 &#x2F; (8+6)&#x3D;1170个元素。</p><ul><li>查看mysql索引节点大小：show global status like ‘innodb_page_size’;    – 节点大小：16384</li></ul><p>当根节点中可以存储1170个元素，那么根据每个元素的地址值又会找到下面的子节点，每个子节点也会存储1170个元素，那么第二层即第二次IO的时候就会找到数据大概是：1170*1170&#x3D;135W。也就是说B+Tree数据结构中只需要经历两次磁盘IO就可以找到135W条数据。</p><p>对于第二层每个元素有指针，那么会找到第三层，第三层由key+数据组成，假设key+数据总大小是1KB，而每个节点一共能存储16KB，所以一个第三层一个节点大概可以存储16个元素(即16条记录)。那么结合第二层每个元素通过指针域找到第三层的节点，第二层一共是135W个元素，那么第三层总元素大小就是：135W*16结果就是2000W+的元素个数。</p><p>结合上述分析B+Tree有如下优点：</p><ul><li>千万条数据，B+Tree可以控制在小于等于3的高度</li><li>所有的数据都存储在叶子节点上，并且底层已经实现了按照索引进行排序，还可以支持范围查询，叶子节点是一个双向链表，支持从小到大或者从大到小查找</li></ul></blockquote><h3 id="9-3-语法"><a href="#9-3-语法" class="headerlink" title="9.3 语法"></a>9.3 语法</h3><p><strong>创建索引</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">create  [ unique ]  index 索引名 on  表名 (字段名,... ) ;</span></span></code></pre></div><p><strong>查看索引</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">show  index  from  表名;</span></span></code></pre></div><p><strong>删除索引</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">drop  index  索引名  on  表名;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意事项：</p><ul><li><p>主键字段，在建表时，会自动创建主键索引</p></li><li><p>添加唯一约束时，数据库实际上会添加唯一索引</p></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;在我们讲解SpringBootWeb基础知识(请求响应案例)的时候，我们讲到在web开发中，为了应用程序职责单一，方便维护，</summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Maven知识点总结</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-02-05T14:33:12.000Z</published>
    <updated>2024-02-07T13:09:38.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-初始Maven"><a href="#1-初始Maven" class="headerlink" title="1.初始Maven"></a>1.初始Maven</h2><h3 id="1-1-什么是Maven"><a href="#1-1-什么是Maven" class="headerlink" title="1.1 什么是Maven"></a>1.1 什么是Maven</h3><p>Maven是Apache旗下的一个开源项目，<strong>是一款用于管理和构建java项目的工具</strong>。</p><h3 id="1-2-Maven的作用"><a href="#1-2-Maven的作用" class="headerlink" title="1.2 Maven的作用"></a>1.2 Maven的作用</h3><p>使用Maven能够做什么：</p><ol><li>依赖管理</li><li>统一项目结构</li><li>项目构建</li></ol><p><strong>依赖管理</strong>：</p><ul><li>方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题</li></ul><p><img src="/posts/0/image-20240205205927138.png" alt="image-20240205205927138"></p><p>当使用maven进行项目依赖(jar包)管理，则很方便的可以解决这个问题。 我们只需要在maven项目的pom.xml文件中，添加一段如下图所示的配置即可实现。</p><p><img src="/posts/0/image-20240205210109723.png" alt="image-20240205210109723"></p><p>**统一项目结构 : **</p><ul><li>提供标准、统一的项目结构</li></ul><p>在项目开发中，当你使用不同的开发工具 (如：Eclipse、Idea)，创建项目工程时：</p><p><img src="/posts/0/image-20240205210130908.png" alt="image-20240205210130908"></p><p>若我们创建的是一个maven工程，是可以帮我们自动生成统一、标准的项目目录结构：</p><p><img src="/posts/0/image-20240205210136330.png" alt="image-20240205210136330"></p><p>具体的统一结构如下：</p><p><img src="/posts/0/image-20240205210147390.png" alt="image-20240205210147390"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>目录说明： </p><ul><li>src&#x2F;main&#x2F;java: java源代码目录</li><li>src&#x2F;main&#x2F;resources:  配置文件信息</li><li>src&#x2F;test&#x2F;java: 测试代码</li><li>src&#x2F;test&#x2F;resources: 测试配置文件信息</li></ul></blockquote><p><strong>项目构建 :</strong> </p><ul><li>maven提供了标准的、跨平台(Linux、Windows、MacOS) 的自动化项目构建方式</li></ul><p>代码需要进行编译、测试、打包、发布，这些操作如果需要反复进行就显得特别麻烦，而Maven提供了一套简单的命令来完成项目构建。</p><p><img src="/posts/0/image-20240205210213617.png" alt="image-20240205210213617"></p><h2 id="2-Maven概述"><a href="#2-Maven概述" class="headerlink" title="2.Maven概述"></a>2.Maven概述</h2><h3 id="2-1-Maven介绍"><a href="#2-1-Maven介绍" class="headerlink" title="2.1 Maven介绍"></a>2.1 Maven介绍</h3><p>Apache Maven是一个项目管理和构建工具，它基于项目对象模型(Project Object Model , 简称: POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档。</p><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p>Maven的作用： </p><ol><li>方便的依赖管理</li><li>统一的项目结构</li><li>标准的项目构建流程</li></ol><h3 id="2-2-Maven模型"><a href="#2-2-Maven模型" class="headerlink" title="2.2 Maven模型"></a>2.2 Maven模型</h3><ul><li>项目对象模型 (Project Object Model)</li><li>依赖管理模型(Dependency)</li><li>构建生命周期&#x2F;阶段(Build lifecycle &amp; phases)</li></ul><p><img src="/posts/0/image-20240205210326217.png" alt="image-20240205210326217"></p><h3 id="2-3-Maven仓库"><a href="#2-3-Maven仓库" class="headerlink" title="2.3 Maven仓库"></a>2.3 Maven仓库</h3><p>仓库：用于存储资源，管理各种jar包</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>仓库的本质就是一个目录(文件夹)，这个目录被用来存储开发中所有依赖(就是jar包)和插件</p></blockquote><p>Maven仓库分为：</p><ul><li>本地仓库：自己计算机上的一个目录(用来存储jar包)</li><li>中央仓库：由Maven团队维护的全球唯一的。仓库地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li><li>远程仓库(私服)：一般由公司团队搭建的私有仓库</li></ul><p>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包</p><ul><li><p>如果有，则在项目直接引用</p></li><li><p>如果没有，则去中央仓库中下载对应的jar包到本地仓库</p></li></ul><p>如果还可以搭建远程仓库(私服)，将来jar包的查找顺序则变为： 本地仓库 –&gt; 远程仓库–&gt; 中央仓库</p><h3 id="2-4-Maven安装"><a href="#2-4-Maven安装" class="headerlink" title="2.4 Maven安装"></a>2.4 Maven安装</h3><p>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>Maven安装配置步骤：</p><ol><li>解压安装</li><li>配置仓库</li><li>配置Maven环境变量</li></ol><p><strong>1、解压 apache-maven-3.6.1-bin.zip（解压即安装）</strong></p><ul><li>bin目录 ： 存放的是可执行命令。（mvn 命令重点关注）</li><li>conf目录 ：存放Maven的配置文件。（settings.xml配置文件后期需要修改）</li><li>lib目录 ：存放Maven依赖的jar包。（Maven也是使用java开发的，所以它也依赖其他的jar包）</li></ul><p><strong>2、配置本地仓库</strong></p><p>在自己计算机上新一个目录（本地仓库，用来存储jar包）</p><p>进入到conf目录下修改settings.xml配置文件 </p><p>1). 使用超级记事本软件，打开settings.xml文件，定位到53行</p><p>2). 复制<localRepository>标签，粘贴到注释的外面（55行）</localRepository></p><p>3). 复制之前新建的用来存储jar包的路径，替换掉<localRepository>标签体内容</localRepository></p><p><strong>3、配置阿里云私服</strong></p><p>由于中央仓库在国外，所以下载jar包速度可能比较慢，而阿里公司提供了一个远程仓库，里面基本也都有开源项目的jar包。</p><p>进入到conf目录下修改settings.xml配置文件：</p><p>1). 使用超级记事本软件，打开settings.xml文件，定位到160行左右</p><p>2). 在&#x2F;<mirrors>标签下为其添加子标签&#x2F;<mirror>，内容如下：</mirror></mirrors></p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">mirror</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">id</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">alimaven</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">id</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">name</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">aliyun maven</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">name</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">  </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">url</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">http://maven.aliyun.com/nexus/content/groups/public/</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">url</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">mirrorOf</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">central</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">mirrorOf</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">          </span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">mirror</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>&#x3D;&#x3D;注:  只可配置一个<mirror>(另一个要注释!) ，不然两个可能发生冲突，导致jar包无法下载!!!!!!!&#x3D;&#x3D;</mirror></p><p><strong>4、配置环境变量</strong></p><p>1). 在系统变量处新建一个变量MAVEN_HOME</p><ul><li>MAVEN_HOME环境变量的值，设置为maven的解压安装目录</li></ul><p>2). 在Path中进行配置</p><ul><li>PATH环境变量的值，设置为：%MAVEN_HOME%\bin</li></ul><p>3). 打开DOS命令提示符进行验证，出现如图所示表示安装成功</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">mvn -v</span></span></code></pre></div><h2 id="3-IDEA集成Maven"><a href="#3-IDEA集成Maven" class="headerlink" title="3. IDEA集成Maven"></a>3. IDEA集成Maven</h2><h3 id="3-1-配置Maven环境"><a href="#3-1-配置Maven环境" class="headerlink" title="3.1 配置Maven环境"></a>3.1 配置Maven环境</h3><p>1、选择 IDEA中 File  &#x3D;&gt;  Settings  &#x3D;&gt;  Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p><p><img src="/posts/0/image-20240205214819606.png" alt="image-20240205214819606"></p><p>2、设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</p><p><img src="/posts/0/image-20240205214825555.png" alt="image-20240205214825555"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Maven home path ：指定当前Maven的安装目录</p><p>User settings file ：指定当前Maven的settings.xml配置文件的存放路径</p><p>Local repository ：指定Maven的本地仓库的路径 (如果指定了settings.xml, 这个目录会自动读取出来, 可以不用手动指定)</p></blockquote><p>3、配置工程的编译版本为11</p><ul><li>Maven默认使用的编译版本为5（版本过低）</li></ul><p><img src="/posts/0/image-20240205214837969.png" alt="image-20240205214837969"></p><h3 id="3-2-全局设置"><a href="#3-2-全局设置" class="headerlink" title="3.2 全局设置"></a>3.2 全局设置</h3><p>1、进入到IDEA欢迎页面</p><ul><li>选择 IDEA中 File  &#x3D;&gt;  close project</li></ul><p>2、打开 All settings , 选择 Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p><p>3、配置工程的编译版本为11</p><p>这里所设置的maven的环境信息，并未指定任何一个project，此时设置的信息就属于全局配置信息。 以后，我们再创建project，默认就是使用我们全局配置的信息。</p><h3 id="3-3-Maven项目"><a href="#3-3-Maven项目" class="headerlink" title="3.3 Maven项目"></a>3.3 Maven项目</h3><p>1、创建一个空项目 </p><p><img src="/posts/0/image-20240205214926612.png" alt="image-20240205214926612"></p><p>2、创建模块，选择Maven，点击Next</p><p><img src="/posts/0/image-20240205214936989.png" alt="image-20240205214936989"></p><p><img src="/posts/0/image-20240205214941313.png" alt="image-20240205214941313"></p><p>3、填写模块名称，坐标信息，点击finish，创建完成</p><p><img src="/posts/0/image-20240205214952458.png" alt="image-20240205214952458"></p><p>4、在Maven工程下，创建HelloWorld类</p><p><img src="/posts/0/image-20240205215001910.png" alt="image-20240205215001910"></p><p><img src="/posts/0/image-20240205215006868.png" alt="image-20240205215006868"></p><p>5、编写 HelloWorld，并运行</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">class</span><span style="color: #BABED8"> </span><span style="color: #FFCB6B">HelloWorld</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">public</span><span style="color: #BABED8"> </span><span style="color: #C792EA">static</span><span style="color: #BABED8"> </span><span style="color: #C792EA">void</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">String</span><span style="color: #89DDFF">[]</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">        System</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">out</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">println</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Hello Maven ...</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li><p>Maven项目的目录结构:</p><p>maven-project01<br>|—  src  (源代码目录和测试代码目录)<br>        |—  main (源代码目录)<br>                   |— java (源代码java文件目录)<br>                   |— resources (源代码配置文件目录)<br>        |—  test (测试代码目录)<br>                   |— java (测试代码java目录)<br>                   |— resources (测试代码配置文件目录)<br>|— target (编译、打包生成文件存放目录)</p></li></ul></blockquote><h3 id="3-4-POM配置"><a href="#3-4-POM配置" class="headerlink" title="3.4 POM配置"></a>3.4 POM配置</h3><p>POM (Project Object Model) ：指的是项目对象模型，用来描述当前的maven项目。</p><ul><li>使用pom.xml文件来实现</li></ul><p>pom文件详解：</p><ul><li><project> ：pom文件的根标签，表示当前maven项目</project></li><li><modelVersion> ：声明项目描述遵循哪一个POM模型版本<ul><li>虽然模型本身的版本很少改变，但它仍然是必不可少的。目前POM模型版本是4.0.0</li></ul></modelVersion></li><li>坐标 ：<groupId>、<artifactId>、<version><ul><li>定位项目在本地仓库中的位置，由以上三个标签组成一个坐标</li></ul></version></artifactId></groupId></li><li><packaging> ：maven项目的打包方式，通常设置为jar或war（默认值：jar）</packaging></li></ul><h3 id="3-5-Maven坐标"><a href="#3-5-Maven坐标" class="headerlink" title="3.5 Maven坐标"></a>3.5 Maven坐标</h3><p>什么是坐标？</p><ul><li>Maven中的坐标是&#x3D;&#x3D;资源的唯一标识&#x3D;&#x3D; , 通过该坐标可以唯一定位资源位置</li><li>使用坐标来定义项目或引入项目中需要的依赖</li></ul><p>Maven坐标主要组成</p><ul><li><p>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</p></li><li><p>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</p></li><li><p>version：定义当前项目版本号</p></li><li><p><strong>注意：</strong></p><ul><li>上面所说的资源可以是插件、依赖、当前项目。</li><li>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</li></ul></li></ul><h3 id="3-6-导入Mavem项目"><a href="#3-6-导入Mavem项目" class="headerlink" title="3.6 导入Mavem项目"></a>3.6 导入Mavem项目</h3><ul><li><strong>方式1：使用Maven面板，快速导入项目</strong></li></ul><p>打开IDEA，选择右侧Maven面板，点击 + 号，选中对应项目的pom.xml文件，双击即可</p><p>说明：如果没有Maven面板，选择 View  &#x3D;&gt;  Appearance  &#x3D;&gt;  Tool Window Bars</p><ul><li><strong>方式2：使用idea导入模块项目</strong></li></ul><p>File  &#x3D;&gt;  Project Structure  &#x3D;&gt;  Modules  &#x3D;&gt;  +  &#x3D;&gt;  Import Module</p><p>找到要导入工程的pom.xml</p><h2 id="4-依赖管理"><a href="#4-依赖管理" class="headerlink" title="4.依赖管理"></a>4.依赖管理</h2><h3 id="4-1-依赖配置"><a href="#4-1-依赖配置" class="headerlink" title="4.1 依赖配置"></a>4.1 依赖配置</h3><p>依赖：指当前项目运行所需要的jar包。一个项目中可以引入多个依赖：</p><p>例如：在当前工程中，我们需要用到logback来记录日志，此时就可以在maven工程的pom.xml文件中，引入logback的依赖。具体步骤如下：</p><ol><li>在pom.xml中编写<dependencies>标签</dependencies></li><li>在<dependencies>标签中使用<dependency>引入坐标</dependency></dependencies></li><li>定义坐标的 groupId、artifactId、version</li><li>点击刷新按钮，引入最新加入的坐标</li></ol><ul><li>刷新依赖：保证每一次引入新的依赖，或者修改现有的依赖配置，都可以加入最新的坐标</li></ul><p>注意事项：</p><ol><li>如果引入的依赖，在本地仓库中不存在，将会连接远程仓库 &#x2F; 中央仓库，然后下载依赖（这个过程会比较耗时，耐心等待）</li><li>如果不知道依赖的坐标信息，可以到mvn的中央仓库（<a href="https://mvnrepository.com/%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/）中搜索</a></li></ol><p><strong>添加依赖的几种方式：</strong></p><ol><li>利用中央仓库搜索的依赖坐标</li><li>利用IDEA工具搜索依赖</li><li>熟练上手maven后，快速导入依赖</li></ol><h3 id="4-2-依赖传递"><a href="#4-2-依赖传递" class="headerlink" title="4.2 依赖传递"></a>4.2 依赖传递</h3><p>依赖传递可以分为：</p><ol><li><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系</p></li><li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</p></li></ol><p><img src="/posts/0/image-20240205215444194.png" alt="image-20240205215444194"></p><p>比如以上图中：</p><ul><li>projectA依赖了projectB。对于projectA 来说，projectB 就是直接依赖。</li><li>而projectB依赖了projectC及其他jar包。 那么此时，在projectA中也会将projectC的依赖传递下来。对于projectA 来说，projectC就是间接依赖。</li></ul><p>在pom.xml文件中只添加了logback-classic依赖，但由于maven的依赖具有传递性，所以会自动把所依赖的其他jar包也一起导入。</p><h3 id="4-3-排除依赖"><a href="#4-3-排除依赖" class="headerlink" title="4.3 排除依赖"></a>4.3 排除依赖</h3><p>问题：之前我们讲了依赖具有传递性。那么A依赖B，B依赖C，如果A不想将C依赖进来，是否可以做到？ </p><p>答案：在maven项目中，我们可以通过排除依赖来实现。</p><p>什么是排除依赖？</p><ul><li>排除依赖：指主动断开依赖的资源。（被排除的资源无需指定版本）</li></ul><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.itheima</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">maven-projectB</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.0-SNAPSHOT</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">   </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">&lt;!--排除依赖, 主动断开依赖的资源--&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">exclusions</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">exclusion</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">junit</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">junit</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">exclusion</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">exclusions</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><h3 id="4-4-依赖范围"><a href="#4-4-依赖范围" class="headerlink" title="4.4 依赖范围"></a>4.4 依赖范围</h3><p>在项目中导入依赖的jar包后，默认情况下，可以在任何地方使用。</p><p><img src="/posts/0/image-20240205215620227.png" alt="image-20240205215620227"></p><p>如果希望限制依赖的使用范围，可以通过<scope>标签设置其作用范围。</scope></p><p><img src="/posts/0/image-20240205215628711.png" alt="image-20240205215628711"></p><p>作用范围：</p><ol><li><p>主程序范围有效（main文件夹范围内）</p></li><li><p>测试程序范围有效（test文件夹范围内）</p></li><li><p>是否参与打包运行（package指令范围内）</p></li></ol><p>scope标签的取值范围：</p><table><thead><tr><th><strong>scope</strong>值</th><th><strong>主程序</strong></th><th><strong>测试程序</strong></th><th><strong>打包（运行）</strong></th><th><strong>范例</strong></th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><h3 id="4-5-生命周期"><a href="#4-5-生命周期" class="headerlink" title="4.5 生命周期"></a>4.5 生命周期</h3><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。 描述了一次项目构建，经历哪些阶段。</p><p>Maven从大量项目和构建工具中学习和反思，然后总结了一套高度完美的，易扩展的项目构建生命周期。这个生命周期包含了项目的清理，初始化，编译，测试，打包，集成测试，验证，部署和站点生成等几乎所有构建步骤。</p><p>Maven对项目构建的生命周期划分为3套（相互独立）：</p><ul><li><p>clean：清理工作。</p></li><li><p>default：核心工作。如：编译、测试、打包、安装、部署等。</p></li><li><p>site：生成报告、发布站点等。</p></li></ul><p><img src="/posts/0/image-20240205215723855.png" alt="image-20240205215723855"></p><p>• clean：移除上一次构建生成的文件</p><p>• compile：编译项目源代码</p><p>• test：使用合适的单元测试框架运行测试(junit)</p><p>• package：将编译后的文件打包，如：jar、war等</p><p>• install：安装项目到本地仓库</p><p>Maven的生命周期是抽象的，这意味着生命周期本身不做任何实际工作。<strong>在Maven的设计中，实际任务（如源代码编译）都交由插件来完成。</strong></p><p>IDEA工具为了方便程序员使用maven生命周期，在右侧的maven工具栏中，已给出快速访问通道</p><p><img src="/posts/0/image-20240205215746827.png" alt="image-20240205215746827"></p><p>生命周期的顺序是：clean –&gt; validate –&gt; compile –&gt; test –&gt; package –&gt; verify –&gt; install –&gt; site –&gt; deploy </p><p>我们需要关注的就是：clean –&gt;  compile –&gt; test –&gt; package  –&gt; install </p><p>4.6 执行</p><p>在日常开发中，当我们要执行指定的生命周期时，有两种执行方式：</p><ol><li>在idea工具右侧的maven工具栏中，选择对应的生命周期，双击执行</li><li>在DOS命令行中，通过maven命令执行</li></ol><p><strong>方式一：在idea中执行生命周期</strong></p><ul><li>选择对应的生命周期，双击执行</li></ul><p><img src="/posts/0/image-20240205215815327.png" alt="image-20240205215815327"></p><p>test：</p><p><img src="/posts/0/image-20221201164627403.png" alt="image-20221201164627403"></p><p>package：</p><p><img src="/posts/0/image-20221201165801341.png" alt="image-20221201165801341"></p><p>install：</p><p><img src="/posts/0/image-20221201170830837.png" alt="image-20221201170830837"></p><p>clean：</p><p><img src="/posts/0/image-20221201171529382.png" alt="image-20221201171529382"></p><p><strong>方式二：在命令行中执行生命周期</strong></p><ol><li>进入到DOS命令行</li></ol><p><img src="/posts/0/image-20221201172210253.png" alt="image-20221201172210253"></p><p><img src="/posts/0/image-20221201172914648.png" alt="image-20221201172914648"> </p><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h2><h3 id="5-1-更新依赖索引"><a href="#5-1-更新依赖索引" class="headerlink" title="5.1 更新依赖索引"></a>5.1 更新依赖索引</h3><p>有时候给idea配置完maven仓库信息后，在idea中依然搜索不到仓库中的jar包。这是因为仓库中的jar包索引尚未更新到idea中。这个时候我们就需要更新idea中maven的索引了，具体做法如下：</p><p> 打开设置—-搜索maven—-Repositories—-选中本地仓库—–点击Update</p><p><img src="/posts/0/1537786634456-1582625518984.png" alt="1537786634456"></p><h3 id="5-2-清理maven仓库"><a href="#5-2-清理maven仓库" class="headerlink" title="5.2 清理maven仓库"></a>5.2 清理maven仓库</h3><p>初始情况下，我们的本地仓库是没有任何jar包的，此时会从私服去下载（如果没有配置，就直接从中央仓库去下载），可能由于网络的原因，jar包下载不完全，这些不完整的jar包都是以lastUpdated结尾。此时，maven不会再重新帮你下载，需要你删除这些以lastUpdated结尾的文件，然后maven才会再次自动下载这些jar包。</p><p><img src="/posts/0/lastUpdated-1582625518983.png" alt="lastUpdate"></p><p>如果本地仓库中有很多这样的以lastUpadted结尾的文件，可以定义一个批处理文件，在其中编写如下脚本来删除： </p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">set REPOSITORY_PATH=E:\develop\apache-maven-3.6.1\mvn_repo</span></span><span class="line"><span style="color: #babed8">rem 正在搜索...</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">del /s /q %REPOSITORY_PATH%\*.lastUpdated</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">rem 搜索完毕</span></span><span class="line"><span style="color: #babed8">pause</span></span></code></pre></div><p>操作步骤如下：</p><p>1). 定义批处理文件del_lastUpdated.bat  (直接创建一个文本文件，命名为del_lastUpdated，后缀名直接改为bat即可 )</p><p><img src="/posts/0/image-20221214154949482.png" alt="image-20221214154949482"> </p><p>2). 在上面的bat文件上<strong>右键—》编辑</strong> 。修改文件：</p><p><img src="/posts/0/image-20221214154559817.png" alt="image-20221214154559817"> </p><p>修改完毕后，双击运行即可删除maven仓库中的残留文件。</p><h2 id="6-Maven高级"><a href="#6-Maven高级" class="headerlink" title="6.Maven高级"></a>6.Maven高级</h2><p>Maven高级内容包括:</p><ul><li>分模块设计与开发</li><li>继承与聚合</li><li>私服</li></ul><h3 id="6-1-分模块设计与开发"><a href="#6-1-分模块设计与开发" class="headerlink" title="6.1 分模块设计与开发"></a>6.1 分模块设计与开发</h3><p>所谓分模块设计，顾名思义指的就是我们在设计一个 Java 项目的时候，将一个 Java 项目拆分成多个模块进行开发。</p><p><strong>1). 未分模块设计的问题</strong> </p><p>如果项目不分模块，也就意味着所有的业务代码是不是都写在这一个 Java 项目当中。随着这个项目的业务扩张，项目当中的业务功能可能会越来越多。</p><p><strong>总结起来，主要两点问题：不方便项目的维护和管理、项目中的通用组件难以复用。</strong></p><p><strong>2). 分模块设计</strong></p><p>分模块设计我们在进行项目设计阶段，就可以将一个大的项目拆分成若干个模块，每一个模块都是独立的。</p><p><strong>分模块设计就是将项目按照功能&#x2F;结构拆分成若干个子模块，方便项目的管理维护、拓展，也方便模块键的相互调用、资源共享。</strong></p><p>注意：分模块开发需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分。</p><p><strong>例子：</strong></p><p><strong>1.创建maven模块 tlias-pojo，存放实体类</strong></p><p>A. 创建一个正常的Maven模块，模块名tlias-pojo</p><p>B. 然后在tlias-pojo中创建一个包 com.itheima.pojo (和原来案例项目中的pojo包名一致)</p><p>C. 将原来案例项目 tlias-web-management 中的pojo包下的实体类，复制到tlias-pojo模块中</p><p>D. 在 tlias-pojo 模块的pom.xml文件中引入依赖</p><p>E. 删除原有案例项目tlias-web-management的pojo包【直接删除不要犹豫，我们已经将该模块拆分出去了】，然后在pom.xml中引入 tlias-pojo的依赖</p><p><strong>2. 创建Maven模块 tlias-utils，存放相关工具类</strong></p><p>A. 创建一个正常的Maven模块，模块名tlias-utils</p><p>B. 然后在 tlias-utils 中创建一个包 com.itheima.utils (和原来案例项目中的utils包名一致)</p><p>C. 将原来案例项目 tlias-web-management 中的utils包下的实体类，复制到tlias-utils模块中</p><p>D. 在 tlias-utils 模块的pom.xml文件中引入依赖</p><p>E. 删除原有案例项目tlias-web-management的utils包【直接删除不要犹豫，我们已经将该模块拆分出去了】，然后在pom.xml中引入 tlias-utils的依赖</p><p><strong>到此呢，就已经完成了模块的拆分，拆分出了 tlias-pojo、tlias-utils、tlias-web-management ，如果其他项目中需要用到 pojo，或者 utils工具类，就可以直接引入依赖。</strong> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>1). 什么是分模块设计：将项目按照功能拆分成若干个子模块</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>2). 为什么要分模块设计：方便项目的管理维护、扩展，也方便模块间的相互调用，资源共享</p></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>3). 注意事项：分模块设计需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分</p></blockquote><h3 id="6-2-继承"><a href="#6-2-继承" class="headerlink" title="6.2 继承"></a>6.2 继承</h3><ul><li><p>概念：继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</p></li><li><p>作用：简化依赖配置、统一管理依赖</p></li><li><p>实现：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">...</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">...</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">...</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">....</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div></li></ul><p><img src="/posts/0/image-20240205222420698.png" alt="image-20240205222420698"></p><p>1). 创建maven模块 tlias-parent ，该工程为父工程，设置打包方式pom(默认jar)。</p><p>工程结构如下：</p><p><img src="/posts/0/image-20230113120517216-17071432622601.png" alt="image-20230113120517216"></p><p>父工程tlias-parent的pom.xml文件配置如下：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.springframework.boot</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">spring-boot-starter-parent</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">2.7.5</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">/&gt;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">&lt;!-- lookup parent from repository --&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.itheima</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">tlias-parent</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.0-SNAPSHOT</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">packaging</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">pom</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">packaging</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Maven打包方式：</p><ul><li>jar：普通模块打包，springboot项目基本都是jar包（内嵌tomcat运行）</li><li>war：普通web程序打包，需要部署在外部的tomcat服务器中运行</li><li>pom：父工程或聚合工程，该模块不写代码，仅进行依赖管理</li></ul></blockquote><p>2). 在子工程的pom.xml文件中，配置继承关系。</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">com.itheima</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">tlias-parent</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.0-SNAPSHOT</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">../tlias-parent/pom.xml</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">relativePath</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">parent</span><span style="color: #89DDFF">&gt;</span></span><span class="line"></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">tlias-utils</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.0-SNAPSHOT</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>这里是以 tlias-utils 为例，指定了其父工程。其他的模块，都是相同的配置方式。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：</p><ul><li>在子工程中，配置了继承关系之后，坐标中的groupId是可以省略的，因为会自动继承父工程的 。</li><li>relativePath指定父工程的pom文件的相对位置（如果不指定，将从本地仓库&#x2F;远程仓库查找该工程）。<ul><li>..&#x2F; 代表的上一级目录</li></ul></li></ul></blockquote><p>3). 在父工程中配置各个工程共有的依赖（子工程会自动继承父工程的依赖）。</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">org.projectlombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">lombok</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">1.18.24</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>此时，我们已经将各个子工程中共有的依赖（lombok），都定义在了父工程中，子工程中的这一项依赖，就可以直接删除了。删除之后，我们会看到父工程中配置的依赖 lombok，子工程直接继承下来了。</p><p><img src="/posts/0/image-20230113120408661.png" alt="image-20230113120408661"> </p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>工程结构说明：</strong></p><ul><li><p>我们当前的项目结构为：</p><p><img src="/posts/0/image-20230113120636912.png" alt="image-20230113120636912"> </p><p>因为我们是项目开发完毕之后，给大家基于现有项目拆分的各个模块，tlias-web-management已经存在了，然后再创建各个模块与父工程，所以父工程与模块之间是平级的。</p></li><li><p>而实际项目中，可能还会见到下面的工程结构：</p><p><img src="/posts/0/image-20230113120728680.png" alt="image-20230113120728680"> </p><p>而在真实的企业开发中，都是先设计好模块之后，再开始创建模块，开发项目。 那此时呢，一般都会先创建父工程 tlias-parent，然后将创建的各个子模块，都放在父工程parent下面。 这样层级结构会更加清晰一些。 </p><p><strong>PS：上面两种工程结构，都是可以正常使用的，没有一点问题。 只不过，第二种结构，看起来，父子工程结构更加清晰、更加直观。</strong></p></li></ul></blockquote><p><strong>版本锁定</strong></p><p>那假如说，我们项目要升级，要使用到jwt最新版本 0.9.2 中的一个新功能，那此时需要将依赖的版本升级到0.9.2，那此时该怎么做呢 ？</p><p>第一步：去找当前项目中所有的模块的pom.xml配置文件，看哪些模块用到了jwt的依赖。</p><p>第二步：找到这个依赖之后，将其版本version，更换为 0.9.2。</p><p><strong>问题：如果项目拆分的模块比较多，每一次更换版本，我们都得找到这个项目中的每一个模块，一个一个的更改。 很容易就会出现，遗漏掉一个模块，忘记更换版本的情况。</strong></p><p>那我们又该如何来解决这个问题，如何来统一管理各个依赖的版本呢？ </p><p>答案：Maven的版本锁定功能。</p><p>在maven中，可以在父工程的pom文件中通过 <code>&lt;dependencyManagement&gt;</code> 来统一管理依赖版本。</p><p>父工程：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #676E95; font-style: italic">&lt;!--统一管理依赖版本--&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencyManagement</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #676E95; font-style: italic">&lt;!--JWT令牌--&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">io.jsonwebtoken</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">jjwt</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">            </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">0.9.1</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">version</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencyManagement</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>子工程：</p><div class="language-xml"><button title="Copy code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #676E95; font-style: italic">&lt;!--JWT令牌--&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">io.jsonwebtoken</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">groupId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span><span style="color: #BABED8">jjwt</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">artifactId</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependency</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">dependencies</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>注意：</p><ul><li><p>在父工程中所配置的 <code>&lt;dependencyManagement&gt;</code> 只能统一管理依赖版本，并不会将这个依赖直接引入进来。 这点和 <code>&lt;dependencies&gt;</code> 是不同的。</p></li><li><p>子工程要使用这个依赖，还是需要引入的，只是此时就无需指定 <code>&lt;version&gt;</code> 版本号了，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</p></li></ul></blockquote><p>接下来，我们就可以将tlias-utils模块中单独配置的依赖，将其版本统一交给 tlias-parent 进行统一管理。</p><p>如果依赖的版本已经在父工程进行了统一管理，所以在子工程中就无需再配置依赖的版本了。</p><p>我们也可以通过自定义属性及属性引用的形式，在父工程中将依赖的版本号进行集中管理维护。 </p><p>版本集中管理之后，我们要想修改依赖的版本，就只需要在父工程中自定义属性的位置，修改对应的属性值即可。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><strong>面试题：<code>&lt;dependencyManagement&gt;</code> 与 <code>&lt;dependencies&gt;</code> 的区别是什么?</strong></p><ul><li><code>&lt;dependencies&gt;</code> 是直接依赖，在父工程配置了依赖，子工程会直接继承下来。 </li><li><code>&lt;dependencyManagement&gt;</code> 是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖(无需指定版本)</li></ul></blockquote><h3 id="6-3-聚合"><a href="#6-3-聚合" class="headerlink" title="6.3 聚合"></a>6.3 聚合</h3><p>分模块设计与开发之后啊，我们的项目被拆分为多个模块，而模块之间的关系，可能错综复杂。 那就比如我们当前的案例项目，结构如下（相对还是比较简单的）：</p><img src="/posts/0/image-20230113142520463.png" alt="image-20230113142520463" style="zoom:67%;"><p>那此时，大家试想一下，如果开发一个大型项目，拆分的模块很多，模块之间的依赖关系错综复杂，那此时要进行项目的打包、安装操作，是非常繁琐的。 而我们接下来，要讲解的maven的聚合就是来解决这个问题的，通过maven的聚合就可以轻松实现项目的一键构建（清理、编译、测试、打包、安装等）。</p><img src="/posts/0/image-20230113151533948.png" alt="image-20230113151533948" style="zoom:80%;"> <ul><li><strong>聚合：</strong>将多个模块组织成一个整体，同时进行项目的构建。</li><li><strong>聚合工程：</strong>一个不具有业务功能的“空”工程（有且仅有一个pom文件） 【PS：一般来说，继承关系中的父工程与聚合关系中的聚合工程是同一个】</li><li><strong>作用：</strong>快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）</li></ul><p>在maven中，我们可以在聚合工程中通过 <code>&lt;moudules&gt;</code> 设置当前聚合工程所包含的子模块的名称。我们可以在 tlias-parent中，添加如下配置，来指定当前聚合工程，需要聚合的模块：</p><div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&lt;!--</span><span style="color: #BABED8">聚合其他模块</span><span style="color: #89DDFF">--&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">modules</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;../</span><span style="color: #BABED8">tlias</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">pojo</span><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;../</span><span style="color: #BABED8">tlias</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">utils</span><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;../</span><span style="color: #BABED8">tlias</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">web</span><span style="color: #89DDFF">-</span><span style="color: #BABED8">management</span><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">module</span><span style="color: #89DDFF">&gt;</span></span><span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #BABED8">modules</span><span style="color: #89DDFF">&gt;</span></span></code></pre></div><p>那此时，我们要进行编译、打包、安装操作，就无需在每一个模块上操作了。只需要在聚合工程上，统一进行操作就可以了。</p><p><strong>继承与聚合对比</strong></p><ul><li><p><strong>作用</strong></p><ul><li><p>聚合用于快速构建项目</p></li><li><p>继承用于简化依赖配置、统一管理依赖</p></li></ul></li><li><p><strong>相同点：</strong></p><ul><li><p>聚合与继承的pom.xml文件打包方式均为pom，通常将两种关系制作到同一个pom文件中</p></li><li><p>聚合与继承均属于设计型模块，并无实际的模块内容</p></li></ul></li><li><p><strong>不同点：</strong></p><ul><li><p>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些</p></li><li><p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</p></li></ul></li></ul><h3 id="6-4-私服"><a href="#6-4-私服" class="headerlink" title="6.4 私服"></a>6.4 私服</h3><p>私服其实就是架设在公司局域网内部的一台服务器，就是一种特殊的远程仓库。</p><p>有了私服之后，各个团队就可以直接来连接私服了。 A 连接上私服之后，他就可以把jar包直接上传到私服当中。我公司自己内部搭建的服务器，我是不是有权限操作呀，把jar包上传到私服之后，我让 B 团队的所有开发人员也连接同一台私服。连接上这一台私服之后，他就会根据坐标的信息，直接从私服当中将对应的jar包下载到自己的本地仓库，这样就可以使用到依赖当中所提供的一些工具类了。这样我们就可以通过私服来完成资源的共享。</p><ul><li><strong>私服：</strong>是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</li><li><strong>依赖查找顺序：</strong><ul><li>本地仓库</li><li>私服仓库</li><li>中央仓库</li></ul></li><li><strong>注意事项：</strong>私服在企业项目开发中，一个项目&#x2F;公司，只需要一台即可（无需我们自己搭建，会使用即可）。</li></ul><p><strong>资源的上传与下载</strong></p><p>资源上传与下载，我们需要做三步配置，执行一条指令。</p><p>第一步配置：在maven的配置文件中配置访问私服的用户名、密码。</p><p>第二步配置：在maven的配置文件中配置连接私服的地址(url地址)。</p><p>第三步配置：在项目的pom.xml文件中配置上传资源的位置(url地址)。</p><p>配置好了上述三步之后，要上传资源到私服仓库，就执行执行maven生命周期：deploy。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>私服仓库说明：</p><ul><li>RELEASE：存储自己开发的RELEASE发布版本的资源。</li><li>SNAPSHOT：存储自己开发的SNAPSHOT发布版本的资源。</li><li>Central：存储的是从中央仓库下载下来的依赖。</li></ul></blockquote><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>项目版本说明：</p><ul><li>RELEASE(发布版本)：功能趋于稳定、当前更新停止，可以用于发行的版本，存储在私服中的RELEASE仓库中。</li><li>SNAPSHOT(快照版本)：功能不稳定、尚处于开发中的版本，即快照版本，存储在私服的SNAPSHOT仓库中。</li></ul></blockquote><p>1.设置私服的访问用户名&#x2F;密码（在自己maven安装目录下的conf&#x2F;settings.xml中的servers中配置）</p><p>2.设置私服依赖下载的仓库组地址（在自己maven安装目录下的conf&#x2F;settings.xml中的mirrors、profiles中配置）</p><p>3.IDEA的maven工程的pom文件中配置上传（发布）地址(直接在tlias-parent中配置发布地址)</p><p>配置完成之后，我们就可以在tlias-parent中执行<strong>deploy</strong>生命周期，将项目发布到私服仓库中。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-初始Maven&quot;&gt;&lt;a href=&quot;#1-初始Maven&quot; class=&quot;headerlink&quot; title=&quot;1.初始Maven&quot;&gt;&lt;/a&gt;1.初始Maven&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是Maven&quot;&gt;&lt;a href=&quot;#1-1-什么是Maven&quot;</summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Maven" scheme="http://example.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Javaweb前端速通</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-02-05T12:56:12.000Z</published>
    <updated>2024-02-07T13:12:26.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javaweb前端速通"><a href="#Javaweb前端速通" class="headerlink" title="Javaweb前端速通"></a>Javaweb前端速通</h1><h2 id="1-前端开发介绍"><a href="#1-前端开发介绍" class="headerlink" title="1.前端开发介绍"></a>1.前端开发介绍</h2><p>前端开发，主要的职责就是将数据以好看的样式呈现出来。说白了，就是开发网页程序。</p><h2 id="2-web标准"><a href="#2-web标准" class="headerlink" title="2.web标准"></a>2.web标准</h2><p><strong>Web标准</strong>也称为<strong>网页标准</strong>，由一系列的标准组成，大部分由W3C（ World Wide Web Consortium，万维网联盟）负责制定。由三个组成部分：</p><ul><li><p>HTML：负责网页的结构（页面元素和内容）。</p></li><li><p>CSS：负责网页的表现（页面元素的外观、位置等页面样式，如：颜色、大小等）。</p></li><li><p>JavaScript：负责网页的行为（交互效果）。</p></li></ul><p>随着技术的发展，我们为了更加快速的开发，现在也出现了很多前端开发的高级技术。例如：vue、elementui、Axios等等。</p><h2 id="3-HTML-CSS"><a href="#3-HTML-CSS" class="headerlink" title="3.HTML&amp;CSS"></a>3.HTML&amp;CSS</h2><p><strong>HTML&amp;CSS基本学习同前端知识点总结一文</strong></p><p>**HTML: **HyperText Markup Language，超文本标记语言。</p><ul><li><p>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</p></li><li><p>标记语言：由标签构成的语言</p></li></ul><p><strong>CSS:</strong> Cascading Style Sheet，层叠样式表，用于控制页面的样式（表现）。</p><p><strong>盒子模型</strong>：</p><ul><li>盒子：页面中所有的元素（标签），都可以看做是一个 盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</li><li>盒子模型组成：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）</li></ul><h2 id="4-文档查阅"><a href="#4-文档查阅" class="headerlink" title="4.文档查阅"></a>4.文档查阅</h2><p>文档地址: <a href="https://www.w3school.com.cn/index.html">https://www.w3school.com.cn/index.html</a></p><h2 id="5-JavaScript"><a href="#5-JavaScript" class="headerlink" title="5.JavaScript"></a>5.JavaScript</h2><p>通过<strong>代码&#x2F;js效果演示</strong>提供资料进行效果演示，通过浏览器打开，我们点击主题5按钮，页面的主题发生了变化，所以js可以让我们的页面更加的智能，让页面和用户进行交互。</p><h3 id="5-1-引入方式"><a href="#5-1-引入方式" class="headerlink" title="5.1 引入方式"></a>5.1 引入方式</h3><p><strong>第一种方式：</strong>内部脚本，将JS代码定义在HTML页面中</p><ul><li>JavaScript代码必须位于&lt;script&gt;&lt;&#x2F;script&gt;标签之间</li><li>在HTML文档中，可以在任意地方，放置任意数量的&lt;script&gt;</li><li>一般会把脚本置于&lt;body&gt;元素的底部，可改善显示速度</li></ul><p><strong>第二种方式：</strong>外部脚本将， JS代码定义在外部 JS文件中，然后引入到 HTML页面中</p><ul><li>外部JS文件中，只包含JS代码，不包含&amp;ltscript&gt;标签</li><li>引入外部js的&lt;script&gt;标签，必须是双标签</li></ul><h3 id="5-2-语法"><a href="#5-2-语法" class="headerlink" title="5.2 语法"></a>5.2 语法</h3><p><strong>基础语法：</strong></p><ul><li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的</p></li><li><p>每行结尾的分号可有可无</p></li><li><p>大括号表示代码块</p></li></ul><table><thead><tr><th>api</th><th>描述</th></tr></thead><tbody><tr><td>window.alert()</td><td>警告框</td></tr><tr><td>document.write()</td><td>在HTML 输出内容</td></tr><tr><td>console.log()</td><td>写入浏览器控制台</td></tr></tbody></table><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>var</td><td>早期ECMAScript5中用于变量声明的关键字</td></tr><tr><td>let</td><td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td></tr><tr><td>const</td><td>声明常量的，常量一旦声明，不能修改</td></tr></tbody></table><ul><li>JavaScript 是一门弱类型语言，变量可以存放不同类型的值 。</li><li>变量名需要遵循如下规则：<ul><li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul></li></ul><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>数字（整数、小数、NaN(Not a Number)）</td></tr><tr><td>string</td><td>字符串，单双引皆可</td></tr><tr><td>boolean</td><td>布尔。true，false</td></tr><tr><td>null</td><td>对象为空</td></tr><tr><td>undefined</td><td>当声明的变量未初始化时，该变量的默认值是 undefined</td></tr></tbody></table><table><thead><tr><th>运算规则</th><th>运算符</th></tr></thead><tbody><tr><td>算术运算符</td><td>+ , - , * , &#x2F; , % , ++ , –</td></tr><tr><td>赋值运算符</td><td>&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , %&#x3D;</td></tr><tr><td>比较运算符</td><td>&gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; , !&#x3D; , &#x3D;&#x3D; , &#x3D;&#x3D;&#x3D;   注意     &#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp; , || , !</td></tr><tr><td>三元运算符</td><td>条件表达式 ? true_value: false_value</td></tr></tbody></table><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">函数名</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">参数1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">参数2..</span><span style="color: #89DDFF">)&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">要执行的代码</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>因为JavaScript是弱数据类型的语言，所以有如下几点需要注意：</p><ul><li>形式参数不需要声明类型，并且JavaScript中不管什么类型都是let或者var去声明，加上也没有意义。</li><li>返回值也不需要声明类型，直接return即可</li></ul><p>第二种可以通过let去定义函数的名字，具体格式如下：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> functionName </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">参数1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8">参数2..</span><span style="color: #89DDFF">)&#123;</span><span style="color: #F07178">   </span></span><span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//要执行的代码</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>接下来我们按照上述的格式，修改代码如下：只需要将第一种定义方式注释掉，替换成第二种定义方式即可，函数的调用不变</p><h3 id="5-3-JS对象"><a href="#5-3-JS对象" class="headerlink" title="5.3 JS对象"></a>5.3 JS对象</h3><p><strong>基本对象：Array对象</strong></p><p>Array对象时用来定义数组的。常用语法格式有如下2种：</p><p>方式1：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 变量名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">Array</span><span style="color: #BABED8">(元素列表)</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span></span></code></pre></div><p>方式2：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 变量名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> [ 元素列表 ]</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span></span></code></pre></div><p>与java中不一样的是，JavaScript中数组相当于java中的集合，数组的长度是可以变化的。而且JavaScript是弱数据类型的语言，所以数组中可以存储任意数据类型的值。接下来我们通过代码来演示上述特点。</p><p>属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">设置或返回数组中元素的数量。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th align="left">方法方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">forEach()</td><td align="left">遍历数组中的每个有值得元素，并调用一次传入的函数</td></tr><tr><td align="left">push()</td><td align="left">将新元素添加到数组的末尾，并返回新的长度</td></tr><tr><td align="left">splice()</td><td align="left">从数组中删除元素</td></tr></tbody></table><p><strong>forEach()函数</strong></p><p>首先我们学习forEach()方法，顾名思义，这是用来遍历的，那么遍历做什么事呢？所以这个方法的参数，需要传递一个函数，而且这个函数接受一个参数，就是遍历时数组的值。修改之前的遍历代码如下：</p><p><strong>push()函数</strong></p><p>push()函数是用于向数组的末尾添加元素的，其中函数的参数就是需要添加的元素，编写如下代码：向数组的末尾添加3个元素</p><p><strong>splice()函数</strong></p><p>splice()函数用来数组中的元素，函数中填入2个参数。</p><p>参数1：表示从哪个索引位置删除</p><p>参数2：表示删除元素的个数</p><p><strong>String对象</strong></p><p>String对象的创建方式有2种：</p><p>方式1：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 变量名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">String</span><span style="color: #BABED8">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">…</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8">) </span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//方式一</span></span></code></pre></div><p>方式2：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 变量名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">…</span><span style="color: #89DDFF">&quot;</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> </span><span style="color: #676E95; font-style: italic">//方式二</span></span></code></pre></div><p>String对象也提供了一些常用的属性和方法，如下表格所示：</p><p>属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>字符串的长度。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回在指定位置的字符。</td></tr><tr><td>indexOf()</td><td>检索字符串。</td></tr><tr><td>trim()</td><td>去除字符串两边的空格</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr></tbody></table><ul><li><p><strong>charAt()函数：</strong></p><p>charAt()函数用于返回在指定索引位置的字符，函数的参数就是索引。</p></li><li><p><strong>indexOf()函数：</strong></p><p>indexOf()函数用于检索指定内容在字符串中的索引位置的，返回值是索引，参数是指定的内容。</p></li><li><p><strong>trim()函数：</strong></p><p>trim()函数用于去除字符串两边的空格的。</p></li><li><p><strong>substring()函数：</strong></p><p>substring()函数用于截取字符串的，函数有2个参数。</p><p>参数1：表示从那个索引位置开始截取。包含</p><p>参数2：表示到那个索引位置结束。不包含</p></li></ul><p><strong>JSON对象</strong></p><p>在 JavaScript 中自定义对象特别简单，其语法格式如下：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #BABED8"> 对象名 </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">属性名1</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> 属性值1</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">属性名2</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> 属性值2</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #F07178">属性名3</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> 属性值3</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #82AAFF">函数名称</span><span style="color: #89DDFF">:</span><span style="color: #BABED8"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #BABED8; font-style: italic">形参列表</span><span style="color: #89DDFF">)&#123;&#125;</span></span><span class="line"><span style="color: #89DDFF">&#125;;</span></span><span class="line"></span></code></pre></div><p>我们可以通过如下语法调用属性：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">对象名</span><span style="color: #89DDFF">.</span><span style="color: #BABED8">属性名</span></span></code></pre></div><p>通过如下语法调用函数：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #BABED8">对象名</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">函数名</span><span style="color: #BABED8">()</span></span></code></pre></div><p>JSON对象：<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript对象标记法。是通过JavaScript标记法书写的文本。其格式如下：</p><div class="language-js"><button title="Copy code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">key</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">:</span><span style="color: #BABED8">value</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">key</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">:</span><span style="color: #BABED8">value</span><span style="color: #89DDFF">,</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">key</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">:</span><span style="color: #BABED8">value</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>其中，<strong>key必须使用引号并且是双引号标记，value可以是任意数据类型。</strong></p><p>那么json这种数据格式的文本到底应用在企业开发的什么地方呢？– 经常用来作为前后台交互的数据载体</p><p>前后台交互时，我们需要传输数据，但是java中的对象我们该怎么去描述呢？我们可以使用如图所示的xml格式，可以清晰的描述java中需要传递给前端的java对象。</p><p>但是xml格式存在如下问题：</p><ul><li>标签需要编写双份，占用带宽，浪费资源</li><li>解析繁琐</li></ul><p>所以我们可以使用json来替代。</p><p><strong>BOM对象</strong></p><p>BOM的全称是Browser Object Model,翻译过来是浏览器对象模型。也就是JavaScript将浏览器的各个组成部分封装成了对象。我们要操作浏览器的部分功能，可以通过操作BOM对象的相关属性或者函数来完成。</p><p>BOM中提供了如下5个对象：</p><table><thead><tr><th align="left">对象名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Window</td><td align="left">浏览器窗口对象</td></tr><tr><td align="left">Navigator</td><td align="left">浏览器对象</td></tr><tr><td align="left">Screen</td><td align="left">屏幕对象</td></tr><tr><td align="left">History</td><td align="left">历史记录对象</td></tr><tr><td align="left">Location</td><td align="left">d地址栏对象</td></tr></tbody></table><p><strong>1.Window对象</strong> </p><p>window对象指的是浏览器窗口对象，是JavaScript的全部对象，所以对于window对象，我们可以直接使用，并且对于window对象的方法和属性，我们可以省略window.</p><p>window对象提供了获取其他BOM对象的属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>history</td><td>用于获取history对象</td></tr><tr><td>location</td><td>用于获取location对象</td></tr><tr><td>Navigator</td><td>用于获取Navigator对象</td></tr><tr><td>Screen</td><td>用于获取Screen对象</td></tr></tbody></table><p>window也提供了一些常用的函数，如下表格所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>alert()</td><td>显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td>comfirm()</td><td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr></tbody></table><p>setInterval(fn,毫秒值)：定时器，用于周期性的执行某个功能，并且是<strong>循环执行</strong>。该函数需要传递2个参数：</p><p>fn:函数，需要周期性执行的功能代码</p><p>毫秒值：间隔时间</p><p>setTimeout(fn,毫秒值) ：定时器，只会在一段时间后<strong>执行一次功能</strong>。参数和上述setInterval一致</p><p><strong>2.Location对象</strong></p><p>location是指代浏览器的地址栏对象，对于这个对象，我们常用的是href属性，用于获取或者设置浏览器的地址信息。</p><p><strong>DOM对象</strong></p><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。</p><p>DOM 其实我们并不陌生，之前在学习 XML 就接触过，只不过 XML 文档中的标签需要我们写代码解析，而 HTML 文档是浏览器解析。封装的对象分为</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><p>那么我们学习DOM技术有什么用呢？主要作用如下：</p><ul><li>改变 HTML 元素的内容</li><li>改变 HTML 元素的样式（CSS）</li><li>对 HTML DOM 事件作出反应</li><li>添加和删除 HTML 元素</li></ul><p>HTML中的Element对象可以通过Document对象获取，而Document对象是通过window对象获取的。document对象提供的用于获取Element元素对象的api如下表所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>根据id属性值获取，返回单个Element对象</td></tr><tr><td>document.getElementsByTagName()</td><td>根据标签名称获取，返回Element对象数组</td></tr><tr><td>document.getElementsByName()</td><td>根据name属性值获取，返回Element对象数组</td></tr><tr><td>document.getElementsByClassName()</td><td>根据class属性值获取，返回Element对象数组</td></tr></tbody></table><h3 id="5-4-JS对象"><a href="#5-4-JS对象" class="headerlink" title="5.4 JS对象"></a>5.4 JS对象</h3><p>什么是事件呢？HTML事件是发生在HTML元素上的 “事情”，例如：</p><ul><li>按钮被点击</li><li>鼠标移到元素上</li><li>输入框失去焦点</li><li>……..</li></ul><p><strong>事件绑定</strong> </p><p>JavaScript对于事件的绑定提供了2种方式：</p><ul><li><p>方式1：通过html标签中的事件属性进行绑定</p><p>例如一个按钮，我们对于按钮可以绑定单机事件，可以借助标签的onclick属性，属性值指向一个函数。</p></li><li><p>方式2：通过DOM中Element元素的事件属性进行绑定</p><p>依据我们学习过得DOM的知识点，我们知道html中的标签被加载成element对象，所以我们也可以通过element对象的属性来操作标签的属性。</p></li></ul><p><strong>需要注意的是：事件绑定的函数，只有在事件被触发时，函数才会被调用。</strong></p><p><strong>常见事件</strong></p><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table><h2 id="6-Vue"><a href="#6-Vue" class="headerlink" title="6. Vue"></a>6. Vue</h2><p>一个完整的html页面包括了视图和数据，数据是通过请求 从后台获取的，那么意味着我们需要将后台获取到的数据呈现到页面上，很明显， 这就需要我们使用DOM操作。正因为这种开发流程，所以我们引入了一种叫做<strong>MVVM(Model-View-ViewModel)的前端开发思想</strong>，即让我们开发者更加关注数据，而非数据绑定到视图这种机械化的操作。</p><p>MVVM:其实是Model-View-ViewModel的缩写，有3个单词，具体释义如下：</p><ul><li>Model: 数据模型，特指前端中通过请求从后台获取的数据</li><li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据</li><li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上</li></ul><p>Vue.js（读音 &#x2F;vjuː&#x2F;, 类似于 <strong>view</strong>） 是一套构建用户界面的 <strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。Vue.js 的目标是通过尽可能简单的 API 实现<strong>响应的数据绑定</strong>和<strong>组合的视图组件</strong>。</p><p>框架即是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。基于框架进行开发，更加快捷、更加高效。</p><p>在创建vue对象时，有几个常用的属性：</p><ul><li>el:  用来指定哪儿些标签受 Vue 管理。 该属性取值 <code>#app</code> 中的 <code>app</code> 需要是受管理的标签的id属性值</li><li>data: 用来定义数据模型</li><li>methods: 用来定义函数。这个我们在后面就会用到</li></ul><h3 id="6-1-常用指令"><a href="#6-1-常用指令" class="headerlink" title="6.1 常用指令"></a>6.1 常用指令</h3><p>在vue中，通过大量的指令来实现数据绑定到视图的，所以接下来我们需要学习vue的常用指令，如下表所示：</p><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置  href , css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td>v-else</td><td></td></tr><tr><td>v-else-if</td><td></td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><p>v-bind:  为HTML标签绑定属性值，如设置  href , css样式等。当vue对象中的数据模型发生变化时，标签的属性值会随之发生变化。</p><p>v-model： 在表单元素上创建双向数据绑定。什么是双向？</p><ul><li>vue对象的data属性中的数据变化，视图展示会一起变化</li><li>视图数据发生变化，vue对象的data属性中的数据也会随着变化。</li></ul><p><strong>双向绑定的作用：可以获取表单的数据的值，然后提交给服务器</strong></p><p>v-on: 用来给html标签绑定事件的。<strong>需要注意的是如下2点</strong>：</p><ul><li>v-on语法给标签的事件绑定的函数，必须是vue对象种声明的函数</li><li>v-on语法绑定事件时，事件名相比较js中的事件名，没有on</li></ul><h3 id="6-2-生命周期"><a href="#6-2-生命周期" class="headerlink" title="6.2 生命周期"></a>6.2 生命周期</h3><p>vue的生命周期：指的是vue对象从创建到销毁的过程。vue的生命周期包含8个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也被称为钩子方法。其完整的生命周期如下图所示：</p><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><p>mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。<strong>以后我们一般用于页面初始化自动的ajax请求后台数据</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Javaweb前端速通&quot;&gt;&lt;a href=&quot;#Javaweb前端速通&quot; class=&quot;headerlink&quot; title=&quot;Javaweb前端速通&quot;&gt;&lt;/a&gt;Javaweb前端速通&lt;/h1&gt;&lt;h2 id=&quot;1-前端开发介绍&quot;&gt;&lt;a href=&quot;#1-前端开发介绍&quot;</summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>算法性能分析</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-01-28T14:25:12.000Z</published>
    <updated>2024-02-05T12:56:48.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1.时间复杂度"></a>1.时间复杂度</h2><h3 id="1-1-什么是时间复杂度"><a href="#1-1-什么是时间复杂度" class="headerlink" title="1.1 什么是时间复杂度"></a>1.1 什么是时间复杂度</h3><p><strong>时间复杂度是一个函数，它定性描述该算法的运行时间</strong>。</p><p>通常会估算算法的操作单元数量来代表程序消耗的时间，这里默认CPU的每个单元运行消耗的时间都是相同的。假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))。</p><h3 id="1-2-什么是大O"><a href="#1-2-什么是大O" class="headerlink" title="1.2 什么是大O"></a>1.2 什么是大O</h3><p>算法导论给出的解释：<strong>大O用来表示上界的</strong>，当用它作为算法的最坏情况运行时间的上界，就是对任意数据输入的运行时间的上界。</p><p>快速排序是O(nlogn)，但是当数据已经有序情况下，快速排序的时间复杂度是O(n^2) 的，**所以严格从大O的定义来讲，快速排序的时间复杂度应该是O(n^2)**。</p><p><strong>但是我们依然说快速排序是O(nlogn)的时间复杂度，这个就是业内的一个默认规定，这里说的O代表的就是一般情况，而不是严格的上界</strong>。</p><h3 id="1-3-不同数据规模的差异"><a href="#1-3-不同数据规模的差异" class="headerlink" title="1.3 不同数据规模的差异"></a>1.3 不同数据规模的差异</h3><p><strong>大O就是数据量级突破一个点且数据量级非常大的情况下所表现出的时间复杂度，这个数据量也就是常数项系数已经不起决定性作用的数据量</strong>。</p><p><strong>我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示</strong>：</p><p>O(1)常数阶 &lt; O(logn)对数阶 &lt; O(n)线性阶 &lt; O(nlogn)线性对数阶 &lt; O(n^2)平方阶 &lt; O(n^3)立方阶 &lt; O(2^n)指数阶</p><h3 id="1-4-例子"><a href="#1-4-例子" class="headerlink" title="1.4 例子"></a>1.4 例子</h3><p>题目描述：找出n个字符串中相同的两个字符串（假设这里只有两个相同的字符串）。</p><p>1）可能会忽略了字符串比较的时间消耗，这里并不像int 型数字做比较那么简单，除了n^2 次的遍历次数外，字符串比较依然要消耗m次操作（m也就是字母串的长度），所以时间复杂度是O(m × n × n)。</p><p>2）先排对n个字符串按字典序来排序，排序后n个字符串就是有序的，意味着两个相同的字符串就是挨在一起，然后在遍历一遍n个字符串，这样就找到两个相同的字符串了。</p><p>那看看这种算法的时间复杂度，快速排序时间复杂度为O(nlogn)，依然要考虑字符串的长度是m，那么快速排序每次的比较都要有m次的字符比较的操作，就是O(m × n × log n) 。</p><p>之后还要遍历一遍这n个字符串找出两个相同的字符串，别忘了遍历的时候依然要比较字符串，所以总共的时间复杂度是 O(m × n × logn + n × m)。</p><p>我们对O(m × n × log n + n × m) 进行简化操作，把m × n提取出来变成 O(m × n × (logn + 1))，再省略常数项最后的时间复杂度是 O(m × n × log n)。</p><p>ps：例子仅用于讲解示范时间复杂度。</p><h2 id="2-算法为什么会超时"><a href="#2-算法为什么会超时" class="headerlink" title="2.算法为什么会超时"></a>2.算法为什么会超时</h2><h3 id="2-1-超时怎么来"><a href="#2-1-超时怎么来" class="headerlink" title="2.1 超时怎么来"></a>2.1 超时怎么来</h3><p>程序运行的时间超过了规定的时间，一般OJ（online judge）的超时时间就是1s，也就是用例数据输入后最多要1s内得到结果，暂时还不清楚leetcode的判题规则，下文为了方便讲解，暂定超时时间就是1s。</p><p>如果写出了一个$O(n)$的算法 ，其实可以估算出来n是多大的时候算法的执行时间就会超过1s了。</p><p>如果n的规模已经足够让$O(n)$的算法运行时间超过了1s，就应该考虑log(n)的解法了。</p><h2 id="3-递归算法的时间复杂度"><a href="#3-递归算法的时间复杂度" class="headerlink" title="3.递归算法的时间复杂度"></a>3.递归算法的时间复杂度</h2><p>面试题：求x的n次方</p><p>最直观的方式应该就是，一个for循环求出结果，代码如下：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function1</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">n</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> result </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic">  // 注意 任何数的0次方等于1</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> n</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">        result </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> result </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> result</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>时间复杂度为O(n)，此时面试官会说，有没有效率更好的算法呢。</p><p><strong>如果此时没有思路，不要说：我不会，我不知道了等等</strong>。</p><p>可以和面试官探讨一下，询问：“可不可以给点提示”。面试官提示：“考虑一下递归算法”。</p><p>那么就可以写出了如下这样的一个递归的算法，使用递归解决了这个问题。</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function2</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">n</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #676E95; font-style: italic"> // return 1 同样是因为0次方是等于1的</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function2</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> n </span><span style="color: #89DDFF">-</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>一些同学可能一看到递归就想到了O(log n)，其实并不是这样，递归算法的时间复杂度本质上是要看: <strong>递归的次数 * 每次递归中的操作次数</strong>。</p><p>每次n-1，递归了n次时间复杂度是O(n)，每次进行了一个乘法操作，乘法操作的时间复杂度一个常数项O(1)，所以这份代码的时间复杂度是 n × 1 &#x3D; O(n)。</p><p>这个时间复杂度就没有达到面试官的预期。于是又写出了如下的递归算法的代码：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">n</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> x</span><span style="color: #89DDFF">;</span></span><span class="line"></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">%</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #F07178">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> n </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #F07178">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> n </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">)*</span><span style="color: #F07178">x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> n </span><span style="color: #89DDFF">/</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function3</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> n </span><span style="color: #89DDFF">/</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>**时间复杂度忽略掉常数项<code>-1</code>之后，这个递归算法的时间复杂度依然是O(n)**。对，你没看错，依然是O(n)的时间复杂度！</p><p>于是又写出如下递归算法的代码：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function4</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> </span><span style="color: #BABED8; font-style: italic">n</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #C792EA">int</span><span style="color: #BABED8"> t </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #82AAFF">function4</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">x</span><span style="color: #89DDFF">,</span><span style="color: #BABED8"> n </span><span style="color: #89DDFF">/</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">);</span><span style="color: #676E95; font-style: italic">// 这里相对于function3，是把这个递归操作抽取出来</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n </span><span style="color: #89DDFF">%</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">2</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">==</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> t </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> t </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> x</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></span><span class="line"><span style="color: #BABED8">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #BABED8"> t </span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> t</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>依然还是看他递归了多少次，可以看到这里仅仅有一个递归调用，且每次都是n&#x2F;2 ，所以这里我们一共调用了log以2为底n的对数次。</p><p>**每次递归了做都是一次乘法操作，这也是一个常数项的操作，那么这个递归算法的时间复杂度才是真正的O(logn)**。</p><h2 id="4-空间复杂度分析"><a href="#4-空间复杂度分析" class="headerlink" title="4.空间复杂度分析"></a>4.空间复杂度分析</h2><h3 id="4-1-什么是空间复杂度"><a href="#4-1-什么是空间复杂度" class="headerlink" title="4.1 什么是空间复杂度"></a>4.1 什么是空间复杂度</h3><p>是对一个算法在运行过程中占用内存空间大小的量度，记做S(n)&#x3D;O(f(n)。</p><p>空间复杂度(Space Complexity)记作S(n) 依然使用大O来表示。利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。</p><p>关注空间复杂度有两个常见的相关问题</p><p>空间复杂度是考虑程序（可执行文件）的大小么？</p><p><strong>空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。</strong></p><p>空间复杂度是准确算出程序运行时所占用的内存么？</p><p>不要以为空间复杂度就已经精准的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。</p><p>所以空间复杂度是预先大体评估程序内存使用的大小。</p><p>说到空间复杂度，我想同学们在OJ（online judge）上应该遇到过这种错误，就是超出内存限制，一般OJ对程序运行时的所消耗的内存都有一个限制。</p><p>为了避免内存超出限制，这也需要我们对算法占用多大的内存有一个大体的预估。</p><p>同样在工程实践中，计算机的内存空间也不是无限的，需要工程师对软件运行时所使用的内存有一个大体评估，这都需要用到算法空间复杂度的分析。</p><h3 id="4-2-例子"><a href="#4-2-例子" class="headerlink" title="4.2 例子"></a>4.2 例子</h3><p>什么时候的空间复杂度是$O(1)$呢，C++代码如下：</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #BABED8"> j </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> n</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    j</span><span style="color: #89DDFF">++;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>第一段代码可以看出，随着n的变化，所需开辟的内存空间并不会随着n的变化而变化。即此算法空间复杂度为一个常量，所以表示为大O(1)。</p><p>什么时候的空间复杂度是O(n)？</p><p>当消耗空间和输入参数n保持线性增长，这样的空间复杂度为O(n)，来看一下这段C++代码</p><div class="language-cpp"><button title="Copy code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C792EA">int</span><span style="color: #89DDFF">*</span><span style="color: #BABED8"> a </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">new</span><span style="color: #BABED8"> </span><span style="color: #C792EA">int</span><span style="color: #89DDFF">(</span><span style="color: #BABED8">n</span><span style="color: #89DDFF">);</span></span><span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">(</span><span style="color: #C792EA">int</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">=</span><span style="color: #BABED8"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #BABED8"> n</span><span style="color: #89DDFF">;</span><span style="color: #BABED8"> i</span><span style="color: #89DDFF">++)</span><span style="color: #BABED8"> </span><span style="color: #89DDFF">&#123;</span></span><span class="line"><span style="color: #F07178">    </span><span style="color: #BABED8">a</span><span style="color: #89DDFF">[</span><span style="color: #F07178">i</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> i</span><span style="color: #89DDFF">;</span></span><span class="line"><span style="color: #89DDFF">&#125;</span></span></code></pre></div><p>我们定义了一个数组出来，这个数组占用的大小为n，虽然有一个for循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，随着n的增大，开辟的内存大小呈线性增长，即 O(n)。</p><h2 id="5-代码内存消耗"><a href="#5-代码内存消耗" class="headerlink" title="5.代码内存消耗"></a>5.代码内存消耗</h2><h3 id="5-1-不同语言的内存管理"><a href="#5-1-不同语言的内存管理" class="headerlink" title="5.1 不同语言的内存管理"></a>5.1 不同语言的内存管理</h3><p>不同的编程语言各自的内存管理方式。</p><ul><li>C&#x2F;C++这种内存堆空间的申请和释放完全靠自己管理</li><li>Java 依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出</li><li>Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有堆空间中。程序员没有访问堆的权限，只有解释器才能操作。</li></ul><p>例如Python万物皆对象，并且将内存操作封装的很好，<strong>所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存</strong>，例如，我们都知道存储int型数据需要四个字节，但是使用Python 申请一个对象来存放数据的话，所用空间要远大于四个字节。</p><h3 id="5-2-内存对齐"><a href="#5-2-内存对齐" class="headerlink" title="5.2 内存对齐"></a>5.2 内存对齐</h3><p>再介绍一下内存管理中另一个重要的知识点：<strong>内存对齐</strong>。</p><p><strong>不要以为只有C&#x2F;C++才会有内存对齐，只要可以跨平台的编程语言都需要做内存对齐，Java、Python都是一样的</strong>。</p><p>而且这是面试中面试官非常喜欢问到的问题，就是：<strong>为什么会有内存对齐？</strong></p><p>主要是两个原因</p><ol><li>平台原因：不是所有的硬件平台都能访问任意内存地址上的任意数据，某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。为了同一个程序可以在多平台运行，需要内存对齐。</li><li>硬件原因：经过内存对齐后，CPU访问内存的速度大大提升。</li></ol><p>参考学习自<a href="https://programmercarl.com/">代码随想录</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-时间复杂度&quot;&gt;&lt;a href=&quot;#1-时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;1.时间复杂度&quot;&gt;&lt;/a&gt;1.时间复杂度&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是时间复杂度&quot;&gt;&lt;a href=&quot;#1-1-什么是时间复杂度&quot; class=&quot;</summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+gitee博客搭建流程</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-01-25T09:42:12.000Z</published>
    <updated>2024-01-28T11:20:59.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本博客只是讲述安装流程，并不是纯面向小白的安装教程，在b站上有许多hexo的安装教程视频，可以参考b站教程进行安装。Hexo可以算是入门门槛最低的一种博客搭建手段了。这篇博客只是防止我以后忘记安装流程而编写，安装如遇到问题可以wx交流一下，不保证能解决。搭建环境开发项目是一件需要耐心的事情，可能会遇到各种各样的问题，要学会灵活网络搜索，你遇到的问题基本上都能解决，保持耐心，说不定马上你的问题就迎刃而解了。</p><hr><h2 id="1-node-js的安装和环境配置"><a href="#1-node-js的安装和环境配置" class="headerlink" title="1.node js的安装和环境配置"></a>1.node js的安装和环境配置</h2><p>（由Ryan Dahl开发，是一个基于<a href="https://baike.baidu.com/item/chrome">Chrome</a><a href="https://baike.baidu.com/item/v8">V8</a>引擎的<a href="https://baike.baidu.com/item/JavaScript/321142">JavaScript</a>运行环境，</p><p>使用了一个事件驱动、非阻塞式I&#x2F;O模型，让JavaScript 运行在服务端的开发平台，</p><p>它让JavaScript成为与<a href="https://baike.baidu.com/item/php">PHP</a>、<a href="https://baike.baidu.com/item/Python">Python</a>、<a href="https://baike.baidu.com/item/perl">Perl</a>、<a href="https://baike.baidu.com/item/Ruby">Ruby</a>等服务端语言平起平坐的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a></p><details><summary><font size="5"><b>node 安装过程截图</b></font></summary><img src="/posts/0/node.jpg"><img src="/posts/0/node2.png"><img src="/posts/0/node5-1.jpg"> </details><p><strong>安装可以无脑下一步</strong>，注意安装路径就行，不会有问题，如果不放心的话可以参考原文章的安装过程截图，有详细步骤，由于本文篇幅较长，这里就不再转载了。</p><h3 id="1-1-测试是否安装成功"><a href="#1-1-测试是否安装成功" class="headerlink" title="1.1 测试是否安装成功"></a>1.1 测试是否安装成功</h3><p><code>node -v</code></p><p><code>npm -v</code></p><p><strong>成功截图如下</strong>：<img src="/posts/0/node&npm.png" alt="1"></p><p>解决npm查询不到版本号，方法一：<a href="https://past-taleggio-288.notion.site/node-24b6cf34d5c24186b7ef1ea7028b7fda">https://past-taleggio-288.notion.site/node-24b6cf34d5c24186b7ef1ea7028b7fda</a></p><h3 id="1-2-配置环境变量"><a href="#1-2-配置环境变量" class="headerlink" title="1.2 配置环境变量"></a>1.2 配置环境变量</h3><details><summary><font size="5"><b>详细截图</b></font></summary>在刚才安装nodejs的根目录下，创建node_global，node_cache文件夹<br><img src="/posts/0/node_deploy1.png"><br>以管理员身份打开cmd，配置路径<br><p>`npm config set prefix "E:\develop\nodejs\node_global"`</p><p>`npm config set cache "E:\develop\nodejs\node_cache"`</p>修改全局路径 node_global, 修改缓存路径 node_cache<br><b>内路径需要根据自己实际情况来进行修改</b><br><b>修改全局安装路径后，需要在系统环境变量Path中添加该路径，否则之后使用npm install –global xxx，xxx都报错找不到命令。</b><br> 找到电脑环境配置 <br> win10和win11：右键此电脑-属性-高级系统设置-高级-环境变量<br>win11 还可以：点设置-系统-关于-高级系统设置-高级-环境变量<br><img src="/posts/0/environment1.png"><br>完成以上操作后，在用户变量中创建NODE_PATH变量，变量值为node_modeules路径地址<img src="/posts/0/environment2.png"><br>在系统变量中选择Path添加如下属性：<img src="/posts/0/environment3.png"><br></details><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><h3 id="2-1-下载git"><a href="#2-1-下载git" class="headerlink" title="2.1 下载git"></a>2.1 下载git</h3><p>官网<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>找到首页下方的Downloads</p><p>下载对应系统（MAC、Windows、Linux&#x2F;Unix）安装包</p><p><img src="/posts/0/git_downloads.png" alt="git_downloads"></p><h3 id="2-2-安装git"><a href="#2-2-安装git" class="headerlink" title="2.2 安装git"></a>2.2 安装git</h3><details><summary><font size="5"><b>安装git过程</b></font></summary><img src="/posts/0/{51D5EE5D-49F2-4151-80CB-A2581ED1DED3}.png"><br><img src="/posts/0/{C6E6D133-E25A-4e1e-B095-62B66BC1D994}.png"><br><img src="/posts/0/{C9094AA4-D4AB-42a3-BBFB-B54D3D1DE21F}.png"><br><img src="/posts/0/{B5212BB6-71B9-44e8-AC17-245DE8ED861C}.png"><br><img src="/posts/0/{EBE09308-C1B5-4093-A1B9-9141192F04E3}.png"><br><img src="/posts/0/{CE53F588-61C3-48a3-84A6-4FA58C5361C1}.png"><br></details><h2 id="3-hexo下载"><a href="#3-hexo下载" class="headerlink" title="3.hexo下载"></a>3.hexo下载</h2><p><code>npm install hexo-cli -g #安装hexo</code></p><h2 id="4-检查已安装各框架的版本"><a href="#4-检查已安装各框架的版本" class="headerlink" title="4.检查已安装各框架的版本"></a>4.检查已安装各框架的版本</h2><p><strong>git</strong>：</p><p><code>git --version</code></p><p><strong>hexo</strong>:</p><p><code>hexo -v</code></p><p><strong>安装成功效果</strong></p><p><img src="/posts/0/edition.jpg" alt="edition"></p><h2 id="5-创建仓库及配置SSH连接"><a href="#5-创建仓库及配置SSH连接" class="headerlink" title="5.创建仓库及配置SSH连接"></a>5.创建仓库及配置SSH连接</h2><h3 id="5-1-创建gitee仓库（github同理）"><a href="#5-1-创建gitee仓库（github同理）" class="headerlink" title="5.1  创建gitee仓库（github同理）"></a>5.1  创建gitee仓库（github同理）</h3><p>利用gitee仓库，存放静态网站资源，达到挂载网站的目的</p><p><img src="/posts/0/%7B203AB318-6AE2-47b6-B9BC-95E6688E139E%7D.png" alt="{203AB318-6AE2-47b6-B9BC-95E6688E139E}"></p><p>需要注意的是作为网站访问的这个仓库，仓库名称一定是，<strong>拥有者名+gitee.io</strong></p><h3 id="5-2-生成ssh-keys"><a href="#5-2-生成ssh-keys" class="headerlink" title="5.2  生成ssh keys"></a>5.2  生成ssh keys</h3><p>在博客文件夹根目录下，右键，调用<strong>git bash here</strong>功能</p><p><img src="/posts/0/ssh-1.png" alt="ssh-1"></p><p>先输入<code>ssh</code><br>查看是否已经安装<code>ssh</code>，git默认有安装</p><p>本地生成<strong>ssh keys</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span></span></code></pre></div><p><img src="/posts/0/ssh-2.png" alt="ssh-2"></p><p><strong>在本地电脑中找到.ssh文件夹</strong></p><p><img src="/posts/0/ssh-3.png" alt="ssh-3"></p><p>一般默认都是，C:\Users\用户名.ssh.pub文件</p><p>找到秘钥的位置，并用记事本打开**.pub文件**，复制其内容 (<code>ctrl+a</code>全选，<code>ctrl+c</code>复制，<code>ctrl+v</code>粘贴)</p><p>打开gitee，头像下拉选项设置，找到SSH公钥（新建ssh秘钥）</p><p><img src="/posts/0/%7BC3E82722-4B79-4d2f-9D53-3C5009A8F337%7D.png" alt="{C3E82722-4B79-4d2f-9D53-3C5009A8F337}"></p><p>把在本地生成的秘钥内容粘贴至此秘钥处，标题可以随便取。</p><p>测试ssh是否绑定成功（在git里操作）</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">ssh -T git@gitee.com</span></span></code></pre></div><p><img src="/posts/0/ssh-6.png" alt="ssh-6"></p><p>如果问你（yes or no），直接yes就可以得到上面这段话</p><h2 id="6-搭建本地博客"><a href="#6-搭建本地博客" class="headerlink" title="6.搭建本地博客"></a>6.搭建本地博客</h2><p>创建一个放置博客文件夹的文件，在里面启用<strong>Git Bash Here</strong></p><p><img src="/posts/0/hexo-1.png" alt="hexo-1"></p><p><strong>初始化hexo</strong></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo init</span></span></code></pre></div><p><img src="/posts/0/hexo-2.png" alt="hexo-2"></p><ul><li><strong>生成hexo本地页面</strong></li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo s</span></span></code></pre></div><p><img src="/posts/0/hexo-3.png" alt="hexo-3"></p><ul><li><strong>复制粘贴该地址到浏览器中，即可访问本地搭建的博客</strong> <a href="http://localhost:4000/">http://localhost:4000</a></li></ul><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo cl #clean #清理编译文件</span></span><span class="line"><span style="color: #babed8">hexo g #generate #编译项目</span></span><span class="line"><span style="color: #babed8">hexo s #server #本地预览运行项目</span></span></code></pre></div><h2 id="7-上传本地博客至gitee"><a href="#7-上传本地博客至gitee" class="headerlink" title="7.上传本地博客至gitee"></a>7.上传本地博客至gitee</h2><h3 id="7-1-修改配置文件"><a href="#7-1-修改配置文件" class="headerlink" title="7.1 修改配置文件"></a>7.1 修改配置文件</h3><p>在创建博客文件夹的根目录下修改-config.yml文件</p><p><img src="/posts/0/yml-1.png" alt="yml-1"></p><p><img src="/posts/0/yml-2.png" alt="yml-2"></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">deploy:  </span></span><span class="line"><span style="color: #babed8">   type: git  </span></span><span class="line"><span style="color: #babed8">   repository: 你的gitee地址  </span></span><span class="line"><span style="color: #babed8">   branch: main</span></span></code></pre></div><h3 id="7-2-安装hexo-deployer-git-自动部署发布工具"><a href="#7-2-安装hexo-deployer-git-自动部署发布工具" class="headerlink" title="7.2 安装hexo-deployer-git 自动部署发布工具"></a>7.2 安装hexo-deployer-git 自动部署发布工具</h3><p><img src="/posts/0/hexo-d-1.png" alt="hexo-d-1"></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">npm install hexo-deployer-git --save</span></span></code></pre></div><h3 id="7-3-编译文件生成界面"><a href="#7-3-编译文件生成界面" class="headerlink" title="7.3  编译文件生成界面"></a>7.3  编译文件生成界面</h3><p><img src="/posts/0/%7B6A46E6F6-29CC-40da-99D8-8196376EA195%7D.png" alt="{6A46E6F6-29CC-40da-99D8-8196376EA195}"></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo g</span></span></code></pre></div><h3 id="7-4-本地文件上传到Gitee"><a href="#7-4-本地文件上传到Gitee" class="headerlink" title="7.4  本地文件上传到Gitee"></a>7.4  本地文件上传到Gitee</h3><p><img src="/posts/0/hexo-d-2.png" alt="hexo-d-2"></p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo d</span></span></code></pre></div><p>成功后</p><p><img src="/posts/0/ok-1.bmp" alt="ok-1"></p><p>可以直接访问仓库名如:</p><p> <a href="https://xxx.gitee.io/">https://xxx.gitee.io</a></p><p><img src="/posts/0/ok-2.png" alt="ok-2"></p><p>出现如图画面，恭喜你完成了hexo的博客搭建。</p><h2 id="8-安装Aurora主题"><a href="#8-安装Aurora主题" class="headerlink" title="8.安装Aurora主题"></a>8.安装Aurora主题</h2><p><strong>本步骤非必须，可以在<a href="https://hexo.io/">hexo的官方网站</a>寻找自己喜欢的主题进行安装，安装流程大致相似，每个主题也可能有自己独特的地方需要设置，具体参照对应主题自己的官方文档进行参考</strong></p><p>Aurora官方文档参考：<a href="https://aurora.tridiamond.tech/zh/guide">https://aurora.tridiamond.tech/zh/guide</a></p><p>建议直接参照官方文档进行设置，官方文档更加详细。</p><h3 id="8-1-配置"><a href="#8-1-配置" class="headerlink" title="8.1  配置"></a>8.1  配置</h3><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">npm install hexo-theme-aurora --save #进入hexo初始化目录用git执行</span></span></code></pre></div><p><img src="/posts/0/aurora-1.png" alt="aurora-1"></p><p>安装好之后，我们需要自己创建一个配置文件。</p><p>我们可以到 node_modules文件夹 下找到 hexo-theme-aurora文件夹。</p><p>里面将_config.yml 复制一份 F2 重命名为_config.aurora.yml</p><p><img src="/posts/0/aurora-01.png" alt="aurora-01"></p><p>然后将 _config.aurora.yml 移动到你的博客根目录下</p><p><img src="/posts/0/%7B206D60BF-F48A-4004-B24E-34464E0254DE%7D.png" alt="{206D60BF-F48A-4004-B24E-34464E0254DE}"></p><h3 id="8-2-修改配置"><a href="#8-2-修改配置" class="headerlink" title="8.2 修改配置"></a>8.2 修改配置</h3><p>打开_comfig.yml</p><p>由默认主题改为<strong>Aurora</strong></p><p><img src="/posts/0/aurora-4.png" alt="aurora-4"></p><p>由于Aurora是vue3项目</p><p>打开根目录下的_config.yml</p><p>修改路由方式</p><p><img src="/posts/0/aurora-5.png" alt="aurora-5"></p><p>运行</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo clean &amp; hexo g &amp; hexo server</span></span></code></pre></div><p>我的习惯是分开来：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo cl</span></span><span class="line"><span style="color: #babed8">hexo g</span></span><span class="line"><span style="color: #babed8">hexo s</span></span></code></pre></div><p><img src="/posts/0/aurora-6.png" alt="aurora-6"></p><h3 id="8-3-上传并覆盖gitee仓库"><a href="#8-3-上传并覆盖gitee仓库" class="headerlink" title="8.3 上传并覆盖gitee仓库"></a>8.3 上传并覆盖gitee仓库</h3><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo d</span></span></code></pre></div><p>可以使用</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">hexo s</span></span></code></pre></div><p>进行本地预览</p><p>打开你的Gitee网页地址，比如<a href="https://orangefish-cyc.gitee.io/">本博客</a>主题配置成功</p><h2 id="9-博客参考"><a href="#9-博客参考" class="headerlink" title="9.博客参考"></a>9.博客参考</h2><p>[搭建博客-图文教程-Luiyang](<a href="https://luiyang08.github.io/post/Build">https://luiyang08.github.io/post/Build</a> Blog)</p><p><a href="https://blog.sxlz.org/post/hexo-aurora-github%E6%90%AD%E5%BB%BA">hexo+aurora+github搭建-叁鄉浪子</a></p><p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p><p><a href="https://aurora.tridiamond.tech/cn/guide/getting-started.html">Aurora官方文档</a></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>搭建完成后的文章编写也会有许多的问题，后续有空再写一下关于文章编写的问题吧，以及一些aurora主题的各种自定义样式修改例如网站图标，个人头像，文章头图等，各类组件的开关安装，编写博客实在需要很多时间，可以网上搜索参考官方文档和他人的教程，这些问题都能得到解决，最重要的是有坚持不懈的心。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本博客只是讲述安装流程，并不是纯面向小白的安装教程，在b站上有许多hexo的安装教程视频，可以参考b站教程进行安装。Hexo</summary>
      
    
    
    
    <category term="Blog" scheme="http://example.com/categories/Blog/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="博客搭建" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>SCAU2023CSAPP期末知识点总结</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2024-01-02T05:28:12.000Z</published>
    <updated>2024-02-04T07:12:47.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSAPP知识点"><a href="#CSAPP知识点" class="headerlink" title="CSAPP知识点"></a>CSAPP知识点</h2><ol><li><p>进制数转换：十进制转二进制、二进制转十进制、十进制转十六进制、十六进制转十进制、二进制转十六进制、十六进制转二进制。</p></li><li><p>布尔运算：&amp;与（0&amp;0&#x3D;0 0&amp;1&#x3D;0 1&amp;1&#x3D;1） |或（0|0&#x3D;0 0|1&#x3D;1 1|1&#x3D;1）~非（取反）^异或（0^0&#x3D;0 0^1&#x3D;1 1^1&#x3D;0）</p></li><li><p>位及运算：获取最低有效字节的值（&amp;0xFF）</p></li><li><p>逻辑运算（&amp;&amp; || ！）：非0参数都位true（0x01）、参数0表示false(0x00)<img src="/posts/0/image-20231231142847904.png" alt="image-20231231142847904"></p></li><li><p>移位运算：左移（丢弃左位在最右端补0）逻辑右移（丢弃右位在最左端补0）算数右移（最高位等于0时候与逻辑右移一样、最高位等于1时则是在最高位补1）有符号数为算数右移、无符号数为逻辑右移。</p></li><li><p>映射(B2U)有符号数无符号数的编码方式：<img src="/posts/0/image-20231229224849495.png" alt="image-20231229224849495"><img src="/posts/0/image-20231229224936181.png" alt="image-20231229224936181"></p></li><li><p>补码编码映射(B2T)：<img src="/posts/0/image-20231229225343729.png" alt="image-20231229225343729"></p></li><li><p>有符号数和无符号数的转换：位模式不变、解释位的方式变化。<img src="/posts/0/image-20231229230022395.png" alt="image-20231229230022395"></p></li><li><p>强制类型转换、影响关系运算的结果：程序运行有符号数会强转成无符号数运算。较大数据类型转较小会损失。</p></li><li><p>无符号数的转换更大数据类型-扩展：无符号数末尾带有U<img src="/posts/0/image-20231229230424810.png" alt="image-20231229230424810"></p></li><li><p>有符号数的转换更大数据类型-扩展：<img src="/posts/0/image-20231229230510034.png" alt="image-20231229230510034"><img src="/posts/0/image-20231229230541611.png" alt="image-20231229230541611"></p></li><li><p>截断的基本规则：<img src="/posts/0/image-20231229230703918.png" alt="image-20231229230703918"><img src="/posts/0/image-20231229230959005.png" alt="image-20231229230959005"><img src="/posts/0/image-20231229231009760.png" alt="image-20231229231009760"></p></li><li><p>无符号数加法：<img src="/posts/0/image-20231229231207996.png" alt="image-20231229231207996"></p></li><li><p>有符号数加法：<img src="/posts/0/image-20231229231422676.png" alt="image-20231229231422676"></p></li><li><p>补码的加法：<img src="/posts/0/image-20231229231808426.png"></p></li><li><p>使用移位、加法运算的组合代表乘以常数因子：除法无法除尽时候会向0方向舍入、除法为右移<img src="/posts/0/image-20231229232537896.png" alt="image-20231229232537896"></p></li><li><p>浮点数的权重：<img src="/posts/0/image-20231230181622574.png" alt="image-20231230181622574"></p></li><li><p>浮点数格式（符号、阶码、尾数）：符号位s（为0时为正数、为1时为负数）阶码exp、尾数M与frac相关<img src="/posts/0/image-20231230181842487.png" alt="image-20231230181842487"></p></li><li><p>浮点数规格化的值、非规格化的值、特殊值：阶码exp决定了这个数是哪一类<img src="/posts/0/image-20231230182004657.png" alt="image-20231230182004657"><img src="/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9%5Cimage-20231230182010253.png" alt="image-20231230182010253"><img src="/posts/0/image-20231230182024020.png" alt="image-20231230182024020"><img src="/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9%5Cimage-20231230182030206.png" alt="image-20231230182030206"><img src="/posts/0/image-20231230182051725.png" alt="image-20231230182051725"></p></li><li><p>规格化的值和非规格化的值：阶码域全为0的时候E&#x3D;1-bias。M&#x3D;f。<img src="/posts/0/image-20231230182232580.png" alt="image-20231230182232580"><img src="/posts/0/image-20231230182252618.png" alt="image-20231230182252618"><img src="/posts/0/image-20231230182348270.png" alt="image-20231230182348270"><img src="/posts/0/image-20231231162411155.png" alt="image-20231231162411155"><img src="/posts/0/image-20231231162434945.png" alt="image-20231231162434945"></p></li><li><p>单精度浮点数的二进制表示：<img src="/posts/0/image-20231230182445201.png" alt="image-20231230182445201"></p></li><li><p>向上舍入、向下舍入、向0舍入、向偶数舍入：<img src="/posts/0/image-20231230182529726.png" alt="image-20231230182529726"><img src="/posts/0/image-20231230182559083.png" alt="image-20231230182559083"><img src="/posts/0/image-20231230182631677.png" alt="image-20231230182631677"><img src="/posts/0/CSAPP%E7%9F%A5%E8%AF%86%E7%82%B9%5Cimage-20231230182711496.png" alt="image-20231230182711496"></p></li><li><p>int转化为float不会溢出可能会被舍入、int&#x2F;float转化为double可以保留、double转化为float类型可能会发生溢出转换后可能被舍入、float&#x2F;double转化为int可能向0舍入也可能溢出。</p></li><li><p>操作数的寄存器：<img src="/posts/0/image-20231230183049058.png" alt="image-20231230183049058"><img src="/posts/0/image-20231230183320641.png" alt="image-20231230183320641"><img src="/posts/0/image-20231230183330717.png" alt="image-20231230183330717"></p></li><li><p>操作码和操作数以及内存引用：立即数用$表示、内存引用需要加上括号<img src="/posts/0/image-20231230183421375.png" alt="image-20231230183421375"></p></li><li><p>操作数：<img src="/posts/0/image-20231230183924532.png" alt="image-20231230183924532"><img src="/posts/0/image-20231230183948153.png" alt="image-20231230183948153"></p></li><li><p>汇编后缀表示：<img src="/posts/0/image-20231230183202158.png" alt="image-20231230183202158"></p></li><li><p>数据传送指令mov：后缀不同操作的数大小不同，当movq指令的源操作数为立即数时、该立即数只能是32位的补码表示、然后对该数值进行符号位扩展后、讲得到的64位数传送。<img src="/posts/0/image-20231230184023893.png" alt="image-20231230184023893"><img src="/posts/0/image-20231230184051204.png" alt="image-20231230184051204"><img src="/posts/0/image-20231230184343430.png" alt="image-20231230184343430"><img src="/posts/0/image-20231230184432087.png" alt="image-20231230184432087"></p></li><li><p>压入和弹出栈：<img src="/posts/0/image-20231230184746749.png" alt="image-20231230184746749"></p></li><li><p>算数和逻辑指令leaq：<img src="/posts/0/image-20231230184915042.png" alt="image-20231230184915042"></p></li><li><p>通过leaq指令实现算术运算：<img src="/posts/0/image-20231230184958915.png" alt="image-20231230184958915"><img src="/posts/0/image-20231230185611222.png" alt="image-20231230185611222"></p></li><li><p>一元操作：<img src="/posts/0/image-20231230185026113.png" alt="image-20231230185026113"></p></li><li><p>二元操作：<img src="/posts/0/image-20231230185042859.png" alt="image-20231230185042859"><img src="/posts/0/image-20231230185433997.png" alt="image-20231230185433997"></p></li><li><p>移位运算：<img src="/posts/0/image-20231230185456972.png" alt="image-20231230185456972"></p></li><li><p>其他运算：<img src="/posts/0/image-20231230185640650.png" alt="image-20231230185640650"></p></li><li><p>常用条件码：CF-进位标志，当CPU最近执行的一条指令最高位产生了进位时，CF会被置1，可以用来检查无符号数的溢出。ZF-零标志，当最近操作的结果为0时，零标志会被置1。SF-符号标志，当最近的操作结果小于0的时候，符号标志会被置1。OF-溢出标志，最近的操作导致正溢出或负溢出时候会被置1。</p></li><li><p>cmp指令和test指令：<img src="/posts/0/image-20231230190435637.png" alt="image-20231230190435637"><img src="/posts/0/image-20231230190243370.png" alt="image-20231230190243370"><img src="/posts/0/image-20231230190253321.png" alt="image-20231230190253321"><img src="/posts/0/image-20231230190306501.png" alt="image-20231230190306501"><img src="/posts/0/image-20231230190333468.png" alt="image-20231230190333468"><img src="/posts/0/image-20231230190518671.png" alt="image-20231230190518671"></p></li><li><p>条件控制分支if-else以及条件传送：<img src="/posts/0/image-20231230190616651.png" alt="image-20231230190616651"><img src="/posts/0/image-20231230190631968.png" alt="image-20231230190631968"><img src="/posts/0/image-20231230190657506.png" alt="image-20231230190657506"><img src="/posts/0/image-20231230190709521.png" alt="image-20231230190709521"><img src="/posts/0/image-20231230190741192.png" alt="image-20231230190741192"></p></li><li><p>循环指令：循环语句是通过条件测试与跳转的结合来实现的。<img src="/posts/0/image-20231230190840109.png" alt="image-20231230190840109"><img src="/posts/0/image-20231230190909938.png" alt="image-20231230190909938"><img src="/posts/0/image-20231230190922352.png" alt="image-20231230190922352"></p></li><li><p>switch语句：<img src="/posts/0/image-20231230191117390.png" alt="image-20231230191117390"><img src="/posts/0/image-20231230191126080.png" alt="image-20231230191126080"><img src="/posts/0/image-20231230191145052.png"><img src="/posts/0/image-20231230191223681.png" alt="image-20231230191223681"><img src="/posts/0/image-20231230191228563.png" alt="image-20231230191228563"></p></li><li><p>理解过程，理解“过程 P 调用过程 Q，Q 执行后返回到 P”包含的三个机制（传递控制、</p><p>传递数据、分配和释放内存）：<img src="/posts/0/image-20231230192713527.png" alt="image-20231230192713527"></p><p>栈帧：当函数执行所需要的存储空间超出寄存器能够存放的大小时，会借助栈上的存储空间，这部分存储空间就叫做栈帧。</p><p>对于函数P调用函数Q的例子，包括较早的帧、调用函数P的帧、还要正在执行函数Q的帧。<img src="/posts/0/image-20231230193048269.png" alt="image-20231230193048269"></p><p>当函数P调用函数Q时，会把返回地址压入栈中，该地址殖知名了函数Q执行结束返回时要从函数P的哪个位置继续进行。这个返回地址的压栈操作并不是由指令push来执行的，而是由函数调用指令call实现的。<img src="/posts/0/image-20231230193632124.png" alt="image-20231230193632124"></p></li><li><p>数组的分配与访问： short数组2个字节、int数组4个字节、double数组8个字节、指针数组8个字节<img src="/posts/0/image-20231230202311482.png" alt="image-20231230202311482"><img src="/posts/0/image-20231230202617125.png" alt="image-20231230202617125"></p><p>二维数组（嵌套数组）：Xd表示数组的起始地址、L表示数组T的大小、Cij都是常数。<img src="/posts/0/image-20231230203134301.png" alt="image-20231230203134301"></p></li><li><p>理解内存越界的引用和缓冲区溢出：缓冲区溢出会导致返回时会随机返回到系统的任意位置。对抗缓冲区溢出攻击的方法：栈随机化（ASLR 栈的位置在每次运行时地址都变化）、栈破坏检测（在缓冲区与栈保存的状态值之间存储一个特殊值，这个值被称为金丝雀值、检测金丝雀值是否变化判断是否遭受攻击）、限制可执行代码区域。</p></li><li><p>消除循环的低效率：CPE表示每个元素执行所需要的周期数（度量效率）。比较操作和分支操作不直接影响程序的数据流，将两个操作以及寄存器rax删除，只保留循环寄存器以及关键操作。将这个视作一个模板重复n次。<img src="/posts/0/image-20231230210532940.png" alt="image-20231230210532940"><img src="/posts/0/image-20231230210739863.png" alt="image-20231230210739863"></p></li><li><p>减少过程调用（循环展开）：多路并行，10路时接近吞吐界限。</p></li><li><p>消除不必要的内存引用（加载操作延迟）：加载操作会受存储引用和计算影响。</p></li><li><p>动态RAM（DRAM）： 电容充电维持信息存储、每个bit位的存储对应一个电容和晶体管，对干扰十分敏感，内存采用DRAM，不断刷新才能保持数据，使用超单元一词来表示DRAM的存储单元，可以通过类似坐标的方式寻址，寻址所需位数关系2的n次方等于行数&#x2F;列数，n即为寻址位数。<img src="/posts/0/image-20231230212710024.png" alt="image-20231230212710024"><img src="/posts/0/image-20231230212823195.png" alt="image-20231230212823195"></p></li><li><p>磁盘容量和磁盘访问时间的计算：<img src="/posts/0/image-20231231204301009.png" alt="image-20231231204301009"><img src="/posts/0/image-20231230214234653.png" alt="image-20231230214234653"><img src="/posts/0/image-20231230214350043.png" alt="image-20231230214350043"></p></li><li><p>局部性（时间局部性、空间局部性）：时间局部性（被引用的内存位置在不远的将来还可能被多次引用）、空间局部性（一个内存被引用了一次，程序很可能在不远的将来引用附近的一个内存位置）如两层嵌套的循环遍历二重数组的例子。</p></li><li><p>高速缓存的参数：基于SRAM，有效位（valid 长1bit 表示当前cache line存储的信息是否有效 1表示有效0表示无效）、标记（tag 确定目标数据是否存在于当前的cache line中） 、数据块（cache block一小部分内存数据的副本，大小用B表示）<img src="/posts/0/image-20231230221622544.png" alt="image-20231230221622544"><img src="/posts/0/image-20231231212238903.png" alt="image-20231231212238903"></p></li><li><p>高速缓存的三种地址的映射方式：根据每个set所包含的cache line的行数不同，cache被分为不同的类。</p><p>直接缓存（E&#x3D;1 组选择<img src="/posts/0/image-20231230222138879.png" alt="image-20231230222138879"> 行匹配<img src="/posts/0/image-20231230222217927.png" alt="image-20231230222217927"> 字抽取 根据偏移量来确定目标数据的确切位置，从什么位置开始抽取数据 命中：<img src="/posts/0/image-20231230222309859.png" alt="image-20231230222309859">不命中：cache需要从存储器层次结构的下一层取出被请求的块)</p><p>例子：S表示有几个set、E表示每个set有几行、B表示每个数据块包含几个字节、其中地址m是多少位<img src="/posts/0/image-20231230222441061.png" alt="image-20231230222441061"></p><p>组相联（E&#x3D;2）：字抽取不命中（随机替换、最不常使用、最近最少使用）<img src="/posts/0/image-20231230223300375.png" alt="image-20231230223300375"></p><p>全相联（E&#x3D;C&#x2F;B）：<img src="/posts/0/image-20231230223232884.png" alt="image-20231230223232884"></p></li><li><p>编写高速缓存友好代码：<img src="/posts/0/image-20231230223616995.png" alt="image-20231230223616995"></p></li><li><p>理解符号类型和符号解析：全局符号（由该模块定义、同时能被其他模块引用的全局符号）、外部符号（被其他模块定义、同时被该模块引用的全局符号）、局部符号（只能被该模块定义和引用的局部符号 static）<img src="/posts/0/image-20240102184035977.png" alt="image-20240102184035977"></p><p>COMMON是未初始化的全局变量，注意和.bss区分<img src="/posts/0/image-20240102171724014.png" alt="image-20240102171724014"><img src="/posts/0/image-20240102171716051.png" alt="image-20240102171716051"><img src="/posts/0/image-20240102172429048.png" alt="image-20240102172429048"></p></li><li><p>强符号和弱符号：强符号（函数和已初始化的全局变量  连接器不允许有多个同名的强符号一起出现）、弱符号（未初始化的全局变量）。</p></li><li><p>重定位：重定位条目（告诉链接器在合成可执行文件时候应该如何修改这个引用）链接器合并输入模块，并为每个符号分配运行时地址<img src="/posts/0/image-20231230232108230.png" alt="image-20231230232108230"><img src="/posts/0/image-20231230230935813.png" alt="image-20231230230935813"></p><p>重定位相对引用<img src="/posts/0/image-20231230232653038.png" alt="image-20231230232653038"><img src="/posts/0/image-20231230232425883.png" alt="image-20231230232425883"><img src="/posts/0/image-20231230232521426.png" alt="image-20231230232521426"></p><p>绝对地址引用<img src="/posts/0/image-20231230232601746.png" alt="image-20231230232601746"><img src="/posts/0/image-20231230232608217.png" alt="image-20231230232608217"><img src="/posts/0/image-20231230232628696.png" alt="image-20231230232628696"></p></li><li><p>异常控制流的分类：中断（异步）、陷阱、故障和终止<img src="/posts/0/image-20231231103554346.png" alt="image-20231231103554346"></p></li><li><p>并发流：一个逻辑流的执行在时间上和另一个流重叠的情况成为并发流，两个流的执行被成为并发运行。（并行是两个进程在不同的处理器核上同时运行）并发是交替运行的，并行是同时运行的。</p></li><li><p>进程的状态<img src="/posts/0/image-20231231125806624.png" alt="image-20231231125806624"></p></li><li><p>进程的创建：创建进程时使用的系统函数-fork。父进程调用fork函数创建一个子进程。fork函数一次调用返回两次。父进程和子进程二者并发执行，它们的输出结果都打印出来。<img src="/posts/0/image-20231231125849393.png" alt="image-20231231125849393"><img src="/posts/0/image-20231231130005986.png" alt="image-20231231130005986"><img src="/posts/0/image-20231231130355291.png" alt="image-20231231130355291"></p></li><li><p>函数execve：调用加载器，在执行可执行程序的main函数之前。<img src="/posts/0/image-20231231130510239.png" alt="image-20231231130510239"></p></li><li><p>zombie僵死进程：终止运行但是还未回收的进程称为僵死进程，仍在消耗内存。</p></li><li><p>子进程的回收：父进程通过函数waitpid来等待它的子进程终止或者停止。当第一个参数pid等于0表示等待的进程是一个单独的子进程，pid&#x3D;-1表示等待的进程是由父进程创建的所有子进程组成的集合。statusp是非空，函数waitpid在status上放上导致返回的子进程的状态信息，status就是statusp的值。正常回收返回true，否则未false。</p></li><li><p>信号所引发事件：<img src="/posts/0/image-20231231131827546.png" alt="image-20231231131827546"></p></li><li><p>进程组的概念：每个进程都只属于一个进程组，每个进程组都有自己的ID值来唯一标识，通过函数getpgrp来获取当前进程所属的进程组ID值。setpgrp可以进行更改ID</p></li><li><p>发送信号的方式：<img src="/posts/0/image-20231231131956601.png" alt="image-20231231131956601"></p><p>发送信号的&#x2F;kill方式：通过&#x2F;bin目录中的kill程序可以向其他的进程发送任意的信号。</p><p>从键盘发送信号：当我们在键盘上输入Ctrl+C键会导致内容发送一个中断信号到前台进程组中的所有进程中。</p><p>调用函数kill：调用函数发送信号给其他进程，也包括给自己发送信号。<img src="/posts/0/image-20231231132524879.png" alt="image-20231231132524879"></p><p>使用函数alarm函数：<img src="/posts/0/image-20231231132517316.png" alt="image-20231231132517316"></p></li><li><p>接收信号：一个待处理信号最多只能接收一次，一种类型的信号最多只能有一次待处理信号。如果一个类型为k的信号有待处理信号，那接下来这个进程中类型为k的信号都不用排队等待，会被简单地丢弃。<img src="/posts/0/image-20231231132616297.png" alt="image-20231231132616297"><img src="/posts/0/image-20231231132720760.png" alt="image-20231231132720760"></p></li><li><p>虚拟内存：自动完成内存管理的相关工作，可以创建和释放内存空间，将内存空间映射到磁盘文件的某个部分，共享内存。虚拟内存使用不当会使程序产生错误。</p></li><li><p>物理寻址：<img src="/posts/0/image-20231231133921969.png" alt="image-20231231133921969"></p></li><li><p>虚拟寻址：将一个虚拟地址转换成物理地址的任务叫做地址翻译<img src="/posts/0/image-20231231134038499.png" alt="image-20231231134038499"></p></li><li><p>地址空间：地址空间是一个非负整数的有序集合，如果地址空间中的整数是连续的，那么我们说它是一个线性地址空间，一个地址空间的大小是由标识最大地址所需要的位数来描述的。最大可能的虚拟地址是虚拟地址数-1。<img src="/posts/0/image-20240101102502741.png" alt="image-20240101102502741"><img src="/posts/0/image-20231231134227145.png" alt="image-20231231134227145"></p></li><li><p>虚拟页（存在于磁盘上）和物理页：<img src="/posts/0/image-20231231134359183.png" alt="image-20231231134359183"><img src="/posts/0/image-20231231134930776.png" alt="image-20231231134930776"></p></li><li><p>页表：是一个页表条目PTE的数组存在于物理内存之中，将虚拟页地址映射到物理页地址。页表条目PTE&#x3D;2的n-p次方，n为虚拟地址大小、页大小P&#x3D;2的p次方。</p></li><li><p>页命中：虚拟内存中的一个字存在于物理内存中（即DRAM缓存命中）</p></li><li><p>缺页：引用虚拟内存中的字，不在物理内存中 (DRAM 缓存不命中)<img src="/posts/0/image-20231231135028888.png" alt="image-20231231135028888"></p></li><li><p>分配页面：分配一个新的虚拟内存页 (VP 5).内核在磁盘上分配VP5， 并且将PTE5指向这个新的位置</p></li><li><p>使用SRAM缓存来表示CPU与内存之间的L1L2L3这三级高速缓存。DRAM表示虚拟内存系统的缓存。</p></li><li><p>地址翻译：<img src="/posts/0/image-20231231135237207.png" alt="image-20231231135237207"><img src="/posts/0/image-20231231135250059.png" alt="image-20231231135250059"><img src="/posts/0/image-20240101103951186.png" alt="image-20240101103951186"><img src="/posts/0/image-20240101152349030.png" alt="image-20240101152349030"></p></li><li><p>P&#x3D;1K&#x3D;2的10次方可以得到p&#x3D;10。虚拟页偏移量VPO&#x3D;物理页偏移量PPO&#x3D;p。虚拟页号VPN&#x3D;虚拟地址空间-虚拟页偏移量VPO。物理页号PPN&#x3D;物理地址-物理页偏移量PPO。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSAPP知识点&quot;&gt;&lt;a href=&quot;#CSAPP知识点&quot; class=&quot;headerlink&quot; title=&quot;CSAPP知识点&quot;&gt;&lt;/a&gt;CSAPP知识点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进制数转换：十进制转二进制、二进制转十进制、十进制转十六进制、十六进制转十</summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="CSAPP" scheme="http://example.com/tags/CSAPP/"/>
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>前端部分知识点</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2023-11-23T05:28:12.000Z</published>
    <updated>2024-02-04T07:12:15.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><h3 id="1-html结构"><a href="#1-html结构" class="headerlink" title="1. html结构"></a>1. html结构</h3><p>1.html：根标签</p><p>2.head： 头部标签</p><p>3.body： 主体标签</p><p>4.title：标题标签</p><p>5.DOCTYPE： 声明文档类型</p><p>6.lang &#x3D; “en”：页面的语言类型</p><p>7.charset&#x3D;“UTF-8”编码格式</p><h3 id="2-html标签"><a href="#2-html标签" class="headerlink" title="2. html标签"></a>2. html标签</h3><ol><li>标题标h： &lt;h1&gt; ~ &lt;h6&gt; 不同字号大小</li><li>段落标签p</li><li>水平线标签  &lt;hr&#x2F;&gt; 单标签</li><li>换行标签  &lt;br&#x2F;&gt;</li><li>span 文字标签：一行上可以放多个 \<span> 小盒子</span></li><li>div标签： 一行上只能放一个&lt;div&gt;大盒子 </li><li>加粗标签：&lt;strong&gt; 和  &lt;b&gt; 前者语义更强烈</li><li>倾斜标签：&lt;em&gt; 和 &lt;i&gt; 前者语义更强烈</li><li>删除线：&lt;del&gt; 和  &lt;s&gt;  前者语义更强烈</li><li>下划线：&lt;ins&gt; 和 &lt;u&gt; 前者语义更强烈</li></ol><h3 id="3-图片标签"><a href="#3-图片标签" class="headerlink" title="3.图片标签&lt;img&gt;"></a>3.图片标签&lt;img&gt;</h3><ol><li>src：当前图片的路径</li><li>alt：当图片错误加载时候显示的文字</li><li>title：当鼠标悬停在图片上显示的文字</li><li>height： 图片的高度</li><li>width： 图片的宽度</li><li>border：图片的边框</li></ol><h3 id="4-连接标签"><a href="#4-连接标签" class="headerlink" title="4.连接标签&lt;a&gt;"></a>4.连接标签&lt;a&gt;</h3><ol><li>外部链接  &lt;a href&#x3D;”<a href="http://www.baidu.com">\">http://www.baidu.com&quot;&gt;\</a>  写完整的 协议  域名   网址</li><li>内部链接 &lt;a href&#x3D;”index.html”&gt;&lt;&#x2F;a&gt;   直接写文件名即可</li><li>href:指定跳转的页面</li><li>title：鼠标悬停显示的文字</li><li>target:  _self(默认会覆盖原来的窗口)   _blank(会以新的窗口打开)    窗口的打开方式</li><li>#：会阻止页面跳转但是会刷新页面</li><li>绝对路径：目录下的绝对位置，通常从盘符开始</li><li>相对路径：在同一个文件夹直接找名字、向上一级  ..&#x2F; 、向下 &#x2F;</li></ol><h3 id="5-表格"><a href="#5-表格" class="headerlink" title="5.表格"></a>5.表格</h3><ol><li>表格：&lt;table&gt;是用于定义表格的标签。</li><li>行：&lt;tr&gt;标签用于定义表格中的行，必须嵌套在 &lt;table&gt; 标签中。</li><li>单元格：&lt;td&gt; 用于定义表格中的单元格，必须嵌套在&lt;tr&gt;标签中。</li><li>表头&lt;th&gt; 加粗加黑自动居中。</li><li>表格的标题：&lt;caption&gt;表格的标题   写在内部  显示外部  居中</li><li>结构头：&lt;thead&gt; 结构头</li><li>结构底：&lt;tfoot&gt;结构底</li><li>结构体：&lt;tbody&gt;结构体</li><li>表格边框border</li><li>宽度 width</li><li>高度 height</li><li>单元格与单元格之间距离 cellspacing</li><li>单元格与内容之间的距离 cellspadding</li><li>居中 align ： left&#x2F; center&#x2F; right </li><li>列合并 colspan</li><li>行合并 rowspan</li></ol><h3 id="6-列表"><a href="#6-列表" class="headerlink" title="6.列表"></a>6.列表</h3><ol><li>无序列表 : &lt;ul&gt; &lt;li&gt;</li><li>有序列表 : &lt;ol&gt;&lt;li&gt;</li><li>自定义列表：&lt;dl&gt; &lt;dt&gt; &lt;dd&gt;</li></ol><h3 id="7-表单"><a href="#7-表单" class="headerlink" title="7. 表单"></a>7. 表单</h3><h4 id="1-input属性"><a href="#1-input属性" class="headerlink" title="1. input属性 &lt;input type &#x3D; “属性值”&gt;"></a>1. input属性 &lt;input type &#x3D; “属性值”&gt;</h4><ol><li>text：文本框</li><li>password：密码框</li><li>radio：单选按钮</li><li>checkbox：复选框</li><li>button：普通按钮</li><li>reset：重置按钮  需要配合form表单才有作用</li><li>submit：提交按钮</li><li>image   属性  src</li><li>file 文件按钮   上传图片</li></ol><h4 id="2-其他属性"><a href="#2-其他属性" class="headerlink" title="2.其他属性"></a>2.其他属性</h4><ol><li>name属性：定义input元素的名称</li><li>value：规定input氧元素的值</li><li>checked：规定input元素首次加载时应当被选中</li><li>maxlength： 输入字段字符的最大长度</li><li>label</li><li>textarea：用户留言 cols&#x3D;“每行中的字符数” ，rows&#x3D;“显示的行数”</li><li>select：下拉菜单</li><li>form表单：收集用户信息，action：  提交后台的地址 method&#x3D;”get&#x2F;post”   提交（传输）后台的方式 name &#x3D;“a” 告诉服务器  由哪个表单提交过来的</li></ol><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h3 id="1-css引入方式"><a href="#1-css引入方式" class="headerlink" title="1.css引入方式"></a>1.css引入方式</h3><ol><li>行内样式：&lt;标签 style&#x3D;”属性:属性值;”&gt;&lt;&#x2F;标签&gt;</li><li>内部样式：选择器{属性:属性值;属性：属性值}</li><li>外部样式：通过link引入外部css文件  &lt;link  rel&#x3D;”stylesheet”   href&#x3D;”外部css文件”  &#x2F;&gt;</li><li>href与src   href 是引用   src下载资源到当前页面</li></ol><h3 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h3><ol><li>标签选择器：标签{属性：属性值}</li><li>class（类选择器）：html：&lt;div class&#x3D;”名字”&gt;  css：  .名字{属性：属性值}  .nav{color: red}</li><li>id选择器：html：&lt;div id&#x3D;”名字”&gt;&lt;&#x2F;div&gt;   css：  #名字{属性：属性值} id与class选择器的区别：  id的名字是唯一的（体现在js里面） class名字可以任意多个  #nav{color： red}</li><li>通配符选择器：选择所有的标签 *{color：red}</li></ol><h3 id="3-字体属性"><a href="#3-字体属性" class="headerlink" title="3.字体属性"></a>3.字体属性</h3><ol><li>字体大小：font-size </li><li>字体类型：font-family</li><li>字体粗度：font-weight   normal默认值400（不加粗）bold粗体700（加粗的）</li><li>文本风格：font-style:字体倾斜：italic（倾斜）&#x2F;normal（正常）</li><li>文字阴影： text-shadow  水平距离   垂直距离  模糊程度   阴影颜色   </li><li>字体连写：  font:font-style font-weight font-size&#x2F;line-height font-family</li><li>字体颜色：color</li><li>水平对齐方式：text-align:left&#x2F;center&#x2F;right（注意：1.div  h。。标题会居中   span   em  i。。。。不会居中）</li><li>行高：line-height</li><li>首行缩进：text-indent:  em   1em&#x3D;16px</li><li>去掉a链接默认的下划线 ：text-decoration： none(去掉下划线)&#x2F; undefined(添加下划线)</li></ol><h3 id="4-快速生成HTML结构语法"><a href="#4-快速生成HTML结构语法" class="headerlink" title="4.快速生成HTML结构语法"></a>4.快速生成HTML结构语法</h3><ul><li>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 &lt;div&gt;&lt;&#x2F;div&gt;</li><li>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</li><li>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</li><li>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </li><li>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</li><li>如果生成的div 类名是有顺序的， 可以用 自增符号  $ </li><li>如果想要在生成的标签内部写内容可以用  { }  表示</li></ul><h3 id="5-快速生成CSS样式语法"><a href="#5-快速生成CSS样式语法" class="headerlink" title="5.快速生成CSS样式语法"></a>5.快速生成CSS样式语法</h3><p>CSS 基本采取简写形式即可</p><p>​比如 w200   按tab  可以 生成  width: 200px;</p><p>​比如 lh26px   按tab  可以生成  line-height: 26px;‘</p><h3 id="6-复合选择器"><a href="#6-复合选择器" class="headerlink" title="6.复合选择器"></a>6.复合选择器</h3><ol><li>后代选择器：元素1 元素2 {样式}   ul li{color：red} 选择ul里面所有的li标签元素</li><li>子选择器：元素1&gt;元素2 {样式}  div &gt; p {样式声明} 选择div里面所有最近一级的p标签元素</li><li>并集选择器：元素1，元素2 {样式声明}  ul，div{样式}  选择ul和div标签元素</li><li>伪类选择器：     （ :hover）</li><li>链接伪类选择器：给某些选择器增加特殊的效果：a:hover鼠标经过的那个链接</li><li>:focus 伪类选择器：用于选取获得焦点的表单元素</li></ol><h3 id="7-CSS的显示模式"><a href="#7-CSS的显示模式" class="headerlink" title="7.CSS的显示模式"></a>7.CSS的显示模式</h3><ol><li>块元素：&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;  比较霸道，自己独占一行。高度，宽度、外边距以及内边距都可以控制。宽度默认是容器（父级宽度）的100%。是一个容器及盒子，里面可以放行内或者块级元素。</li><li>行内元素：&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt; 相邻行内元素在一行上，一行可以显示多个。默认宽度就是它本身内容的宽度。</li><li>行内块元素：&lt;img &#x2F;&gt;、&lt;input &#x2F;&gt;、&lt;td&gt;  同时具有块元素和行内元素的特点。</li><li>元素显示模块转换：转换为块元素：display:block;  转换为行内元素：display:inline;  转换为行内块：display: inline-block;</li><li>让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中</li></ol><h3 id="8-CSS的背景"><a href="#8-CSS的背景" class="headerlink" title="8.CSS的背景"></a>8.CSS的背景</h3><ol><li>背景颜色：background-color：颜色值；元素背景颜色默认值是 transparent（透明）</li><li>背景图片：background-image：none | url ；</li><li>背景平铺：background-repeat： repeat在纵向和横向上平铺 | no-repeat不平铺 | repeat-x横向 | repeat-y纵向</li><li>背景图片位置：background-position 属性可以改变图片在背景中的位置</li><li>背景图片固定：background-attachment    scroll随对象内容滚动  fixed 背景图像固定</li><li>背景样式合写：background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</li><li>背景色半透明：background： rgba（0，0，0，0.3） 最后一个参数是 alpha 透明度，取值范围在 0~1之间</li></ol><h3 id="9-优先级"><a href="#9-优先级" class="headerlink" title="9.优先级"></a>9.优先级</h3><ol><li>继承或者* 0，0，0，0</li><li>元素选择器 0，0，0，1</li><li>类选择器，伪类选择器 0，0，1，0</li><li>ID选择器  0，1，0，0</li><li>行内样式 style&#x3D;“” 1，0，0，0</li><li>！important 重要的 无穷大</li></ol><h3 id="10-盒子模型——边框border"><a href="#10-盒子模型——边框border" class="headerlink" title="10.盒子模型——边框border"></a>10.盒子模型——边框border</h3><ol><li>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></li><li>定义边框粗细：border-width： 单位是px</li><li>边框的样式：border-style  none：没有边框即忽略所有边框的宽度（默认值）solid：边框为单实线(最为常用的) dashed：边框为虚线   dotted：边框为点线</li><li>表格的细线边框：border-collapse </li><li>border-collapse: collapse; 表示相邻边框合并在一起</li><li>内边距 padding</li><li>外边距 margin</li><li>圆角边框：border-radius 用于设置元素的外边框圆角。</li><li>盒子阴影： box-shadow: h-shadow水平阴影 v-shadow垂直阴影 blur模糊距离 spread阴影的尺寸 color阴影颜色 inset外部阴影改为内部阴影;</li><li>文字阴影：  text-shadow: h-shadow水平阴影 v-shadow垂直阴影 blur模糊距离 color阴影颜色;</li></ol><h3 id="11-浮动"><a href="#11-浮动" class="headerlink" title="11.浮动"></a>11.浮动</h3><ol><li>浮动：float：none不浮动   left向左浮动   right向右浮动</li><li>清除浮动： 选择器{clear:属性值;}   left 不允许左侧有浮动   right 不允许右侧有浮动  both 同时清除左右两侧浮动</li><li>额外标签法清除浮动：例如 &lt;div style&#x3D;”clear:both”&gt;&lt;&#x2F;div&gt;，或者其他标签（如&lt;br &#x2F;&gt;等）。</li><li>父级添加 overflow 属性 （溢出）hidden | auto | scroll</li><li>父级添加after伪元素</li></ol><h3 id="12-定位（position）"><a href="#12-定位（position）" class="headerlink" title="12.定位（position）"></a>12.定位（position）</h3><ol><li><p>边偏移 有 top、bottom、left 和 right  4 个属性。</p></li><li><p><code>position</code> 属性定义元素的<strong>定位模式</strong>  选择器 { position: 属性值; } <code>static</code>  <strong>静态</strong>定位 <code>relative</code>  <strong>相对</strong>定位            <code>absolute</code>  <strong>绝对</strong>定位<code>fixed</code>  <strong>固定</strong>定位</p></li><li><p>静态定位(static) ：无定位</p></li><li><p>相对定位(relative) ：移动位置的时候相对于自己原来的位置来说的，在原来位置继续占有</p></li><li><p>绝对定位(absolute)：绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的，完全不占位置，父元素要有定位</p></li><li><p><strong>子绝父相</strong></p></li><li><p>固定定位(fixed)：固定于浏览器可视区的位置，不随滚动条滚动，不占位置</p></li><li><p>粘性定位(sticky) ：相对定位和固定定位的混合，占位置</p><table><thead><tr><th><strong>定位模式</strong></th><th><strong>是否脱标</strong></th><th><strong>移动位置</strong></th><th><strong>是否常用</strong></th></tr></thead><tbody><tr><td>static   静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative 相对定位</strong></td><td><strong>否 (占有位置)</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>基本单独使用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>要和定位父级元素搭配使用</strong></td></tr><tr><td><strong>fixed 固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>单独使用，不需要父级</strong></td></tr><tr><td>sticky 粘性定位</td><td>否   (占有位置)</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table></li><li><p>堆叠顺序（z-index）：正整数、负整数或 0，默认值是 0，数值越大，盒子越靠上；</p></li><li><p>绝对定位的盒子居中：<code>left: 50%;</code>  <code>margin-left: -100px;</code></p></li><li><p>脱标的盒子不会触发外边距塌陷</p></li><li><p>绝对定位（固定定位）会完全压住盒子</p></li></ol><h3 id="13-元素显示隐藏"><a href="#13-元素显示隐藏" class="headerlink" title="13.元素显示隐藏"></a>13.元素显示隐藏</h3><ol><li><p>显示display：display: none 隐藏对象  display：block 除了转换为块级元素之外，同时还有显示元素的意思。隐藏后不再占有原本位置</p></li><li><p>可见性 visibility：visibility：visible ; 　元素可视   visibility：hidden; 　  元素隐藏</p></li><li><p>overflow 溢出：</p></li><li><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table></li></ol><h3 id="14-精灵图"><a href="#14-精灵图" class="headerlink" title="14.精灵图"></a>14.精灵图</h3><ol><li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li><li>这个大图片也称为 sprites  精灵图  或者 雪碧图</li><li>移动背景图片位置， 此时可以使用 background-position 。</li><li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li><li>因为一般情况下都是往上往左移动，所以数值是负值。</li><li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li></ol><h3 id="15-字体应用"><a href="#15-字体应用" class="headerlink" title="15.字体应用"></a>15.字体应用</h3><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8"> @font-face &#123;</span></span><span class="line"><span style="color: #babed8">   font-family: &#39;icomoon&#39;;</span></span><span class="line"><span style="color: #babed8">   src:  url(&#39;fonts/icomoon.eot?7kkyc2&#39;);</span></span><span class="line"><span style="color: #babed8">   src:  url(&#39;fonts/icomoon.eot?7kkyc2#iefix&#39;) format(&#39;embedded-opentype&#39;),</span></span><span class="line"><span style="color: #babed8">     url(&#39;fonts/icomoon.ttf?7kkyc2&#39;) format(&#39;truetype&#39;),</span></span><span class="line"><span style="color: #babed8">     url(&#39;fonts/icomoon.woff?7kkyc2&#39;) format(&#39;woff&#39;),</span></span><span class="line"><span style="color: #babed8">     url(&#39;fonts/icomoon.svg?7kkyc2#icomoon&#39;) format(&#39;svg&#39;);</span></span><span class="line"><span style="color: #babed8">   font-weight: normal;</span></span><span class="line"><span style="color: #babed8">   font-style: normal;</span></span><span class="line"><span style="color: #babed8"> &#125;</span></span><span class="line"><span style="color: #babed8"></span></span></code></pre></div><p>定义字体： span {   font-family: “icomoon”;}</p><h3 id="16-CSS界面样式"><a href="#16-CSS界面样式" class="headerlink" title="16.CSS界面样式"></a>16.CSS界面样式</h3><ol><li>鼠标样式 cursor：default 小白默认 pointer小手 move 移动 text文本 not-allowed禁止</li><li>轮廓线 outline：none 去掉默认蓝色边框</li><li>防止拖拽文本域 resize：none</li><li>文字对齐 vertical-align ：baseline默认，放在父元素基线，top 行中最高元素顶端对齐 middle 放在父元素中部 bottom最低元素的顶端对齐</li><li>单行文本溢出显示省略号：先强制一行内显示文本  white-space: nowrap; 超出的部分隐藏  overflow: hidden;  文字用省略号替代超出的部分  text-overflow: ellipsis;</li></ol><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="1-语义化标签"><a href="#1-语义化标签" class="headerlink" title="1.语义化标签"></a>1.语义化标签</h3><ol><li><code>&lt;header&gt;</code> 头部标签</li><li><code>&lt;nav&gt;</code> 导航标签</li><li><code>&lt;article&gt;</code> 内容标签</li><li><code>&lt;section&gt;</code> 定义文档某个区域</li><li><code>&lt;aside&gt;</code> 侧边栏标签</li><li><code>&lt;footer&gt;</code> 尾部标签</li></ol><h3 id="2-多媒体标签"><a href="#2-多媒体标签" class="headerlink" title="2.多媒体标签"></a>2.多媒体标签</h3><ol><li>音频 <strong>audio</strong> 和视频 <strong>video</strong> 两个标签</li><li>autoplay 视频就绪自动播放</li><li>width height</li><li>loop 视频播放完毕是否循环播放</li><li>preload auto预先加载 none不预先</li><li>url地址</li><li>poster 加载等待的画面图片</li><li>muted 静音播放</li><li>controls 显示控件</li></ol><h3 id="3-新增表单元素"><a href="#3-新增表单元素" class="headerlink" title="3.新增表单元素"></a>3.新增表单元素</h3><ol><li>email  </li><li>url</li><li>date</li><li>time</li><li>month</li><li>week</li><li>number</li><li>tel</li><li>search</li><li>color</li></ol><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="1-新增选择器"><a href="#1-新增选择器" class="headerlink" title="1.新增选择器"></a>1.新增选择器</h3><ol><li><img src="/posts/0/image-20231123105019298.png" alt="image-20231123105019298"></li><li><img src="/posts/0/image-20231123105040370.png" alt="image-20231123105040370"></li><li><img src="/posts/0/image-20231123105106444.png" alt="image-20231123105106444"></li></ol><h3 id="2-盒子模型"><a href="#2-盒子模型" class="headerlink" title="2.盒子模型"></a>2.盒子模型</h3><ol><li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li><li>box-sizing: border-box  盒子大小为 width</li><li>如果盒子模型我们改为了box-sizing: border-box  ， 那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）</li></ol><h3 id="3-其他特性"><a href="#3-其他特性" class="headerlink" title="3.其他特性"></a>3.其他特性</h3><ol><li>模糊滤镜filter ：filter:   函数(); –&gt;  例如： filter: blur(5px);  –&gt;  blur模糊处理  数值越大越模糊</li><li>计算盒子宽度 – calc 函数：width: calc(100% - 80px);</li></ol><h3 id="4-CSS3过渡"><a href="#4-CSS3过渡" class="headerlink" title="4.CSS3过渡"></a>4.CSS3过渡</h3><ol><li><strong>过渡动画：</strong> 是从一个状态 渐渐的过渡到另外一个状态</li><li>transition: 要过渡的属性  花费时间  运动曲线  何时开始;</li></ol><h3 id="5-2D转换"><a href="#5-2D转换" class="headerlink" title="5.2D转换"></a>5.2D转换</h3><ol><li>转换 移动：translate  旋转：rotate  缩放：scale</li><li>旋转 translate：transform：translate（x,y）</li><li>缩放 retate：transform：retate（度数）</li><li>2D转换中心点：transform-origin： x， y；</li><li>缩放 transform：scale（x,y）</li></ol><h3 id="6-动画"><a href="#6-动画" class="headerlink" title="6.动画"></a>6.动画</h3><ol><li>keyframes定义动画  @keyframes动画名称</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML部分&quot;&gt;&lt;a href=&quot;#HTML部分&quot; class=&quot;headerlink&quot; title=&quot;HTML部分&quot;&gt;&lt;/a&gt;HTML部分&lt;/h2&gt;&lt;h3 id=&quot;1-html结构&quot;&gt;&lt;a href=&quot;#1-html结构&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>校园课表微信小程序接口文档示例</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2023-11-06T05:28:12.000Z</published>
    <updated>2024-02-04T07:12:32.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于uni-app框架开发的微信小程序接口文档"><a href="#基于uni-app框架开发的微信小程序接口文档" class="headerlink" title="基于uni-app框架开发的微信小程序接口文档"></a>基于uni-app框架开发的微信小程序接口文档</h1><h2 id="一-关系型数据库设计"><a href="#一-关系型数据库设计" class="headerlink" title="一. 关系型数据库设计"></a>一. 关系型数据库设计</h2><h3 id="1-数据列表"><a href="#1-数据列表" class="headerlink" title="1.数据列表"></a>1.数据列表</h3><h6 id="1-student-表"><a href="#1-student-表" class="headerlink" title="1.student 表"></a>1.student 表</h6><table><thead><tr><th>student_id</th><th>real_student_id</th><th>name</th><th>college</th><th>major</th><th>classNum</th><th>grade</th></tr></thead><tbody><tr><td>1</td><td>202225220801</td><td>张三</td><td>数信</td><td>软件工程</td><td>5班</td><td>2022</td></tr><tr><td>2</td><td>202325310802</td><td>李四</td><td>材能</td><td>材料</td><td>1班</td><td>2023</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><h6 id="2-courses表"><a href="#2-courses表" class="headerlink" title="2. courses表"></a>2. courses表</h6><table><thead><tr><th>course_id</th><th>name</th><th>teacher</th><th>time</th><th>location</th><th>day_of_week</th></tr></thead><tbody><tr><td>101</td><td>数据库原理</td><td>王老师</td><td>周一1-2节</td><td>4210</td><td>1</td></tr><tr><td>102</td><td>数据结构</td><td>张老师</td><td>周三1-2节</td><td>3302</td><td>3</td></tr><tr><td>103</td><td>面向对象程序设计</td><td>宋老师</td><td>周四3-4节</td><td>4502</td><td>4</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td></td></tr></tbody></table><h6 id="3-enrollments表"><a href="#3-enrollments表" class="headerlink" title="3.enrollments表"></a>3.enrollments表</h6><table><thead><tr><th>enrollment_id</th><th>student_id</th><th>course_id</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>101</td></tr><tr><td>2</td><td>1</td><td>102</td></tr><tr><td>3</td><td>2</td><td>101</td></tr><tr><td>4</td><td>2</td><td>103</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h6 id="4-tasks表"><a href="#4-tasks表" class="headerlink" title="4.tasks表"></a>4.tasks表</h6><table><thead><tr><th>task_id</th><th>real_student_id</th><th>description</th><th>status</th><th>create_time</th><th>update_time</th></tr></thead><tbody><tr><td>1</td><td>202225220501</td><td>完成作业</td><td>未完成(0)</td><td>…</td><td>…</td></tr><tr><td>2</td><td>202325310502</td><td>准备考试</td><td>完成(1)</td><td>…</td><td>…</td></tr><tr><td>3</td><td>202225310702</td><td>提交报告</td><td>未完成(0)</td><td>…</td><td>…</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td></td><td></td></tr></tbody></table><h6 id="生成语句"><a href="#生成语句" class="headerlink" title="生成语句"></a>生成语句</h6><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">-- 学生表格</span></span><span class="line"><span style="color: #babed8">create table students (</span></span><span class="line"><span style="color: #babed8">    student_id int unsigned primary key auto_increment comment &#39;主键学生id&#39;,</span></span><span class="line"><span style="color: #babed8">    real_student_id varchar(20) not null comment &#39;学号&#39;,</span></span><span class="line"><span style="color: #babed8">    name varchar(10) not null comment &#39;名字&#39;,</span></span><span class="line"><span style="color: #babed8">    college varchar(20) not null comment &#39;学院&#39;,</span></span><span class="line"><span style="color: #babed8">    major varchar(20) not null comment &#39;专业&#39;,</span></span><span class="line"><span style="color: #babed8">    class int not null comment &#39;班级&#39;,</span></span><span class="line"><span style="color: #babed8">    grade int not null comment &#39;年级&#39;</span></span><span class="line"><span style="color: #babed8">)comment &#39;学生表格&#39;;</span></span><span class="line"><span style="color: #babed8">CREATE INDEX idx_real_student_id ON students(real_student_id);</span></span><span class="line"><span style="color: #babed8">-- 学生表测试数据</span></span><span class="line"><span style="color: #babed8">insert into students(student_id, real_student_id, name, college, major, class, grade) values(1, &#39;202225220503&#39;, &#39;冯焯炫&#39;, &#39;软件学院&#39;, &#39;软件工程&#39;, 5, 2022),</span></span><span class="line"><span style="color: #babed8">                                                                                            (2, &#39;202225220504&#39;, &#39;郭文杰&#39;, &#39;软件学院&#39;, &#39;软件工程&#39;, 5, 2022),</span></span><span class="line"><span style="color: #babed8">                                                                                            (3, &#39;202225220901&#39;, &#39;张三&#39;, &#39;软件学院&#39;, &#39;软件工程&#39;, 9, 2022),</span></span><span class="line"><span style="color: #babed8">                                                                                            (4, &#39;202325220904&#39;, &#39;李四&#39;, &#39;软件学院&#39;, &#39;软件工程&#39;, 9, 2023),</span></span><span class="line"><span style="color: #babed8">                                                                                            (5, &#39;202225310902&#39;, &#39;王五&#39;, &#39;数学与信息学院&#39;, &#39;计算机科学与技术&#39;, 9, 2022);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 课程表格</span></span><span class="line"><span style="color: #babed8">create table courses(</span></span><span class="line"><span style="color: #babed8">    course_id int unsigned primary key auto_increment comment &#39;主键课程id&#39;,</span></span><span class="line"><span style="color: #babed8">    name varchar(20) not null comment &#39;课程名字&#39;,</span></span><span class="line"><span style="color: #babed8">    teacher varchar(10) not null comment &#39;教师名字&#39;,</span></span><span class="line"><span style="color: #babed8">    time varchar(20) not null comment &#39;上课时间&#39;,</span></span><span class="line"><span style="color: #babed8">    location varchar(20) not null comment &#39;上课地点&#39;,</span></span><span class="line"><span style="color: #babed8">    day_of_week int not null comment &#39;星期几上课&#39;</span></span><span class="line"><span style="color: #babed8">)comment &#39;课程表格&#39;;</span></span><span class="line"><span style="color: #babed8">-- 课程表测试数据</span></span><span class="line"><span style="color: #babed8">insert into courses(course_id, name, teacher, time, location, day_of_week) values(101, &#39;数据结构&#39;, &#39;张老师&#39;, &#39;周一第1-2节&#39;, &#39;4201&#39;, 1),</span></span><span class="line"><span style="color: #babed8">                                                                                 (102, &#39;数据库&#39;, &#39;陈老师&#39;, &#39;周三第1-2节&#39;, &#39;4311&#39;, 3),</span></span><span class="line"><span style="color: #babed8">                                                                                 (103, &#39;面向对象程序设计&#39;, &#39;王老师&#39;, &#39;周四第3-4节&#39;, &#39;4403&#39;, 4),</span></span><span class="line"><span style="color: #babed8">                                                                                 (104, &#39;C语言程序设计&#39;, &#39;周老师&#39;, &#39;周二第7-8节&#39;, &#39;4402&#39;, 2),</span></span><span class="line"><span style="color: #babed8">                                                                                 (105, &#39;高等数学&#39;, &#39;王老师&#39;, &#39;周四第3-4节&#39;, &#39;3201&#39;, 4),</span></span><span class="line"><span style="color: #babed8">                                                                                 (106, &#39;大学英语&#39;, &#39;冯老师&#39;, &#39;周一第7-8节&#39;, &#39;3311&#39;, 1),</span></span><span class="line"><span style="color: #babed8">                                                                                 (107, &#39;数据结构&#39;, &#39;张老师&#39;, &#39;周三第1-2节&#39;, &#39;4301&#39;, 3),</span></span><span class="line"><span style="color: #babed8">                                                                                 (108, &#39;计算机组成原理&#39;, &#39;黄老师&#39;, &#39;周五第5-6节&#39;, &#39;1502&#39;, 5),</span></span><span class="line"><span style="color: #babed8">                                                                                 (109, &#39;数字电路&#39;, &#39;王老师&#39;, &#39;周二第1-2节&#39;, &#39;3301&#39;, 2),</span></span><span class="line"><span style="color: #babed8">                                                                                 (110, &#39;近代史纲要&#39;, &#39;陈老师&#39;, &#39;周五第5-6节&#39;, &#39;5c501&#39;, 5),</span></span><span class="line"><span style="color: #babed8">                                                                                 (111, &#39;离散结构&#39;, &#39;李老师&#39;, &#39;周四第1-2节&#39;, &#39;5a601&#39;, 4);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 选课表格</span></span><span class="line"><span style="color: #babed8">create table enrollments(</span></span><span class="line"><span style="color: #babed8">    enrollment_id int unsigned primary key auto_increment comment &#39;主键选课id&#39;,</span></span><span class="line"><span style="color: #babed8">    student_id int unsigned not null comment &#39;学生id&#39;,</span></span><span class="line"><span style="color: #babed8">    course_id int unsigned not null comment &#39;课程id&#39;,</span></span><span class="line"><span style="color: #babed8">    FOREIGN KEY (student_id) REFERENCES students(student_id),</span></span><span class="line"><span style="color: #babed8">    FOREIGN KEY (course_id) REFERENCES courses(course_id)</span></span><span class="line"><span style="color: #babed8">)comment &#39;选课表格&#39;;</span></span><span class="line"><span style="color: #babed8">-- 选课表测试数据</span></span><span class="line"><span style="color: #babed8">insert into enrollments(enrollment_id, student_id, course_id) values(1, 1, 101),</span></span><span class="line"><span style="color: #babed8">                                                                    (2, 1, 102),</span></span><span class="line"><span style="color: #babed8">                                                                    (3, 1, 103),</span></span><span class="line"><span style="color: #babed8">                                                                    (4, 1, 106),</span></span><span class="line"><span style="color: #babed8">                                                                    (5, 1, 107),</span></span><span class="line"><span style="color: #babed8">                                                                    (6, 1, 109),</span></span><span class="line"><span style="color: #babed8">                                                                    (7, 2, 101),</span></span><span class="line"><span style="color: #babed8">                                                                    (8, 2, 102),</span></span><span class="line"><span style="color: #babed8">                                                                    (9, 2, 103),</span></span><span class="line"><span style="color: #babed8">                                                                    (10, 2, 106),</span></span><span class="line"><span style="color: #babed8">                                                                    (11, 2, 107),</span></span><span class="line"><span style="color: #babed8">                                                                    (12, 2, 109),</span></span><span class="line"><span style="color: #babed8">                                                                    (13, 3, 103),</span></span><span class="line"><span style="color: #babed8">                                                                    (14, 3, 111),</span></span><span class="line"><span style="color: #babed8">                                                                    (15, 3, 101),</span></span><span class="line"><span style="color: #babed8">                                                                    (16, 3, 107),</span></span><span class="line"><span style="color: #babed8">                                                                    (17, 3, 106),</span></span><span class="line"><span style="color: #babed8">                                                                    (18, 3, 102),</span></span><span class="line"><span style="color: #babed8">                                                                    (19, 4, 104),</span></span><span class="line"><span style="color: #babed8">                                                                    (20, 4, 110),</span></span><span class="line"><span style="color: #babed8">                                                                    (21, 4, 109),</span></span><span class="line"><span style="color: #babed8">                                                                    (22, 4, 108),</span></span><span class="line"><span style="color: #babed8">                                                                    (23, 5, 103),</span></span><span class="line"><span style="color: #babed8">                                                                    (24, 5, 108),</span></span><span class="line"><span style="color: #babed8">                                                                    (25, 5, 109),</span></span><span class="line"><span style="color: #babed8">                                                                    (26, 5, 111),</span></span><span class="line"><span style="color: #babed8">                                                                    (27, 5, 106);</span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8"></span></span><span class="line"><span style="color: #babed8">-- 待办表格</span></span><span class="line"><span style="color: #babed8">create table tasks(</span></span><span class="line"><span style="color: #babed8">    task_id int unsigned primary key auto_increment comment &#39;主键任务id&#39;,</span></span><span class="line"><span style="color: #babed8">    real_student_id varchar(20) not null comment &#39;学号&#39;,</span></span><span class="line"><span style="color: #babed8">    description varchar(100) not null comment &#39;任务描述&#39;,</span></span><span class="line"><span style="color: #babed8">    status tinyint(1) not null comment &#39;任务状态&#39;,</span></span><span class="line"><span style="color: #babed8">    create_time datetime not null comment &#39;创建时间&#39;,</span></span><span class="line"><span style="color: #babed8">    update_time datetime not null comment &#39;更新时间&#39;,</span></span><span class="line"><span style="color: #babed8">    FOREIGN KEY (real_student_id) REFERENCES students(real_student_id)</span></span><span class="line"><span style="color: #babed8">)comment &#39;待办表格&#39;;</span></span><span class="line"><span style="color: #babed8">-- 待办表测试数据</span></span><span class="line"><span style="color: #babed8">insert into tasks(task_id, real_student_id, description, status, create_time, update_time) values (1, &#39;202225220503&#39;, &#39;完成Java实验任务&#39;, 0, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (2, &#39;202225220503&#39;, &#39;完成C语言实验任务&#39;, 1, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (3, &#39;202225220504&#39;, &#39;完成数据结构课程设计&#39;, 0, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (4, &#39;202225220504&#39;, &#39;完成Java实验任务&#39;, 1, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (5, &#39;202225220901&#39;, &#39;完成高等数学周末作业&#39;, 0, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (6, &#39;202325220904&#39;, &#39;完成大学英语周末作业&#39;, 0, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (7, &#39;202225310902&#39;, &#39;完成数据库实验任务&#39;, 1, now(), now()),</span></span><span class="line"><span style="color: #babed8">                                                                                                  (8, &#39;202225310902&#39;, &#39;完成Java实验任务&#39;, 0, now(), now());</span></span></code></pre></div><h2 id="二-接口文档"><a href="#二-接口文档" class="headerlink" title="二.接口文档"></a>二.接口文档</h2><h3 id="1-课程管理"><a href="#1-课程管理" class="headerlink" title="1.课程管理"></a>1.课程管理</h3><h4 id="1-1-课程列表查询"><a href="#1-1-课程列表查询" class="headerlink" title="1.1 课程列表查询"></a>1.1 课程列表查询</h4><h5 id="1-1-1-基本信息"><a href="#1-1-1-基本信息" class="headerlink" title="1.1.1 基本信息"></a>1.1.1 基本信息</h5><p>​| 请求路径：&#x2F;courses&#x2F;{realStudentId}</p><p>​        | 请求方式：GET</p><p>​        | 接口描述：该接口用于根据学号进行学生课表数据查询</p><h5 id="1-1-2-请求参数"><a href="#1-1-2-请求参数" class="headerlink" title="1.1.2 请求参数"></a>1.1.2 请求参数</h5><p>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">/courses/202225220503</span></span></code></pre></div><h5 id="1-1-3响应数据"><a href="#1-1-3响应数据" class="headerlink" title="1.1.3响应数据"></a>1.1.3响应数据</h5><p>参数格式： application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr><tr><td>|- courseId</td><td>number</td><td>非必须</td><td>课程id</td></tr><tr><td>|- name</td><td>string</td><td>非必须</td><td>课程名称</td></tr><tr><td>|- teacher</td><td>string</td><td>非必须</td><td>老师名称</td></tr><tr><td>|- time</td><td>string</td><td>非必须</td><td>上课时间</td></tr><tr><td>|- location</td><td>string</td><td>非必须</td><td>上课地点</td></tr><tr><td>|- dayOfWeek</td><td>number</td><td>非必须</td><td>上课时间是星期几</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: [</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 101,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;数据结构&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;张老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周一第1-2节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;4201&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 1</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 102,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;数据库&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;陈老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周三第1-2节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;4311&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 3</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 103,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;面向对象程序设计&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;王老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周四第3-4节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;4403&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 4</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 106,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;大学英语&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;冯老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周一第7-8节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;3311&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 1</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 107,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;数据结构&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;张老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周三第1-2节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;4301&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 3</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;courseId&quot;: 109,</span></span><span class="line"><span style="color: #babed8">            &quot;name&quot;: &quot;数字电路&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;teacher&quot;: &quot;王老师&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;time&quot;: &quot;周二第1-2节&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;location&quot;: &quot;3301&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;dayOfWeek&quot;: 2</span></span><span class="line"><span style="color: #babed8">        &#125;</span></span><span class="line"><span style="color: #babed8">    ]</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h3 id="2-待办管理"><a href="#2-待办管理" class="headerlink" title="2.待办管理"></a>2.待办管理</h3><h4 id="1-1查询待办"><a href="#1-1查询待办" class="headerlink" title="1.1查询待办"></a>1.1查询待办</h4><h5 id="1-1-1基本信息"><a href="#1-1-1基本信息" class="headerlink" title="1.1.1基本信息"></a>1.1.1基本信息</h5><p>​        | 请求路径：&#x2F;tasks&#x2F;{realStudentId}</p><p>​        | 请求方式：GET</p><p>​        | 接口描述：该接口用于根据学号进行待办事项数据查询</p><h5 id="1-1-2请求参数"><a href="#1-1-2请求参数" class="headerlink" title="1.1.2请求参数"></a>1.1.2请求参数</h5><p>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">/tasks/202225220503</span></span></code></pre></div><h5 id="1-1-3响应数据-1"><a href="#1-1-3响应数据-1" class="headerlink" title="1.1.3响应数据"></a>1.1.3响应数据</h5><p>参数格式： application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr><tr><td>|- taskId</td><td>number</td><td>非必须</td><td>待办id</td></tr><tr><td>|- description</td><td>string</td><td>非必须</td><td>待办内容</td></tr><tr><td>|- status</td><td>number</td><td>非必须</td><td>完成状态，0代表未完成，1代表完成</td></tr><tr><td>|- createTime</td><td>string</td><td>非必须</td><td>创建时间</td></tr><tr><td>|- updateTime</td><td>string</td><td>非必须</td><td>更新时间</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: [</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;taskId&quot;: 1,</span></span><span class="line"><span style="color: #babed8">            &quot;description&quot;: &quot;完成Java实验任务&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;status&quot;: 0,</span></span><span class="line"><span style="color: #babed8">            &quot;createTime&quot;: &quot;2023-11-05T21:36:43&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;updateTime&quot;: &quot;2023-11-05T21:36:43&quot;</span></span><span class="line"><span style="color: #babed8">        &#125;,</span></span><span class="line"><span style="color: #babed8">        &#123;</span></span><span class="line"><span style="color: #babed8">            &quot;taskId&quot;: 2,</span></span><span class="line"><span style="color: #babed8">            &quot;description&quot;: &quot;完成C语言实验任务&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;status&quot;: 1,</span></span><span class="line"><span style="color: #babed8">            &quot;createTime&quot;: &quot;2023-11-05T21:36:43&quot;,</span></span><span class="line"><span style="color: #babed8">            &quot;updateTime&quot;: &quot;2023-11-05T21:36:43&quot;</span></span><span class="line"><span style="color: #babed8">        &#125;</span></span><span class="line"><span style="color: #babed8">    ]</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h4 id="1-2-删除待办"><a href="#1-2-删除待办" class="headerlink" title="1.2 删除待办"></a>1.2 删除待办</h4><h5 id="1-2-1-基本信息"><a href="#1-2-1-基本信息" class="headerlink" title="1.2.1 基本信息"></a>1.2.1 基本信息</h5><p>​| 请求路径： &#x2F;tasks&#x2F;{taskId}</p><p>​        | 请求方式：DELETE</p><p>​        | 接口描述：该接口用于根据待办事项ID删除待办事项数据</p><h5 id="1-2-2-请求参数"><a href="#1-2-2-请求参数" class="headerlink" title="1.2.2 请求参数"></a>1.2.2 请求参数</h5><p>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>taskId</td><td>number</td><td>必须</td><td>待办事项ID</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">/tasks/9</span></span></code></pre></div><h5 id="1-2-3-响应数据"><a href="#1-2-3-响应数据" class="headerlink" title="1.2.3 响应数据"></a>1.2.3 响应数据</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: null</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h4 id="1-3-添加待办"><a href="#1-3-添加待办" class="headerlink" title="1.3 添加待办"></a>1.3 添加待办</h4><h5 id="1-3-1-基本信息"><a href="#1-3-1-基本信息" class="headerlink" title="1.3.1 基本信息"></a>1.3.1 基本信息</h5><p>​| 请求路径： &#x2F;tasks</p><p>​        | 请求方式：POST</p><p>​        | 接口描述：该接口用于添加待办事项数据</p><h5 id="1-3-2-请求参数"><a href="#1-3-2-请求参数" class="headerlink" title="1.3.2 请求参数"></a>1.3.2 请求参数</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号，必须是student表里有的学号</td></tr><tr><td>description</td><td>string</td><td>必须</td><td>待办事项</td></tr><tr><td>status</td><td>number</td><td>必须</td><td>完成状态，0代表未完成，1代表完成</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">   &quot;realStudentId&quot;: &quot;202225220503&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;description&quot;: &quot;完成Java实验任务&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;status&quot;: 0</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h5 id="1-3-3-响应数据"><a href="#1-3-3-响应数据" class="headerlink" title="1.3.3 响应数据"></a>1.3.3 响应数据</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: null</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h4 id="1-4-修改待办"><a href="#1-4-修改待办" class="headerlink" title="1.4 修改待办"></a>1.4 修改待办</h4><h5 id="1-4-1-基本信息"><a href="#1-4-1-基本信息" class="headerlink" title="1.4.1 基本信息"></a>1.4.1 基本信息</h5><p>​| 请求路径： &#x2F;tasks&#x2F;{taskId}</p><p>​        | 请求方式：PUT</p><p>​        | 接口描述：该接口用于修改待办事项数据</p><h5 id="1-4-2-请求参数"><a href="#1-4-2-请求参数" class="headerlink" title="1.4.2 请求参数"></a>1.4.2 请求参数</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号，必须是student表里有的学号</td></tr><tr><td>description</td><td>string</td><td>必须</td><td>待办事项</td></tr><tr><td>status</td><td>number</td><td>必须</td><td>完成状态，0代表未完成，1代表完成</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">   &quot;realStudentId&quot;: &quot;202225220503&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;description&quot;: &quot;完成Java实验任务&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;status&quot;: 0</span></span><span class="line"><span style="color: #babed8">&#125;,</span></span></code></pre></div><h5 id="1-4-3-响应数据"><a href="#1-4-3-响应数据" class="headerlink" title="1.4.3 响应数据"></a>1.4.3 响应数据</h5><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: null</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h3 id="3-学生管理"><a href="#3-学生管理" class="headerlink" title="3.学生管理"></a>3.学生管理</h3><h4 id="3-1-添加学生"><a href="#3-1-添加学生" class="headerlink" title="3.1 添加学生"></a>3.1 添加学生</h4><h6 id="3-1-1-基本信息"><a href="#3-1-1-基本信息" class="headerlink" title="3.1.1 基本信息"></a>3.1.1 基本信息</h6><p>​| 请求路径： &#x2F;students</p><p>​        | 请求方式：POST</p><p>​        | 接口描述：该接口用于添加待办事项数据</p><h6 id="3-1-2-请求参数"><a href="#3-1-2-请求参数" class="headerlink" title="3.1.2 请求参数"></a>3.1.2 请求参数</h6><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>realStudentId</td><td>string</td><td>必须</td><td>学号</td></tr><tr><td>name</td><td>string</td><td>必须</td><td>学生姓名</td></tr><tr><td>college</td><td>string</td><td>必须</td><td>学院</td></tr><tr><td>major</td><td>string</td><td>必须</td><td>专业</td></tr><tr><td>classNum</td><td>number</td><td>必须</td><td>班级</td></tr><tr><td>grade</td><td>number</td><td>必须</td><td>年级</td></tr></tbody></table><p>请求参数样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">   &quot;realStudentId&quot;: &quot;202225220505&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;name&quot;: &quot;何泳泳&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;college&quot;: &quot;软件学院&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;major&quot;: &quot;软件工程&quot;,</span></span><span class="line"><span style="color: #babed8">   &quot;classNum&quot;: 5,</span></span><span class="line"><span style="color: #babed8">   &quot;grade&quot;: 2022</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div><h6 id="3-1-3响应数据"><a href="#3-1-3响应数据" class="headerlink" title="3.1.3响应数据"></a>3.1.3响应数据</h6><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1代表成功，0代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><div class="language-txt"><button title="Copy code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #babed8">&#123;</span></span><span class="line"><span style="color: #babed8">    &quot;code&quot;: 1,</span></span><span class="line"><span style="color: #babed8">    &quot;msg&quot;: &quot;success&quot;,</span></span><span class="line"><span style="color: #babed8">    &quot;data&quot;: null</span></span><span class="line"><span style="color: #babed8">&#125;</span></span></code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于uni-app框架开发的微信小程序接口文档&quot;&gt;&lt;a href=&quot;#基于uni-app框架开发的微信小程序接口文档&quot; class=&quot;headerlink&quot; title=&quot;基于uni-app框架开发的微信小程序接口文档&quot;&gt;&lt;/a&gt;基于uni-app框架开发的微信小</summary>
      
    
    
    
    <category term="Program" scheme="http://example.com/categories/Program/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>6神，启动！</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2023-09-09T16:00:00.000Z</published>
    <updated>2024-01-25T09:56:44.846Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在测试博客图片上传功能，为了解决博客上传图片失败问题努力了几个小时后终于发现了问题所在，在hexo中的 hexo-asset-image 图片模块和 hexo-abbrlink 不兼容导致。</p><p>解决方法：在node_modules&#x2F;hexo-asset-image&#x2F;index.js中将代码中的”var endPos &#x3D; link.length - 1”改为”-5”即可解决。</p><hr><h2 id="6神，启动！"><a href="#6神，启动！" class="headerlink" title="6神，启动！"></a>6神，启动！</h2><p><img src="/posts/0/IMG_20231003_103115.jpg" alt="IMG_20231003_103115"></p><p><img src="/posts/0/IMG_20231005_001738.jpg" alt="IMG_20231005_001738"></p><p><img src="/posts/0/IMG_20231110_200055.jpg" alt="IMG_20231110_200055"></p><p><img src="/posts/0/IMG_20231211_223334.jpg" alt="IMG_20231211_223334"></p><p><img src="/posts/0/img-1696674810542b938000ebdd92c29bc9e4cedc912280a4d52fec133f96ba929d38287bbb777cd.jpg" alt="img-1696674810542b938000ebdd92c29bc9e4cedc912280a4d52fec133f96ba929d38287bbb777cd"></p><p><img src="/posts/0/img-1696674816616e87dd3b0b5538d91c1cf4afb60d539ac656c741f0ef77f0c68fa8c9ae3293041.jpg" alt="img-1696674816616e87dd3b0b5538d91c1cf4afb60d539ac656c741f0ef77f0c68fa8c9ae3293041"></p><p><img src="/posts/0/img-1699261717243a2e3ed9ecf2e4f1423b4c77d6f0eefcc366984d4e928975fa61708a114115039.jpg" alt="img-1699261717243a2e3ed9ecf2e4f1423b4c77d6f0eefcc366984d4e928975fa61708a114115039"></p><p><img src="/posts/0/img-1698500159523b964171cff67018b21a47ae2ee01f51b987e325471de82188a390de7788f9b07.jpg" alt="img-1698500159523b964171cff67018b21a47ae2ee01f51b987e325471de82188a390de7788f9b07"></p><p><img src="/posts/0/SNH48_130d3086-9069-47f5-8ef2-c163935f7fc8.png" alt="SNH48_130d3086-9069-47f5-8ef2-c163935f7fc8"></p><p><img src="/posts/0/SNH48_97455466-f732-43a4-9be0-8698cd0eb906.png" alt="SNH48_97455466-f732-43a4-9be0-8698cd0eb906"></p><p><img src="/posts/0/SNH48_ac919d55-0076-4063-a9a8-dc1cc425d855.png" alt="SNH48_ac919d55-0076-4063-a9a8-dc1cc425d855"></p><p><img src="/posts/0/SNH48_59c354e4-a671-4b33-bacf-8cad13ee5e46.png" alt="SNH48_59c354e4-a671-4b33-bacf-8cad13ee5e46"></p><p><img src="/posts/0/SNH48_45b87273-fd90-42f3-8cf5-8336799ca355.png" alt="SNH48_45b87273-fd90-42f3-8cf5-8336799ca355"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文旨在测试博客图片上传功能，为了解决博客上传图片失败问题努力了几个小时后终于发现了问题所在，在hexo中的 hexo-asset-image 图片模块和 hexo-abbrlink 不兼容导致。&lt;/p&gt;
&lt;p&gt;解决方法：在node_modules&amp;#x2F;hexo-as</summary>
      
    
    
    
    <category term="Blog" scheme="http://example.com/categories/Blog/"/>
    
    
    <category term="黄怡慈" scheme="http://example.com/tags/%E9%BB%84%E6%80%A1%E6%85%88/"/>
    
  </entry>
  
  <entry>
    <title>SCAU软件工程经济学知识点</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2023-06-28T18:28:12.000Z</published>
    <updated>2024-02-04T07:12:38.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SCAU软件工程经济学知识点"><a href="#SCAU软件工程经济学知识点" class="headerlink" title="SCAU软件工程经济学知识点"></a>SCAU软件工程经济学知识点</h2><p>*<strong>有哪些分类，有哪些方法，有哪些特点*</strong></p><p><strong>第一章</strong></p><p>1.<strong>软件的定义</strong>：它是包括程序、数据及其相关文档的完整集合。</p><p>2.按软件功能分类：系统、支撑、应用。</p><p>3.按规模分类：微型、小型、中型、大型、超大型、极大型。</p><p>4.按标准化程度分类：标准化、半定制、软件服务（定制软件）。</p><p>5.按硬件或软件关联分类：嵌入型、组织型、半独立型。</p><p>6.按工作方式：实时处理、多用户分时处理、交互式、批处理。</p><p>7.软件特点：信息产品、从头开始生产、知识结晶、手工方式生产、无需库存成本、壁垒低、对用户有粘性。</p><p>8.<strong>软件产业</strong>是指软件产品和软件服务相关的一切经济活动和关系的总称。</p><p>9.软件产业特点：高技术高附加值高效益、高度关联性、国际化、专业化分工、规模化经济效益。</p><p>10.发展模式：“全面领先”技术与服务领导型——美国，“整机带动”嵌入式系统开发型——日韩，“软件集散”生产本地化型——爱尔兰，“外包服务”国际加工服务型——印度。</p><p>11.产业不足：关键核心缺乏、自主创新能力弱、企业规模小、产权保护力度弱。</p><p>12.软件企业：分为软件产品企业和软件服务企业。</p><p>13.软件工程生产过程方法论：技术学、经济学、管理学。 </p><p>14.软件生产周期：从概念形成开始，经过开发、使用和维护，直到最后退役的全过程。</p><p>15.<strong>计算题：功能点计算方法</strong></p><p><img src="/posts/0/clip_image002.gif" alt="截图.png"></p><p>W为加权系数，d为基本信息量。</p><p>wd为题目表格中数据相乘后相加。</p><p>Fi环境复杂度参数（题目给出）</p><p>16.衡量产品质量高低的指标：技术性能指标（处理能力）和可靠性指标（持久能力）。</p><p>17.软件的可靠性是关系到系统成败的重要因素。</p><p>18.<strong>软件工程经济学四个部分：</strong></p><p><img src="/posts/0/clip_image004.gif" alt="截图.png"></p><p><strong>第二章</strong></p><p>1.沉没成本：已经发生的不可收回的支出。</p><p>2.任何对软件项目的工程经济分析与研究都必须从实体维、时间维和要素维等三个维度展开。</p><p>3.经济活动分析与评价特征：系统分析的目的是为了提高工程经济活动的经济效果，经济效果大多与“未来”有关，系统分析强调的是在技术可行性基础上的经济分析，系统评价是通过“比较”来完成的，统评价应是各利益主体目标的相互协调与均衡。</p><p>4.投资：实现目标而进行资金投放或运行的经济活动。</p><p>5.投资活动包括：生产性投资（保证生产运行）和非生产性投资（证券投资）。</p><p>6.建设项目投资包括：固定资产投资（设备）、流动资金投资（工资原材料）、无形资产投资（使用权）。</p><p>7.筹资和资金运用、项目可行性、市场调查。</p><p>8.项目的可行性分析：必要性、可实现性、效果性与风险性。</p><p>9.总成本费用：生产成本、管理费用、财务费用和销售费用。</p><p>10.收入：销售收入、劳务收入、使用费收入、股利收入及利息收入。</p><p>11.税金：增值税（增值额）、营业税、企业所得税（生产经营）、城乡维护建设税（维护公共设施）、教育费附加。</p><p>12.所得税：企业所得税与个人所得税。</p><p>13.利润：</p><p><img src="/posts/0/clip_image006.gif" alt="截图.png"></p><p>14.资金的时间价值：绝对金额随时间转移后其增加或减少的金额部分。</p><p>15.<strong>计算题：年利率（本利和）的计算</strong>。</p><p><img src="/posts/0/clip_image008.gif" alt="截图.png"></p><p>16.<strong>现金流量图</strong>：箭头向上者表示现金流入(或正现金流)，箭头向下者表示现金流出(或负现金流)。<strong>注意现金流量图对象！</strong></p><p>17.<strong>计算题：初值和本利的计算</strong>。</p><p><img src="/posts/0/clip_image010.gif" alt="截图.png"></p><p>例题：</p><p><img src="/posts/0/clip_image012.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image014.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image016.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image018.gif" alt="截图.png"></p><p>18.***<strong>计算题：等额系列现金流</strong>。</p><p><img src="/posts/0/clip_image020.jpg" alt="IMG_20230629_201331.jpg"></p><p><img src="/posts/0/clip_image022.gif" alt="截图.png"></p><p>A为每年等额偿还&#x2F;存储的金额。Sn为最后一年金额。P0为首年金额。</p><p>A&#x3D;P0 × CRF（偿还）</p><p>A&#x3D;Sn × SFF （存储）</p><p>例题：</p><p><img src="/posts/0/clip_image024.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image026.gif" alt="截图.png"></p><p>19.招标与投标的特征：组织性（招标特有）、公开性、一次性决定、公平性。</p><p>20.招标类型：按公开程度和参加人数的限制条件分类，可划分为竞争性招标（公开招标）和有限招标（邀请招标），按合同的条件分类，可分为自动条件招标、随机条件招标、谈判招标。</p><p> <strong>第三章</strong></p><p>1.成本的经济内容：劳动资料方面的消耗、劳动对象方面的消耗、人工方面的消费的消耗。</p><p>2.成本的特点：消耗性、补偿性、目的性、综合性、代偿性。</p><p>3.成本的分类：按企业主要经营活动——研究与开发成本、采购成本、生产成本、经营成本、管理费用。按成本与产量的对应关系——变动成本与固定成本。按成本的确定时间——预测成本、定额成本、计划成本、实际成本。</p><p>4.软件成本构成：硬件购置费用、网络通信费用、软件购置费用、基建费用、人力资源费用、硬件生产测试费、软件开发&#x2F;测试费用、水、电、运输费用、消耗材料及废品损失费用、培训费用、系统营销费用、管理费用、其他费用。</p><p>5.减少成本测算误差的策略。</p><p>6.<strong>计算题：功能分解法（不考大题）</strong></p><p>最小可能值ai、最大可能值bi、最可能值mi、平均规模Ej</p><p><img src="/posts/0/clip_image028.gif" alt="截图.png"></p><p>成本费用Coi、劳动生产率Eoi、各子系统模块成本Ci、各子系统工作量Mi</p><p>软件总成本Cs、总工作量Es（Ms）</p><p><img src="/posts/0/clip_image030.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image032.jpg" alt="IMG_20230629_185330.jpg"></p><p>例题：习题三第3题</p><p>7.<strong>计算题：影响因子法与COCOMO模型</strong></p><p>U为综合影响要素</p><p><img src="/posts/0/clip_image034.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image036.gif" alt="截图.png"></p><p>Cs软件开发成本、a工时费用率、Ms修正工作量、Mo基本工作量</p><p>L软件开发规模、Td工期、rkhd形式参数（根据类型判断）。</p><p>组织性：程序规模较小；嵌入型：硬件软件限制条件下运行；半独立型：规模较大。</p><p>例题：</p><p><img src="/posts/0/clip_image038.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image040.gif" alt="截图.png"></p><p>8.<strong>计算题：类比法估计目标软件成本</strong></p><p>改变调整系数AAF、原软件开发规模La、新软件开发规模Lb</p><p>DM设计修改百分比、CM代码修改百分比、IM集成修改百分比</p><p><img src="/posts/0/clip_image042.gif" alt="截图.png"></p><p>W1 &#x3D; 0.4、 W2 &#x3D; W3 &#x3D; 0.3</p><p><img src="/posts/0/clip_image044.gif" alt="截图.png"></p><p>9.ABC分类法</p><p><img src="/posts/0/clip_image046.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image048.gif" alt="截图.png"></p><p>成本控制的重点研究对象：ABC分类（从大到小排序）</p><p>10.<strong>计算题：挣值管理法</strong></p><p>四个关键指标：总预算成本TBC、累计预算成本CBC、累计实现成本CAC、累计实现价值CEV。</p><p>四个绩效评价参数：成本偏差CV：CV&#x3D;CEV-CAC、成本绩效CPI：CPI&#x3D;CEV&#x2F;CAC、进度偏差SV：SV&#x3D;CEV-CBC、进度绩效SPI：SPI&#x3D;CEV&#x2F;CBC。</p><p>完工预测成本FCAC：FCAC&#x3D;TBC&#x2F;CPI、FCAC&#x3D;CAC+(TBC-CEV)、FCAC&#x3D;CAC+重估剩余工程预算。</p><p>11.软件产品的定价和营销是软件生存周期中的两项重要工程经济活动。</p><p>12.产品价格是由其价值所决定的。</p><p>13.软件价格的影响因素：用户需求、产品成本、市场竞争和垄断及环境因素。</p><p>14.软件的定价目标：利润导向、收益导向、销售导向、竞争导向、品牌导向、维持生存导向。</p><p>15.<strong>软件的定价方法</strong>：成本导向定价法、需求导向定价法、竞争导向定价法。</p><p>16.软件的定价策略：撇脂和渗透定价策略，捆绑定价策略，免费使用策略，歧视定价策略。</p><p>17.软件的市场营销过程一般包括： ① 目标市场定位 ② 确定产品策略③ 确定定价策略④ 确定(销售)渠道策略 ⑤ 确定促销策略⑥ 确定服务策略。</p><p><strong>第四章</strong></p><p>1.项目评价：净现值法、内部收益率法和投资回收期法。</p><p>2.<strong>计算题：净现值法NPV</strong></p><p><img src="/posts/0/clip_image050.gif" alt="截图.png"></p><p>Bt寿命期内收益、Ct支出（成本）、Dt残值、Kt投资额、i基准贴现率、N使用年限</p><p>NPV&gt;0 投资可行 NPV&lt;&#x3D;0投资不可行</p><p>3.<strong>计算题：内部收益法（不要求计算）了解原理</strong>：求NPV(IRR)（对分法）。</p><p>4.<strong>计算题：投资回收期法</strong></p><p><img src="/posts/0/clip_image052.gif" alt="截图.png"></p><p>5.<strong>计算题：净现值法进行多方案比较</strong></p><p><img src="/posts/0/clip_image054.gif" alt="截图.png"></p><p>6.<strong>计算题：净年值法进行多方案比较</strong></p><p>CRF资金回收系数</p><p><img src="/posts/0/clip_image056.gif" alt="截图.png"></p><p>7.<strong>计算题：研究期法（是否承认未使用价值）</strong></p><p><img src="/posts/0/clip_image058.jpg" alt="IMG_20230629_201257.jpg"></p><p>8.计算题：费用现值法</p><p><img src="/posts/0/clip_image060.jpg" alt="IMG_20230629_201309.jpg"></p><p>9.计算题：年费用现值法</p><p><img src="/posts/0/clip_image062.jpg" alt="IMG_20230629_201318.jpg"></p><p>10.效益的分类：成本与支出费用的节省、社会财富的增加、服务水平的提高、管理水平的提高。</p><p>11.对软件项目实际效益与预测效益评价常采用系统运行前后对比法和参数估计法。</p><p>12.软件的社会效益评价：系统评价以定性分析为主、社会评价无通用方法、对社会的贡献以间接效益、无形效果和外部效果为主。</p><p>13.软件项目的风险：</p><p><img src="/posts/0/clip_image064.gif" alt="截图.png"></p><p><strong>第五章（略）</strong></p><p><strong>第六章</strong></p><p>1.软件的开发的产品目标：质量、成本、进度和团队。</p><p>2.<strong>计划网络图与关键路径！！！</strong></p><p>特征：有向性和不可逆转性、连通性、封闭性。</p><p>当计划网络出现多个起始结点或多个终止结点时，应引入虚活动。</p><p><img src="/posts/0/clip_image066.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image068.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image070.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image072.gif" alt="截图.png"></p><p>3.<strong>软件开发团队的组织建设</strong></p><p><img src="/posts/0/clip_image074.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image076.gif" alt="截图.png"></p><p><img src="/posts/0/clip_image078.gif" alt="截图.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SCAU软件工程经济学知识点&quot;&gt;&lt;a href=&quot;#SCAU软件工程经济学知识点&quot; class=&quot;headerlink&quot; title=&quot;SCAU软件工程经济学知识点&quot;&gt;&lt;/a&gt;SCAU软件工程经济学知识点&lt;/h2&gt;&lt;p&gt;*&lt;strong&gt;有哪些分类，有哪些方法，有</summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>响应状态码</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2023-03-14T05:28:12.000Z</published>
    <updated>2024-02-04T07:12:02.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、状态码大类"><a href="#一、状态码大类" class="headerlink" title="一、状态码大类"></a>一、状态码大类</h2><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><h2 id="二、常见的响应状态码"><a href="#二、常见的响应状态码" class="headerlink" title="二、常见的响应状态码"></a>二、常见的响应状态码</h2><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;200&#x3D;&#x3D;</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>&#x3D;&#x3D;404&#x3D;&#x3D;</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td>指示用户在给定时间内发送了<strong>太多请求</strong>（“限速”），配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code> Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>&#x3D;&#x3D;500&#x3D;&#x3D;</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr></tbody></table><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、状态码大类&quot;&gt;&lt;a href=&quot;#一、状态码大类&quot; class=&quot;headerlink&quot; title=&quot;一、状态码大类&quot;&gt;&lt;/a&gt;一、状态码大类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;状态码分类&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;</summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="网络" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
